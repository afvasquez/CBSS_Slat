
Bastian_freeRTOS-TRACE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006cb8  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000448  20000000  00006cb8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002ab4  20000448  00007100  00010448  2**2
                  ALLOC
  3 .stack        00002004  20002efc  00009bb4  00010448  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010448  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010470  2**0
                  CONTENTS, READONLY
  6 .debug_info   00023df6  00000000  00000000  000104cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000038d7  00000000  00000000  000342c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000ab7c  00000000  00000000  00037b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000009a8  00000000  00000000  00042714  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a60  00000000  00000000  000430bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006b5c  00000000  00000000  00043b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000079f4  00000000  00000000  0004a678  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001bbc  00000000  00000000  0005206c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20004f00 	.word	0x20004f00
       4:	000048b9 	.word	0x000048b9
       8:	000048b5 	.word	0x000048b5
       c:	000048b5 	.word	0x000048b5
	...
      2c:	00002b99 	.word	0x00002b99
	...
      38:	00002c01 	.word	0x00002c01
      3c:	00002c45 	.word	0x00002c45
      40:	000048b5 	.word	0x000048b5
      44:	000048b5 	.word	0x000048b5
      48:	000048b5 	.word	0x000048b5
      4c:	000048b5 	.word	0x000048b5
      50:	000048b5 	.word	0x000048b5
      54:	000048b5 	.word	0x000048b5
      58:	000048b5 	.word	0x000048b5
      5c:	000048b5 	.word	0x000048b5
      60:	000048b5 	.word	0x000048b5
      64:	00000b8d 	.word	0x00000b8d
      68:	00000b9d 	.word	0x00000b9d
      6c:	00000bad 	.word	0x00000bad
      70:	00000bbd 	.word	0x00000bbd
	...
      7c:	000048b5 	.word	0x000048b5
      80:	000048b5 	.word	0x000048b5
      84:	000048b5 	.word	0x000048b5
      88:	000048b5 	.word	0x000048b5
      8c:	000048b5 	.word	0x000048b5
      90:	000048b5 	.word	0x000048b5
	...
      9c:	000048b5 	.word	0x000048b5
      a0:	000048b5 	.word	0x000048b5
      a4:	000048b5 	.word	0x000048b5
      a8:	000048b5 	.word	0x000048b5
      ac:	000048b5 	.word	0x000048b5

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000448 	.word	0x20000448
      d0:	00000000 	.word	0x00000000
      d4:	00006cb8 	.word	0x00006cb8

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	00006cb8 	.word	0x00006cb8
     104:	2000044c 	.word	0x2000044c
     108:	00006cb8 	.word	0x00006cb8
     10c:	00000000 	.word	0x00000000

00000110 <timer_irda_sync_callback>:
	system_interrupt_disable_global();
}

void timer_irda_sync_callback(TimerHandle_t pxTimer) 
{
	configASSERT( pxTimer );
     110:	2800      	cmp	r0, #0
     112:	d101      	bne.n	118 <timer_irda_sync_callback+0x8>
     114:	b672      	cpsid	i
     116:	e7fe      	b.n	116 <timer_irda_sync_callback+0x6>
	
	
     118:	4770      	bx	lr
     11a:	46c0      	nop			; (mov r8, r8)

0000011c <irda_communication_task>:

//#define IRDA_BEACON_PING	(( uint8_t ) 0x01 )		// This is the 
uint8_t irda_comm_state;
uint8_t irda_tx_array[6] = { 0 };
uint8_t irda_rx_array[6] = { 0 };
void irda_communication_task(void) {
     11c:	b5f0      	push	{r4, r5, r6, r7, lr}
     11e:	465f      	mov	r7, fp
     120:	4656      	mov	r6, sl
     122:	464d      	mov	r5, r9
     124:	4644      	mov	r4, r8
     126:	b4f0      	push	{r4, r5, r6, r7}
     128:	b083      	sub	sp, #12
	
	// Start this task by pinging out
	irda_comm_state = IRDA_SLAT_PING;
     12a:	2201      	movs	r2, #1
     12c:	4b3d      	ldr	r3, [pc, #244]	; (224 <irda_communication_task+0x108>)
     12e:	701a      	strb	r2, [r3, #0]
	
	while (1) {
		//port_pin_toggle_output_level(LED_BUSY);
		//vTracePrintF(event_channel, "IRDA: %d", irda_comm_state);
		switch( irda_comm_state )
     130:	1c1e      	adds	r6, r3, #0
				usart_enable_transceiver( &irda_master, USART_TRANSCEIVER_RX );	// Enable Receiving Transceiver
				usart_read_buffer_job( &irda_master, irda_rx_array, 3 );	// Try to get the 3-Byte ping
			break;
			case IRDA_SLAT_FIRST:  // Send the response back and reset
				// Send out the ping and wait
				irda_tx_array[0] = 0xBB;
     132:	4d3d      	ldr	r5, [pc, #244]	; (228 <irda_communication_task+0x10c>)
				irda_tx_array[4] = 0xBB;
				
				//vTracePrintF(event_channel, "Send Resp.");
				
				// Send this data now
				xTimerReset( timer_IrDA_Ping, 0 );
     134:	4a3d      	ldr	r2, [pc, #244]	; (22c <irda_communication_task+0x110>)
     136:	4691      	mov	r9, r2
				usart_write_buffer_job(&irda_master, irda_tx_array, 5);
     138:	2308      	movs	r3, #8
     13a:	195b      	adds	r3, r3, r5
     13c:	4698      	mov	r8, r3
			break;
			case IRDA_SLAT_STAGE_7A:
				// Post r010716-1818:: This stage sends the next message 0xDD
				// Send out the ping and wait
				irda_tx_array[0] = 0xDD;
     13e:	1c2c      	adds	r4, r5, #0
				
				//vTracePrintF(event_channel, "Send Resp.");
				
				// Send this data now
				xTimerReset( timer_IrDA_Ping, 0 );
				usart_write_buffer_job(&irda_master, irda_tx_array, 5);
     140:	469b      	mov	fp, r3
	irda_comm_state = IRDA_SLAT_PING;
	
	while (1) {
		//port_pin_toggle_output_level(LED_BUSY);
		//vTracePrintF(event_channel, "IRDA: %d", irda_comm_state);
		switch( irda_comm_state )
     142:	7833      	ldrb	r3, [r6, #0]
     144:	2b02      	cmp	r3, #2
     146:	d030      	beq.n	1aa <irda_communication_task+0x8e>
     148:	2b05      	cmp	r3, #5
     14a:	d045      	beq.n	1d8 <irda_communication_task+0xbc>
     14c:	2b01      	cmp	r3, #1
     14e:	d159      	bne.n	204 <irda_communication_task+0xe8>
		{
			case IRDA_SLAT_PING:
				irda_timed_out = pdFALSE;
     150:	2300      	movs	r3, #0
     152:	469a      	mov	sl, r3
     154:	4b36      	ldr	r3, [pc, #216]	; (230 <irda_communication_task+0x114>)
     156:	4652      	mov	r2, sl
     158:	601a      	str	r2, [r3, #0]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     15a:	4b36      	ldr	r3, [pc, #216]	; (234 <irda_communication_task+0x118>)
     15c:	2280      	movs	r2, #128	; 0x80
     15e:	0492      	lsls	r2, r2, #18
     160:	615a      	str	r2, [r3, #20]
     162:	2280      	movs	r2, #128	; 0x80
     164:	0512      	lsls	r2, r2, #20
     166:	615a      	str	r2, [r3, #20]
				port_pin_set_output_level(LED_ERROR, pdFALSE);
				port_pin_set_output_level(LED_BUSY, pdFALSE);
				
				// Start the necessary timers 
				//vTracePrintF(event_channel, "Rx Request.");
				xTimerReset( timer_IrDA_Ping, 0 );
     168:	4b30      	ldr	r3, [pc, #192]	; (22c <irda_communication_task+0x110>)
     16a:	681f      	ldr	r7, [r3, #0]
     16c:	4b32      	ldr	r3, [pc, #200]	; (238 <irda_communication_task+0x11c>)
     16e:	4798      	blx	r3
     170:	1c02      	adds	r2, r0, #0
     172:	4653      	mov	r3, sl
     174:	9300      	str	r3, [sp, #0]
     176:	1c38      	adds	r0, r7, #0
     178:	2102      	movs	r1, #2
     17a:	4f30      	ldr	r7, [pc, #192]	; (23c <irda_communication_task+0x120>)
     17c:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     17e:	4b30      	ldr	r3, [pc, #192]	; (240 <irda_communication_task+0x124>)
     180:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     182:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     184:	2a00      	cmp	r2, #0
     186:	d1fc      	bne.n	182 <irda_communication_task+0x66>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
     188:	6859      	ldr	r1, [r3, #4]
     18a:	2280      	movs	r2, #128	; 0x80
     18c:	0292      	lsls	r2, r2, #10
     18e:	430a      	orrs	r2, r1
     190:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
     192:	2101      	movs	r1, #1
     194:	4a2a      	ldr	r2, [pc, #168]	; (240 <irda_communication_task+0x124>)
     196:	7191      	strb	r1, [r2, #6]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     198:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     19a:	2a00      	cmp	r2, #0
     19c:	d1fc      	bne.n	198 <irda_communication_task+0x7c>
				//xTimerReset( timer_IrDA_Sync, 0 );	// Reset, immediately, the syncing timers
				
				usart_enable_transceiver( &irda_master, USART_TRANSCEIVER_RX );	// Enable Receiving Transceiver
				usart_read_buffer_job( &irda_master, irda_rx_array, 3 );	// Try to get the 3-Byte ping
     19e:	4828      	ldr	r0, [pc, #160]	; (240 <irda_communication_task+0x124>)
     1a0:	4921      	ldr	r1, [pc, #132]	; (228 <irda_communication_task+0x10c>)
     1a2:	2203      	movs	r2, #3
     1a4:	4b27      	ldr	r3, [pc, #156]	; (244 <irda_communication_task+0x128>)
     1a6:	4798      	blx	r3
			break;
     1a8:	e02c      	b.n	204 <irda_communication_task+0xe8>
			case IRDA_SLAT_FIRST:  // Send the response back and reset
				// Send out the ping and wait
				irda_tx_array[0] = 0xBB;
     1aa:	23bb      	movs	r3, #187	; 0xbb
     1ac:	722b      	strb	r3, [r5, #8]
				irda_tx_array[1] = 0xBB;
     1ae:	726b      	strb	r3, [r5, #9]
				irda_tx_array[2] = 0xBB;
     1b0:	72ab      	strb	r3, [r5, #10]
				irda_tx_array[3] = 0xBB;
     1b2:	72eb      	strb	r3, [r5, #11]
				irda_tx_array[4] = 0xBB;
     1b4:	732b      	strb	r3, [r5, #12]
				
				//vTracePrintF(event_channel, "Send Resp.");
				
				// Send this data now
				xTimerReset( timer_IrDA_Ping, 0 );
     1b6:	464a      	mov	r2, r9
     1b8:	6817      	ldr	r7, [r2, #0]
     1ba:	4b1f      	ldr	r3, [pc, #124]	; (238 <irda_communication_task+0x11c>)
     1bc:	4798      	blx	r3
     1be:	1c02      	adds	r2, r0, #0
     1c0:	2300      	movs	r3, #0
     1c2:	9300      	str	r3, [sp, #0]
     1c4:	1c38      	adds	r0, r7, #0
     1c6:	2102      	movs	r1, #2
     1c8:	4f1c      	ldr	r7, [pc, #112]	; (23c <irda_communication_task+0x120>)
     1ca:	47b8      	blx	r7
				usart_write_buffer_job(&irda_master, irda_tx_array, 5);
     1cc:	481c      	ldr	r0, [pc, #112]	; (240 <irda_communication_task+0x124>)
     1ce:	4641      	mov	r1, r8
     1d0:	2205      	movs	r2, #5
     1d2:	4b1d      	ldr	r3, [pc, #116]	; (248 <irda_communication_task+0x12c>)
     1d4:	4798      	blx	r3
			break;
     1d6:	e015      	b.n	204 <irda_communication_task+0xe8>
			case IRDA_SLAT_STAGE_7A:
				// Post r010716-1818:: This stage sends the next message 0xDD
				// Send out the ping and wait
				irda_tx_array[0] = 0xDD;
     1d8:	23dd      	movs	r3, #221	; 0xdd
     1da:	7223      	strb	r3, [r4, #8]
				irda_tx_array[1] = 0xDD;
     1dc:	7263      	strb	r3, [r4, #9]
				irda_tx_array[2] = 0xDD;
     1de:	72a3      	strb	r3, [r4, #10]
				irda_tx_array[3] = 0xDD;
     1e0:	72e3      	strb	r3, [r4, #11]
				irda_tx_array[4] = 0xDD;
     1e2:	7323      	strb	r3, [r4, #12]
				
				//vTracePrintF(event_channel, "Send Resp.");
				
				// Send this data now
				xTimerReset( timer_IrDA_Ping, 0 );
     1e4:	4b11      	ldr	r3, [pc, #68]	; (22c <irda_communication_task+0x110>)
     1e6:	681f      	ldr	r7, [r3, #0]
     1e8:	4b13      	ldr	r3, [pc, #76]	; (238 <irda_communication_task+0x11c>)
     1ea:	4798      	blx	r3
     1ec:	1c02      	adds	r2, r0, #0
     1ee:	2300      	movs	r3, #0
     1f0:	9300      	str	r3, [sp, #0]
     1f2:	1c38      	adds	r0, r7, #0
     1f4:	2102      	movs	r1, #2
     1f6:	4f11      	ldr	r7, [pc, #68]	; (23c <irda_communication_task+0x120>)
     1f8:	47b8      	blx	r7
				usart_write_buffer_job(&irda_master, irda_tx_array, 5);
     1fa:	4811      	ldr	r0, [pc, #68]	; (240 <irda_communication_task+0x124>)
     1fc:	4659      	mov	r1, fp
     1fe:	2205      	movs	r2, #5
     200:	4b11      	ldr	r3, [pc, #68]	; (248 <irda_communication_task+0x12c>)
     202:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     204:	4f11      	ldr	r7, [pc, #68]	; (24c <irda_communication_task+0x130>)
     206:	2301      	movs	r3, #1
     208:	703b      	strb	r3, [r7, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     20a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     20e:	b662      	cpsie	i
			break;
		}
		
		system_interrupt_enable_global();
		vTaskSuspend( NULL );
     210:	2000      	movs	r0, #0
     212:	4b0f      	ldr	r3, [pc, #60]	; (250 <irda_communication_task+0x134>)
     214:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     216:	b672      	cpsid	i
     218:	f3bf 8f5f 	dmb	sy
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
	cpu_irq_disable();
     21c:	2300      	movs	r3, #0
     21e:	703b      	strb	r3, [r7, #0]
     220:	e78f      	b.n	142 <irda_communication_task+0x26>
     222:	46c0      	nop			; (mov r8, r8)
     224:	2000168c 	.word	0x2000168c
     228:	20000464 	.word	0x20000464
     22c:	200016f8 	.word	0x200016f8
     230:	20000480 	.word	0x20000480
     234:	41004400 	.word	0x41004400
     238:	00003c19 	.word	0x00003c19
     23c:	00004599 	.word	0x00004599
     240:	200016c4 	.word	0x200016c4
     244:	00000f89 	.word	0x00000f89
     248:	00000f69 	.word	0x00000f69
     24c:	20000018 	.word	0x20000018
     250:	00003fc5 	.word	0x00003fc5

00000254 <timer_irda_ping_callback>:
}


// vTracePrintF(event_channel, "IrDA Reset!");
void timer_irda_ping_callback(TimerHandle_t pxTimer) 
{
     254:	b508      	push	{r3, lr}
     256:	b672      	cpsid	i
     258:	f3bf 8f5f 	dmb	sy
     25c:	2200      	movs	r2, #0
     25e:	4b1a      	ldr	r3, [pc, #104]	; (2c8 <timer_irda_ping_callback+0x74>)
     260:	701a      	strb	r2, [r3, #0]
	system_interrupt_disable_global();
	
	configASSERT( pxTimer );
     262:	2800      	cmp	r0, #0
     264:	d101      	bne.n	26a <timer_irda_ping_callback+0x16>
     266:	b672      	cpsid	i
     268:	e7fe      	b.n	268 <timer_irda_ping_callback+0x14>
	
	switch ( irda_comm_state ) {
     26a:	4b18      	ldr	r3, [pc, #96]	; (2cc <timer_irda_ping_callback+0x78>)
     26c:	781b      	ldrb	r3, [r3, #0]
     26e:	2b03      	cmp	r3, #3
     270:	d008      	beq.n	284 <timer_irda_ping_callback+0x30>
     272:	b2da      	uxtb	r2, r3
     274:	2a03      	cmp	r2, #3
     276:	d802      	bhi.n	27e <timer_irda_ping_callback+0x2a>
     278:	2b01      	cmp	r3, #1
     27a:	d006      	beq.n	28a <timer_irda_ping_callback+0x36>
     27c:	e01c      	b.n	2b8 <timer_irda_ping_callback+0x64>
     27e:	3b05      	subs	r3, #5
     280:	2b01      	cmp	r3, #1
     282:	d819      	bhi.n	2b8 <timer_irda_ping_callback+0x64>
			// r010716-1608: IRDA_SLAT_FIRST_RESPONSE T.O. code
		case IRDA_SLAT_FIRST_RESPONSE:
		case IRDA_SLAT_STAGE_7A:
		case IRDA_SLAT_STAGE_7B:
			irda_comm_state = IRDA_SLAT_PING;	// Go back to the Ping Mode
     284:	2201      	movs	r2, #1
     286:	4b11      	ldr	r3, [pc, #68]	; (2cc <timer_irda_ping_callback+0x78>)
     288:	701a      	strb	r2, [r3, #0]
		case IRDA_SLAT_PING:
			irda_timed_out = pdTRUE;
     28a:	2201      	movs	r2, #1
     28c:	4b10      	ldr	r3, [pc, #64]	; (2d0 <timer_irda_ping_callback+0x7c>)
     28e:	601a      	str	r2, [r3, #0]
			
			vTracePrintF(event_channel, "Ping TO!");
     290:	4b10      	ldr	r3, [pc, #64]	; (2d4 <timer_irda_ping_callback+0x80>)
     292:	8818      	ldrh	r0, [r3, #0]
     294:	4910      	ldr	r1, [pc, #64]	; (2d8 <timer_irda_ping_callback+0x84>)
     296:	4b11      	ldr	r3, [pc, #68]	; (2dc <timer_irda_ping_callback+0x88>)
     298:	4798      	blx	r3
     29a:	4b11      	ldr	r3, [pc, #68]	; (2e0 <timer_irda_ping_callback+0x8c>)
     29c:	2280      	movs	r2, #128	; 0x80
     29e:	0492      	lsls	r2, r2, #18
     2a0:	615a      	str	r2, [r3, #20]
     2a2:	2280      	movs	r2, #128	; 0x80
     2a4:	0512      	lsls	r2, r2, #20
     2a6:	615a      	str	r2, [r3, #20]
			port_pin_set_output_level(LED_ERROR, pdFALSE);
			
			port_pin_set_output_level(LED_BUSY, pdFALSE);
			// There was no significant response to the ping,
			// Reset accordingly
			usart_abort_job( &irda_master, USART_TRANSCEIVER_RX );
     2a8:	480e      	ldr	r0, [pc, #56]	; (2e4 <timer_irda_ping_callback+0x90>)
     2aa:	2100      	movs	r1, #0
     2ac:	4b0e      	ldr	r3, [pc, #56]	; (2e8 <timer_irda_ping_callback+0x94>)
     2ae:	4798      	blx	r3
			
			// The IrDA task is now to reset and ping again
			vTaskResume( irda_task_handler );
     2b0:	4b0e      	ldr	r3, [pc, #56]	; (2ec <timer_irda_ping_callback+0x98>)
     2b2:	6818      	ldr	r0, [r3, #0]
     2b4:	4b0e      	ldr	r3, [pc, #56]	; (2f0 <timer_irda_ping_callback+0x9c>)
     2b6:	4798      	blx	r3
     2b8:	b672      	cpsid	i
     2ba:	f3bf 8f5f 	dmb	sy
     2be:	2200      	movs	r2, #0
     2c0:	4b01      	ldr	r3, [pc, #4]	; (2c8 <timer_irda_ping_callback+0x74>)
     2c2:	701a      	strb	r2, [r3, #0]
		break;
	}	
	
	system_interrupt_disable_global();
}
     2c4:	bd08      	pop	{r3, pc}
     2c6:	46c0      	nop			; (mov r8, r8)
     2c8:	20000018 	.word	0x20000018
     2cc:	2000168c 	.word	0x2000168c
     2d0:	20000480 	.word	0x20000480
     2d4:	20001684 	.word	0x20001684
     2d8:	00005820 	.word	0x00005820
     2dc:	00002a99 	.word	0x00002a99
     2e0:	41004400 	.word	0x41004400
     2e4:	200016c4 	.word	0x200016c4
     2e8:	00000fa9 	.word	0x00000fa9
     2ec:	200016fc 	.word	0x200016fc
     2f0:	00003a51 	.word	0x00003a51

000002f4 <main>:
traceLabel event_channel;

//struct tc_module tc_instance;

int main(void)
{
     2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     2f6:	b087      	sub	sp, #28
    /* Initialize the SAM system */
	system_init();
     2f8:	4b24      	ldr	r3, [pc, #144]	; (38c <main+0x98>)
     2fa:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     2fc:	ac05      	add	r4, sp, #20
     2fe:	2601      	movs	r6, #1
     300:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     302:	2500      	movs	r5, #0
     304:	70a5      	strb	r5, [r4, #2]
	//////////////////////////////////////////////////////////////////////////
	// Set the LED outputs for this board.
	struct port_config led_out;
	port_get_config_defaults(&led_out);
	
	led_out.direction = PORT_PIN_DIR_OUTPUT;
     306:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_BUSY, &led_out);
     308:	201b      	movs	r0, #27
     30a:	1c21      	adds	r1, r4, #0
     30c:	4f20      	ldr	r7, [pc, #128]	; (390 <main+0x9c>)
     30e:	47b8      	blx	r7
	port_pin_set_config(LED_ERROR, &led_out);
     310:	2019      	movs	r0, #25
     312:	1c21      	adds	r1, r4, #0
     314:	47b8      	blx	r7
	//////////////////////////////////////////////////////////////////////////
	
	//////////////////////////////////////////////////////////////////////////
	// Start the IrDA communication port
	bastian_IrDA_configuration();
     316:	4b1f      	ldr	r3, [pc, #124]	; (394 <main+0xa0>)
     318:	4798      	blx	r3
	
	// Start the trace logger
	vTraceInitTraceData();
     31a:	4b1f      	ldr	r3, [pc, #124]	; (398 <main+0xa4>)
     31c:	4798      	blx	r3
	
	
	
	/* Initialization code - create the channel label for a VTracePrintF*/
	event_channel = xTraceOpenLabel("Debug");
     31e:	481f      	ldr	r0, [pc, #124]	; (39c <main+0xa8>)
     320:	4b1f      	ldr	r3, [pc, #124]	; (3a0 <main+0xac>)
     322:	4798      	blx	r3
     324:	4b1f      	ldr	r3, [pc, #124]	; (3a4 <main+0xb0>)
     326:	8018      	strh	r0, [r3, #0]

	
	
	// Create the task
	xTaskCreate(irda_communication_task,
     328:	2302      	movs	r3, #2
     32a:	9300      	str	r3, [sp, #0]
     32c:	4b1e      	ldr	r3, [pc, #120]	; (3a8 <main+0xb4>)
     32e:	9301      	str	r3, [sp, #4]
     330:	9502      	str	r5, [sp, #8]
     332:	9503      	str	r5, [sp, #12]
     334:	481d      	ldr	r0, [pc, #116]	; (3ac <main+0xb8>)
     336:	491e      	ldr	r1, [pc, #120]	; (3b0 <main+0xbc>)
     338:	22d2      	movs	r2, #210	; 0xd2
     33a:	0052      	lsls	r2, r2, #1
     33c:	2300      	movs	r3, #0
     33e:	4c1d      	ldr	r4, [pc, #116]	; (3b4 <main+0xc0>)
     340:	47a0      	blx	r4
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     342:	4b1d      	ldr	r3, [pc, #116]	; (3b8 <main+0xc4>)
     344:	701e      	strb	r6, [r3, #0]
     346:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     34a:	b662      	cpsie	i
	
	// Enable global interrupts
	system_interrupt_enable_global();
	
	// Create the necessary timer
	timer_IrDA_Ping = xTimerCreate("Ping", 2, pdFALSE, 0, timer_irda_ping_callback);
     34c:	4b1b      	ldr	r3, [pc, #108]	; (3bc <main+0xc8>)
     34e:	9300      	str	r3, [sp, #0]
     350:	481b      	ldr	r0, [pc, #108]	; (3c0 <main+0xcc>)
     352:	2102      	movs	r1, #2
     354:	2200      	movs	r2, #0
     356:	2300      	movs	r3, #0
     358:	4e1a      	ldr	r6, [pc, #104]	; (3c4 <main+0xd0>)
     35a:	47b0      	blx	r6
     35c:	4c1a      	ldr	r4, [pc, #104]	; (3c8 <main+0xd4>)
     35e:	6020      	str	r0, [r4, #0]
	timer_IrDA_Sync = xTimerCreate("Sync", 1, pdFALSE, 1, timer_irda_sync_callback );
     360:	4b1a      	ldr	r3, [pc, #104]	; (3cc <main+0xd8>)
     362:	9300      	str	r3, [sp, #0]
     364:	481a      	ldr	r0, [pc, #104]	; (3d0 <main+0xdc>)
     366:	2101      	movs	r1, #1
     368:	2200      	movs	r2, #0
     36a:	2301      	movs	r3, #1
     36c:	47b0      	blx	r6
     36e:	4b19      	ldr	r3, [pc, #100]	; (3d4 <main+0xe0>)
     370:	6018      	str	r0, [r3, #0]
	xTimerStart(timer_IrDA_Ping, 0);	// Start timer that keeps track of Linking
     372:	6824      	ldr	r4, [r4, #0]
     374:	4b18      	ldr	r3, [pc, #96]	; (3d8 <main+0xe4>)
     376:	4798      	blx	r3
     378:	1c02      	adds	r2, r0, #0
     37a:	9500      	str	r5, [sp, #0]
     37c:	1c20      	adds	r0, r4, #0
     37e:	2101      	movs	r1, #1
     380:	2300      	movs	r3, #0
     382:	4c16      	ldr	r4, [pc, #88]	; (3dc <main+0xe8>)
     384:	47a0      	blx	r4
	//xTimerStart(timer_IrDA_Sync, 0);	// Start ping timer
	
	// ..and let FreeRTOS run tasks!
	vTaskStartScheduler();
     386:	4b16      	ldr	r3, [pc, #88]	; (3e0 <main+0xec>)
     388:	4798      	blx	r3
     38a:	e7fe      	b.n	38a <main+0x96>
     38c:	00005109 	.word	0x00005109
     390:	0000519d 	.word	0x0000519d
     394:	00000a3d 	.word	0x00000a3d
     398:	00002601 	.word	0x00002601
     39c:	0000582c 	.word	0x0000582c
     3a0:	000026bd 	.word	0x000026bd
     3a4:	20001684 	.word	0x20001684
     3a8:	200016fc 	.word	0x200016fc
     3ac:	0000011d 	.word	0x0000011d
     3b0:	00005834 	.word	0x00005834
     3b4:	00003805 	.word	0x00003805
     3b8:	20000018 	.word	0x20000018
     3bc:	00000255 	.word	0x00000255
     3c0:	0000583c 	.word	0x0000583c
     3c4:	00004509 	.word	0x00004509
     3c8:	200016f8 	.word	0x200016f8
     3cc:	00000111 	.word	0x00000111
     3d0:	00005844 	.word	0x00005844
     3d4:	20001688 	.word	0x20001688
     3d8:	00003c19 	.word	0x00003c19
     3dc:	00004599 	.word	0x00004599
     3e0:	00003ba9 	.word	0x00003ba9

000003e4 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     3e4:	b510      	push	{r4, lr}
     3e6:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     3e8:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3ea:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     3ec:	4299      	cmp	r1, r3
     3ee:	d30c      	bcc.n	40a <_sercom_get_sync_baud_val+0x26>
     3f0:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     3f2:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     3f4:	1c60      	adds	r0, r4, #1
     3f6:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     3f8:	428b      	cmp	r3, r1
     3fa:	d801      	bhi.n	400 <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     3fc:	1c04      	adds	r4, r0, #0
     3fe:	e7f8      	b.n	3f2 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     400:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     402:	2cff      	cmp	r4, #255	; 0xff
     404:	d801      	bhi.n	40a <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     406:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     408:	2000      	movs	r0, #0
	}
}
     40a:	bd10      	pop	{r4, pc}
     40c:	0000      	movs	r0, r0
	...

00000410 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     410:	b5f0      	push	{r4, r5, r6, r7, lr}
     412:	465f      	mov	r7, fp
     414:	4656      	mov	r6, sl
     416:	464d      	mov	r5, r9
     418:	4644      	mov	r4, r8
     41a:	b4f0      	push	{r4, r5, r6, r7}
     41c:	b087      	sub	sp, #28
     41e:	1c06      	adds	r6, r0, #0
     420:	1c0d      	adds	r5, r1, #0
     422:	9204      	str	r2, [sp, #16]
     424:	aa10      	add	r2, sp, #64	; 0x40
     426:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     428:	1c32      	adds	r2, r6, #0
     42a:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     42c:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     42e:	428a      	cmp	r2, r1
     430:	d900      	bls.n	434 <_sercom_get_async_baud_val+0x24>
     432:	e0b3      	b.n	59c <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     434:	2b00      	cmp	r3, #0
     436:	d14b      	bne.n	4d0 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     438:	2100      	movs	r1, #0
     43a:	1c32      	adds	r2, r6, #0
     43c:	4c5e      	ldr	r4, [pc, #376]	; (5b8 <_sercom_get_async_baud_val+0x1a8>)
     43e:	47a0      	blx	r4
     440:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     442:	1c2e      	adds	r6, r5, #0
     444:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     446:	2000      	movs	r0, #0
     448:	2100      	movs	r1, #0
     44a:	2200      	movs	r2, #0
     44c:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     44e:	243f      	movs	r4, #63	; 0x3f
     450:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     452:	2501      	movs	r5, #1
     454:	46a8      	mov	r8, r5
     456:	9002      	str	r0, [sp, #8]
     458:	9103      	str	r1, [sp, #12]
     45a:	4661      	mov	r1, ip
     45c:	3920      	subs	r1, #32
     45e:	d403      	bmi.n	468 <_sercom_get_async_baud_val+0x58>
     460:	4640      	mov	r0, r8
     462:	4088      	lsls	r0, r1
     464:	4681      	mov	r9, r0
     466:	e005      	b.n	474 <_sercom_get_async_baud_val+0x64>
     468:	2120      	movs	r1, #32
     46a:	4665      	mov	r5, ip
     46c:	1b4c      	subs	r4, r1, r5
     46e:	4640      	mov	r0, r8
     470:	40e0      	lsrs	r0, r4
     472:	4681      	mov	r9, r0
     474:	4641      	mov	r1, r8
     476:	4664      	mov	r4, ip
     478:	40a1      	lsls	r1, r4
     47a:	468a      	mov	sl, r1

		r = r << 1;
     47c:	1c10      	adds	r0, r2, #0
     47e:	1c19      	adds	r1, r3, #0
     480:	1880      	adds	r0, r0, r2
     482:	4159      	adcs	r1, r3
     484:	1c02      	adds	r2, r0, #0
     486:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     488:	465d      	mov	r5, fp
     48a:	464c      	mov	r4, r9
     48c:	4225      	tst	r5, r4
     48e:	d002      	beq.n	496 <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     490:	4642      	mov	r2, r8
     492:	4302      	orrs	r2, r0
     494:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     496:	429f      	cmp	r7, r3
     498:	d80c      	bhi.n	4b4 <_sercom_get_async_baud_val+0xa4>
     49a:	d101      	bne.n	4a0 <_sercom_get_async_baud_val+0x90>
     49c:	4296      	cmp	r6, r2
     49e:	d809      	bhi.n	4b4 <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     4a0:	1b92      	subs	r2, r2, r6
     4a2:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     4a4:	4650      	mov	r0, sl
     4a6:	9d02      	ldr	r5, [sp, #8]
     4a8:	4328      	orrs	r0, r5
     4aa:	4649      	mov	r1, r9
     4ac:	9c03      	ldr	r4, [sp, #12]
     4ae:	4321      	orrs	r1, r4
     4b0:	9002      	str	r0, [sp, #8]
     4b2:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     4b4:	4665      	mov	r5, ip
     4b6:	3d01      	subs	r5, #1
     4b8:	46ac      	mov	ip, r5
     4ba:	d2ce      	bcs.n	45a <_sercom_get_async_baud_val+0x4a>
     4bc:	9802      	ldr	r0, [sp, #8]
     4be:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     4c0:	4b3c      	ldr	r3, [pc, #240]	; (5b4 <_sercom_get_async_baud_val+0x1a4>)
     4c2:	4a3b      	ldr	r2, [pc, #236]	; (5b0 <_sercom_get_async_baud_val+0x1a0>)
     4c4:	1a12      	subs	r2, r2, r0
     4c6:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     4c8:	0c12      	lsrs	r2, r2, #16
     4ca:	041b      	lsls	r3, r3, #16
     4cc:	431a      	orrs	r2, r3
     4ce:	e062      	b.n	596 <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     4d0:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     4d2:	2b01      	cmp	r3, #1
     4d4:	d15f      	bne.n	596 <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     4d6:	0f4f      	lsrs	r7, r1, #29
     4d8:	46b9      	mov	r9, r7
     4da:	00cd      	lsls	r5, r1, #3
     4dc:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     4de:	2100      	movs	r1, #0
     4e0:	1c32      	adds	r2, r6, #0
     4e2:	2300      	movs	r3, #0
     4e4:	4c34      	ldr	r4, [pc, #208]	; (5b8 <_sercom_get_async_baud_val+0x1a8>)
     4e6:	47a0      	blx	r4
     4e8:	1c06      	adds	r6, r0, #0
     4ea:	1c0f      	adds	r7, r1, #0
     4ec:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     4ee:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     4f0:	9602      	str	r6, [sp, #8]
     4f2:	9703      	str	r7, [sp, #12]
     4f4:	469a      	mov	sl, r3
     4f6:	4650      	mov	r0, sl
     4f8:	b2c0      	uxtb	r0, r0
     4fa:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     4fc:	2100      	movs	r1, #0
     4fe:	4688      	mov	r8, r1
     500:	2200      	movs	r2, #0
     502:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     504:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     506:	1c27      	adds	r7, r4, #0
     508:	3f20      	subs	r7, #32
     50a:	d403      	bmi.n	514 <_sercom_get_async_baud_val+0x104>
     50c:	1c2e      	adds	r6, r5, #0
     50e:	40be      	lsls	r6, r7
     510:	9601      	str	r6, [sp, #4]
     512:	e004      	b.n	51e <_sercom_get_async_baud_val+0x10e>
     514:	2020      	movs	r0, #32
     516:	1b07      	subs	r7, r0, r4
     518:	1c29      	adds	r1, r5, #0
     51a:	40f9      	lsrs	r1, r7
     51c:	9101      	str	r1, [sp, #4]
     51e:	1c2e      	adds	r6, r5, #0
     520:	40a6      	lsls	r6, r4
     522:	9600      	str	r6, [sp, #0]

		r = r << 1;
     524:	1c10      	adds	r0, r2, #0
     526:	1c19      	adds	r1, r3, #0
     528:	1880      	adds	r0, r0, r2
     52a:	4159      	adcs	r1, r3
     52c:	1c02      	adds	r2, r0, #0
     52e:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     530:	465f      	mov	r7, fp
     532:	4037      	ands	r7, r6
     534:	46bc      	mov	ip, r7
     536:	9e01      	ldr	r6, [sp, #4]
     538:	464f      	mov	r7, r9
     53a:	403e      	ands	r6, r7
     53c:	4667      	mov	r7, ip
     53e:	433e      	orrs	r6, r7
     540:	d002      	beq.n	548 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     542:	1c2a      	adds	r2, r5, #0
     544:	4302      	orrs	r2, r0
     546:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     548:	9803      	ldr	r0, [sp, #12]
     54a:	4298      	cmp	r0, r3
     54c:	d80b      	bhi.n	566 <_sercom_get_async_baud_val+0x156>
     54e:	d102      	bne.n	556 <_sercom_get_async_baud_val+0x146>
     550:	9902      	ldr	r1, [sp, #8]
     552:	4291      	cmp	r1, r2
     554:	d807      	bhi.n	566 <_sercom_get_async_baud_val+0x156>
			r = r - d;
     556:	9e02      	ldr	r6, [sp, #8]
     558:	9f03      	ldr	r7, [sp, #12]
     55a:	1b92      	subs	r2, r2, r6
     55c:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     55e:	4647      	mov	r7, r8
     560:	9800      	ldr	r0, [sp, #0]
     562:	4307      	orrs	r7, r0
     564:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     566:	3c01      	subs	r4, #1
     568:	d2cd      	bcs.n	506 <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     56a:	4641      	mov	r1, r8
     56c:	4652      	mov	r2, sl
     56e:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     570:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     572:	4c12      	ldr	r4, [pc, #72]	; (5bc <_sercom_get_async_baud_val+0x1ac>)
     574:	42a3      	cmp	r3, r4
     576:	d908      	bls.n	58a <_sercom_get_async_baud_val+0x17a>
     578:	9a05      	ldr	r2, [sp, #20]
     57a:	3201      	adds	r2, #1
     57c:	b2d2      	uxtb	r2, r2
     57e:	9205      	str	r2, [sp, #20]
     580:	2601      	movs	r6, #1
     582:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     584:	4657      	mov	r7, sl
     586:	2f08      	cmp	r7, #8
     588:	d1b5      	bne.n	4f6 <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     58a:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     58c:	9805      	ldr	r0, [sp, #20]
     58e:	2808      	cmp	r0, #8
     590:	d004      	beq.n	59c <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     592:	0342      	lsls	r2, r0, #13
     594:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     596:	9c04      	ldr	r4, [sp, #16]
     598:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     59a:	2400      	movs	r4, #0
}
     59c:	1c20      	adds	r0, r4, #0
     59e:	b007      	add	sp, #28
     5a0:	bc3c      	pop	{r2, r3, r4, r5}
     5a2:	4690      	mov	r8, r2
     5a4:	4699      	mov	r9, r3
     5a6:	46a2      	mov	sl, r4
     5a8:	46ab      	mov	fp, r5
     5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5ac:	46c0      	nop			; (mov r8, r8)
     5ae:	46c0      	nop			; (mov r8, r8)
     5b0:	00000000 	.word	0x00000000
     5b4:	00000001 	.word	0x00000001
     5b8:	00005319 	.word	0x00005319
     5bc:	00001fff 	.word	0x00001fff

000005c0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     5c0:	b510      	push	{r4, lr}
     5c2:	b082      	sub	sp, #8
     5c4:	1c04      	adds	r4, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     5c6:	4b0f      	ldr	r3, [pc, #60]	; (604 <sercom_set_gclk_generator+0x44>)
     5c8:	781b      	ldrb	r3, [r3, #0]
     5ca:	2b00      	cmp	r3, #0
     5cc:	d001      	beq.n	5d2 <sercom_set_gclk_generator+0x12>
     5ce:	2900      	cmp	r1, #0
     5d0:	d00d      	beq.n	5ee <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     5d2:	a901      	add	r1, sp, #4
     5d4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     5d6:	2013      	movs	r0, #19
     5d8:	4b0b      	ldr	r3, [pc, #44]	; (608 <sercom_set_gclk_generator+0x48>)
     5da:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     5dc:	2013      	movs	r0, #19
     5de:	4b0b      	ldr	r3, [pc, #44]	; (60c <sercom_set_gclk_generator+0x4c>)
     5e0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     5e2:	4b08      	ldr	r3, [pc, #32]	; (604 <sercom_set_gclk_generator+0x44>)
     5e4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     5e6:	2201      	movs	r2, #1
     5e8:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     5ea:	2000      	movs	r0, #0
     5ec:	e007      	b.n	5fe <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     5ee:	4b05      	ldr	r3, [pc, #20]	; (604 <sercom_set_gclk_generator+0x44>)
     5f0:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     5f2:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     5f4:	1b14      	subs	r4, r2, r4
     5f6:	1e62      	subs	r2, r4, #1
     5f8:	4194      	sbcs	r4, r2
     5fa:	4264      	negs	r4, r4
     5fc:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     5fe:	b002      	add	sp, #8
     600:	bd10      	pop	{r4, pc}
     602:	46c0      	nop			; (mov r8, r8)
     604:	20000478 	.word	0x20000478
     608:	000050b5 	.word	0x000050b5
     60c:	00005029 	.word	0x00005029

00000610 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     610:	4b2e      	ldr	r3, [pc, #184]	; (6cc <_sercom_get_default_pad+0xbc>)
     612:	4298      	cmp	r0, r3
     614:	d01c      	beq.n	650 <_sercom_get_default_pad+0x40>
     616:	d803      	bhi.n	620 <_sercom_get_default_pad+0x10>
     618:	4b2d      	ldr	r3, [pc, #180]	; (6d0 <_sercom_get_default_pad+0xc0>)
     61a:	4298      	cmp	r0, r3
     61c:	d007      	beq.n	62e <_sercom_get_default_pad+0x1e>
     61e:	e04a      	b.n	6b6 <_sercom_get_default_pad+0xa6>
     620:	4b2c      	ldr	r3, [pc, #176]	; (6d4 <_sercom_get_default_pad+0xc4>)
     622:	4298      	cmp	r0, r3
     624:	d025      	beq.n	672 <_sercom_get_default_pad+0x62>
     626:	4b2c      	ldr	r3, [pc, #176]	; (6d8 <_sercom_get_default_pad+0xc8>)
     628:	4298      	cmp	r0, r3
     62a:	d033      	beq.n	694 <_sercom_get_default_pad+0x84>
     62c:	e043      	b.n	6b6 <_sercom_get_default_pad+0xa6>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     62e:	2901      	cmp	r1, #1
     630:	d043      	beq.n	6ba <_sercom_get_default_pad+0xaa>
     632:	2900      	cmp	r1, #0
     634:	d004      	beq.n	640 <_sercom_get_default_pad+0x30>
     636:	2902      	cmp	r1, #2
     638:	d006      	beq.n	648 <_sercom_get_default_pad+0x38>
     63a:	2903      	cmp	r1, #3
     63c:	d006      	beq.n	64c <_sercom_get_default_pad+0x3c>
     63e:	e001      	b.n	644 <_sercom_get_default_pad+0x34>
     640:	4826      	ldr	r0, [pc, #152]	; (6dc <_sercom_get_default_pad+0xcc>)
     642:	e041      	b.n	6c8 <_sercom_get_default_pad+0xb8>
	}

	Assert(false);
	return 0;
     644:	2000      	movs	r0, #0
     646:	e03f      	b.n	6c8 <_sercom_get_default_pad+0xb8>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     648:	4825      	ldr	r0, [pc, #148]	; (6e0 <_sercom_get_default_pad+0xd0>)
     64a:	e03d      	b.n	6c8 <_sercom_get_default_pad+0xb8>
     64c:	4825      	ldr	r0, [pc, #148]	; (6e4 <_sercom_get_default_pad+0xd4>)
     64e:	e03b      	b.n	6c8 <_sercom_get_default_pad+0xb8>
     650:	2901      	cmp	r1, #1
     652:	d034      	beq.n	6be <_sercom_get_default_pad+0xae>
     654:	2900      	cmp	r1, #0
     656:	d004      	beq.n	662 <_sercom_get_default_pad+0x52>
     658:	2902      	cmp	r1, #2
     65a:	d006      	beq.n	66a <_sercom_get_default_pad+0x5a>
     65c:	2903      	cmp	r1, #3
     65e:	d006      	beq.n	66e <_sercom_get_default_pad+0x5e>
     660:	e001      	b.n	666 <_sercom_get_default_pad+0x56>
     662:	2003      	movs	r0, #3
     664:	e030      	b.n	6c8 <_sercom_get_default_pad+0xb8>
	}

	Assert(false);
	return 0;
     666:	2000      	movs	r0, #0
     668:	e02e      	b.n	6c8 <_sercom_get_default_pad+0xb8>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     66a:	481f      	ldr	r0, [pc, #124]	; (6e8 <_sercom_get_default_pad+0xd8>)
     66c:	e02c      	b.n	6c8 <_sercom_get_default_pad+0xb8>
     66e:	481f      	ldr	r0, [pc, #124]	; (6ec <_sercom_get_default_pad+0xdc>)
     670:	e02a      	b.n	6c8 <_sercom_get_default_pad+0xb8>
     672:	2901      	cmp	r1, #1
     674:	d025      	beq.n	6c2 <_sercom_get_default_pad+0xb2>
     676:	2900      	cmp	r1, #0
     678:	d004      	beq.n	684 <_sercom_get_default_pad+0x74>
     67a:	2902      	cmp	r1, #2
     67c:	d006      	beq.n	68c <_sercom_get_default_pad+0x7c>
     67e:	2903      	cmp	r1, #3
     680:	d006      	beq.n	690 <_sercom_get_default_pad+0x80>
     682:	e001      	b.n	688 <_sercom_get_default_pad+0x78>
     684:	481a      	ldr	r0, [pc, #104]	; (6f0 <_sercom_get_default_pad+0xe0>)
     686:	e01f      	b.n	6c8 <_sercom_get_default_pad+0xb8>
	}

	Assert(false);
	return 0;
     688:	2000      	movs	r0, #0
     68a:	e01d      	b.n	6c8 <_sercom_get_default_pad+0xb8>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     68c:	4819      	ldr	r0, [pc, #100]	; (6f4 <_sercom_get_default_pad+0xe4>)
     68e:	e01b      	b.n	6c8 <_sercom_get_default_pad+0xb8>
     690:	4819      	ldr	r0, [pc, #100]	; (6f8 <_sercom_get_default_pad+0xe8>)
     692:	e019      	b.n	6c8 <_sercom_get_default_pad+0xb8>
     694:	2901      	cmp	r1, #1
     696:	d016      	beq.n	6c6 <_sercom_get_default_pad+0xb6>
     698:	2900      	cmp	r1, #0
     69a:	d004      	beq.n	6a6 <_sercom_get_default_pad+0x96>
     69c:	2902      	cmp	r1, #2
     69e:	d006      	beq.n	6ae <_sercom_get_default_pad+0x9e>
     6a0:	2903      	cmp	r1, #3
     6a2:	d006      	beq.n	6b2 <_sercom_get_default_pad+0xa2>
     6a4:	e001      	b.n	6aa <_sercom_get_default_pad+0x9a>
     6a6:	4815      	ldr	r0, [pc, #84]	; (6fc <_sercom_get_default_pad+0xec>)
     6a8:	e00e      	b.n	6c8 <_sercom_get_default_pad+0xb8>
	}

	Assert(false);
	return 0;
     6aa:	2000      	movs	r0, #0
     6ac:	e00c      	b.n	6c8 <_sercom_get_default_pad+0xb8>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6ae:	4814      	ldr	r0, [pc, #80]	; (700 <_sercom_get_default_pad+0xf0>)
     6b0:	e00a      	b.n	6c8 <_sercom_get_default_pad+0xb8>
     6b2:	4814      	ldr	r0, [pc, #80]	; (704 <_sercom_get_default_pad+0xf4>)
     6b4:	e008      	b.n	6c8 <_sercom_get_default_pad+0xb8>
	}

	Assert(false);
	return 0;
     6b6:	2000      	movs	r0, #0
     6b8:	e006      	b.n	6c8 <_sercom_get_default_pad+0xb8>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6ba:	4813      	ldr	r0, [pc, #76]	; (708 <_sercom_get_default_pad+0xf8>)
     6bc:	e004      	b.n	6c8 <_sercom_get_default_pad+0xb8>
     6be:	4813      	ldr	r0, [pc, #76]	; (70c <_sercom_get_default_pad+0xfc>)
     6c0:	e002      	b.n	6c8 <_sercom_get_default_pad+0xb8>
     6c2:	4813      	ldr	r0, [pc, #76]	; (710 <_sercom_get_default_pad+0x100>)
     6c4:	e000      	b.n	6c8 <_sercom_get_default_pad+0xb8>
     6c6:	4813      	ldr	r0, [pc, #76]	; (714 <_sercom_get_default_pad+0x104>)
	}

	Assert(false);
	return 0;
}
     6c8:	4770      	bx	lr
     6ca:	46c0      	nop			; (mov r8, r8)
     6cc:	42000c00 	.word	0x42000c00
     6d0:	42000800 	.word	0x42000800
     6d4:	42001000 	.word	0x42001000
     6d8:	42001400 	.word	0x42001400
     6dc:	00040003 	.word	0x00040003
     6e0:	00060003 	.word	0x00060003
     6e4:	00070003 	.word	0x00070003
     6e8:	001e0003 	.word	0x001e0003
     6ec:	001f0003 	.word	0x001f0003
     6f0:	00080003 	.word	0x00080003
     6f4:	000a0003 	.word	0x000a0003
     6f8:	000b0003 	.word	0x000b0003
     6fc:	00100003 	.word	0x00100003
     700:	00120003 	.word	0x00120003
     704:	00130003 	.word	0x00130003
     708:	00050003 	.word	0x00050003
     70c:	00010003 	.word	0x00010003
     710:	00090003 	.word	0x00090003
     714:	00110003 	.word	0x00110003

00000718 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     718:	b570      	push	{r4, r5, r6, lr}
     71a:	b084      	sub	sp, #16
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     71c:	4a0e      	ldr	r2, [pc, #56]	; (758 <_sercom_get_sercom_inst_index+0x40>)
     71e:	4669      	mov	r1, sp
     720:	ca70      	ldmia	r2!, {r4, r5, r6}
     722:	c170      	stmia	r1!, {r4, r5, r6}
     724:	6812      	ldr	r2, [r2, #0]
     726:	600a      	str	r2, [r1, #0]

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     728:	1c03      	adds	r3, r0, #0
     72a:	9a00      	ldr	r2, [sp, #0]
     72c:	4282      	cmp	r2, r0
     72e:	d00f      	beq.n	750 <_sercom_get_sercom_inst_index+0x38>
     730:	9c01      	ldr	r4, [sp, #4]
     732:	4284      	cmp	r4, r0
     734:	d008      	beq.n	748 <_sercom_get_sercom_inst_index+0x30>
     736:	9d02      	ldr	r5, [sp, #8]
     738:	4285      	cmp	r5, r0
     73a:	d007      	beq.n	74c <_sercom_get_sercom_inst_index+0x34>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     73c:	2000      	movs	r0, #0
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     73e:	9e03      	ldr	r6, [sp, #12]
     740:	429e      	cmp	r6, r3
     742:	d107      	bne.n	754 <_sercom_get_sercom_inst_index+0x3c>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     744:	2003      	movs	r0, #3
     746:	e004      	b.n	752 <_sercom_get_sercom_inst_index+0x3a>
     748:	2001      	movs	r0, #1
     74a:	e002      	b.n	752 <_sercom_get_sercom_inst_index+0x3a>
     74c:	2002      	movs	r0, #2
     74e:	e000      	b.n	752 <_sercom_get_sercom_inst_index+0x3a>
     750:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     752:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
     754:	b004      	add	sp, #16
     756:	bd70      	pop	{r4, r5, r6, pc}
     758:	0000584c 	.word	0x0000584c

0000075c <irda_master_callback_received>:
BaseType_t lock_allow_main_discovery = pdTRUE;
TickType_t lock_main_discovery_count;
BaseType_t lock_trace = pdFALSE;
TickType_t unlock_count;
BaseType_t irda_timed_out = pdFALSE;
static void irda_master_callback_received(const struct usart_module *const module) {
     75c:	b510      	push	{r4, lr}
     75e:	b082      	sub	sp, #8
	
	BaseType_t xYieldRequired; 
	
	if ( !irda_timed_out ) {
     760:	4b71      	ldr	r3, [pc, #452]	; (928 <irda_master_callback_received+0x1cc>)
     762:	681b      	ldr	r3, [r3, #0]
     764:	2b00      	cmp	r3, #0
     766:	d000      	beq.n	76a <irda_master_callback_received+0xe>
     768:	e0dc      	b.n	924 <irda_master_callback_received+0x1c8>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     76a:	4b70      	ldr	r3, [pc, #448]	; (92c <irda_master_callback_received+0x1d0>)
     76c:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     76e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     770:	2b00      	cmp	r3, #0
     772:	d1fc      	bne.n	76e <irda_master_callback_received+0x12>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Disable RX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
     774:	6851      	ldr	r1, [r2, #4]
     776:	4b6e      	ldr	r3, [pc, #440]	; (930 <irda_master_callback_received+0x1d4>)
     778:	400b      	ands	r3, r1
     77a:	6053      	str	r3, [r2, #4]
			module->receiver_enabled = false;
     77c:	2200      	movs	r2, #0
     77e:	4b6b      	ldr	r3, [pc, #428]	; (92c <irda_master_callback_received+0x1d0>)
     780:	719a      	strb	r2, [r3, #6]
		usart_disable_transceiver(&irda_master, USART_TRANSCEIVER_RX);
	
		switch ( irda_comm_state )
     782:	4b6c      	ldr	r3, [pc, #432]	; (934 <irda_master_callback_received+0x1d8>)
     784:	781b      	ldrb	r3, [r3, #0]
     786:	2b03      	cmp	r3, #3
     788:	d056      	beq.n	838 <irda_master_callback_received+0xdc>
     78a:	2b06      	cmp	r3, #6
     78c:	d100      	bne.n	790 <irda_master_callback_received+0x34>
     78e:	e09b      	b.n	8c8 <irda_master_callback_received+0x16c>
     790:	2b01      	cmp	r3, #1
     792:	d000      	beq.n	796 <irda_master_callback_received+0x3a>
     794:	e0c6      	b.n	924 <irda_master_callback_received+0x1c8>
		{
			case IRDA_SLAT_PING:
						// Check if main discovery is allowed
				if ( lock_allow_main_discovery == pdFALSE ) {
     796:	4b68      	ldr	r3, [pc, #416]	; (938 <irda_master_callback_received+0x1dc>)
     798:	681b      	ldr	r3, [r3, #0]
     79a:	2b00      	cmp	r3, #0
     79c:	d10a      	bne.n	7b4 <irda_master_callback_received+0x58>
					unlock_count = xTaskGetTickCountFromISR();
     79e:	4b67      	ldr	r3, [pc, #412]	; (93c <irda_master_callback_received+0x1e0>)
     7a0:	4798      	blx	r3
     7a2:	4b67      	ldr	r3, [pc, #412]	; (940 <irda_master_callback_received+0x1e4>)
     7a4:	6018      	str	r0, [r3, #0]
				
					if ( unlock_count >= lock_main_discovery_count ) {
     7a6:	4b67      	ldr	r3, [pc, #412]	; (944 <irda_master_callback_received+0x1e8>)
     7a8:	681b      	ldr	r3, [r3, #0]
     7aa:	4298      	cmp	r0, r3
     7ac:	d302      	bcc.n	7b4 <irda_master_callback_received+0x58>
						lock_allow_main_discovery = pdTRUE;
     7ae:	2201      	movs	r2, #1
     7b0:	4b61      	ldr	r3, [pc, #388]	; (938 <irda_master_callback_received+0x1dc>)
     7b2:	601a      	str	r2, [r3, #0]
					}
				}
	
				if ( irda_rx_array[0] == irda_rx_array[1] && irda_rx_array[1] == irda_rx_array[2] && 
     7b4:	4b64      	ldr	r3, [pc, #400]	; (948 <irda_master_callback_received+0x1ec>)
     7b6:	781a      	ldrb	r2, [r3, #0]
     7b8:	785b      	ldrb	r3, [r3, #1]
     7ba:	4293      	cmp	r3, r2
     7bc:	d12f      	bne.n	81e <irda_master_callback_received+0xc2>
     7be:	4b62      	ldr	r3, [pc, #392]	; (948 <irda_master_callback_received+0x1ec>)
     7c0:	789b      	ldrb	r3, [r3, #2]
     7c2:	4293      	cmp	r3, r2
     7c4:	d12b      	bne.n	81e <irda_master_callback_received+0xc2>
     7c6:	2aaa      	cmp	r2, #170	; 0xaa
     7c8:	d129      	bne.n	81e <irda_master_callback_received+0xc2>
						irda_rx_array[0] == 0xAA )
				{
					if ( lock_allow_main_discovery ) {
     7ca:	4b5b      	ldr	r3, [pc, #364]	; (938 <irda_master_callback_received+0x1dc>)
     7cc:	681b      	ldr	r3, [r3, #0]
     7ce:	2b00      	cmp	r3, #0
     7d0:	d100      	bne.n	7d4 <irda_master_callback_received+0x78>
     7d2:	e0a7      	b.n	924 <irda_master_callback_received+0x1c8>
						if ( lock_trace == pdFALSE ) {
     7d4:	4b54      	ldr	r3, [pc, #336]	; (928 <irda_master_callback_received+0x1cc>)
     7d6:	685b      	ldr	r3, [r3, #4]
     7d8:	2b00      	cmp	r3, #0
     7da:	d104      	bne.n	7e6 <irda_master_callback_received+0x8a>
							lock_trace = pdTRUE;
     7dc:	2201      	movs	r2, #1
     7de:	4b52      	ldr	r3, [pc, #328]	; (928 <irda_master_callback_received+0x1cc>)
     7e0:	605a      	str	r2, [r3, #4]
					
							// Start the trace
							uiTraceStart();
     7e2:	4b5a      	ldr	r3, [pc, #360]	; (94c <irda_master_callback_received+0x1f0>)
     7e4:	4798      	blx	r3
 						//port_pin_set_output_level(LED_ERROR, pdFALSE);

 						//vTracePrintF(event_channel, "Rxd Header!"); 					

							//port_pin_toggle_output_level(LED_BUSY);
 						irda_comm_state = IRDA_SLAT_FIRST;	// Change state to send first response
     7e6:	2202      	movs	r2, #2
     7e8:	4b52      	ldr	r3, [pc, #328]	; (934 <irda_master_callback_received+0x1d8>)
     7ea:	701a      	strb	r2, [r3, #0]

 						// The board has been discovered, note so that 0xAA is ignored next pass
 						//lock_allow_main_discovery = pdFALSE;
 						//lock_main_discovery_count = xTaskGetTickCountFromISR();
 						//lock_main_discovery_count += 16;	// Wait half-a-second
						xYieldRequired = xTaskResumeFromISR( irda_task_handler );
     7ec:	4b58      	ldr	r3, [pc, #352]	; (950 <irda_master_callback_received+0x1f4>)
     7ee:	6818      	ldr	r0, [r3, #0]
     7f0:	4b58      	ldr	r3, [pc, #352]	; (954 <irda_master_callback_received+0x1f8>)
     7f2:	4798      	blx	r3
					
						if( xYieldRequired == pdTRUE )
     7f4:	2801      	cmp	r0, #1
     7f6:	d109      	bne.n	80c <irda_master_callback_received+0xb0>
						{
							// We should switch context so the ISR returns to a different task.
							// NOTE:  How this is done depends on the port you are using.  Check
							// the documentation and examples for your port.
							vTracePrintF(event_channel, "Yield ISR!");
     7f8:	4b57      	ldr	r3, [pc, #348]	; (958 <irda_master_callback_received+0x1fc>)
     7fa:	8818      	ldrh	r0, [r3, #0]
     7fc:	4957      	ldr	r1, [pc, #348]	; (95c <irda_master_callback_received+0x200>)
     7fe:	4b58      	ldr	r3, [pc, #352]	; (960 <irda_master_callback_received+0x204>)
     800:	4798      	blx	r3
							portYIELD_FROM_ISR(xYieldRequired);
     802:	2280      	movs	r2, #128	; 0x80
     804:	0552      	lsls	r2, r2, #21
     806:	4b57      	ldr	r3, [pc, #348]	; (964 <irda_master_callback_received+0x208>)
     808:	601a      	str	r2, [r3, #0]
     80a:	e08b      	b.n	924 <irda_master_callback_received+0x1c8>
						} else {
							irda_comm_state = IRDA_SLAT_PING;
     80c:	2201      	movs	r2, #1
     80e:	4b49      	ldr	r3, [pc, #292]	; (934 <irda_master_callback_received+0x1d8>)
     810:	701a      	strb	r2, [r3, #0]
							vTracePrintF(event_channel, "No Yield! Changed to PING");
     812:	4b51      	ldr	r3, [pc, #324]	; (958 <irda_master_callback_received+0x1fc>)
     814:	8818      	ldrh	r0, [r3, #0]
     816:	4954      	ldr	r1, [pc, #336]	; (968 <irda_master_callback_received+0x20c>)
     818:	4b51      	ldr	r3, [pc, #324]	; (960 <irda_master_callback_received+0x204>)
     81a:	4798      	blx	r3
     81c:	e082      	b.n	924 <irda_master_callback_received+0x1c8>
						}
					}
				} else {
					irda_comm_state = IRDA_SLAT_PING;
     81e:	2201      	movs	r2, #1
     820:	4b44      	ldr	r3, [pc, #272]	; (934 <irda_master_callback_received+0x1d8>)
     822:	701a      	strb	r2, [r3, #0]
					vTracePrintF(event_channel, "Wrong Data!");
     824:	4b4c      	ldr	r3, [pc, #304]	; (958 <irda_master_callback_received+0x1fc>)
     826:	8818      	ldrh	r0, [r3, #0]
     828:	4950      	ldr	r1, [pc, #320]	; (96c <irda_master_callback_received+0x210>)
     82a:	4b4d      	ldr	r3, [pc, #308]	; (960 <irda_master_callback_received+0x204>)
     82c:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     82e:	2280      	movs	r2, #128	; 0x80
     830:	0492      	lsls	r2, r2, #18
     832:	4b4f      	ldr	r3, [pc, #316]	; (970 <irda_master_callback_received+0x214>)
     834:	619a      	str	r2, [r3, #24]
     836:	e075      	b.n	924 <irda_master_callback_received+0x1c8>
					//irda_comm_state = IRDA_SLAT_PING;
				}
			break;
			case IRDA_SLAT_FIRST_RESPONSE:	// r010716-1608: This the code to execute when we get 0xCC. Stage 6
						// If this is correct, this board can be safely assumed to be synchronized
				if ( irda_rx_array[0] == irda_rx_array[1] && irda_rx_array[1] == irda_rx_array[2] &&
     838:	4b43      	ldr	r3, [pc, #268]	; (948 <irda_master_callback_received+0x1ec>)
     83a:	781a      	ldrb	r2, [r3, #0]
     83c:	785b      	ldrb	r3, [r3, #1]
     83e:	4293      	cmp	r3, r2
     840:	d135      	bne.n	8ae <irda_master_callback_received+0x152>
     842:	4b41      	ldr	r3, [pc, #260]	; (948 <irda_master_callback_received+0x1ec>)
     844:	789b      	ldrb	r3, [r3, #2]
     846:	4293      	cmp	r3, r2
     848:	d131      	bne.n	8ae <irda_master_callback_received+0x152>
						irda_rx_array[2] == irda_rx_array[3] && irda_rx_array[3] == irda_rx_array[4] && 
     84a:	4b3f      	ldr	r3, [pc, #252]	; (948 <irda_master_callback_received+0x1ec>)
					//irda_comm_state = IRDA_SLAT_PING;
				}
			break;
			case IRDA_SLAT_FIRST_RESPONSE:	// r010716-1608: This the code to execute when we get 0xCC. Stage 6
						// If this is correct, this board can be safely assumed to be synchronized
				if ( irda_rx_array[0] == irda_rx_array[1] && irda_rx_array[1] == irda_rx_array[2] &&
     84c:	78db      	ldrb	r3, [r3, #3]
     84e:	4293      	cmp	r3, r2
     850:	d12d      	bne.n	8ae <irda_master_callback_received+0x152>
						irda_rx_array[2] == irda_rx_array[3] && irda_rx_array[3] == irda_rx_array[4] && 
     852:	4b3d      	ldr	r3, [pc, #244]	; (948 <irda_master_callback_received+0x1ec>)
     854:	791b      	ldrb	r3, [r3, #4]
     856:	4293      	cmp	r3, r2
     858:	d129      	bne.n	8ae <irda_master_callback_received+0x152>
     85a:	2acc      	cmp	r2, #204	; 0xcc
     85c:	d127      	bne.n	8ae <irda_master_callback_received+0x152>
					

					//vTracePrintF(event_channel, "Rxd Header!");

					//port_pin_toggle_output_level(LED_BUSY);
					irda_comm_state = IRDA_SLAT_STAGE_7A;	// Change state to send first response
     85e:	2205      	movs	r2, #5
     860:	4b34      	ldr	r3, [pc, #208]	; (934 <irda_master_callback_received+0x1d8>)
     862:	701a      	strb	r2, [r3, #0]
     864:	2280      	movs	r2, #128	; 0x80
     866:	0512      	lsls	r2, r2, #20
     868:	4b41      	ldr	r3, [pc, #260]	; (970 <irda_master_callback_received+0x214>)
     86a:	619a      	str	r2, [r3, #24]
						// The slat card has been synched at this point.
					port_pin_set_output_level(LED_BUSY, pdTRUE);
					
					// Resetting the timer
					xTimerResetFromISR ( timer_IrDA_Ping, 0 );
     86c:	4b41      	ldr	r3, [pc, #260]	; (974 <irda_master_callback_received+0x218>)
     86e:	681c      	ldr	r4, [r3, #0]
     870:	4b32      	ldr	r3, [pc, #200]	; (93c <irda_master_callback_received+0x1e0>)
     872:	4798      	blx	r3
     874:	1c02      	adds	r2, r0, #0
     876:	2300      	movs	r3, #0
     878:	9300      	str	r3, [sp, #0]
     87a:	1c20      	adds	r0, r4, #0
     87c:	2107      	movs	r1, #7
     87e:	4c3e      	ldr	r4, [pc, #248]	; (978 <irda_master_callback_received+0x21c>)
     880:	47a0      	blx	r4
					
					xYieldRequired = xTaskResumeFromISR( irda_task_handler );
     882:	4b33      	ldr	r3, [pc, #204]	; (950 <irda_master_callback_received+0x1f4>)
     884:	6818      	ldr	r0, [r3, #0]
     886:	4b33      	ldr	r3, [pc, #204]	; (954 <irda_master_callback_received+0x1f8>)
     888:	4798      	blx	r3
					
					if( xYieldRequired == pdTRUE )
     88a:	2801      	cmp	r0, #1
     88c:	d109      	bne.n	8a2 <irda_master_callback_received+0x146>
					{
						// We should switch context so the ISR returns to a different task.
						// NOTE:  How this is done depends on the port you are using.  Check
						// the documentation and examples for your port.
						vTracePrintF(event_channel, "Yield ISR!");
     88e:	4b32      	ldr	r3, [pc, #200]	; (958 <irda_master_callback_received+0x1fc>)
     890:	8818      	ldrh	r0, [r3, #0]
     892:	4932      	ldr	r1, [pc, #200]	; (95c <irda_master_callback_received+0x200>)
     894:	4b32      	ldr	r3, [pc, #200]	; (960 <irda_master_callback_received+0x204>)
     896:	4798      	blx	r3
						portYIELD_FROM_ISR(xYieldRequired);
     898:	2280      	movs	r2, #128	; 0x80
     89a:	0552      	lsls	r2, r2, #21
     89c:	4b31      	ldr	r3, [pc, #196]	; (964 <irda_master_callback_received+0x208>)
     89e:	601a      	str	r2, [r3, #0]
     8a0:	e040      	b.n	924 <irda_master_callback_received+0x1c8>
					} else {
						vTracePrintF(event_channel, "No Yield! Changed to PING");
     8a2:	4b2d      	ldr	r3, [pc, #180]	; (958 <irda_master_callback_received+0x1fc>)
     8a4:	8818      	ldrh	r0, [r3, #0]
     8a6:	4930      	ldr	r1, [pc, #192]	; (968 <irda_master_callback_received+0x20c>)
     8a8:	4b2d      	ldr	r3, [pc, #180]	; (960 <irda_master_callback_received+0x204>)
     8aa:	4798      	blx	r3
     8ac:	e03a      	b.n	924 <irda_master_callback_received+0x1c8>
					}
				} else {
					vTracePrintF(event_channel, "Wrong Data!");
     8ae:	4b2a      	ldr	r3, [pc, #168]	; (958 <irda_master_callback_received+0x1fc>)
     8b0:	8818      	ldrh	r0, [r3, #0]
     8b2:	492e      	ldr	r1, [pc, #184]	; (96c <irda_master_callback_received+0x210>)
     8b4:	4b2a      	ldr	r3, [pc, #168]	; (960 <irda_master_callback_received+0x204>)
     8b6:	4798      	blx	r3
     8b8:	2280      	movs	r2, #128	; 0x80
     8ba:	0492      	lsls	r2, r2, #18
     8bc:	4b2c      	ldr	r3, [pc, #176]	; (970 <irda_master_callback_received+0x214>)
     8be:	619a      	str	r2, [r3, #24]
					port_pin_set_output_level(LED_ERROR, pdTRUE);
					irda_comm_state = IRDA_SLAT_PING;
     8c0:	2201      	movs	r2, #1
     8c2:	4b1c      	ldr	r3, [pc, #112]	; (934 <irda_master_callback_received+0x1d8>)
     8c4:	701a      	strb	r2, [r3, #0]
     8c6:	e02d      	b.n	924 <irda_master_callback_received+0x1c8>
				}
			break;
			case IRDA_SLAT_STAGE_7B:	// r010716-1608: This the code to execute when we get 0xCC. Stage 6
				// If this is correct, this board can be safely assumed to be synchronized
				if ( irda_rx_array[0] == irda_rx_array[1] && irda_rx_array[1] == irda_rx_array[2] &&
     8c8:	4b1f      	ldr	r3, [pc, #124]	; (948 <irda_master_callback_received+0x1ec>)
     8ca:	781a      	ldrb	r2, [r3, #0]
     8cc:	785b      	ldrb	r3, [r3, #1]
     8ce:	4293      	cmp	r3, r2
     8d0:	d11c      	bne.n	90c <irda_master_callback_received+0x1b0>
     8d2:	4b1d      	ldr	r3, [pc, #116]	; (948 <irda_master_callback_received+0x1ec>)
     8d4:	789b      	ldrb	r3, [r3, #2]
     8d6:	4293      	cmp	r3, r2
     8d8:	d118      	bne.n	90c <irda_master_callback_received+0x1b0>
						irda_rx_array[2] == irda_rx_array[3] && irda_rx_array[3] == irda_rx_array[4] &&
     8da:	4b1b      	ldr	r3, [pc, #108]	; (948 <irda_master_callback_received+0x1ec>)
					irda_comm_state = IRDA_SLAT_PING;
				}
			break;
			case IRDA_SLAT_STAGE_7B:	// r010716-1608: This the code to execute when we get 0xCC. Stage 6
				// If this is correct, this board can be safely assumed to be synchronized
				if ( irda_rx_array[0] == irda_rx_array[1] && irda_rx_array[1] == irda_rx_array[2] &&
     8dc:	78db      	ldrb	r3, [r3, #3]
     8de:	4293      	cmp	r3, r2
     8e0:	d114      	bne.n	90c <irda_master_callback_received+0x1b0>
						irda_rx_array[2] == irda_rx_array[3] && irda_rx_array[3] == irda_rx_array[4] &&
     8e2:	4b19      	ldr	r3, [pc, #100]	; (948 <irda_master_callback_received+0x1ec>)
     8e4:	791b      	ldrb	r3, [r3, #4]
     8e6:	4293      	cmp	r3, r2
     8e8:	d110      	bne.n	90c <irda_master_callback_received+0x1b0>
     8ea:	2aee      	cmp	r2, #238	; 0xee
     8ec:	d10e      	bne.n	90c <irda_master_callback_received+0x1b0>
						irda_rx_array[0] == 0xEE )
				{
					irda_comm_state = IRDA_SLAT_PING;	// Change state to send first response
     8ee:	2201      	movs	r2, #1
     8f0:	4b10      	ldr	r3, [pc, #64]	; (934 <irda_master_callback_received+0x1d8>)
     8f2:	701a      	strb	r2, [r3, #0]
					// The slat card has been synched at this point.
					//port_pin_set_output_level(LED_BUSY, pdTRUE);
				
					// Resetting the timer
					xTimerResetFromISR ( timer_IrDA_Ping, 0 );
     8f4:	4b1f      	ldr	r3, [pc, #124]	; (974 <irda_master_callback_received+0x218>)
     8f6:	681c      	ldr	r4, [r3, #0]
     8f8:	4b10      	ldr	r3, [pc, #64]	; (93c <irda_master_callback_received+0x1e0>)
     8fa:	4798      	blx	r3
     8fc:	1c02      	adds	r2, r0, #0
     8fe:	2300      	movs	r3, #0
     900:	9300      	str	r3, [sp, #0]
     902:	1c20      	adds	r0, r4, #0
     904:	2107      	movs	r1, #7
     906:	4c1c      	ldr	r4, [pc, #112]	; (978 <irda_master_callback_received+0x21c>)
     908:	47a0      	blx	r4
     90a:	e00b      	b.n	924 <irda_master_callback_received+0x1c8>
				} else {
					vTracePrintF(event_channel, "Wrong Data!");
     90c:	4b12      	ldr	r3, [pc, #72]	; (958 <irda_master_callback_received+0x1fc>)
     90e:	8818      	ldrh	r0, [r3, #0]
     910:	4916      	ldr	r1, [pc, #88]	; (96c <irda_master_callback_received+0x210>)
     912:	4b13      	ldr	r3, [pc, #76]	; (960 <irda_master_callback_received+0x204>)
     914:	4798      	blx	r3
     916:	2280      	movs	r2, #128	; 0x80
     918:	0492      	lsls	r2, r2, #18
     91a:	4b15      	ldr	r3, [pc, #84]	; (970 <irda_master_callback_received+0x214>)
     91c:	619a      	str	r2, [r3, #24]
					port_pin_set_output_level(LED_ERROR, pdTRUE);
					irda_comm_state = IRDA_SLAT_PING;
     91e:	2201      	movs	r2, #1
     920:	4b04      	ldr	r3, [pc, #16]	; (934 <irda_master_callback_received+0x1d8>)
     922:	701a      	strb	r2, [r3, #0]
				}
			break;
		}	
	}
}
     924:	b002      	add	sp, #8
     926:	bd10      	pop	{r4, pc}
     928:	20000480 	.word	0x20000480
     92c:	200016c4 	.word	0x200016c4
     930:	fffdffff 	.word	0xfffdffff
     934:	2000168c 	.word	0x2000168c
     938:	20000000 	.word	0x20000000
     93c:	00003c39 	.word	0x00003c39
     940:	20001700 	.word	0x20001700
     944:	20001704 	.word	0x20001704
     948:	20000464 	.word	0x20000464
     94c:	0000260d 	.word	0x0000260d
     950:	200016fc 	.word	0x200016fc
     954:	00003af5 	.word	0x00003af5
     958:	20001684 	.word	0x20001684
     95c:	0000585c 	.word	0x0000585c
     960:	00002a99 	.word	0x00002a99
     964:	e000ed04 	.word	0xe000ed04
     968:	00005868 	.word	0x00005868
     96c:	00005884 	.word	0x00005884
     970:	41004400 	.word	0x41004400
     974:	200016f8 	.word	0x200016f8
     978:	00004599 	.word	0x00004599

0000097c <irda_master_callback_transmitted>:
// IrDA Tx Callback Function
static void irda_master_callback_transmitted(const struct usart_module *const module) {
     97c:	b510      	push	{r4, lr}
     97e:	b082      	sub	sp, #8
	// Update post r010716-1608
		// ** In this update, the machine state is changed so that we can continue receiving data
		// Change::: IRDA_SLAT_PING to IRDA_SLAT_FIRST_RESPONSE
		// ** In this update, we also queue the Rx job for 0xCC
	
	switch ( irda_comm_state ) {
     980:	4b27      	ldr	r3, [pc, #156]	; (a20 <irda_master_callback_transmitted+0xa4>)
     982:	781b      	ldrb	r3, [r3, #0]
     984:	2b02      	cmp	r3, #2
     986:	d002      	beq.n	98e <irda_master_callback_transmitted+0x12>
     988:	2b05      	cmp	r3, #5
     98a:	d024      	beq.n	9d6 <irda_master_callback_transmitted+0x5a>
     98c:	e046      	b.n	a1c <irda_master_callback_transmitted+0xa0>
		case IRDA_SLAT_FIRST:	// This is the case where the first Response has been sent
			// r010716-1608: Change the machine state accordingly
			irda_comm_state = IRDA_SLAT_FIRST_RESPONSE;	// Go back to the First Response mode
     98e:	2203      	movs	r2, #3
     990:	4b23      	ldr	r3, [pc, #140]	; (a20 <irda_master_callback_transmitted+0xa4>)
     992:	701a      	strb	r2, [r3, #0]
			
			
			
				// Make sure to reset the timer
			xTimerResetFromISR ( timer_IrDA_Ping, 0 );
     994:	4b23      	ldr	r3, [pc, #140]	; (a24 <irda_master_callback_transmitted+0xa8>)
     996:	681c      	ldr	r4, [r3, #0]
     998:	4b23      	ldr	r3, [pc, #140]	; (a28 <irda_master_callback_transmitted+0xac>)
     99a:	4798      	blx	r3
     99c:	1c02      	adds	r2, r0, #0
     99e:	2300      	movs	r3, #0
     9a0:	9300      	str	r3, [sp, #0]
     9a2:	1c20      	adds	r0, r4, #0
     9a4:	2107      	movs	r1, #7
     9a6:	4c21      	ldr	r4, [pc, #132]	; (a2c <irda_master_callback_transmitted+0xb0>)
     9a8:	47a0      	blx	r4
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     9aa:	4b21      	ldr	r3, [pc, #132]	; (a30 <irda_master_callback_transmitted+0xb4>)
     9ac:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     9ae:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     9b0:	2a00      	cmp	r2, #0
     9b2:	d1fc      	bne.n	9ae <irda_master_callback_transmitted+0x32>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
     9b4:	6859      	ldr	r1, [r3, #4]
     9b6:	2280      	movs	r2, #128	; 0x80
     9b8:	0292      	lsls	r2, r2, #10
     9ba:	430a      	orrs	r2, r1
     9bc:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
     9be:	2101      	movs	r1, #1
     9c0:	4a1b      	ldr	r2, [pc, #108]	; (a30 <irda_master_callback_transmitted+0xb4>)
     9c2:	7191      	strb	r1, [r2, #6]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     9c4:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     9c6:	2a00      	cmp	r2, #0
     9c8:	d1fc      	bne.n	9c4 <irda_master_callback_transmitted+0x48>
			
			// r010716-1608: Request the 0xCC data reception right away
			usart_enable_transceiver( &irda_master, USART_TRANSCEIVER_RX );	// Enable Receiving Transceiver
			
			
			usart_read_buffer_job( &irda_master, irda_rx_array, 5 );	// Try to get the 3-Byte ping
     9ca:	4819      	ldr	r0, [pc, #100]	; (a30 <irda_master_callback_transmitted+0xb4>)
     9cc:	4919      	ldr	r1, [pc, #100]	; (a34 <irda_master_callback_transmitted+0xb8>)
     9ce:	2205      	movs	r2, #5
     9d0:	4b19      	ldr	r3, [pc, #100]	; (a38 <irda_master_callback_transmitted+0xbc>)
     9d2:	4798      	blx	r3
				// We should switch context so the ISR returns to a different task.
				// NOTE:  How this is done depends on the port you are using.  Check
				// the documentation and examples for your port.
			//	portYIELD_FROM_ISR(xYieldRequired);
			//}
		break;
     9d4:	e022      	b.n	a1c <irda_master_callback_transmitted+0xa0>
		case IRDA_SLAT_STAGE_7A:
			// Post: r010716-1818: Change the machine state accordingly
			irda_comm_state = IRDA_SLAT_STAGE_7B;	// Go back to the First Response mode
     9d6:	2206      	movs	r2, #6
     9d8:	4b11      	ldr	r3, [pc, #68]	; (a20 <irda_master_callback_transmitted+0xa4>)
     9da:	701a      	strb	r2, [r3, #0]
			
			
			
			// Make sure to reset the timer
			xTimerResetFromISR ( timer_IrDA_Ping, 0 );
     9dc:	4b11      	ldr	r3, [pc, #68]	; (a24 <irda_master_callback_transmitted+0xa8>)
     9de:	681c      	ldr	r4, [r3, #0]
     9e0:	4b11      	ldr	r3, [pc, #68]	; (a28 <irda_master_callback_transmitted+0xac>)
     9e2:	4798      	blx	r3
     9e4:	1c02      	adds	r2, r0, #0
     9e6:	2300      	movs	r3, #0
     9e8:	9300      	str	r3, [sp, #0]
     9ea:	1c20      	adds	r0, r4, #0
     9ec:	2107      	movs	r1, #7
     9ee:	4c0f      	ldr	r4, [pc, #60]	; (a2c <irda_master_callback_transmitted+0xb0>)
     9f0:	47a0      	blx	r4
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     9f2:	4b0f      	ldr	r3, [pc, #60]	; (a30 <irda_master_callback_transmitted+0xb4>)
     9f4:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     9f6:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     9f8:	2a00      	cmp	r2, #0
     9fa:	d1fc      	bne.n	9f6 <irda_master_callback_transmitted+0x7a>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
     9fc:	6859      	ldr	r1, [r3, #4]
     9fe:	2280      	movs	r2, #128	; 0x80
     a00:	0292      	lsls	r2, r2, #10
     a02:	430a      	orrs	r2, r1
     a04:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
     a06:	2101      	movs	r1, #1
     a08:	4a09      	ldr	r2, [pc, #36]	; (a30 <irda_master_callback_transmitted+0xb4>)
     a0a:	7191      	strb	r1, [r2, #6]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     a0c:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     a0e:	2a00      	cmp	r2, #0
     a10:	d1fc      	bne.n	a0c <irda_master_callback_transmitted+0x90>
			
			
			// Post: r010716-1818: Request the 0xCC data reception right away
			usart_enable_transceiver( &irda_master, USART_TRANSCEIVER_RX );	// Enable Receiving Transceiver
			usart_read_buffer_job( &irda_master, irda_rx_array, 5 );	// Try to get the 3-Byte ping
     a12:	4807      	ldr	r0, [pc, #28]	; (a30 <irda_master_callback_transmitted+0xb4>)
     a14:	4907      	ldr	r1, [pc, #28]	; (a34 <irda_master_callback_transmitted+0xb8>)
     a16:	2205      	movs	r2, #5
     a18:	4b07      	ldr	r3, [pc, #28]	; (a38 <irda_master_callback_transmitted+0xbc>)
     a1a:	4798      	blx	r3
		break;
	}
}
     a1c:	b002      	add	sp, #8
     a1e:	bd10      	pop	{r4, pc}
     a20:	2000168c 	.word	0x2000168c
     a24:	200016f8 	.word	0x200016f8
     a28:	00003c39 	.word	0x00003c39
     a2c:	00004599 	.word	0x00004599
     a30:	200016c4 	.word	0x200016c4
     a34:	20000464 	.word	0x20000464
     a38:	00000f89 	.word	0x00000f89

00000a3c <bastian_IrDA_configuration>:
static void irda_master_callback_received(const struct usart_module *const module);
static void irda_master_callback_transmitted(const struct usart_module *const module);

//////////////////////////////////////////////////////////////////////////
// IrDA Port COnfiguration
void bastian_IrDA_configuration (void){
     a3c:	b570      	push	{r4, r5, r6, lr}
     a3e:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     a40:	2380      	movs	r3, #128	; 0x80
     a42:	05db      	lsls	r3, r3, #23
     a44:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     a46:	2300      	movs	r3, #0
     a48:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
	config->stopbits         = USART_STOPBITS_1;
     a4a:	2200      	movs	r2, #0
     a4c:	4668      	mov	r0, sp
     a4e:	7283      	strb	r3, [r0, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     a50:	72c3      	strb	r3, [r0, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     a52:	2401      	movs	r4, #1
     a54:	2124      	movs	r1, #36	; 0x24
     a56:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
     a58:	2125      	movs	r1, #37	; 0x25
     a5a:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
     a5c:	2126      	movs	r1, #38	; 0x26
     a5e:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
     a60:	2127      	movs	r1, #39	; 0x27
     a62:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
     a64:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     a66:	212c      	movs	r1, #44	; 0x2c
     a68:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
     a6a:	212d      	movs	r1, #45	; 0x2d
     a6c:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     a6e:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     a70:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     a72:	2100      	movs	r1, #0
     a74:	76c1      	strb	r1, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     a76:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     a78:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
     a7a:	2113      	movs	r1, #19
     a7c:	7681      	strb	r1, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     a7e:	7742      	strb	r2, [r0, #29]
	usart_get_config_defaults(&irda_conf);
	
	// Port Configuration
	irda_conf.transfer_mode = USART_TRANSFER_ASYNCHRONOUSLY;	// Asynchronous Communication Mode
	irda_conf.generator_source = GCLK_GENERATOR_0;				// Use the Generic Clock 0 as source
	irda_conf.baudrate = 115200;								// IrDA Baudrate
     a80:	22e1      	movs	r2, #225	; 0xe1
     a82:	0252      	lsls	r2, r2, #9
     a84:	9208      	str	r2, [sp, #32]
	irda_conf.character_size = USART_CHARACTER_SIZE_8BIT;
	irda_conf.stopbits = USART_STOPBITS_1;
	irda_conf.parity = USART_PARITY_EVEN;
     a86:	8103      	strh	r3, [r0, #8]
	irda_conf.encoding_format_enable = true;	// Enable IrDA Encoding
     a88:	7644      	strb	r4, [r0, #25]
	
	// Pin Multiplexer Settings
	irda_conf.mux_setting = USART_RX_1_TX_0_XCK_1;
     a8a:	2380      	movs	r3, #128	; 0x80
     a8c:	035b      	lsls	r3, r3, #13
     a8e:	9303      	str	r3, [sp, #12]
	irda_conf.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
     a90:	4b19      	ldr	r3, [pc, #100]	; (af8 <bastian_IrDA_configuration+0xbc>)
     a92:	930c      	str	r3, [sp, #48]	; 0x30
	irda_conf.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
     a94:	4b19      	ldr	r3, [pc, #100]	; (afc <bastian_IrDA_configuration+0xc0>)
     a96:	930d      	str	r3, [sp, #52]	; 0x34
	irda_conf.pinmux_pad2 = PINMUX_UNUSED;
     a98:	2301      	movs	r3, #1
     a9a:	425b      	negs	r3, r3
     a9c:	930e      	str	r3, [sp, #56]	; 0x38
	irda_conf.pinmux_pad3 = PINMUX_UNUSED;
     a9e:	930f      	str	r3, [sp, #60]	; 0x3c

	// Initialize the previous settings
	usart_init((struct usart_module*) &irda_master, SERCOM3, &irda_conf);
     aa0:	4e17      	ldr	r6, [pc, #92]	; (b00 <bastian_IrDA_configuration+0xc4>)
     aa2:	1c30      	adds	r0, r6, #0
     aa4:	4917      	ldr	r1, [pc, #92]	; (b04 <bastian_IrDA_configuration+0xc8>)
     aa6:	466a      	mov	r2, sp
     aa8:	4b17      	ldr	r3, [pc, #92]	; (b08 <bastian_IrDA_configuration+0xcc>)
     aaa:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     aac:	6835      	ldr	r5, [r6, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     aae:	1c28      	adds	r0, r5, #0
     ab0:	4b16      	ldr	r3, [pc, #88]	; (b0c <bastian_IrDA_configuration+0xd0>)
     ab2:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     ab4:	231f      	movs	r3, #31
     ab6:	4018      	ands	r0, r3
     ab8:	4084      	lsls	r4, r0
     aba:	4b15      	ldr	r3, [pc, #84]	; (b10 <bastian_IrDA_configuration+0xd4>)
     abc:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     abe:	6832      	ldr	r2, [r6, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     ac0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     ac2:	2b00      	cmp	r3, #0
     ac4:	d1fc      	bne.n	ac0 <bastian_IrDA_configuration+0x84>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     ac6:	682a      	ldr	r2, [r5, #0]
     ac8:	2302      	movs	r3, #2
     aca:	4313      	orrs	r3, r2
     acc:	602b      	str	r3, [r5, #0]

	// Enable the module
	usart_enable((struct usart_module*) &irda_master);

	// ******** Callback setup
	usart_register_callback((struct usart_module*) &irda_master, (usart_callback_t)irda_master_callback_received, USART_CALLBACK_BUFFER_RECEIVED);
     ace:	4c0c      	ldr	r4, [pc, #48]	; (b00 <bastian_IrDA_configuration+0xc4>)
     ad0:	1c20      	adds	r0, r4, #0
     ad2:	4910      	ldr	r1, [pc, #64]	; (b14 <bastian_IrDA_configuration+0xd8>)
     ad4:	2201      	movs	r2, #1
     ad6:	4e10      	ldr	r6, [pc, #64]	; (b18 <bastian_IrDA_configuration+0xdc>)
     ad8:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     ada:	2531      	movs	r5, #49	; 0x31
     adc:	5d62      	ldrb	r2, [r4, r5]
     ade:	2302      	movs	r3, #2
     ae0:	4313      	orrs	r3, r2
     ae2:	5563      	strb	r3, [r4, r5]
	usart_enable_callback((struct usart_module*) &irda_master, USART_CALLBACK_BUFFER_RECEIVED);

	usart_register_callback((struct usart_module*) &irda_master, (usart_callback_t)irda_master_callback_transmitted, USART_CALLBACK_BUFFER_TRANSMITTED);
     ae4:	1c20      	adds	r0, r4, #0
     ae6:	490d      	ldr	r1, [pc, #52]	; (b1c <bastian_IrDA_configuration+0xe0>)
     ae8:	2200      	movs	r2, #0
     aea:	47b0      	blx	r6
     aec:	5d62      	ldrb	r2, [r4, r5]
     aee:	2301      	movs	r3, #1
     af0:	4313      	orrs	r3, r2
     af2:	5563      	strb	r3, [r4, r5]
	usart_enable_callback((struct usart_module*) &irda_master, USART_CALLBACK_BUFFER_TRANSMITTED);
}
     af4:	b010      	add	sp, #64	; 0x40
     af6:	bd70      	pop	{r4, r5, r6, pc}
     af8:	00160002 	.word	0x00160002
     afc:	00170002 	.word	0x00170002
     b00:	200016c4 	.word	0x200016c4
     b04:	42001400 	.word	0x42001400
     b08:	00000bcd 	.word	0x00000bcd
     b0c:	00000b61 	.word	0x00000b61
     b10:	e000e100 	.word	0xe000e100
     b14:	0000075d 	.word	0x0000075d
     b18:	00000f51 	.word	0x00000f51
     b1c:	0000097d 	.word	0x0000097d

00000b20 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     b20:	4770      	bx	lr
     b22:	46c0      	nop			; (mov r8, r8)

00000b24 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     b24:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     b26:	4b0b      	ldr	r3, [pc, #44]	; (b54 <_sercom_set_handler+0x30>)
     b28:	781b      	ldrb	r3, [r3, #0]
     b2a:	2b00      	cmp	r3, #0
     b2c:	d10d      	bne.n	b4a <_sercom_set_handler+0x26>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     b2e:	4b09      	ldr	r3, [pc, #36]	; (b54 <_sercom_set_handler+0x30>)
     b30:	4d09      	ldr	r5, [pc, #36]	; (b58 <_sercom_set_handler+0x34>)
     b32:	605d      	str	r5, [r3, #4]
			_sercom_instances[i] = NULL;
     b34:	4a09      	ldr	r2, [pc, #36]	; (b5c <_sercom_set_handler+0x38>)
     b36:	2400      	movs	r4, #0
     b38:	6014      	str	r4, [r2, #0]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     b3a:	609d      	str	r5, [r3, #8]
			_sercom_instances[i] = NULL;
     b3c:	6054      	str	r4, [r2, #4]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     b3e:	60dd      	str	r5, [r3, #12]
			_sercom_instances[i] = NULL;
     b40:	6094      	str	r4, [r2, #8]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     b42:	611d      	str	r5, [r3, #16]
			_sercom_instances[i] = NULL;
     b44:	60d4      	str	r4, [r2, #12]
		}

		_handler_table_initialized = true;
     b46:	2201      	movs	r2, #1
     b48:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     b4a:	0080      	lsls	r0, r0, #2
     b4c:	4b01      	ldr	r3, [pc, #4]	; (b54 <_sercom_set_handler+0x30>)
     b4e:	1818      	adds	r0, r3, r0
     b50:	6041      	str	r1, [r0, #4]
}
     b52:	bd30      	pop	{r4, r5, pc}
     b54:	20000490 	.word	0x20000490
     b58:	00000b21 	.word	0x00000b21
     b5c:	20001708 	.word	0x20001708

00000b60 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     b60:	b530      	push	{r4, r5, lr}
     b62:	b083      	sub	sp, #12
     b64:	1c05      	adds	r5, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     b66:	ac01      	add	r4, sp, #4
     b68:	1c20      	adds	r0, r4, #0
     b6a:	4905      	ldr	r1, [pc, #20]	; (b80 <_sercom_get_interrupt_vector+0x20>)
     b6c:	2204      	movs	r2, #4
     b6e:	4b05      	ldr	r3, [pc, #20]	; (b84 <_sercom_get_interrupt_vector+0x24>)
     b70:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     b72:	1c28      	adds	r0, r5, #0
     b74:	4b04      	ldr	r3, [pc, #16]	; (b88 <_sercom_get_interrupt_vector+0x28>)
     b76:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     b78:	5620      	ldrsb	r0, [r4, r0]
}
     b7a:	b003      	add	sp, #12
     b7c:	bd30      	pop	{r4, r5, pc}
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	00005890 	.word	0x00005890
     b84:	000054bd 	.word	0x000054bd
     b88:	00000719 	.word	0x00000719

00000b8c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     b8c:	b508      	push	{r3, lr}
     b8e:	4b02      	ldr	r3, [pc, #8]	; (b98 <SERCOM0_Handler+0xc>)
     b90:	685b      	ldr	r3, [r3, #4]
     b92:	2000      	movs	r0, #0
     b94:	4798      	blx	r3
     b96:	bd08      	pop	{r3, pc}
     b98:	20000490 	.word	0x20000490

00000b9c <SERCOM1_Handler>:
     b9c:	b508      	push	{r3, lr}
     b9e:	4b02      	ldr	r3, [pc, #8]	; (ba8 <SERCOM1_Handler+0xc>)
     ba0:	689b      	ldr	r3, [r3, #8]
     ba2:	2001      	movs	r0, #1
     ba4:	4798      	blx	r3
     ba6:	bd08      	pop	{r3, pc}
     ba8:	20000490 	.word	0x20000490

00000bac <SERCOM2_Handler>:
     bac:	b508      	push	{r3, lr}
     bae:	4b02      	ldr	r3, [pc, #8]	; (bb8 <SERCOM2_Handler+0xc>)
     bb0:	68db      	ldr	r3, [r3, #12]
     bb2:	2002      	movs	r0, #2
     bb4:	4798      	blx	r3
     bb6:	bd08      	pop	{r3, pc}
     bb8:	20000490 	.word	0x20000490

00000bbc <SERCOM3_Handler>:
     bbc:	b508      	push	{r3, lr}
     bbe:	4b02      	ldr	r3, [pc, #8]	; (bc8 <SERCOM3_Handler+0xc>)
     bc0:	691b      	ldr	r3, [r3, #16]
     bc2:	2003      	movs	r0, #3
     bc4:	4798      	blx	r3
     bc6:	bd08      	pop	{r3, pc}
     bc8:	20000490 	.word	0x20000490

00000bcc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
     bce:	465f      	mov	r7, fp
     bd0:	4656      	mov	r6, sl
     bd2:	464d      	mov	r5, r9
     bd4:	4644      	mov	r4, r8
     bd6:	b4f0      	push	{r4, r5, r6, r7}
     bd8:	b093      	sub	sp, #76	; 0x4c
     bda:	1c05      	adds	r5, r0, #0
     bdc:	1c0c      	adds	r4, r1, #0
     bde:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     be0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     be2:	1c08      	adds	r0, r1, #0
     be4:	4ba9      	ldr	r3, [pc, #676]	; (e8c <usart_init+0x2c0>)
     be6:	4798      	blx	r3
     be8:	1c02      	adds	r2, r0, #0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     bea:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     bec:	2005      	movs	r0, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     bee:	07d9      	lsls	r1, r3, #31
     bf0:	d500      	bpl.n	bf4 <usart_init+0x28>
     bf2:	e143      	b.n	e7c <usart_init+0x2b0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     bf4:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     bf6:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     bf8:	079f      	lsls	r7, r3, #30
     bfa:	d500      	bpl.n	bfe <usart_init+0x32>
     bfc:	e13e      	b.n	e7c <usart_init+0x2b0>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     bfe:	4ba4      	ldr	r3, [pc, #656]	; (e90 <usart_init+0x2c4>)
     c00:	6a18      	ldr	r0, [r3, #32]
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     c02:	1c91      	adds	r1, r2, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     c04:	2701      	movs	r7, #1
     c06:	408f      	lsls	r7, r1
     c08:	1c39      	adds	r1, r7, #0
     c0a:	4301      	orrs	r1, r0
     c0c:	6219      	str	r1, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     c0e:	a911      	add	r1, sp, #68	; 0x44
     c10:	272d      	movs	r7, #45	; 0x2d
     c12:	5df3      	ldrb	r3, [r6, r7]
     c14:	700b      	strb	r3, [r1, #0]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     c16:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     c18:	b2d2      	uxtb	r2, r2
     c1a:	4690      	mov	r8, r2
     c1c:	1c10      	adds	r0, r2, #0
     c1e:	4b9d      	ldr	r3, [pc, #628]	; (e94 <usart_init+0x2c8>)
     c20:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     c22:	4640      	mov	r0, r8
     c24:	4b9c      	ldr	r3, [pc, #624]	; (e98 <usart_init+0x2cc>)
     c26:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     c28:	5df0      	ldrb	r0, [r6, r7]
     c2a:	2100      	movs	r1, #0
     c2c:	4b9b      	ldr	r3, [pc, #620]	; (e9c <usart_init+0x2d0>)
     c2e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     c30:	7af3      	ldrb	r3, [r6, #11]
     c32:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     c34:	2324      	movs	r3, #36	; 0x24
     c36:	5cf3      	ldrb	r3, [r6, r3]
     c38:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     c3a:	2325      	movs	r3, #37	; 0x25
     c3c:	5cf3      	ldrb	r3, [r6, r3]
     c3e:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     c40:	7ef3      	ldrb	r3, [r6, #27]
     c42:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     c44:	7f33      	ldrb	r3, [r6, #28]
     c46:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     c48:	6829      	ldr	r1, [r5, #0]
     c4a:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     c4c:	1c08      	adds	r0, r1, #0
     c4e:	4b8f      	ldr	r3, [pc, #572]	; (e8c <usart_init+0x2c0>)
     c50:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     c52:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     c54:	2200      	movs	r2, #0
     c56:	466b      	mov	r3, sp
     c58:	85da      	strh	r2, [r3, #46]	; 0x2e

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     c5a:	8a32      	ldrh	r2, [r6, #16]
     c5c:	9203      	str	r2, [sp, #12]
     c5e:	2380      	movs	r3, #128	; 0x80
     c60:	01db      	lsls	r3, r3, #7
     c62:	429a      	cmp	r2, r3
     c64:	d021      	beq.n	caa <usart_init+0xde>
     c66:	2380      	movs	r3, #128	; 0x80
     c68:	01db      	lsls	r3, r3, #7
     c6a:	429a      	cmp	r2, r3
     c6c:	d804      	bhi.n	c78 <usart_init+0xac>
     c6e:	2380      	movs	r3, #128	; 0x80
     c70:	019b      	lsls	r3, r3, #6
     c72:	429a      	cmp	r2, r3
     c74:	d011      	beq.n	c9a <usart_init+0xce>
     c76:	e008      	b.n	c8a <usart_init+0xbe>
     c78:	23c0      	movs	r3, #192	; 0xc0
     c7a:	01db      	lsls	r3, r3, #7
     c7c:	9f03      	ldr	r7, [sp, #12]
     c7e:	429f      	cmp	r7, r3
     c80:	d00f      	beq.n	ca2 <usart_init+0xd6>
     c82:	2380      	movs	r3, #128	; 0x80
     c84:	021b      	lsls	r3, r3, #8
     c86:	429f      	cmp	r7, r3
     c88:	d003      	beq.n	c92 <usart_init+0xc6>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     c8a:	2710      	movs	r7, #16
     c8c:	9708      	str	r7, [sp, #32]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     c8e:	2700      	movs	r7, #0
     c90:	e00e      	b.n	cb0 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     c92:	2703      	movs	r7, #3
     c94:	9708      	str	r7, [sp, #32]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     c96:	2700      	movs	r7, #0
     c98:	e00a      	b.n	cb0 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     c9a:	2710      	movs	r7, #16
     c9c:	9708      	str	r7, [sp, #32]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     c9e:	2701      	movs	r7, #1
     ca0:	e006      	b.n	cb0 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     ca2:	2708      	movs	r7, #8
     ca4:	9708      	str	r7, [sp, #32]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     ca6:	2701      	movs	r7, #1
     ca8:	e002      	b.n	cb0 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     caa:	2708      	movs	r7, #8
     cac:	9708      	str	r7, [sp, #32]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     cae:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     cb0:	6831      	ldr	r1, [r6, #0]
     cb2:	9104      	str	r1, [sp, #16]
		(uint32_t)config->mux_setting |
     cb4:	68f2      	ldr	r2, [r6, #12]
     cb6:	9205      	str	r2, [sp, #20]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     cb8:	6973      	ldr	r3, [r6, #20]
     cba:	9306      	str	r3, [sp, #24]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     cbc:	7e31      	ldrb	r1, [r6, #24]
     cbe:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     cc0:	2326      	movs	r3, #38	; 0x26
     cc2:	5cf3      	ldrb	r3, [r6, r3]
     cc4:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     cc6:	6872      	ldr	r2, [r6, #4]
     cc8:	4691      	mov	r9, r2
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     cca:	2a00      	cmp	r2, #0
     ccc:	d013      	beq.n	cf6 <usart_init+0x12a>
     cce:	2380      	movs	r3, #128	; 0x80
     cd0:	055b      	lsls	r3, r3, #21
     cd2:	429a      	cmp	r2, r3
     cd4:	d12e      	bne.n	d34 <usart_init+0x168>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     cd6:	2327      	movs	r3, #39	; 0x27
     cd8:	5cf3      	ldrb	r3, [r6, r3]
     cda:	2b00      	cmp	r3, #0
     cdc:	d12e      	bne.n	d3c <usart_init+0x170>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     cde:	6a37      	ldr	r7, [r6, #32]
     ce0:	b2c0      	uxtb	r0, r0
     ce2:	4b6f      	ldr	r3, [pc, #444]	; (ea0 <usart_init+0x2d4>)
     ce4:	4798      	blx	r3
     ce6:	1c01      	adds	r1, r0, #0
     ce8:	1c38      	adds	r0, r7, #0
     cea:	466a      	mov	r2, sp
     cec:	322e      	adds	r2, #46	; 0x2e
     cee:	4b6d      	ldr	r3, [pc, #436]	; (ea4 <usart_init+0x2d8>)
     cf0:	4798      	blx	r3
     cf2:	1c03      	adds	r3, r0, #0
     cf4:	e01f      	b.n	d36 <usart_init+0x16a>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     cf6:	2327      	movs	r3, #39	; 0x27
     cf8:	5cf3      	ldrb	r3, [r6, r3]
     cfa:	2b00      	cmp	r3, #0
     cfc:	d00a      	beq.n	d14 <usart_init+0x148>
				status_code =
     cfe:	9908      	ldr	r1, [sp, #32]
     d00:	9100      	str	r1, [sp, #0]
     d02:	6a30      	ldr	r0, [r6, #32]
     d04:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     d06:	466a      	mov	r2, sp
     d08:	322e      	adds	r2, #46	; 0x2e
     d0a:	1c3b      	adds	r3, r7, #0
     d0c:	4f66      	ldr	r7, [pc, #408]	; (ea8 <usart_init+0x2dc>)
     d0e:	47b8      	blx	r7
     d10:	1c03      	adds	r3, r0, #0
     d12:	e010      	b.n	d36 <usart_init+0x16a>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     d14:	6a31      	ldr	r1, [r6, #32]
     d16:	9109      	str	r1, [sp, #36]	; 0x24
     d18:	b2c0      	uxtb	r0, r0
     d1a:	4b61      	ldr	r3, [pc, #388]	; (ea0 <usart_init+0x2d4>)
     d1c:	4798      	blx	r3
     d1e:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     d20:	9a08      	ldr	r2, [sp, #32]
     d22:	9200      	str	r2, [sp, #0]
     d24:	9809      	ldr	r0, [sp, #36]	; 0x24
     d26:	466a      	mov	r2, sp
     d28:	322e      	adds	r2, #46	; 0x2e
     d2a:	1c3b      	adds	r3, r7, #0
     d2c:	4f5e      	ldr	r7, [pc, #376]	; (ea8 <usart_init+0x2dc>)
     d2e:	47b8      	blx	r7
     d30:	1c03      	adds	r3, r0, #0
     d32:	e000      	b.n	d36 <usart_init+0x16a>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     d34:	2300      	movs	r3, #0
     d36:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     d38:	d000      	beq.n	d3c <usart_init+0x170>
     d3a:	e09f      	b.n	e7c <usart_init+0x2b0>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     d3c:	7e73      	ldrb	r3, [r6, #25]
     d3e:	2b00      	cmp	r3, #0
     d40:	d002      	beq.n	d48 <usart_init+0x17c>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     d42:	7eb3      	ldrb	r3, [r6, #26]
     d44:	4641      	mov	r1, r8
     d46:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     d48:	682a      	ldr	r2, [r5, #0]
     d4a:	9f03      	ldr	r7, [sp, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     d4c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     d4e:	2b00      	cmp	r3, #0
     d50:	d1fc      	bne.n	d4c <usart_init+0x180>
     d52:	9703      	str	r7, [sp, #12]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     d54:	466b      	mov	r3, sp
     d56:	332e      	adds	r3, #46	; 0x2e
     d58:	881b      	ldrh	r3, [r3, #0]
     d5a:	4642      	mov	r2, r8
     d5c:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     d5e:	9b05      	ldr	r3, [sp, #20]
     d60:	9f04      	ldr	r7, [sp, #16]
     d62:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
     d64:	9f06      	ldr	r7, [sp, #24]
     d66:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     d68:	4649      	mov	r1, r9
     d6a:	430b      	orrs	r3, r1
		config->sample_rate |
     d6c:	9f03      	ldr	r7, [sp, #12]
     d6e:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     d70:	4652      	mov	r2, sl
     d72:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     d74:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     d76:	4659      	mov	r1, fp
     d78:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
     d7a:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     d7c:	2327      	movs	r3, #39	; 0x27
     d7e:	5cf3      	ldrb	r3, [r6, r3]
     d80:	2b00      	cmp	r3, #0
     d82:	d101      	bne.n	d88 <usart_init+0x1bc>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     d84:	2304      	movs	r3, #4
     d86:	431f      	orrs	r7, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     d88:	7f31      	ldrb	r1, [r6, #28]
     d8a:	0249      	lsls	r1, r1, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     d8c:	7e73      	ldrb	r3, [r6, #25]
     d8e:	029b      	lsls	r3, r3, #10
     d90:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     d92:	7f73      	ldrb	r3, [r6, #29]
     d94:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     d96:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     d98:	2324      	movs	r3, #36	; 0x24
     d9a:	5cf3      	ldrb	r3, [r6, r3]
     d9c:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     d9e:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     da0:	2325      	movs	r3, #37	; 0x25
     da2:	5cf3      	ldrb	r3, [r6, r3]
     da4:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     da6:	4319      	orrs	r1, r3
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
     da8:	7af3      	ldrb	r3, [r6, #11]
     daa:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     dac:	8933      	ldrh	r3, [r6, #8]
     dae:	2bff      	cmp	r3, #255	; 0xff
     db0:	d004      	beq.n	dbc <usart_init+0x1f0>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     db2:	2280      	movs	r2, #128	; 0x80
     db4:	0452      	lsls	r2, r2, #17
     db6:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     db8:	4319      	orrs	r1, r3
     dba:	e005      	b.n	dc8 <usart_init+0x1fc>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     dbc:	7ef3      	ldrb	r3, [r6, #27]
     dbe:	2b00      	cmp	r3, #0
     dc0:	d002      	beq.n	dc8 <usart_init+0x1fc>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     dc2:	2380      	movs	r3, #128	; 0x80
     dc4:	04db      	lsls	r3, r3, #19
     dc6:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     dc8:	232c      	movs	r3, #44	; 0x2c
     dca:	5cf3      	ldrb	r3, [r6, r3]
     dcc:	2b00      	cmp	r3, #0
     dce:	d103      	bne.n	dd8 <usart_init+0x20c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     dd0:	4b36      	ldr	r3, [pc, #216]	; (eac <usart_init+0x2e0>)
     dd2:	789b      	ldrb	r3, [r3, #2]
     dd4:	079a      	lsls	r2, r3, #30
     dd6:	d501      	bpl.n	ddc <usart_init+0x210>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     dd8:	2380      	movs	r3, #128	; 0x80
     dda:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     ddc:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     dde:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     de0:	2b00      	cmp	r3, #0
     de2:	d1fc      	bne.n	dde <usart_init+0x212>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     de4:	4643      	mov	r3, r8
     de6:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     de8:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     dea:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     dec:	2b00      	cmp	r3, #0
     dee:	d1fc      	bne.n	dea <usart_init+0x21e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     df0:	4641      	mov	r1, r8
     df2:	600f      	str	r7, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     df4:	ab10      	add	r3, sp, #64	; 0x40
     df6:	2280      	movs	r2, #128	; 0x80
     df8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     dfa:	2200      	movs	r2, #0
     dfc:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     dfe:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     e00:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     e02:	6b32      	ldr	r2, [r6, #48]	; 0x30
     e04:	920c      	str	r2, [sp, #48]	; 0x30
     e06:	6b73      	ldr	r3, [r6, #52]	; 0x34
     e08:	930d      	str	r3, [sp, #52]	; 0x34
     e0a:	6bb7      	ldr	r7, [r6, #56]	; 0x38
     e0c:	970e      	str	r7, [sp, #56]	; 0x38
     e0e:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
     e10:	960f      	str	r6, [sp, #60]	; 0x3c
     e12:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     e14:	ae10      	add	r6, sp, #64	; 0x40
     e16:	b2f9      	uxtb	r1, r7
     e18:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     e1a:	aa0c      	add	r2, sp, #48	; 0x30
     e1c:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     e1e:	2800      	cmp	r0, #0
     e20:	d102      	bne.n	e28 <usart_init+0x25c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     e22:	1c20      	adds	r0, r4, #0
     e24:	4a22      	ldr	r2, [pc, #136]	; (eb0 <usart_init+0x2e4>)
     e26:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     e28:	1c43      	adds	r3, r0, #1
     e2a:	d005      	beq.n	e38 <usart_init+0x26c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     e2c:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     e2e:	0c00      	lsrs	r0, r0, #16
     e30:	b2c0      	uxtb	r0, r0
     e32:	1c31      	adds	r1, r6, #0
     e34:	4a1f      	ldr	r2, [pc, #124]	; (eb4 <usart_init+0x2e8>)
     e36:	4790      	blx	r2
     e38:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     e3a:	2f04      	cmp	r7, #4
     e3c:	d1eb      	bne.n	e16 <usart_init+0x24a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     e3e:	2300      	movs	r3, #0
     e40:	60eb      	str	r3, [r5, #12]
     e42:	612b      	str	r3, [r5, #16]
     e44:	616b      	str	r3, [r5, #20]
     e46:	61ab      	str	r3, [r5, #24]
     e48:	61eb      	str	r3, [r5, #28]
     e4a:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     e4c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     e4e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     e50:	2200      	movs	r2, #0
     e52:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     e54:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     e56:	2330      	movs	r3, #48	; 0x30
     e58:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     e5a:	2331      	movs	r3, #49	; 0x31
     e5c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     e5e:	2332      	movs	r3, #50	; 0x32
     e60:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     e62:	2333      	movs	r3, #51	; 0x33
     e64:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     e66:	6828      	ldr	r0, [r5, #0]
     e68:	4b08      	ldr	r3, [pc, #32]	; (e8c <usart_init+0x2c0>)
     e6a:	4798      	blx	r3
     e6c:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     e6e:	4912      	ldr	r1, [pc, #72]	; (eb8 <usart_init+0x2ec>)
     e70:	4b12      	ldr	r3, [pc, #72]	; (ebc <usart_init+0x2f0>)
     e72:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     e74:	00a4      	lsls	r4, r4, #2
     e76:	4b12      	ldr	r3, [pc, #72]	; (ec0 <usart_init+0x2f4>)
     e78:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     e7a:	2000      	movs	r0, #0
}
     e7c:	b013      	add	sp, #76	; 0x4c
     e7e:	bc3c      	pop	{r2, r3, r4, r5}
     e80:	4690      	mov	r8, r2
     e82:	4699      	mov	r9, r3
     e84:	46a2      	mov	sl, r4
     e86:	46ab      	mov	fp, r5
     e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e8a:	46c0      	nop			; (mov r8, r8)
     e8c:	00000719 	.word	0x00000719
     e90:	40000400 	.word	0x40000400
     e94:	000050b5 	.word	0x000050b5
     e98:	00005029 	.word	0x00005029
     e9c:	000005c1 	.word	0x000005c1
     ea0:	000050d1 	.word	0x000050d1
     ea4:	000003e5 	.word	0x000003e5
     ea8:	00000411 	.word	0x00000411
     eac:	41002000 	.word	0x41002000
     eb0:	00000611 	.word	0x00000611
     eb4:	0000524d 	.word	0x0000524d
     eb8:	00000fc9 	.word	0x00000fc9
     ebc:	00000b25 	.word	0x00000b25
     ec0:	20001708 	.word	0x20001708

00000ec4 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ec6:	1c04      	adds	r4, r0, #0
     ec8:	1c0e      	adds	r6, r1, #0
     eca:	1c17      	adds	r7, r2, #0
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     ecc:	6805      	ldr	r5, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     ece:	4b0a      	ldr	r3, [pc, #40]	; (ef8 <_usart_write_buffer+0x34>)
     ed0:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
     ed2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
     ed4:	b29b      	uxth	r3, r3
     ed6:	2b00      	cmp	r3, #0
     ed8:	d003      	beq.n	ee2 <_usart_write_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     eda:	4b08      	ldr	r3, [pc, #32]	; (efc <_usart_write_buffer+0x38>)
     edc:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     ede:	2005      	movs	r0, #5
     ee0:	e009      	b.n	ef6 <_usart_write_buffer+0x32>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
     ee2:	85e7      	strh	r7, [r4, #46]	; 0x2e
     ee4:	4b05      	ldr	r3, [pc, #20]	; (efc <_usart_write_buffer+0x38>)
     ee6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->tx_buffer_ptr              = tx_data;
     ee8:	62a6      	str	r6, [r4, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
     eea:	2205      	movs	r2, #5
     eec:	2333      	movs	r3, #51	; 0x33
     eee:	54e2      	strb	r2, [r4, r3]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
     ef0:	2301      	movs	r3, #1
     ef2:	75ab      	strb	r3, [r5, #22]

	return STATUS_OK;
     ef4:	2000      	movs	r0, #0
}
     ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ef8:	00005135 	.word	0x00005135
     efc:	00005171 	.word	0x00005171

00000f00 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f02:	1c04      	adds	r4, r0, #0
     f04:	1c0e      	adds	r6, r1, #0
     f06:	1c17      	adds	r7, r2, #0
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     f08:	6805      	ldr	r5, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     f0a:	4b0f      	ldr	r3, [pc, #60]	; (f48 <_usart_read_buffer+0x48>)
     f0c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     f0e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     f10:	b29b      	uxth	r3, r3
     f12:	2b00      	cmp	r3, #0
     f14:	d003      	beq.n	f1e <_usart_read_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     f16:	4b0d      	ldr	r3, [pc, #52]	; (f4c <_usart_read_buffer+0x4c>)
     f18:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     f1a:	2005      	movs	r0, #5
     f1c:	e013      	b.n	f46 <_usart_read_buffer+0x46>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
     f1e:	85a7      	strh	r7, [r4, #44]	; 0x2c
     f20:	4b0a      	ldr	r3, [pc, #40]	; (f4c <_usart_read_buffer+0x4c>)
     f22:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->rx_buffer_ptr              = rx_data;
     f24:	6266      	str	r6, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
     f26:	2205      	movs	r2, #5
     f28:	2332      	movs	r3, #50	; 0x32
     f2a:	54e2      	strb	r2, [r4, r3]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     f2c:	2304      	movs	r3, #4
     f2e:	75ab      	strb	r3, [r5, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
     f30:	7a23      	ldrb	r3, [r4, #8]
     f32:	2b00      	cmp	r3, #0
     f34:	d001      	beq.n	f3a <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
     f36:	2320      	movs	r3, #32
     f38:	75ab      	strb	r3, [r5, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
     f3a:	7a63      	ldrb	r3, [r4, #9]
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
     f3c:	2000      	movs	r0, #0
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
     f3e:	2b00      	cmp	r3, #0
     f40:	d001      	beq.n	f46 <_usart_read_buffer+0x46>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
     f42:	2308      	movs	r3, #8
     f44:	75ab      	strb	r3, [r5, #22]
	}
#endif

	return STATUS_OK;
}
     f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f48:	00005135 	.word	0x00005135
     f4c:	00005171 	.word	0x00005171

00000f50 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     f50:	1c93      	adds	r3, r2, #2
     f52:	009b      	lsls	r3, r3, #2
     f54:	18c3      	adds	r3, r0, r3
     f56:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     f58:	2301      	movs	r3, #1
     f5a:	4093      	lsls	r3, r2
     f5c:	1c1a      	adds	r2, r3, #0
     f5e:	2330      	movs	r3, #48	; 0x30
     f60:	5cc1      	ldrb	r1, [r0, r3]
     f62:	430a      	orrs	r2, r1
     f64:	54c2      	strb	r2, [r0, r3]
}
     f66:	4770      	bx	lr

00000f68 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     f68:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     f6a:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
     f6c:	2a00      	cmp	r2, #0
     f6e:	d006      	beq.n	f7e <usart_write_buffer_job+0x16>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
     f70:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     f72:	231c      	movs	r3, #28
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
     f74:	2c00      	cmp	r4, #0
     f76:	d002      	beq.n	f7e <usart_write_buffer_job+0x16>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
     f78:	4b02      	ldr	r3, [pc, #8]	; (f84 <usart_write_buffer_job+0x1c>)
     f7a:	4798      	blx	r3
     f7c:	1c03      	adds	r3, r0, #0
}
     f7e:	1c18      	adds	r0, r3, #0
     f80:	bd10      	pop	{r4, pc}
     f82:	46c0      	nop			; (mov r8, r8)
     f84:	00000ec5 	.word	0x00000ec5

00000f88 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     f88:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     f8a:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
     f8c:	2a00      	cmp	r2, #0
     f8e:	d006      	beq.n	f9e <usart_read_buffer_job+0x16>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     f90:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
     f92:	231c      	movs	r3, #28
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     f94:	2c00      	cmp	r4, #0
     f96:	d002      	beq.n	f9e <usart_read_buffer_job+0x16>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
     f98:	4b02      	ldr	r3, [pc, #8]	; (fa4 <usart_read_buffer_job+0x1c>)
     f9a:	4798      	blx	r3
     f9c:	1c03      	adds	r3, r0, #0
}
     f9e:	1c18      	adds	r0, r3, #0
     fa0:	bd10      	pop	{r4, pc}
     fa2:	46c0      	nop			; (mov r8, r8)
     fa4:	00000f01 	.word	0x00000f01

00000fa8 <usart_abort_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     fa8:	6803      	ldr	r3, [r0, #0]

	switch(transceiver_type) {
     faa:	2900      	cmp	r1, #0
     fac:	d002      	beq.n	fb4 <usart_abort_job+0xc>
     fae:	2901      	cmp	r1, #1
     fb0:	d005      	beq.n	fbe <usart_abort_job+0x16>
     fb2:	e008      	b.n	fc6 <usart_abort_job+0x1e>
		case USART_TRANSCEIVER_RX:
			/* Clear the interrupt flag in order to prevent the receive
			 * complete callback to fire */
			usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
     fb4:	2204      	movs	r2, #4
     fb6:	761a      	strb	r2, [r3, #24]

			/* Clear the software reception buffer */
			module->remaining_rx_buffer_length = 0;
     fb8:	2300      	movs	r3, #0
     fba:	8583      	strh	r3, [r0, #44]	; 0x2c

			break;
     fbc:	e003      	b.n	fc6 <usart_abort_job+0x1e>

		case USART_TRANSCEIVER_TX:
			/* Clear the interrupt flag in order to prevent the receive
			 * complete callback to fire */
			usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
     fbe:	2202      	movs	r2, #2
     fc0:	761a      	strb	r2, [r3, #24]

			/* Clear the software reception buffer */
			module->remaining_tx_buffer_length = 0;
     fc2:	2300      	movs	r3, #0
     fc4:	85c3      	strh	r3, [r0, #46]	; 0x2e

			break;
	}
}
     fc6:	4770      	bx	lr

00000fc8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     fca:	0080      	lsls	r0, r0, #2
     fcc:	4b64      	ldr	r3, [pc, #400]	; (1160 <_usart_interrupt_handler+0x198>)
     fce:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     fd0:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     fd2:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     fd4:	2b00      	cmp	r3, #0
     fd6:	d1fc      	bne.n	fd2 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     fd8:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     fda:	7da6      	ldrb	r6, [r4, #22]
     fdc:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
     fde:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     fe0:	5ceb      	ldrb	r3, [r5, r3]
     fe2:	2230      	movs	r2, #48	; 0x30
     fe4:	5caf      	ldrb	r7, [r5, r2]
     fe6:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     fe8:	07f1      	lsls	r1, r6, #31
     fea:	d520      	bpl.n	102e <_usart_interrupt_handler+0x66>
		if (module->remaining_tx_buffer_length) {
     fec:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     fee:	b29b      	uxth	r3, r3
     ff0:	2b00      	cmp	r3, #0
     ff2:	d01a      	beq.n	102a <_usart_interrupt_handler+0x62>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     ff4:	6aab      	ldr	r3, [r5, #40]	; 0x28
     ff6:	781a      	ldrb	r2, [r3, #0]
     ff8:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     ffa:	1c59      	adds	r1, r3, #1
     ffc:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     ffe:	7969      	ldrb	r1, [r5, #5]
    1000:	2901      	cmp	r1, #1
    1002:	d104      	bne.n	100e <_usart_interrupt_handler+0x46>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1004:	7859      	ldrb	r1, [r3, #1]
    1006:	0209      	lsls	r1, r1, #8
    1008:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    100a:	3302      	adds	r3, #2
    100c:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    100e:	05d3      	lsls	r3, r2, #23
    1010:	0ddb      	lsrs	r3, r3, #23
    1012:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1014:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1016:	3b01      	subs	r3, #1
    1018:	b29b      	uxth	r3, r3
    101a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    101c:	2b00      	cmp	r3, #0
    101e:	d106      	bne.n	102e <_usart_interrupt_handler+0x66>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1020:	2301      	movs	r3, #1
    1022:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1024:	2302      	movs	r3, #2
    1026:	75a3      	strb	r3, [r4, #22]
    1028:	e001      	b.n	102e <_usart_interrupt_handler+0x66>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    102a:	2301      	movs	r3, #1
    102c:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    102e:	07b2      	lsls	r2, r6, #30
    1030:	d509      	bpl.n	1046 <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1032:	2302      	movs	r3, #2
    1034:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1036:	2200      	movs	r2, #0
    1038:	2333      	movs	r3, #51	; 0x33
    103a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    103c:	07fb      	lsls	r3, r7, #31
    103e:	d502      	bpl.n	1046 <_usart_interrupt_handler+0x7e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1040:	1c28      	adds	r0, r5, #0
    1042:	68e9      	ldr	r1, [r5, #12]
    1044:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1046:	0772      	lsls	r2, r6, #29
    1048:	d56a      	bpl.n	1120 <_usart_interrupt_handler+0x158>

		if (module->remaining_rx_buffer_length) {
    104a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    104c:	b29b      	uxth	r3, r3
    104e:	2b00      	cmp	r3, #0
    1050:	d064      	beq.n	111c <_usart_interrupt_handler+0x154>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1052:	8b63      	ldrh	r3, [r4, #26]
    1054:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1056:	0719      	lsls	r1, r3, #28
    1058:	d402      	bmi.n	1060 <_usart_interrupt_handler+0x98>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    105a:	223f      	movs	r2, #63	; 0x3f
    105c:	4013      	ands	r3, r2
    105e:	e001      	b.n	1064 <_usart_interrupt_handler+0x9c>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1060:	2237      	movs	r2, #55	; 0x37
    1062:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1064:	2b00      	cmp	r3, #0
    1066:	d037      	beq.n	10d8 <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1068:	079a      	lsls	r2, r3, #30
    106a:	d507      	bpl.n	107c <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    106c:	221a      	movs	r2, #26
    106e:	2332      	movs	r3, #50	; 0x32
    1070:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    1072:	8b62      	ldrh	r2, [r4, #26]
    1074:	2302      	movs	r3, #2
    1076:	4313      	orrs	r3, r2
    1078:	8363      	strh	r3, [r4, #26]
    107a:	e027      	b.n	10cc <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    107c:	0759      	lsls	r1, r3, #29
    107e:	d507      	bpl.n	1090 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1080:	221e      	movs	r2, #30
    1082:	2332      	movs	r3, #50	; 0x32
    1084:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    1086:	8b62      	ldrh	r2, [r4, #26]
    1088:	2304      	movs	r3, #4
    108a:	4313      	orrs	r3, r2
    108c:	8363      	strh	r3, [r4, #26]
    108e:	e01d      	b.n	10cc <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1090:	07da      	lsls	r2, r3, #31
    1092:	d507      	bpl.n	10a4 <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1094:	2213      	movs	r2, #19
    1096:	2332      	movs	r3, #50	; 0x32
    1098:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    109a:	8b62      	ldrh	r2, [r4, #26]
    109c:	2301      	movs	r3, #1
    109e:	4313      	orrs	r3, r2
    10a0:	8363      	strh	r3, [r4, #26]
    10a2:	e013      	b.n	10cc <_usart_interrupt_handler+0x104>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    10a4:	06d9      	lsls	r1, r3, #27
    10a6:	d507      	bpl.n	10b8 <_usart_interrupt_handler+0xf0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    10a8:	2242      	movs	r2, #66	; 0x42
    10aa:	2332      	movs	r3, #50	; 0x32
    10ac:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    10ae:	8b62      	ldrh	r2, [r4, #26]
    10b0:	2310      	movs	r3, #16
    10b2:	4313      	orrs	r3, r2
    10b4:	8363      	strh	r3, [r4, #26]
    10b6:	e009      	b.n	10cc <_usart_interrupt_handler+0x104>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    10b8:	2220      	movs	r2, #32
    10ba:	421a      	tst	r2, r3
    10bc:	d006      	beq.n	10cc <_usart_interrupt_handler+0x104>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    10be:	2241      	movs	r2, #65	; 0x41
    10c0:	2332      	movs	r3, #50	; 0x32
    10c2:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    10c4:	8b62      	ldrh	r2, [r4, #26]
    10c6:	2320      	movs	r3, #32
    10c8:	4313      	orrs	r3, r2
    10ca:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    10cc:	077a      	lsls	r2, r7, #29
    10ce:	d527      	bpl.n	1120 <_usart_interrupt_handler+0x158>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    10d0:	1c28      	adds	r0, r5, #0
    10d2:	696b      	ldr	r3, [r5, #20]
    10d4:	4798      	blx	r3
    10d6:	e023      	b.n	1120 <_usart_interrupt_handler+0x158>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    10d8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    10da:	05d2      	lsls	r2, r2, #23
    10dc:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    10de:	b2d3      	uxtb	r3, r2
    10e0:	6a69      	ldr	r1, [r5, #36]	; 0x24
    10e2:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    10e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    10e6:	1c59      	adds	r1, r3, #1
    10e8:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    10ea:	7969      	ldrb	r1, [r5, #5]
    10ec:	2901      	cmp	r1, #1
    10ee:	d104      	bne.n	10fa <_usart_interrupt_handler+0x132>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    10f0:	0a12      	lsrs	r2, r2, #8
    10f2:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    10f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    10f6:	3301      	adds	r3, #1
    10f8:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    10fa:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    10fc:	3b01      	subs	r3, #1
    10fe:	b29b      	uxth	r3, r3
    1100:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1102:	2b00      	cmp	r3, #0
    1104:	d10c      	bne.n	1120 <_usart_interrupt_handler+0x158>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1106:	2304      	movs	r3, #4
    1108:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    110a:	2200      	movs	r2, #0
    110c:	2332      	movs	r3, #50	; 0x32
    110e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1110:	07ba      	lsls	r2, r7, #30
    1112:	d505      	bpl.n	1120 <_usart_interrupt_handler+0x158>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1114:	1c28      	adds	r0, r5, #0
    1116:	692b      	ldr	r3, [r5, #16]
    1118:	4798      	blx	r3
    111a:	e001      	b.n	1120 <_usart_interrupt_handler+0x158>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    111c:	2304      	movs	r3, #4
    111e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1120:	06f1      	lsls	r1, r6, #27
    1122:	d507      	bpl.n	1134 <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1124:	2310      	movs	r3, #16
    1126:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1128:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    112a:	06fa      	lsls	r2, r7, #27
    112c:	d502      	bpl.n	1134 <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    112e:	1c28      	adds	r0, r5, #0
    1130:	69eb      	ldr	r3, [r5, #28]
    1132:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1134:	06b1      	lsls	r1, r6, #26
    1136:	d507      	bpl.n	1148 <_usart_interrupt_handler+0x180>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1138:	2320      	movs	r3, #32
    113a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    113c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    113e:	073a      	lsls	r2, r7, #28
    1140:	d502      	bpl.n	1148 <_usart_interrupt_handler+0x180>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1142:	1c28      	adds	r0, r5, #0
    1144:	69ab      	ldr	r3, [r5, #24]
    1146:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1148:	0731      	lsls	r1, r6, #28
    114a:	d507      	bpl.n	115c <_usart_interrupt_handler+0x194>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    114c:	2308      	movs	r3, #8
    114e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1150:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1152:	06ba      	lsls	r2, r7, #26
    1154:	d502      	bpl.n	115c <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1156:	6a2b      	ldr	r3, [r5, #32]
    1158:	1c28      	adds	r0, r5, #0
    115a:	4798      	blx	r3
		}
	}
#endif
}
    115c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    115e:	46c0      	nop			; (mov r8, r8)
    1160:	20001708 	.word	0x20001708

00001164 <vTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., NTask) in trcConfig.h is too small.
 ******************************************************************************/
void vTraceError(const char* msg)
{
    1164:	b510      	push	{r4, lr}
    1166:	1e01      	subs	r1, r0, #0
	TRACE_ASSERT(msg != NULL, "vTraceError: msg == NULL", );
    1168:	d103      	bne.n	1172 <vTraceError+0xe>
    116a:	480f      	ldr	r0, [pc, #60]	; (11a8 <vTraceError+0x44>)
    116c:	f7ff fffa 	bl	1164 <vTraceError>
    1170:	e018      	b.n	11a4 <vTraceError+0x40>
	TRACE_ASSERT(RecorderDataPtr != NULL, "vTraceError: RecorderDataPtr == NULL", );
    1172:	4b0e      	ldr	r3, [pc, #56]	; (11ac <vTraceError+0x48>)
    1174:	681b      	ldr	r3, [r3, #0]
    1176:	2b00      	cmp	r3, #0
    1178:	d103      	bne.n	1182 <vTraceError+0x1e>
    117a:	480d      	ldr	r0, [pc, #52]	; (11b0 <vTraceError+0x4c>)
    117c:	f7ff fff2 	bl	1164 <vTraceError>
    1180:	e010      	b.n	11a4 <vTraceError+0x40>

	/* Stop the recorder. Note: We do not call vTraceStop, since that adds a weird
	and unnecessary dependency to trcUser.c */

	RecorderDataPtr->recorderActive = 0;
    1182:	2200      	movs	r2, #0
    1184:	631a      	str	r2, [r3, #48]	; 0x30

	if (traceErrorMessage == NULL)
    1186:	4a09      	ldr	r2, [pc, #36]	; (11ac <vTraceError+0x48>)
    1188:	6852      	ldr	r2, [r2, #4]
    118a:	2a00      	cmp	r2, #0
    118c:	d10a      	bne.n	11a4 <vTraceError+0x40>
	{
		traceErrorMessage = (char*)msg;
    118e:	4c07      	ldr	r4, [pc, #28]	; (11ac <vTraceError+0x48>)
    1190:	6060      	str	r0, [r4, #4]
		(void)strncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    1192:	4a08      	ldr	r2, [pc, #32]	; (11b4 <vTraceError+0x50>)
    1194:	1898      	adds	r0, r3, r2
    1196:	2250      	movs	r2, #80	; 0x50
    1198:	4b07      	ldr	r3, [pc, #28]	; (11b8 <vTraceError+0x54>)
    119a:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;	 	 
    119c:	6822      	ldr	r2, [r4, #0]
    119e:	2101      	movs	r1, #1
    11a0:	4b06      	ldr	r3, [pc, #24]	; (11bc <vTraceError+0x58>)
    11a2:	50d1      	str	r1, [r2, r3]
	}
	
}
    11a4:	bd10      	pop	{r4, pc}
    11a6:	46c0      	nop			; (mov r8, r8)
    11a8:	000058b0 	.word	0x000058b0
    11ac:	200004ac 	.word	0x200004ac
    11b0:	000058d8 	.word	0x000058d8
    11b4:	000007dc 	.word	0x000007dc
    11b8:	00005695 	.word	0x00005695
    11bc:	000007d4 	.word	0x000007d4

000011c0 <prvTraceInitTraceData>:

RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{		
    11c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11c2:	465f      	mov	r7, fp
    11c4:	4656      	mov	r6, sl
    11c6:	464d      	mov	r5, r9
    11c8:	4644      	mov	r4, r8
    11ca:	b4f0      	push	{r4, r5, r6, r7}
	init_hwtc_count = HWTC_COUNT;
    11cc:	4b48      	ldr	r3, [pc, #288]	; (12f0 <prvTraceInitTraceData+0x130>)
    11ce:	681a      	ldr	r2, [r3, #0]
    11d0:	4b48      	ldr	r3, [pc, #288]	; (12f4 <prvTraceInitTraceData+0x134>)
    11d2:	601a      	str	r2, [r3, #0]
	
#if TRACE_DATA_ALLOCATION == TRACE_DATA_ALLOCATION_STATIC
	RecorderDataPtr = &RecorderData;
    11d4:	4d48      	ldr	r5, [pc, #288]	; (12f8 <prvTraceInitTraceData+0x138>)
    11d6:	4c49      	ldr	r4, [pc, #292]	; (12fc <prvTraceInitTraceData+0x13c>)
    11d8:	602c      	str	r4, [r5, #0]
	{
		vTraceError("No recorder data structure allocated!");
		return;
	}
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
    11da:	23bf      	movs	r3, #191	; 0xbf
    11dc:	015b      	lsls	r3, r3, #5
    11de:	469b      	mov	fp, r3
    11e0:	1c20      	adds	r0, r4, #0
    11e2:	2100      	movs	r1, #0
    11e4:	1c1a      	adds	r2, r3, #0
    11e6:	4b46      	ldr	r3, [pc, #280]	; (1300 <prvTraceInitTraceData+0x140>)
    11e8:	4798      	blx	r3

	RecorderDataPtr->startmarker0 = 0x00;
	RecorderDataPtr->startmarker1 = 0x01;
    11ea:	2101      	movs	r1, #1
    11ec:	468a      	mov	sl, r1
    11ee:	7061      	strb	r1, [r4, #1]
	RecorderDataPtr->startmarker2 = 0x02;
    11f0:	2302      	movs	r3, #2
    11f2:	70a3      	strb	r3, [r4, #2]
	RecorderDataPtr->startmarker3 = 0x03;
    11f4:	2303      	movs	r3, #3
    11f6:	70e3      	strb	r3, [r4, #3]
	RecorderDataPtr->startmarker4 = 0x70;
    11f8:	2370      	movs	r3, #112	; 0x70
    11fa:	7123      	strb	r3, [r4, #4]
	RecorderDataPtr->startmarker5 = 0x71;
    11fc:	2371      	movs	r3, #113	; 0x71
    11fe:	4699      	mov	r9, r3
    1200:	7163      	strb	r3, [r4, #5]
	RecorderDataPtr->startmarker6 = 0x72;
    1202:	2272      	movs	r2, #114	; 0x72
    1204:	4690      	mov	r8, r2
    1206:	71a2      	strb	r2, [r4, #6]
	RecorderDataPtr->startmarker7 = 0x73;
    1208:	2773      	movs	r7, #115	; 0x73
    120a:	71e7      	strb	r7, [r4, #7]
	RecorderDataPtr->startmarker8 = 0xF0;
    120c:	23f0      	movs	r3, #240	; 0xf0
    120e:	7223      	strb	r3, [r4, #8]
	RecorderDataPtr->startmarker9 = 0xF1;
    1210:	26f1      	movs	r6, #241	; 0xf1
    1212:	7266      	strb	r6, [r4, #9]
	RecorderDataPtr->startmarker10 = 0xF2;
    1214:	210e      	movs	r1, #14
    1216:	4249      	negs	r1, r1
    1218:	72a1      	strb	r1, [r4, #10]
	RecorderDataPtr->startmarker11 = 0xF3;
    121a:	220d      	movs	r2, #13
    121c:	4252      	negs	r2, r2
    121e:	72e2      	strb	r2, [r4, #11]

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
    1220:	4b38      	ldr	r3, [pc, #224]	; (1304 <prvTraceInitTraceData+0x144>)
    1222:	81a3      	strh	r3, [r4, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
    1224:	2304      	movs	r3, #4
    1226:	73a3      	strb	r3, [r4, #14]
	RecorderDataPtr->irq_priority_order = IRQ_PRIORITY_ORDER;
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
    1228:	465b      	mov	r3, fp
    122a:	6123      	str	r3, [r4, #16]

	RecorderDataPtr->maxEvents = EVENT_BUFFER_SIZE;
    122c:	23fa      	movs	r3, #250	; 0xfa
    122e:	009b      	lsls	r3, r3, #2
    1230:	61a3      	str	r3, [r4, #24]

	RecorderDataPtr->debugMarker0 = 0xF0F0F0F0;
    1232:	4b35      	ldr	r3, [pc, #212]	; (1308 <prvTraceInitTraceData+0x148>)
    1234:	6563      	str	r3, [r4, #84]	; 0x54

	RecorderDataPtr->isUsing16bitHandles = USE_16BIT_OBJECT_HANDLES;

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
    1236:	4b35      	ldr	r3, [pc, #212]	; (130c <prvTraceInitTraceData+0x14c>)
    1238:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = 0xF1F1F1F1;
    123a:	6828      	ldr	r0, [r5, #0]
    123c:	4a34      	ldr	r2, [pc, #208]	; (1310 <prvTraceInitTraceData+0x150>)
    123e:	4b35      	ldr	r3, [pc, #212]	; (1314 <prvTraceInitTraceData+0x154>)
    1240:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.symTableSize = SYMBOL_TABLE_SIZE;
    1242:	22c8      	movs	r2, #200	; 0xc8
    1244:	0092      	lsls	r2, r2, #2
    1246:	2385      	movs	r3, #133	; 0x85
    1248:	00db      	lsls	r3, r3, #3
    124a:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
    124c:	4b32      	ldr	r3, [pc, #200]	; (1318 <prvTraceInitTraceData+0x158>)
    124e:	4651      	mov	r1, sl
    1250:	50c1      	str	r1, [r0, r3]
#if (INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
    1252:	22fe      	movs	r2, #254	; 0xfe
    1254:	0592      	lsls	r2, r2, #22
    1256:	23fa      	movs	r3, #250	; 0xfa
    1258:	00db      	lsls	r3, r3, #3
    125a:	50c2      	str	r2, [r0, r3]
#endif
	RecorderDataPtr->debugMarker2 = 0xF2F2F2F2;
    125c:	4a2f      	ldr	r2, [pc, #188]	; (131c <prvTraceInitTraceData+0x15c>)
    125e:	23fb      	movs	r3, #251	; 0xfb
    1260:	00db      	lsls	r3, r3, #3
    1262:	50c2      	str	r2, [r0, r3]
	(void)strncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
    1264:	4a2e      	ldr	r2, [pc, #184]	; (1320 <prvTraceInitTraceData+0x160>)
    1266:	1880      	adds	r0, r0, r2
    1268:	492e      	ldr	r1, [pc, #184]	; (1324 <prvTraceInitTraceData+0x164>)
    126a:	2250      	movs	r2, #80	; 0x50
    126c:	4b2e      	ldr	r3, [pc, #184]	; (1328 <prvTraceInitTraceData+0x168>)
    126e:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = 0xF3F3F3F3;
    1270:	682b      	ldr	r3, [r5, #0]
    1272:	492e      	ldr	r1, [pc, #184]	; (132c <prvTraceInitTraceData+0x16c>)
    1274:	4a2e      	ldr	r2, [pc, #184]	; (1330 <prvTraceInitTraceData+0x170>)
    1276:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
    1278:	210a      	movs	r1, #10
    127a:	4a2e      	ldr	r2, [pc, #184]	; (1334 <prvTraceInitTraceData+0x174>)
    127c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
    127e:	210b      	movs	r1, #11
    1280:	4a2d      	ldr	r2, [pc, #180]	; (1338 <prvTraceInitTraceData+0x178>)
    1282:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
    1284:	210c      	movs	r1, #12
    1286:	4a2d      	ldr	r2, [pc, #180]	; (133c <prvTraceInitTraceData+0x17c>)
    1288:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
    128a:	210d      	movs	r1, #13
    128c:	4a2c      	ldr	r2, [pc, #176]	; (1340 <prvTraceInitTraceData+0x180>)
    128e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
    1290:	4a2c      	ldr	r2, [pc, #176]	; (1344 <prvTraceInitTraceData+0x184>)
    1292:	4649      	mov	r1, r9
    1294:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
    1296:	4a2c      	ldr	r2, [pc, #176]	; (1348 <prvTraceInitTraceData+0x188>)
    1298:	4641      	mov	r1, r8
    129a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
    129c:	4a2b      	ldr	r2, [pc, #172]	; (134c <prvTraceInitTraceData+0x18c>)
    129e:	549f      	strb	r7, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
    12a0:	2174      	movs	r1, #116	; 0x74
    12a2:	4a2b      	ldr	r2, [pc, #172]	; (1350 <prvTraceInitTraceData+0x190>)
    12a4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
    12a6:	4a2b      	ldr	r2, [pc, #172]	; (1354 <prvTraceInitTraceData+0x194>)
    12a8:	549e      	strb	r6, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
    12aa:	4a2b      	ldr	r2, [pc, #172]	; (1358 <prvTraceInitTraceData+0x198>)
    12ac:	210e      	movs	r1, #14
    12ae:	4249      	negs	r1, r1
    12b0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
    12b2:	4a2a      	ldr	r2, [pc, #168]	; (135c <prvTraceInitTraceData+0x19c>)
    12b4:	210d      	movs	r1, #13
    12b6:	4249      	negs	r1, r1
    12b8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
    12ba:	21f4      	movs	r1, #244	; 0xf4
    12bc:	4a28      	ldr	r2, [pc, #160]	; (1360 <prvTraceInitTraceData+0x1a0>)
    12be:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = USER_EVENT_BUFFER_SIZE;
	RecorderDataPtr->userEventBuffer.numberOfChannels = CHANNEL_FORMAT_PAIRS + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
    12c0:	4b28      	ldr	r3, [pc, #160]	; (1364 <prvTraceInitTraceData+0x1a4>)
    12c2:	4798      	blx	r3
}

static void vInitStartMarkers()
{
	uint32_t i;
	uint8_t *ptr = (uint8_t*)&(RecorderDataPtr->startmarker0);
    12c4:	6829      	ldr	r1, [r5, #0]
	if ((*ptr) == 0)
    12c6:	780b      	ldrb	r3, [r1, #0]
    12c8:	2b00      	cmp	r3, #0
    12ca:	d108      	bne.n	12de <prvTraceInitTraceData+0x11e>
    12cc:	1c0b      	adds	r3, r1, #0
    12ce:	310c      	adds	r1, #12
	{
		for (i = 0; i < 12; i++)
		{
			ptr[i] += 1;
    12d0:	781a      	ldrb	r2, [r3, #0]
    12d2:	3201      	adds	r2, #1
    12d4:	701a      	strb	r2, [r3, #0]
    12d6:	3301      	adds	r3, #1
{
	uint32_t i;
	uint8_t *ptr = (uint8_t*)&(RecorderDataPtr->startmarker0);
	if ((*ptr) == 0)
	{
		for (i = 0; i < 12; i++)
    12d8:	428b      	cmp	r3, r1
    12da:	d1f9      	bne.n	12d0 <prvTraceInitTraceData+0x110>
    12dc:	e002      	b.n	12e4 <prvTraceInitTraceData+0x124>
			ptr[i] += 1;
		}
	}
	else
	{
		vTraceError("Trace start markers already initialized!");
    12de:	4822      	ldr	r0, [pc, #136]	; (1368 <prvTraceInitTraceData+0x1a8>)
    12e0:	4b22      	ldr	r3, [pc, #136]	; (136c <prvTraceInitTraceData+0x1ac>)
    12e2:	4798      	blx	r3
	vInitStartMarkers();
	
	#ifdef PORT_SPECIFIC_INIT
	PORT_SPECIFIC_INIT();
	#endif
}
    12e4:	bc3c      	pop	{r2, r3, r4, r5}
    12e6:	4690      	mov	r8, r2
    12e8:	4699      	mov	r9, r3
    12ea:	46a2      	mov	sl, r4
    12ec:	46ab      	mov	fp, r5
    12ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12f0:	e000e018 	.word	0xe000e018
    12f4:	20002ef8 	.word	0x20002ef8
    12f8:	200004ac 	.word	0x200004ac
    12fc:	20001718 	.word	0x20001718
    1300:	00005541 	.word	0x00005541
    1304:	00001aa1 	.word	0x00001aa1
    1308:	f0f0f0f0 	.word	0xf0f0f0f0
    130c:	00002335 	.word	0x00002335
    1310:	f1f1f1f1 	.word	0xf1f1f1f1
    1314:	00000424 	.word	0x00000424
    1318:	0000042c 	.word	0x0000042c
    131c:	f2f2f2f2 	.word	0xf2f2f2f2
    1320:	000007dc 	.word	0x000007dc
    1324:	0000590c 	.word	0x0000590c
    1328:	00005695 	.word	0x00005695
    132c:	f3f3f3f3 	.word	0xf3f3f3f3
    1330:	0000082c 	.word	0x0000082c
    1334:	000017d4 	.word	0x000017d4
    1338:	000017d5 	.word	0x000017d5
    133c:	000017d6 	.word	0x000017d6
    1340:	000017d7 	.word	0x000017d7
    1344:	000017d8 	.word	0x000017d8
    1348:	000017d9 	.word	0x000017d9
    134c:	000017da 	.word	0x000017da
    1350:	000017db 	.word	0x000017db
    1354:	000017dc 	.word	0x000017dc
    1358:	000017dd 	.word	0x000017dd
    135c:	000017de 	.word	0x000017de
    1360:	000017df 	.word	0x000017df
    1364:	000023e5 	.word	0x000023e5
    1368:	00005920 	.word	0x00005920
    136c:	00001165 	.word	0x00001165

00001370 <xTraceNextFreeEventBufferSlot>:

/* Gives the last error message of the recorder. NULL if no error message. */
char* traceErrorMessage = NULL;

void* xTraceNextFreeEventBufferSlot(void)
{
    1370:	b508      	push	{r3, lr}
	if (! RecorderDataPtr->recorderActive)
    1372:	4b0b      	ldr	r3, [pc, #44]	; (13a0 <xTraceNextFreeEventBufferSlot+0x30>)
    1374:	681b      	ldr	r3, [r3, #0]
    1376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1378:	2a00      	cmp	r2, #0
    137a:	d00e      	beq.n	139a <xTraceNextFreeEventBufferSlot+0x2a>
	{
		// If the associated XTS or XPS event prio to the main event has filled the buffer and store mode "stop when full".
		return NULL;
	}

	if (RecorderDataPtr->nextFreeIndex >= EVENT_BUFFER_SIZE)
    137c:	69da      	ldr	r2, [r3, #28]
    137e:	4909      	ldr	r1, [pc, #36]	; (13a4 <xTraceNextFreeEventBufferSlot+0x34>)
    1380:	428a      	cmp	r2, r1
    1382:	d904      	bls.n	138e <xTraceNextFreeEventBufferSlot+0x1e>
	{
		vTraceError("Attempt to index outside event buffer!");
    1384:	4808      	ldr	r0, [pc, #32]	; (13a8 <xTraceNextFreeEventBufferSlot+0x38>)
    1386:	4b09      	ldr	r3, [pc, #36]	; (13ac <xTraceNextFreeEventBufferSlot+0x3c>)
    1388:	4798      	blx	r3
		return NULL;
    138a:	2000      	movs	r0, #0
    138c:	e006      	b.n	139c <xTraceNextFreeEventBufferSlot+0x2c>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
    138e:	0090      	lsls	r0, r2, #2
    1390:	2283      	movs	r2, #131	; 0x83
    1392:	0112      	lsls	r2, r2, #4
    1394:	1880      	adds	r0, r0, r2
    1396:	1818      	adds	r0, r3, r0
    1398:	e000      	b.n	139c <xTraceNextFreeEventBufferSlot+0x2c>
void* xTraceNextFreeEventBufferSlot(void)
{
	if (! RecorderDataPtr->recorderActive)
	{
		// If the associated XTS or XPS event prio to the main event has filled the buffer and store mode "stop when full".
		return NULL;
    139a:	2000      	movs	r0, #0
	{
		vTraceError("Attempt to index outside event buffer!");
		return NULL;
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
}
    139c:	bd08      	pop	{r3, pc}
    139e:	46c0      	nop			; (mov r8, r8)
    13a0:	200004ac 	.word	0x200004ac
    13a4:	000003e7 	.word	0x000003e7
    13a8:	0000594c 	.word	0x0000594c
    13ac:	00001165 	.word	0x00001165

000013b0 <uiIndexOfObject>:

uint16_t uiIndexOfObject(objectHandleType objecthandle, uint8_t objectclass)
{
    13b0:	b508      	push	{r3, lr}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    13b2:	2906      	cmp	r1, #6
    13b4:	d904      	bls.n	13c0 <uiIndexOfObject+0x10>
    13b6:	480f      	ldr	r0, [pc, #60]	; (13f4 <uiIndexOfObject+0x44>)
    13b8:	4b0f      	ldr	r3, [pc, #60]	; (13f8 <uiIndexOfObject+0x48>)
    13ba:	4798      	blx	r3
    13bc:	2000      	movs	r0, #0
    13be:	e018      	b.n	13f2 <uiIndexOfObject+0x42>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    13c0:	2800      	cmp	r0, #0
    13c2:	d006      	beq.n	13d2 <uiIndexOfObject+0x22>
    13c4:	4b0d      	ldr	r3, [pc, #52]	; (13fc <uiIndexOfObject+0x4c>)
    13c6:	681b      	ldr	r3, [r3, #0]
    13c8:	185a      	adds	r2, r3, r1
    13ca:	3260      	adds	r2, #96	; 0x60
    13cc:	7912      	ldrb	r2, [r2, #4]
    13ce:	4282      	cmp	r2, r0
    13d0:	d204      	bcs.n	13dc <uiIndexOfObject+0x2c>
    13d2:	480b      	ldr	r0, [pc, #44]	; (1400 <uiIndexOfObject+0x50>)
    13d4:	4b08      	ldr	r3, [pc, #32]	; (13f8 <uiIndexOfObject+0x48>)
    13d6:	4798      	blx	r3
    13d8:	2000      	movs	r0, #0
    13da:	e00a      	b.n	13f2 <uiIndexOfObject+0x42>

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    13dc:	185a      	adds	r2, r3, r1
    13de:	3270      	adds	r2, #112	; 0x70
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    13e0:	7912      	ldrb	r2, [r2, #4]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    13e2:	3801      	subs	r0, #1
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    13e4:	4350      	muls	r0, r2
    13e6:	313c      	adds	r1, #60	; 0x3c
    13e8:	0049      	lsls	r1, r1, #1
    13ea:	185b      	adds	r3, r3, r1
    13ec:	889b      	ldrh	r3, [r3, #4]
    13ee:	18c0      	adds	r0, r0, r3
    13f0:	b280      	uxth	r0, r0
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
	}

	vTraceError("Object table lookup with invalid object handle or object class!");
	return 0;
}
    13f2:	bd08      	pop	{r3, pc}
    13f4:	00005974 	.word	0x00005974
    13f8:	00001165 	.word	0x00001165
    13fc:	200004ac 	.word	0x200004ac
    1400:	000059b4 	.word	0x000059b4

00001404 <xTraceGetObjectHandle>:
 * contains the mapping between object handle and object name which was valid up
 * to this point in time. The object name is stored as a symbol table entry.
 ******************************************************************************/

objectHandleType xTraceGetObjectHandle(traceObjectClass objectclass)
{
    1404:	b538      	push	{r3, r4, r5, lr}
	objectHandleType handle;
	static int indexOfHandle;

	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    1406:	2806      	cmp	r0, #6
    1408:	d904      	bls.n	1414 <xTraceGetObjectHandle+0x10>
    140a:	484e      	ldr	r0, [pc, #312]	; (1544 <xTraceGetObjectHandle+0x140>)
    140c:	4b4e      	ldr	r3, [pc, #312]	; (1548 <xTraceGetObjectHandle+0x144>)
    140e:	4798      	blx	r3
    1410:	2000      	movs	r0, #0
    1412:	e095      	b.n	1540 <xTraceGetObjectHandle+0x13c>
		"xTraceGetObjectHandle: Invalid value for objectclass", (objectHandleType)0);

	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
    1414:	4a4d      	ldr	r2, [pc, #308]	; (154c <xTraceGetObjectHandle+0x148>)
    1416:	0043      	lsls	r3, r0, #1
    1418:	18d3      	adds	r3, r2, r3
    141a:	891b      	ldrh	r3, [r3, #8]
    141c:	6793      	str	r3, [r2, #120]	; 0x78
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
    141e:	18d2      	adds	r2, r2, r3
    1420:	3240      	adds	r2, #64	; 0x40
    1422:	7812      	ldrb	r2, [r2, #0]
    1424:	2a00      	cmp	r2, #0
    1426:	d109      	bne.n	143c <xTraceGetObjectHandle+0x38>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
    1428:	4a48      	ldr	r2, [pc, #288]	; (154c <xTraceGetObjectHandle+0x148>)
    142a:	18d4      	adds	r4, r2, r3
    142c:	3440      	adds	r4, #64	; 0x40
			(objectHandleType)(1 + indexOfHandle -
    142e:	1c59      	adds	r1, r3, #1
			objectHandleStacks.lowestIndexOfClass[objectclass]);
    1430:	1d05      	adds	r5, r0, #4
    1432:	006d      	lsls	r5, r5, #1
    1434:	1952      	adds	r2, r2, r5
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
    1436:	89d2      	ldrh	r2, [r2, #14]
    1438:	1a89      	subs	r1, r1, r2
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
    143a:	7021      	strb	r1, [r4, #0]
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    143c:	4a43      	ldr	r2, [pc, #268]	; (154c <xTraceGetObjectHandle+0x148>)
    143e:	18d1      	adds	r1, r2, r3
    1440:	3140      	adds	r1, #64	; 0x40
    1442:	7809      	ldrb	r1, [r1, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
		> objectHandleStacks.highestIndexOfClass[objectclass])
    1444:	1c04      	adds	r4, r0, #0
    1446:	340c      	adds	r4, #12
    1448:	0064      	lsls	r4, r4, #1
    144a:	1912      	adds	r2, r2, r4
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
    144c:	8992      	ldrh	r2, [r2, #12]
    144e:	429a      	cmp	r2, r3
    1450:	d205      	bcs.n	145e <xTraceGetObjectHandle+0x5a>
		> objectHandleStacks.highestIndexOfClass[objectclass])
	{
		/* ERROR */
		vTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    1452:	4b3f      	ldr	r3, [pc, #252]	; (1550 <xTraceGetObjectHandle+0x14c>)
    1454:	4798      	blx	r3
    1456:	4b3c      	ldr	r3, [pc, #240]	; (1548 <xTraceGetObjectHandle+0x144>)
    1458:	4798      	blx	r3

		handle = 0; /* an invalid/anonymous handle - but the recorder is stopped now... */
    145a:	2000      	movs	r0, #0
    145c:	e070      	b.n	1540 <xTraceGetObjectHandle+0x13c>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
    145e:	3301      	adds	r3, #1
    1460:	b29b      	uxth	r3, r3
    1462:	4a3a      	ldr	r2, [pc, #232]	; (154c <xTraceGetObjectHandle+0x148>)
    1464:	0044      	lsls	r4, r0, #1
    1466:	1914      	adds	r4, r2, r4
    1468:	8123      	strh	r3, [r4, #8]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
			objectHandleStacks.lowestIndexOfClass[objectclass];
    146a:	1d04      	adds	r4, r0, #4
    146c:	0064      	lsls	r4, r4, #1
    146e:	1914      	adds	r4, r2, r4
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
    1470:	89e4      	ldrh	r4, [r4, #14]
    1472:	1b1b      	subs	r3, r3, r4
			objectHandleStacks.lowestIndexOfClass[objectclass];

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
    1474:	1c04      	adds	r4, r0, #0
    1476:	3414      	adds	r4, #20
    1478:	0064      	lsls	r4, r4, #1
    147a:	1912      	adds	r2, r2, r4
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
			objectHandleStacks.lowestIndexOfClass[objectclass];

		if (hndCount >
    147c:	8952      	ldrh	r2, [r2, #10]
    147e:	4293      	cmp	r3, r2
    1480:	dd04      	ble.n	148c <xTraceGetObjectHandle+0x88>
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    1482:	1c22      	adds	r2, r4, #0
    1484:	4c31      	ldr	r4, [pc, #196]	; (154c <xTraceGetObjectHandle+0x148>)
    1486:	18a2      	adds	r2, r4, r2
    1488:	b2db      	uxtb	r3, r3
    148a:	8153      	strh	r3, [r2, #10]
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    148c:	2806      	cmp	r0, #6
    148e:	d856      	bhi.n	153e <xTraceGetObjectHandle+0x13a>
    1490:	0080      	lsls	r0, r0, #2
    1492:	4b30      	ldr	r3, [pc, #192]	; (1554 <xTraceGetObjectHandle+0x150>)
    1494:	581b      	ldr	r3, [r3, r0]
    1496:	469f      	mov	pc, r3
    1498:	08cb      	lsrs	r3, r1, #3
    149a:	4a2c      	ldr	r2, [pc, #176]	; (154c <xTraceGetObjectHandle+0x148>)
    149c:	327c      	adds	r2, #124	; 0x7c
    149e:	2407      	movs	r4, #7
    14a0:	400c      	ands	r4, r1
    14a2:	2001      	movs	r0, #1
    14a4:	40a0      	lsls	r0, r4
    14a6:	1c04      	adds	r4, r0, #0
    14a8:	5cd0      	ldrb	r0, [r2, r3]
    14aa:	43a0      	bics	r0, r4
    14ac:	54d0      	strb	r0, [r2, r3]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    14ae:	1c08      	adds	r0, r1, #0
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    14b0:	e046      	b.n	1540 <xTraceGetObjectHandle+0x13c>
    14b2:	1c08      	adds	r0, r1, #0
    14b4:	300b      	adds	r0, #11
    14b6:	10c3      	asrs	r3, r0, #3
    14b8:	4a24      	ldr	r2, [pc, #144]	; (154c <xTraceGetObjectHandle+0x148>)
    14ba:	327c      	adds	r2, #124	; 0x7c
    14bc:	2407      	movs	r4, #7
    14be:	4020      	ands	r0, r4
    14c0:	2401      	movs	r4, #1
    14c2:	4084      	lsls	r4, r0
    14c4:	5cd0      	ldrb	r0, [r2, r3]
    14c6:	43a0      	bics	r0, r4
    14c8:	54d0      	strb	r0, [r2, r3]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    14ca:	1c08      	adds	r0, r1, #0
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    14cc:	e038      	b.n	1540 <xTraceGetObjectHandle+0x13c>
    14ce:	1c08      	adds	r0, r1, #0
    14d0:	3016      	adds	r0, #22
    14d2:	10c3      	asrs	r3, r0, #3
    14d4:	4a1d      	ldr	r2, [pc, #116]	; (154c <xTraceGetObjectHandle+0x148>)
    14d6:	327c      	adds	r2, #124	; 0x7c
    14d8:	2407      	movs	r4, #7
    14da:	4020      	ands	r0, r4
    14dc:	2401      	movs	r4, #1
    14de:	4084      	lsls	r4, r0
    14e0:	5cd0      	ldrb	r0, [r2, r3]
    14e2:	43a0      	bics	r0, r4
    14e4:	54d0      	strb	r0, [r2, r3]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    14e6:	1c08      	adds	r0, r1, #0
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    14e8:	e02a      	b.n	1540 <xTraceGetObjectHandle+0x13c>
    14ea:	1c08      	adds	r0, r1, #0
    14ec:	3021      	adds	r0, #33	; 0x21
    14ee:	10c3      	asrs	r3, r0, #3
    14f0:	4a16      	ldr	r2, [pc, #88]	; (154c <xTraceGetObjectHandle+0x148>)
    14f2:	327c      	adds	r2, #124	; 0x7c
    14f4:	2407      	movs	r4, #7
    14f6:	4020      	ands	r0, r4
    14f8:	2401      	movs	r4, #1
    14fa:	4084      	lsls	r4, r0
    14fc:	5cd0      	ldrb	r0, [r2, r3]
    14fe:	43a0      	bics	r0, r4
    1500:	54d0      	strb	r0, [r2, r3]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    1502:	1c08      	adds	r0, r1, #0
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    1504:	e01c      	b.n	1540 <xTraceGetObjectHandle+0x13c>
    1506:	1c08      	adds	r0, r1, #0
    1508:	3031      	adds	r0, #49	; 0x31
    150a:	10c3      	asrs	r3, r0, #3
    150c:	4a0f      	ldr	r2, [pc, #60]	; (154c <xTraceGetObjectHandle+0x148>)
    150e:	327c      	adds	r2, #124	; 0x7c
    1510:	2407      	movs	r4, #7
    1512:	4020      	ands	r0, r4
    1514:	2401      	movs	r4, #1
    1516:	4084      	lsls	r4, r0
    1518:	5cd0      	ldrb	r0, [r2, r3]
    151a:	43a0      	bics	r0, r4
    151c:	54d0      	strb	r0, [r2, r3]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    151e:	1c08      	adds	r0, r1, #0
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    1520:	e00e      	b.n	1540 <xTraceGetObjectHandle+0x13c>
    1522:	1c08      	adds	r0, r1, #0
    1524:	3034      	adds	r0, #52	; 0x34
    1526:	10c3      	asrs	r3, r0, #3
    1528:	4a08      	ldr	r2, [pc, #32]	; (154c <xTraceGetObjectHandle+0x148>)
    152a:	327c      	adds	r2, #124	; 0x7c
    152c:	2407      	movs	r4, #7
    152e:	4020      	ands	r0, r4
    1530:	2401      	movs	r4, #1
    1532:	4084      	lsls	r4, r0
    1534:	5cd0      	ldrb	r0, [r2, r3]
    1536:	43a0      	bics	r0, r4
    1538:	54d0      	strb	r0, [r2, r3]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    153a:	1c08      	adds	r0, r1, #0
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    153c:	e000      	b.n	1540 <xTraceGetObjectHandle+0x13c>
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    153e:	1c08      	adds	r0, r1, #0

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
	}

	return handle;
}
    1540:	bd38      	pop	{r3, r4, r5, pc}
    1542:	46c0      	nop			; (mov r8, r8)
    1544:	000059f4 	.word	0x000059f4
    1548:	00001165 	.word	0x00001165
    154c:	200004ac 	.word	0x200004ac
    1550:	00002435 	.word	0x00002435
    1554:	00005894 	.word	0x00005894

00001558 <vTraceFreeObjectHandle>:

void vTraceFreeObjectHandle(traceObjectClass objectclass, objectHandleType handle)
{
    1558:	b538      	push	{r3, r4, r5, lr}
	int indexOfHandle;

	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    155a:	2806      	cmp	r0, #6
    155c:	d903      	bls.n	1566 <vTraceFreeObjectHandle+0xe>
    155e:	4815      	ldr	r0, [pc, #84]	; (15b4 <vTraceFreeObjectHandle+0x5c>)
    1560:	4b15      	ldr	r3, [pc, #84]	; (15b8 <vTraceFreeObjectHandle+0x60>)
    1562:	4798      	blx	r3
    1564:	e024      	b.n	15b0 <vTraceFreeObjectHandle+0x58>
		"vTraceFreeObjectHandle: Invalid value for objectclass", );
	TRACE_ASSERT(handle > 0 && handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    1566:	2900      	cmp	r1, #0
    1568:	d006      	beq.n	1578 <vTraceFreeObjectHandle+0x20>
    156a:	4b14      	ldr	r3, [pc, #80]	; (15bc <vTraceFreeObjectHandle+0x64>)
    156c:	681b      	ldr	r3, [r3, #0]
    156e:	181b      	adds	r3, r3, r0
    1570:	3360      	adds	r3, #96	; 0x60
    1572:	791b      	ldrb	r3, [r3, #4]
    1574:	428b      	cmp	r3, r1
    1576:	d203      	bcs.n	1580 <vTraceFreeObjectHandle+0x28>
    1578:	4811      	ldr	r0, [pc, #68]	; (15c0 <vTraceFreeObjectHandle+0x68>)
    157a:	4b0f      	ldr	r3, [pc, #60]	; (15b8 <vTraceFreeObjectHandle+0x60>)
    157c:	4798      	blx	r3
    157e:	e017      	b.n	15b0 <vTraceFreeObjectHandle+0x58>
		"vTraceFreeObjectHandle: Invalid value for handle", );

	/* Check that there is room to push the handle on the stack */
	if ((objectHandleStacks.indexOfNextAvailableHandle[objectclass] - 1) <
    1580:	4b0e      	ldr	r3, [pc, #56]	; (15bc <vTraceFreeObjectHandle+0x64>)
    1582:	0042      	lsls	r2, r0, #1
    1584:	189a      	adds	r2, r3, r2
    1586:	8912      	ldrh	r2, [r2, #8]
    1588:	1e54      	subs	r4, r2, #1
		objectHandleStacks.lowestIndexOfClass[objectclass])
    158a:	1d05      	adds	r5, r0, #4
    158c:	006d      	lsls	r5, r5, #1
    158e:	195b      	adds	r3, r3, r5
		"vTraceFreeObjectHandle: Invalid value for objectclass", );
	TRACE_ASSERT(handle > 0 && handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
		"vTraceFreeObjectHandle: Invalid value for handle", );

	/* Check that there is room to push the handle on the stack */
	if ((objectHandleStacks.indexOfNextAvailableHandle[objectclass] - 1) <
    1590:	89db      	ldrh	r3, [r3, #14]
    1592:	429c      	cmp	r4, r3
    1594:	da03      	bge.n	159e <vTraceFreeObjectHandle+0x46>
		objectHandleStacks.lowestIndexOfClass[objectclass])
	{
		/* Error */
		vTraceError("Attempt to free more handles than allocated!");
    1596:	480b      	ldr	r0, [pc, #44]	; (15c4 <vTraceFreeObjectHandle+0x6c>)
    1598:	4b07      	ldr	r3, [pc, #28]	; (15b8 <vTraceFreeObjectHandle+0x60>)
    159a:	4798      	blx	r3
    159c:	e008      	b.n	15b0 <vTraceFreeObjectHandle+0x58>
	}
	else
	{
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]--;
    159e:	3a01      	subs	r2, #1
    15a0:	b292      	uxth	r2, r2
    15a2:	4b06      	ldr	r3, [pc, #24]	; (15bc <vTraceFreeObjectHandle+0x64>)
    15a4:	0040      	lsls	r0, r0, #1
    15a6:	1818      	adds	r0, r3, r0
    15a8:	8102      	strh	r2, [r0, #8]
		indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
		objectHandleStacks.objectHandles[indexOfHandle] = handle;
    15aa:	189a      	adds	r2, r3, r2
    15ac:	3240      	adds	r2, #64	; 0x40
    15ae:	7011      	strb	r1, [r2, #0]
	}

}
    15b0:	bd38      	pop	{r3, r4, r5, pc}
    15b2:	46c0      	nop			; (mov r8, r8)
    15b4:	00005a38 	.word	0x00005a38
    15b8:	00001165 	.word	0x00001165
    15bc:	200004ac 	.word	0x200004ac
    15c0:	00005a7c 	.word	0x00005a7c
    15c4:	00005abc 	.word	0x00005abc

000015c8 <vTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void vTraceSetObjectName(traceObjectClass objectclass,
						 objectHandleType handle,
						 const char* name)
{
    15c8:	b538      	push	{r3, r4, r5, lr}
    15ca:	1c04      	adds	r4, r0, #0
    15cc:	1e15      	subs	r5, r2, #0
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "vTraceSetObjectName: name == NULL", );
    15ce:	d103      	bne.n	15d8 <vTraceSetObjectName+0x10>
    15d0:	4818      	ldr	r0, [pc, #96]	; (1634 <vTraceSetObjectName+0x6c>)
    15d2:	4b19      	ldr	r3, [pc, #100]	; (1638 <vTraceSetObjectName+0x70>)
    15d4:	4798      	blx	r3
    15d6:	e02b      	b.n	1630 <vTraceSetObjectName+0x68>

	if (objectclass >= TRACE_NCLASSES)
    15d8:	2806      	cmp	r0, #6
    15da:	d903      	bls.n	15e4 <vTraceSetObjectName+0x1c>
	{
		vTraceError("Illegal object class in vTraceSetObjectName");
    15dc:	4817      	ldr	r0, [pc, #92]	; (163c <vTraceSetObjectName+0x74>)
    15de:	4b16      	ldr	r3, [pc, #88]	; (1638 <vTraceSetObjectName+0x70>)
    15e0:	4798      	blx	r3
		return;
    15e2:	e025      	b.n	1630 <vTraceSetObjectName+0x68>
	}

	if (handle == 0)
    15e4:	2900      	cmp	r1, #0
    15e6:	d103      	bne.n	15f0 <vTraceSetObjectName+0x28>
	{
		vTraceError("Illegal handle (0) in vTraceSetObjectName.");
    15e8:	4815      	ldr	r0, [pc, #84]	; (1640 <vTraceSetObjectName+0x78>)
    15ea:	4b13      	ldr	r3, [pc, #76]	; (1638 <vTraceSetObjectName+0x70>)
    15ec:	4798      	blx	r3
		return;
    15ee:	e01f      	b.n	1630 <vTraceSetObjectName+0x68>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
    15f0:	4b14      	ldr	r3, [pc, #80]	; (1644 <vTraceSetObjectName+0x7c>)
    15f2:	681b      	ldr	r3, [r3, #0]
    15f4:	181b      	adds	r3, r3, r0
    15f6:	3360      	adds	r3, #96	; 0x60
    15f8:	791b      	ldrb	r3, [r3, #4]
    15fa:	428b      	cmp	r3, r1
    15fc:	d204      	bcs.n	1608 <vTraceSetObjectName+0x40>
	{
		/* ERROR */
		vTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    15fe:	4b12      	ldr	r3, [pc, #72]	; (1648 <vTraceSetObjectName+0x80>)
    1600:	4798      	blx	r3
    1602:	4b0d      	ldr	r3, [pc, #52]	; (1638 <vTraceSetObjectName+0x70>)
    1604:	4798      	blx	r3
    1606:	e013      	b.n	1630 <vTraceSetObjectName+0x68>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
    1608:	1c08      	adds	r0, r1, #0
    160a:	1c21      	adds	r1, r4, #0
    160c:	4b0f      	ldr	r3, [pc, #60]	; (164c <vTraceSetObjectName+0x84>)
    160e:	4798      	blx	r3
    1610:	4b0f      	ldr	r3, [pc, #60]	; (1650 <vTraceSetObjectName+0x88>)
    1612:	8098      	strh	r0, [r3, #4]

		if (traceErrorMessage == NULL)
    1614:	4b0b      	ldr	r3, [pc, #44]	; (1644 <vTraceSetObjectName+0x7c>)
    1616:	685b      	ldr	r3, [r3, #4]
    1618:	2b00      	cmp	r3, #0
    161a:	d109      	bne.n	1630 <vTraceSetObjectName+0x68>
		{
			(void)strncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    161c:	4b09      	ldr	r3, [pc, #36]	; (1644 <vTraceSetObjectName+0x7c>)
    161e:	681b      	ldr	r3, [r3, #0]
    1620:	1818      	adds	r0, r3, r0
    1622:	308c      	adds	r0, #140	; 0x8c
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
    1624:	191b      	adds	r3, r3, r4
    1626:	3368      	adds	r3, #104	; 0x68
	{
		idx = uiIndexOfObject(handle, objectclass);

		if (traceErrorMessage == NULL)
		{
			(void)strncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    1628:	791a      	ldrb	r2, [r3, #4]
    162a:	1c29      	adds	r1, r5, #0
    162c:	4b09      	ldr	r3, [pc, #36]	; (1654 <vTraceSetObjectName+0x8c>)
    162e:	4798      	blx	r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
		}
	}
}
    1630:	bd38      	pop	{r3, r4, r5, pc}
    1632:	46c0      	nop			; (mov r8, r8)
    1634:	00005aec 	.word	0x00005aec
    1638:	00001165 	.word	0x00001165
    163c:	00005b1c 	.word	0x00005b1c
    1640:	00005b48 	.word	0x00005b48
    1644:	200004ac 	.word	0x200004ac
    1648:	00002435 	.word	0x00002435
    164c:	000013b1 	.word	0x000013b1
    1650:	2000052c 	.word	0x2000052c
    1654:	00005695 	.word	0x00005695

00001658 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 *
 * This is assumed to execute within a critical section...
 *****************************************************************************/

void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
    1658:	b5f0      	push	{r4, r5, r6, r7, lr}
    165a:	b083      	sub	sp, #12
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
    165c:	2800      	cmp	r0, #0
    165e:	d004      	beq.n	166a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", );

	while (i < nofEntriesToCheck)
    1660:	1c07      	adds	r7, r0, #0
    1662:	2400      	movs	r4, #0
    1664:	2800      	cmp	r0, #0
    1666:	d104      	bne.n	1672 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1a>
    1668:	e04b      	b.n	1702 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xaa>
{
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
    166a:	4827      	ldr	r0, [pc, #156]	; (1708 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    166c:	4b27      	ldr	r3, [pc, #156]	; (170c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>)
    166e:	4798      	blx	r3
    1670:	e047      	b.n	1702 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xaa>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", );

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
    1672:	4d27      	ldr	r5, [pc, #156]	; (1710 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb8>)
    1674:	682b      	ldr	r3, [r5, #0]
    1676:	69d8      	ldr	r0, [r3, #28]
    1678:	1821      	adds	r1, r4, r0
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
    167a:	008e      	lsls	r6, r1, #2
    167c:	199a      	adds	r2, r3, r6
    167e:	2083      	movs	r0, #131	; 0x83
    1680:	0100      	lsls	r0, r0, #4
    1682:	1812      	adds	r2, r2, r0
    1684:	7812      	ldrb	r2, [r2, #0]
    1686:	1c10      	adds	r0, r2, #0
    1688:	3067      	adds	r0, #103	; 0x67
    168a:	b2c0      	uxtb	r0, r0
    168c:	280e      	cmp	r0, #14
    168e:	d80f      	bhi.n	16b0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x58>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
    1690:	3268      	adds	r2, #104	; 0x68
    1692:	b2d2      	uxtb	r2, r2
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
    1694:	1851      	adds	r1, r2, r1
    1696:	6998      	ldr	r0, [r3, #24]
    1698:	4281      	cmp	r1, r0
    169a:	d22f      	bcs.n	16fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa4>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4 * nDataEvents);
    169c:	3201      	adds	r2, #1
    169e:	0092      	lsls	r2, r2, #2
    16a0:	2183      	movs	r1, #131	; 0x83
    16a2:	0109      	lsls	r1, r1, #4
    16a4:	1876      	adds	r6, r6, r1
    16a6:	1998      	adds	r0, r3, r6
    16a8:	2100      	movs	r1, #0
    16aa:	4b1a      	ldr	r3, [pc, #104]	; (1714 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xbc>)
    16ac:	4798      	blx	r3
    16ae:	e025      	b.n	16fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa4>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
    16b0:	2a01      	cmp	r2, #1
    16b2:	d123      	bne.n	16fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa4>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
    16b4:	3101      	adds	r1, #1
    16b6:	6998      	ldr	r0, [r3, #24]
    16b8:	4281      	cmp	r1, r0
    16ba:	d20d      	bcs.n	16d8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x80>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
    16bc:	2183      	movs	r1, #131	; 0x83
    16be:	0109      	lsls	r1, r1, #4
    16c0:	1876      	adds	r6, r6, r1
    16c2:	199b      	adds	r3, r3, r6
    16c4:	2200      	movs	r2, #0
    16c6:	701a      	strb	r2, [r3, #0]
    16c8:	705a      	strb	r2, [r3, #1]
    16ca:	709a      	strb	r2, [r3, #2]
    16cc:	70da      	strb	r2, [r3, #3]
    16ce:	711a      	strb	r2, [r3, #4]
    16d0:	715a      	strb	r2, [r3, #5]
    16d2:	719a      	strb	r2, [r3, #6]
    16d4:	71da      	strb	r2, [r3, #7]
    16d6:	e011      	b.n	16fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa4>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
    16d8:	2283      	movs	r2, #131	; 0x83
    16da:	0112      	lsls	r2, r2, #4
    16dc:	189b      	adds	r3, r3, r2
    16de:	2200      	movs	r2, #0
    16e0:	701a      	strb	r2, [r3, #0]
    16e2:	705a      	strb	r2, [r3, #1]
    16e4:	709a      	strb	r2, [r3, #2]
    16e6:	70da      	strb	r2, [r3, #3]
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
    16e8:	2383      	movs	r3, #131	; 0x83
    16ea:	011b      	lsls	r3, r3, #4
    16ec:	18f6      	adds	r6, r6, r3
    16ee:	4808      	ldr	r0, [pc, #32]	; (1710 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb8>)
    16f0:	6800      	ldr	r0, [r0, #0]
    16f2:	1986      	adds	r6, r0, r6
    16f4:	7032      	strb	r2, [r6, #0]
    16f6:	7072      	strb	r2, [r6, #1]
    16f8:	70b2      	strb	r2, [r6, #2]
    16fa:	70f2      	strb	r2, [r6, #3]
			}
		}
		i++;
    16fc:	3401      	adds	r4, #1
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", );

	while (i < nofEntriesToCheck)
    16fe:	42bc      	cmp	r4, r7
    1700:	d3b8      	bcc.n	1674 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1c>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
			}
		}
		i++;
	}
}
    1702:	b003      	add	sp, #12
    1704:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1706:	46c0      	nop			; (mov r8, r8)
    1708:	00005b74 	.word	0x00005b74
    170c:	00001165 	.word	0x00001165
    1710:	200004ac 	.word	0x200004ac
    1714:	00005541 	.word	0x00005541

00001718 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
    1718:	b508      	push	{r3, lr}
	if (RecorderDataPtr->recorderActive == 0)
    171a:	4b0b      	ldr	r3, [pc, #44]	; (1748 <prvTraceUpdateCounters+0x30>)
    171c:	681b      	ldr	r3, [r3, #0]
    171e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1720:	2a00      	cmp	r2, #0
    1722:	d00f      	beq.n	1744 <prvTraceUpdateCounters+0x2c>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
    1724:	695a      	ldr	r2, [r3, #20]
    1726:	3201      	adds	r2, #1
    1728:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
    172a:	69da      	ldr	r2, [r3, #28]
    172c:	3201      	adds	r2, #1
    172e:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= EVENT_BUFFER_SIZE)
    1730:	4906      	ldr	r1, [pc, #24]	; (174c <prvTraceUpdateCounters+0x34>)
    1732:	428a      	cmp	r2, r1
    1734:	d903      	bls.n	173e <prvTraceUpdateCounters+0x26>
	{
#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
    1736:	2201      	movs	r2, #1
    1738:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
    173a:	2200      	movs	r2, #0
    173c:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
    173e:	2001      	movs	r0, #1
    1740:	4b03      	ldr	r3, [pc, #12]	; (1750 <prvTraceUpdateCounters+0x38>)
    1742:	4798      	blx	r3
#endif
}
    1744:	bd08      	pop	{r3, pc}
    1746:	46c0      	nop			; (mov r8, r8)
    1748:	200004ac 	.word	0x200004ac
    174c:	000003e7 	.word	0x000003e7
    1750:	00001659 	.word	0x00001659

00001754 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
    1754:	b5f0      	push	{r4, r5, r6, r7, lr}
    1756:	b083      	sub	sp, #12
    1758:	1c04      	adds	r4, r0, #0
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
	uint32_t dts = 0;
	uint32_t timestamp = 0;
    175a:	2300      	movs	r3, #0
    175c:	9301      	str	r3, [sp, #4]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
    175e:	28ff      	cmp	r0, #255	; 0xff
    1760:	d007      	beq.n	1772 <prvTraceGetDTS+0x1e>
    1762:	4b35      	ldr	r3, [pc, #212]	; (1838 <prvTraceGetDTS+0xe4>)
    1764:	4298      	cmp	r0, r3
    1766:	d004      	beq.n	1772 <prvTraceGetDTS+0x1e>
    1768:	4834      	ldr	r0, [pc, #208]	; (183c <prvTraceGetDTS+0xe8>)
    176a:	4b35      	ldr	r3, [pc, #212]	; (1840 <prvTraceGetDTS+0xec>)
    176c:	4798      	blx	r3
    176e:	2000      	movs	r0, #0
    1770:	e060      	b.n	1834 <prvTraceGetDTS+0xe0>

#if (SELECTED_PORT != PORT_ARM_CortexM)

	if (RecorderDataPtr->frequency == 0 && init_hwtc_count != HWTC_COUNT)
    1772:	4b34      	ldr	r3, [pc, #208]	; (1844 <prvTraceGetDTS+0xf0>)
    1774:	681b      	ldr	r3, [r3, #0]
    1776:	6a58      	ldr	r0, [r3, #36]	; 0x24
    1778:	2800      	cmp	r0, #0
    177a:	d10d      	bne.n	1798 <prvTraceGetDTS+0x44>
    177c:	4a32      	ldr	r2, [pc, #200]	; (1848 <prvTraceGetDTS+0xf4>)
    177e:	6811      	ldr	r1, [r2, #0]
    1780:	4a32      	ldr	r2, [pc, #200]	; (184c <prvTraceGetDTS+0xf8>)
    1782:	6812      	ldr	r2, [r2, #0]
    1784:	4291      	cmp	r1, r2
    1786:	d007      	beq.n	1798 <prvTraceGetDTS+0x44>
#if (SELECTED_PORT == PORT_Win32)
		RecorderDataPtr->frequency = 100000;
#elif (SELECTED_PORT == PORT_HWIndependent)
		RecorderDataPtr->frequency = TRACE_TICK_RATE_HZ;
#else
		RecorderDataPtr->frequency = (HWTC_PERIOD * TRACE_TICK_RATE_HZ) / (uint32_t)HWTC_DIVISOR;
    1788:	4a31      	ldr	r2, [pc, #196]	; (1850 <prvTraceGetDTS+0xfc>)
    178a:	6811      	ldr	r1, [r2, #0]
    178c:	3101      	adds	r1, #1
    178e:	22fa      	movs	r2, #250	; 0xfa
    1790:	0092      	lsls	r2, r2, #2
    1792:	434a      	muls	r2, r1
    1794:	0852      	lsrs	r2, r2, #1
    1796:	625a      	str	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	vTracePortGetTimeStamp(&timestamp);	
    1798:	a801      	add	r0, sp, #4
    179a:	4b2e      	ldr	r3, [pc, #184]	; (1854 <prvTraceGetDTS+0x100>)
    179c:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
    179e:	9b01      	ldr	r3, [sp, #4]
    17a0:	4a2d      	ldr	r2, [pc, #180]	; (1858 <prvTraceGetDTS+0x104>)
    17a2:	6891      	ldr	r1, [r2, #8]
    17a4:	1a5d      	subs	r5, r3, r1
	old_timestamp = timestamp;
    17a6:	6093      	str	r3, [r2, #8]

	if (RecorderDataPtr->frequency > 0)
    17a8:	4a26      	ldr	r2, [pc, #152]	; (1844 <prvTraceGetDTS+0xf0>)
    17aa:	6816      	ldr	r6, [r2, #0]
    17ac:	6a77      	ldr	r7, [r6, #36]	; 0x24
    17ae:	2f00      	cmp	r7, #0
    17b0:	d01f      	beq.n	17f2 <prvTraceGetDTS+0x9e>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
    17b2:	42bd      	cmp	r5, r7
    17b4:	d90e      	bls.n	17d4 <prvTraceGetDTS+0x80>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
    17b6:	1c28      	adds	r0, r5, #0
    17b8:	1c39      	adds	r1, r7, #0
    17ba:	4b28      	ldr	r3, [pc, #160]	; (185c <prvTraceGetDTS+0x108>)
    17bc:	4798      	blx	r3
    17be:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    17c0:	1810      	adds	r0, r2, r0
    17c2:	62f0      	str	r0, [r6, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
    17c4:	1c28      	adds	r0, r5, #0
    17c6:	1c39      	adds	r1, r7, #0
    17c8:	4b25      	ldr	r3, [pc, #148]	; (1860 <prvTraceGetDTS+0x10c>)
    17ca:	4798      	blx	r3
    17cc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    17ce:	1859      	adds	r1, r3, r1
    17d0:	62b1      	str	r1, [r6, #40]	; 0x28
    17d2:	e002      	b.n	17da <prvTraceGetDTS+0x86>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
    17d4:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    17d6:	1943      	adds	r3, r0, r5
    17d8:	62b3      	str	r3, [r6, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
    17da:	4b1a      	ldr	r3, [pc, #104]	; (1844 <prvTraceGetDTS+0xf0>)
    17dc:	681b      	ldr	r3, [r3, #0]
    17de:	6a99      	ldr	r1, [r3, #40]	; 0x28
    17e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    17e2:	4291      	cmp	r1, r2
    17e4:	d306      	bcc.n	17f4 <prvTraceGetDTS+0xa0>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
    17e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    17e8:	3001      	adds	r0, #1
    17ea:	62d8      	str	r0, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
    17ec:	1a8a      	subs	r2, r1, r2
    17ee:	629a      	str	r2, [r3, #40]	; 0x28
    17f0:	e000      	b.n	17f4 <prvTraceGetDTS+0xa0>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
    17f2:	62b3      	str	r3, [r6, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
    17f4:	42a5      	cmp	r5, r4
    17f6:	d91b      	bls.n	1830 <prvTraceGetDTS+0xdc>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) xTraceNextFreeEventBufferSlot();
    17f8:	4b1a      	ldr	r3, [pc, #104]	; (1864 <prvTraceGetDTS+0x110>)
    17fa:	4798      	blx	r3

		if (xts != NULL)
    17fc:	2800      	cmp	r0, #0
    17fe:	d017      	beq.n	1830 <prvTraceGetDTS+0xdc>
		{
			if (param_maxDTS == 0xFFFF)
    1800:	4b0d      	ldr	r3, [pc, #52]	; (1838 <prvTraceGetDTS+0xe4>)
    1802:	429c      	cmp	r4, r3
    1804:	d106      	bne.n	1814 <prvTraceGetDTS+0xc0>
			{
				xts->type = XTS16;
    1806:	23a9      	movs	r3, #169	; 0xa9
    1808:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
    180a:	0c2b      	lsrs	r3, r5, #16
    180c:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = 0;
    180e:	2300      	movs	r3, #0
    1810:	7043      	strb	r3, [r0, #1]
    1812:	e00b      	b.n	182c <prvTraceGetDTS+0xd8>
			}
			else if (param_maxDTS == 0xFF)
    1814:	2cff      	cmp	r4, #255	; 0xff
    1816:	d106      	bne.n	1826 <prvTraceGetDTS+0xd2>
			{
				xts->type = XTS8;
    1818:	23a8      	movs	r3, #168	; 0xa8
    181a:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
    181c:	0a2b      	lsrs	r3, r5, #8
    181e:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
    1820:	0e2b      	lsrs	r3, r5, #24
    1822:	7043      	strb	r3, [r0, #1]
    1824:	e002      	b.n	182c <prvTraceGetDTS+0xd8>
			}
			else
			{
				vTraceError("Bad param_maxDTS in prvTraceGetDTS");
    1826:	4810      	ldr	r0, [pc, #64]	; (1868 <prvTraceGetDTS+0x114>)
    1828:	4b05      	ldr	r3, [pc, #20]	; (1840 <prvTraceGetDTS+0xec>)
    182a:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
    182c:	4b0f      	ldr	r3, [pc, #60]	; (186c <prvTraceGetDTS+0x118>)
    182e:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
    1830:	1c28      	adds	r0, r5, #0
    1832:	4020      	ands	r0, r4
}
    1834:	b003      	add	sp, #12
    1836:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1838:	0000ffff 	.word	0x0000ffff
    183c:	00005bcc 	.word	0x00005bcc
    1840:	00001165 	.word	0x00001165
    1844:	200004ac 	.word	0x200004ac
    1848:	e000e018 	.word	0xe000e018
    184c:	20002ef8 	.word	0x20002ef8
    1850:	e000e014 	.word	0xe000e014
    1854:	00001b19 	.word	0x00001b19
    1858:	2000052c 	.word	0x2000052c
    185c:	00005279 	.word	0x00005279
    1860:	00005301 	.word	0x00005301
    1864:	00001371 	.word	0x00001371
    1868:	00005c0c 	.word	0x00005c0c
    186c:	00001719 	.word	0x00001719

00001870 <prvTraceLookupSymbolTableEntry>:
 ******************************************************************************/
traceLabel prvTraceLookupSymbolTableEntry(const char* name,
										 uint8_t crc6,
										 uint8_t len,
										 traceLabel chn)
{
    1870:	b5f0      	push	{r4, r5, r6, r7, lr}
    1872:	4657      	mov	r7, sl
    1874:	464e      	mov	r6, r9
    1876:	4645      	mov	r5, r8
    1878:	b4e0      	push	{r5, r6, r7}
    187a:	4682      	mov	sl, r0
    187c:	4691      	mov	r9, r2
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];
    187e:	4a28      	ldr	r2, [pc, #160]	; (1920 <prvTraceLookupSymbolTableEntry+0xb0>)
    1880:	6816      	ldr	r6, [r2, #0]
    1882:	22ea      	movs	r2, #234	; 0xea
    1884:	0092      	lsls	r2, r2, #2
    1886:	1889      	adds	r1, r1, r2
    1888:	0049      	lsls	r1, r1, #1
    188a:	5b8c      	ldrh	r4, [r1, r6]

	TRACE_ASSERT(name != NULL, "prvTraceLookupSymbolTableEntry: name == NULL", (traceLabel)0);
    188c:	2800      	cmp	r0, #0
    188e:	d104      	bne.n	189a <prvTraceLookupSymbolTableEntry+0x2a>
    1890:	4824      	ldr	r0, [pc, #144]	; (1924 <prvTraceLookupSymbolTableEntry+0xb4>)
    1892:	4b25      	ldr	r3, [pc, #148]	; (1928 <prvTraceLookupSymbolTableEntry+0xb8>)
    1894:	4798      	blx	r3
    1896:	2000      	movs	r0, #0
    1898:	e03d      	b.n	1916 <prvTraceLookupSymbolTableEntry+0xa6>
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceLabel)0);
    189a:	464a      	mov	r2, r9
    189c:	2a00      	cmp	r2, #0
    189e:	d002      	beq.n	18a6 <prvTraceLookupSymbolTableEntry+0x36>

	while (i != 0)
    18a0:	1e20      	subs	r0, r4, #0
    18a2:	d038      	beq.n	1916 <prvTraceLookupSymbolTableEntry+0xa6>
    18a4:	e004      	b.n	18b0 <prvTraceLookupSymbolTableEntry+0x40>
										 traceLabel chn)
{
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];

	TRACE_ASSERT(name != NULL, "prvTraceLookupSymbolTableEntry: name == NULL", (traceLabel)0);
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceLabel)0);
    18a6:	4821      	ldr	r0, [pc, #132]	; (192c <prvTraceLookupSymbolTableEntry+0xbc>)
    18a8:	4b1f      	ldr	r3, [pc, #124]	; (1928 <prvTraceLookupSymbolTableEntry+0xb8>)
    18aa:	4798      	blx	r3
    18ac:	2000      	movs	r0, #0
    18ae:	e032      	b.n	1916 <prvTraceLookupSymbolTableEntry+0xa6>

	while (i != 0)
	{
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
		{
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
    18b0:	0a1a      	lsrs	r2, r3, #8
    18b2:	4690      	mov	r8, r2
	TRACE_ASSERT(name != NULL, "prvTraceLookupSymbolTableEntry: name == NULL", (traceLabel)0);
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceLabel)0);

	while (i != 0)
	{
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
    18b4:	27ff      	movs	r7, #255	; 0xff
    18b6:	401f      	ands	r7, r3
    18b8:	1c25      	adds	r5, r4, #0
    18ba:	1933      	adds	r3, r6, r4
    18bc:	4a1c      	ldr	r2, [pc, #112]	; (1930 <prvTraceLookupSymbolTableEntry+0xc0>)
    18be:	189b      	adds	r3, r3, r2
    18c0:	781b      	ldrb	r3, [r3, #0]
    18c2:	42bb      	cmp	r3, r7
    18c4:	d116      	bne.n	18f4 <prvTraceLookupSymbolTableEntry+0x84>
		{
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
    18c6:	1933      	adds	r3, r6, r4
    18c8:	4a1a      	ldr	r2, [pc, #104]	; (1934 <prvTraceLookupSymbolTableEntry+0xc4>)
    18ca:	189b      	adds	r3, r3, r2
    18cc:	781b      	ldrb	r3, [r3, #0]
    18ce:	4543      	cmp	r3, r8
    18d0:	d110      	bne.n	18f4 <prvTraceLookupSymbolTableEntry+0x84>
			{
				if (RecorderDataPtr->SymbolTable.symbytes[i + 4 + len] == '\0')
    18d2:	1d20      	adds	r0, r4, #4
    18d4:	1833      	adds	r3, r6, r0
    18d6:	444b      	add	r3, r9
    18d8:	2286      	movs	r2, #134	; 0x86
    18da:	00d2      	lsls	r2, r2, #3
    18dc:	189b      	adds	r3, r3, r2
    18de:	781b      	ldrb	r3, [r3, #0]
    18e0:	2b00      	cmp	r3, #0
    18e2:	d107      	bne.n	18f4 <prvTraceLookupSymbolTableEntry+0x84>
				{
					if (strncmp((char*)(& RecorderDataPtr->SymbolTable.symbytes[i + 4]), name, len) == 0)
    18e4:	1880      	adds	r0, r0, r2
    18e6:	1830      	adds	r0, r6, r0
    18e8:	4651      	mov	r1, sl
    18ea:	464a      	mov	r2, r9
    18ec:	4b12      	ldr	r3, [pc, #72]	; (1938 <prvTraceLookupSymbolTableEntry+0xc8>)
    18ee:	4798      	blx	r3
    18f0:	2800      	cmp	r0, #0
    18f2:	d00d      	beq.n	1910 <prvTraceLookupSymbolTableEntry+0xa0>
						break; /* found */
					}
				}
			}
		}
		i = (uint16_t)(RecorderDataPtr->SymbolTable.symbytes[i] + (RecorderDataPtr->SymbolTable.symbytes[i + 1] * 0x100));
    18f4:	1975      	adds	r5, r6, r5
    18f6:	4a11      	ldr	r2, [pc, #68]	; (193c <prvTraceLookupSymbolTableEntry+0xcc>)
    18f8:	18ab      	adds	r3, r5, r2
    18fa:	781c      	ldrb	r4, [r3, #0]
    18fc:	0224      	lsls	r4, r4, #8
    18fe:	2386      	movs	r3, #134	; 0x86
    1900:	00db      	lsls	r3, r3, #3
    1902:	18ed      	adds	r5, r5, r3
    1904:	782b      	ldrb	r3, [r5, #0]
    1906:	191c      	adds	r4, r3, r4
    1908:	b2a4      	uxth	r4, r4
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];

	TRACE_ASSERT(name != NULL, "prvTraceLookupSymbolTableEntry: name == NULL", (traceLabel)0);
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceLabel)0);

	while (i != 0)
    190a:	2c00      	cmp	r4, #0
    190c:	d1d4      	bne.n	18b8 <prvTraceLookupSymbolTableEntry+0x48>
    190e:	e001      	b.n	1914 <prvTraceLookupSymbolTableEntry+0xa4>
    1910:	1c20      	adds	r0, r4, #0
    1912:	e000      	b.n	1916 <prvTraceLookupSymbolTableEntry+0xa6>
						break; /* found */
					}
				}
			}
		}
		i = (uint16_t)(RecorderDataPtr->SymbolTable.symbytes[i] + (RecorderDataPtr->SymbolTable.symbytes[i + 1] * 0x100));
    1914:	1c20      	adds	r0, r4, #0
	}
	return i;
}
    1916:	bc1c      	pop	{r2, r3, r4}
    1918:	4690      	mov	r8, r2
    191a:	4699      	mov	r9, r3
    191c:	46a2      	mov	sl, r4
    191e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1920:	200004ac 	.word	0x200004ac
    1924:	00005c30 	.word	0x00005c30
    1928:	00001165 	.word	0x00001165
    192c:	00005c6c 	.word	0x00005c6c
    1930:	00000432 	.word	0x00000432
    1934:	00000433 	.word	0x00000433
    1938:	000055dd 	.word	0x000055dd
    193c:	00000431 	.word	0x00000431

00001940 <prvTraceCreateSymbolTableEntry>:
 ******************************************************************************/
uint16_t prvTraceCreateSymbolTableEntry(const char* name,
										uint8_t crc6,
										uint8_t len,
										traceLabel channel)
{
    1940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1942:	464f      	mov	r7, r9
    1944:	4646      	mov	r6, r8
    1946:	b4c0      	push	{r6, r7}
    1948:	1c05      	adds	r5, r0, #0
    194a:	1c14      	adds	r4, r2, #0
	uint16_t ret = 0;

	TRACE_ASSERT(name != NULL, "prvTraceCreateSymbolTableEntry: name == NULL", 0);
    194c:	2800      	cmp	r0, #0
    194e:	d104      	bne.n	195a <prvTraceCreateSymbolTableEntry+0x1a>
    1950:	4826      	ldr	r0, [pc, #152]	; (19ec <prvTraceCreateSymbolTableEntry+0xac>)
    1952:	4b27      	ldr	r3, [pc, #156]	; (19f0 <prvTraceCreateSymbolTableEntry+0xb0>)
    1954:	4798      	blx	r3
    1956:	2000      	movs	r0, #0
    1958:	e043      	b.n	19e2 <prvTraceCreateSymbolTableEntry+0xa2>
	TRACE_ASSERT(len != 0, "prvTraceCreateSymbolTableEntry: len == 0", 0);
    195a:	2a00      	cmp	r2, #0
    195c:	d104      	bne.n	1968 <prvTraceCreateSymbolTableEntry+0x28>
    195e:	4825      	ldr	r0, [pc, #148]	; (19f4 <prvTraceCreateSymbolTableEntry+0xb4>)
    1960:	4b23      	ldr	r3, [pc, #140]	; (19f0 <prvTraceCreateSymbolTableEntry+0xb0>)
    1962:	4798      	blx	r3
    1964:	2000      	movs	r0, #0
    1966:	e03c      	b.n	19e2 <prvTraceCreateSymbolTableEntry+0xa2>

	if (RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + len + 4 >= SYMBOL_TABLE_SIZE)
    1968:	4a23      	ldr	r2, [pc, #140]	; (19f8 <prvTraceCreateSymbolTableEntry+0xb8>)
    196a:	6812      	ldr	r2, [r2, #0]
    196c:	4823      	ldr	r0, [pc, #140]	; (19fc <prvTraceCreateSymbolTableEntry+0xbc>)
    196e:	5810      	ldr	r0, [r2, r0]
    1970:	1d06      	adds	r6, r0, #4
    1972:	1937      	adds	r7, r6, r4
    1974:	46bc      	mov	ip, r7
    1976:	4f22      	ldr	r7, [pc, #136]	; (1a00 <prvTraceCreateSymbolTableEntry+0xc0>)
    1978:	45bc      	cmp	ip, r7
    197a:	d904      	bls.n	1986 <prvTraceCreateSymbolTableEntry+0x46>
	{
		vTraceError("Symbol table full. Increase SYMBOL_TABLE_SIZE in trcConfig.h");
    197c:	4821      	ldr	r0, [pc, #132]	; (1a04 <prvTraceCreateSymbolTableEntry+0xc4>)
    197e:	4b1c      	ldr	r3, [pc, #112]	; (19f0 <prvTraceCreateSymbolTableEntry+0xb0>)
    1980:	4798      	blx	r3
		ret = 0;
    1982:	2000      	movs	r0, #0
    1984:	e02d      	b.n	19e2 <prvTraceCreateSymbolTableEntry+0xa2>
	else
	{

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
    1986:	27ea      	movs	r7, #234	; 0xea
    1988:	00bf      	lsls	r7, r7, #2
    198a:	19c9      	adds	r1, r1, r7
    198c:	0049      	lsls	r1, r1, #1
    198e:	4689      	mov	r9, r1
    1990:	5a89      	ldrh	r1, [r1, r2]
    1992:	4688      	mov	r8, r1
	}
	else
	{

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
    1994:	1810      	adds	r0, r2, r0
    1996:	2786      	movs	r7, #134	; 0x86
    1998:	00ff      	lsls	r7, r7, #3
    199a:	5439      	strb	r1, [r7, r0]
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
    199c:	491a      	ldr	r1, [pc, #104]	; (1a08 <prvTraceCreateSymbolTableEntry+0xc8>)
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
    199e:	4647      	mov	r7, r8
    19a0:	0a3f      	lsrs	r7, r7, #8
		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
    19a2:	540f      	strb	r7, [r1, r0]
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
    19a4:	4919      	ldr	r1, [pc, #100]	; (1a0c <prvTraceCreateSymbolTableEntry+0xcc>)
    19a6:	540b      	strb	r3, [r1, r0]
			(uint8_t)(channel & 0x00FF);

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
    19a8:	4f19      	ldr	r7, [pc, #100]	; (1a10 <prvTraceCreateSymbolTableEntry+0xd0>)
    19aa:	19c0      	adds	r0, r0, r7
			(uint8_t)(channel / 0x100);
    19ac:	0a1b      	lsrs	r3, r3, #8
		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
			(uint8_t)(channel & 0x00FF);

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
    19ae:	7003      	strb	r3, [r0, #0]
			(uint8_t)(channel / 0x100);

		/* set name (bytes 4...4+len-1) */
		(void)strncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
    19b0:	2186      	movs	r1, #134	; 0x86
    19b2:	00c9      	lsls	r1, r1, #3
    19b4:	1876      	adds	r6, r6, r1
    19b6:	1990      	adds	r0, r2, r6
    19b8:	1c29      	adds	r1, r5, #0
    19ba:	1c22      	adds	r2, r4, #0
    19bc:	4b15      	ldr	r3, [pc, #84]	; (1a14 <prvTraceCreateSymbolTableEntry+0xd4>)
    19be:	4798      	blx	r3
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4]), name, len);

		/* Set zero termination (at offset 4+len) */
		RecorderDataPtr->SymbolTable.symbytes
			[RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4 + len] = '\0';
    19c0:	4b0d      	ldr	r3, [pc, #52]	; (19f8 <prvTraceCreateSymbolTableEntry+0xb8>)
    19c2:	681b      	ldr	r3, [r3, #0]
    19c4:	4a0d      	ldr	r2, [pc, #52]	; (19fc <prvTraceCreateSymbolTableEntry+0xbc>)
    19c6:	5899      	ldr	r1, [r3, r2]
    19c8:	1860      	adds	r0, r4, r1
    19ca:	181d      	adds	r5, r3, r0
    19cc:	4e12      	ldr	r6, [pc, #72]	; (1a18 <prvTraceCreateSymbolTableEntry+0xd8>)
    19ce:	19ad      	adds	r5, r5, r6
    19d0:	2600      	movs	r6, #0
    19d2:	702e      	strb	r6, [r5, #0]

		/* store index of entry (for return value, and as head of LL[crc6]) */
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
    19d4:	464f      	mov	r7, r9
    19d6:	52f9      	strh	r1, [r7, r3]

		RecorderDataPtr->SymbolTable.nextFreeSymbolIndex += (len + 5);
    19d8:	3005      	adds	r0, #5
    19da:	5098      	str	r0, [r3, r2]

		ret = (uint16_t)(RecorderDataPtr->SymbolTable.nextFreeSymbolIndex -
    19dc:	1b00      	subs	r0, r0, r4
    19de:	3805      	subs	r0, #5
    19e0:	b280      	uxth	r0, r0
			(len + 5));
	}

	return ret;
}
    19e2:	bc0c      	pop	{r2, r3}
    19e4:	4690      	mov	r8, r2
    19e6:	4699      	mov	r9, r3
    19e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19ea:	46c0      	nop			; (mov r8, r8)
    19ec:	00005ca4 	.word	0x00005ca4
    19f0:	00001165 	.word	0x00001165
    19f4:	00005ce0 	.word	0x00005ce0
    19f8:	200004ac 	.word	0x200004ac
    19fc:	0000042c 	.word	0x0000042c
    1a00:	0000031f 	.word	0x0000031f
    1a04:	00005d18 	.word	0x00005d18
    1a08:	00000431 	.word	0x00000431
    1a0c:	00000432 	.word	0x00000432
    1a10:	00000433 	.word	0x00000433
    1a14:	00005695 	.word	0x00005695
    1a18:	00000434 	.word	0x00000434

00001a1c <prvTraceGetChecksum>:
 *
 * Calculates a simple 6-bit checksum from a string, used to index the string
 * for fast symbol table lookup.
 ******************************************************************************/
void prvTraceGetChecksum(const char *pname, uint8_t* pcrc, uint8_t* plength)
{
    1a1c:	b538      	push	{r3, r4, r5, lr}
	unsigned char c;
	int length = 1;		/* Should be 1 to account for '\0' */
	int crc = 0;

	TRACE_ASSERT(pname != NULL, "prvTraceGetChecksum: pname == NULL", );
    1a1e:	2800      	cmp	r0, #0
    1a20:	d103      	bne.n	1a2a <prvTraceGetChecksum+0xe>
    1a22:	4812      	ldr	r0, [pc, #72]	; (1a6c <prvTraceGetChecksum+0x50>)
    1a24:	4b12      	ldr	r3, [pc, #72]	; (1a70 <prvTraceGetChecksum+0x54>)
    1a26:	4798      	blx	r3
    1a28:	e01e      	b.n	1a68 <prvTraceGetChecksum+0x4c>
	TRACE_ASSERT(pcrc != NULL, "prvTraceGetChecksum: pcrc == NULL", );
    1a2a:	2900      	cmp	r1, #0
    1a2c:	d103      	bne.n	1a36 <prvTraceGetChecksum+0x1a>
    1a2e:	4811      	ldr	r0, [pc, #68]	; (1a74 <prvTraceGetChecksum+0x58>)
    1a30:	4b0f      	ldr	r3, [pc, #60]	; (1a70 <prvTraceGetChecksum+0x54>)
    1a32:	4798      	blx	r3
    1a34:	e018      	b.n	1a68 <prvTraceGetChecksum+0x4c>
	TRACE_ASSERT(plength != NULL, "prvTraceGetChecksum: plength == NULL", );
    1a36:	2a00      	cmp	r2, #0
    1a38:	d103      	bne.n	1a42 <prvTraceGetChecksum+0x26>
    1a3a:	480f      	ldr	r0, [pc, #60]	; (1a78 <prvTraceGetChecksum+0x5c>)
    1a3c:	4b0c      	ldr	r3, [pc, #48]	; (1a70 <prvTraceGetChecksum+0x54>)
    1a3e:	4798      	blx	r3
    1a40:	e012      	b.n	1a68 <prvTraceGetChecksum+0x4c>

	if (pname != (const char *) 0)
	{
		for (; (c = *pname++) != '\0';)
    1a42:	7804      	ldrb	r4, [r0, #0]
    1a44:	2c00      	cmp	r4, #0
    1a46:	d009      	beq.n	1a5c <prvTraceGetChecksum+0x40>
    1a48:	2500      	movs	r5, #0
    1a4a:	2301      	movs	r3, #1
		{
			crc += c;
    1a4c:	192d      	adds	r5, r5, r4
			length++;
    1a4e:	3301      	adds	r3, #1
    1a50:	18c4      	adds	r4, r0, r3
    1a52:	3c01      	subs	r4, #1
	TRACE_ASSERT(pcrc != NULL, "prvTraceGetChecksum: pcrc == NULL", );
	TRACE_ASSERT(plength != NULL, "prvTraceGetChecksum: plength == NULL", );

	if (pname != (const char *) 0)
	{
		for (; (c = *pname++) != '\0';)
    1a54:	7824      	ldrb	r4, [r4, #0]
    1a56:	2c00      	cmp	r4, #0
    1a58:	d1f8      	bne.n	1a4c <prvTraceGetChecksum+0x30>
    1a5a:	e001      	b.n	1a60 <prvTraceGetChecksum+0x44>
    1a5c:	2500      	movs	r5, #0
    1a5e:	2301      	movs	r3, #1
		{
			crc += c;
			length++;
		}
	}
	*pcrc = (uint8_t)(crc & 0x3F);
    1a60:	203f      	movs	r0, #63	; 0x3f
    1a62:	4005      	ands	r5, r0
    1a64:	700d      	strb	r5, [r1, #0]
	*plength = (uint8_t)length;
    1a66:	7013      	strb	r3, [r2, #0]
}
    1a68:	bd38      	pop	{r3, r4, r5, pc}
    1a6a:	46c0      	nop			; (mov r8, r8)
    1a6c:	00005d58 	.word	0x00005d58
    1a70:	00001165 	.word	0x00001165
    1a74:	00005d8c 	.word	0x00005d8c
    1a78:	00005dbc 	.word	0x00005dbc

00001a7c <prvTraceOpenSymbol>:
		}
	}
}

traceLabel prvTraceOpenSymbol(const char* name, traceLabel userEventChannel)
{
    1a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a7e:	4647      	mov	r7, r8
    1a80:	b480      	push	{r7}
    1a82:	b082      	sub	sp, #8
    1a84:	1c04      	adds	r4, r0, #0
    1a86:	1c0f      	adds	r7, r1, #0
	uint16_t result;
	uint8_t len;
	uint8_t crc;
	TRACE_SR_ALLOC_CRITICAL_SECTION();
	
	len = 0;
    1a88:	2200      	movs	r2, #0
    1a8a:	466b      	mov	r3, sp
    1a8c:	71da      	strb	r2, [r3, #7]
	crc = 0;
    1a8e:	466b      	mov	r3, sp
    1a90:	719a      	strb	r2, [r3, #6]
	
	TRACE_ASSERT(name != NULL, "prvTraceOpenSymbol: name == NULL", (traceLabel)0);
    1a92:	2800      	cmp	r0, #0
    1a94:	d104      	bne.n	1aa0 <prvTraceOpenSymbol+0x24>
    1a96:	4818      	ldr	r0, [pc, #96]	; (1af8 <prvTraceOpenSymbol+0x7c>)
    1a98:	4b18      	ldr	r3, [pc, #96]	; (1afc <prvTraceOpenSymbol+0x80>)
    1a9a:	4798      	blx	r3
    1a9c:	2000      	movs	r0, #0
    1a9e:	e027      	b.n	1af0 <prvTraceOpenSymbol+0x74>

	prvTraceGetChecksum(name, &crc, &len);
    1aa0:	466e      	mov	r6, sp
    1aa2:	3606      	adds	r6, #6
    1aa4:	466d      	mov	r5, sp
    1aa6:	3507      	adds	r5, #7
    1aa8:	1c31      	adds	r1, r6, #0
    1aaa:	1c2a      	adds	r2, r5, #0
    1aac:	4b14      	ldr	r3, [pc, #80]	; (1b00 <prvTraceOpenSymbol+0x84>)
    1aae:	4798      	blx	r3

	trcCRITICAL_SECTION_BEGIN();
    1ab0:	4b14      	ldr	r3, [pc, #80]	; (1b04 <prvTraceOpenSymbol+0x88>)
    1ab2:	4798      	blx	r3
    1ab4:	4680      	mov	r8, r0
    1ab6:	4a14      	ldr	r2, [pc, #80]	; (1b08 <prvTraceOpenSymbol+0x8c>)
    1ab8:	68d3      	ldr	r3, [r2, #12]
    1aba:	3301      	adds	r3, #1
    1abc:	60d3      	str	r3, [r2, #12]
	result = prvTraceLookupSymbolTableEntry(name, crc, len, userEventChannel);
    1abe:	7831      	ldrb	r1, [r6, #0]
    1ac0:	782a      	ldrb	r2, [r5, #0]
    1ac2:	1c20      	adds	r0, r4, #0
    1ac4:	1c3b      	adds	r3, r7, #0
    1ac6:	4d11      	ldr	r5, [pc, #68]	; (1b0c <prvTraceOpenSymbol+0x90>)
    1ac8:	47a8      	blx	r5
    1aca:	1e05      	subs	r5, r0, #0
	if (!result)
    1acc:	d108      	bne.n	1ae0 <prvTraceOpenSymbol+0x64>
	{
		result = prvTraceCreateSymbolTableEntry(name, crc, len, userEventChannel);
    1ace:	466b      	mov	r3, sp
    1ad0:	7999      	ldrb	r1, [r3, #6]
    1ad2:	466b      	mov	r3, sp
    1ad4:	79da      	ldrb	r2, [r3, #7]
    1ad6:	1c20      	adds	r0, r4, #0
    1ad8:	1c3b      	adds	r3, r7, #0
    1ada:	4c0d      	ldr	r4, [pc, #52]	; (1b10 <prvTraceOpenSymbol+0x94>)
    1adc:	47a0      	blx	r4
    1ade:	1c05      	adds	r5, r0, #0
	}
	trcCRITICAL_SECTION_END();
    1ae0:	4b09      	ldr	r3, [pc, #36]	; (1b08 <prvTraceOpenSymbol+0x8c>)
    1ae2:	68da      	ldr	r2, [r3, #12]
    1ae4:	3a01      	subs	r2, #1
    1ae6:	60da      	str	r2, [r3, #12]
    1ae8:	4640      	mov	r0, r8
    1aea:	4b0a      	ldr	r3, [pc, #40]	; (1b14 <prvTraceOpenSymbol+0x98>)
    1aec:	4798      	blx	r3

	return result;
    1aee:	1c28      	adds	r0, r5, #0
}
    1af0:	b002      	add	sp, #8
    1af2:	bc04      	pop	{r2}
    1af4:	4690      	mov	r8, r2
    1af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1af8:	00005df0 	.word	0x00005df0
    1afc:	00001165 	.word	0x00001165
    1b00:	00001a1d 	.word	0x00001a1d
    1b04:	00002bed 	.word	0x00002bed
    1b08:	2000052c 	.word	0x2000052c
    1b0c:	00001871 	.word	0x00001871
    1b10:	00001941 	.word	0x00001941
    1b14:	00002bf9 	.word	0x00002bf9

00001b18 <vTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of vTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void vTracePortGetTimeStamp(uint32_t *pTimestamp)
{
    1b18:	b530      	push	{r4, r5, lr}
	static uint32_t last_traceTickCount = 0;
	static uint32_t last_hwtc_count = 0;
	uint32_t traceTickCount = 0;
	uint32_t hwtc_count = 0;

	if (trace_disable_timestamp == 1)
    1b1a:	4b1a      	ldr	r3, [pc, #104]	; (1b84 <vTracePortGetTimeStamp+0x6c>)
    1b1c:	681b      	ldr	r3, [r3, #0]
    1b1e:	2b01      	cmp	r3, #1
    1b20:	d105      	bne.n	1b2e <vTracePortGetTimeStamp+0x16>
	{
		if (pTimestamp)
    1b22:	2800      	cmp	r0, #0
    1b24:	d02d      	beq.n	1b82 <vTracePortGetTimeStamp+0x6a>
			*pTimestamp = last_timestamp;
    1b26:	4b17      	ldr	r3, [pc, #92]	; (1b84 <vTracePortGetTimeStamp+0x6c>)
    1b28:	685b      	ldr	r3, [r3, #4]
    1b2a:	6003      	str	r3, [r0, #0]
    1b2c:	e029      	b.n	1b82 <vTracePortGetTimeStamp+0x6a>

	/* Retrieve HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (HWTC_COUNT_DIRECTION == DIRECTION_INCREMENTING)
	hwtc_count = HWTC_COUNT;
#elif (HWTC_COUNT_DIRECTION == DIRECTION_DECREMENTING)
	hwtc_count = HWTC_PERIOD - HWTC_COUNT;
    1b2e:	4b16      	ldr	r3, [pc, #88]	; (1b88 <vTracePortGetTimeStamp+0x70>)
    1b30:	6819      	ldr	r1, [r3, #0]
    1b32:	3101      	adds	r1, #1
    1b34:	4b15      	ldr	r3, [pc, #84]	; (1b8c <vTracePortGetTimeStamp+0x74>)
    1b36:	681a      	ldr	r2, [r3, #0]
    1b38:	1a8a      	subs	r2, r1, r2
	{
		hwtc_count = last_hwtc_count;
	}
#endif

	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
    1b3a:	4b12      	ldr	r3, [pc, #72]	; (1b84 <vTracePortGetTimeStamp+0x6c>)
    1b3c:	689c      	ldr	r4, [r3, #8]
    1b3e:	68db      	ldr	r3, [r3, #12]
    1b40:	43dd      	mvns	r5, r3
    1b42:	42e5      	cmn	r5, r4
    1b44:	d502      	bpl.n	1b4c <vTracePortGetTimeStamp+0x34>
		traceTickCount = uiTraceTickCount;
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    1b46:	429c      	cmp	r4, r3
    1b48:	d106      	bne.n	1b58 <vTracePortGetTimeStamp+0x40>
		traceTickCount = last_traceTickCount;
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
    1b4a:	1c1c      	adds	r4, r3, #0
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    1b4c:	4b0d      	ldr	r3, [pc, #52]	; (1b84 <vTracePortGetTimeStamp+0x6c>)
    1b4e:	691b      	ldr	r3, [r3, #16]
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
    1b50:	429a      	cmp	r2, r3
    1b52:	419b      	sbcs	r3, r3
    1b54:	425b      	negs	r3, r3
    1b56:	18e3      	adds	r3, r4, r3
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
    1b58:	2800      	cmp	r0, #0
    1b5a:	d00f      	beq.n	1b7c <vTracePortGetTimeStamp+0x64>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		*pTimestamp = traceTickCount * (HWTC_PERIOD / HWTC_DIVISOR);
    1b5c:	0849      	lsrs	r1, r1, #1
    1b5e:	1c0c      	adds	r4, r1, #0
    1b60:	435c      	muls	r4, r3
    1b62:	6004      	str	r4, [r0, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / HWTC_DIVISOR. */
		*pTimestamp += (hwtc_count + traceTickCount * (HWTC_PERIOD % HWTC_DIVISOR)) / HWTC_DIVISOR;
    1b64:	4908      	ldr	r1, [pc, #32]	; (1b88 <vTracePortGetTimeStamp+0x70>)
    1b66:	6809      	ldr	r1, [r1, #0]
    1b68:	3101      	adds	r1, #1
    1b6a:	2501      	movs	r5, #1
    1b6c:	4029      	ands	r1, r5
    1b6e:	4359      	muls	r1, r3
    1b70:	1889      	adds	r1, r1, r2
    1b72:	0849      	lsrs	r1, r1, #1
    1b74:	1909      	adds	r1, r1, r4
    1b76:	6001      	str	r1, [r0, #0]

		last_timestamp = *pTimestamp;
    1b78:	4802      	ldr	r0, [pc, #8]	; (1b84 <vTracePortGetTimeStamp+0x6c>)
    1b7a:	6041      	str	r1, [r0, #4]
	}

	/* Store the previous values. */
	last_traceTickCount = traceTickCount;
    1b7c:	4901      	ldr	r1, [pc, #4]	; (1b84 <vTracePortGetTimeStamp+0x6c>)
    1b7e:	608b      	str	r3, [r1, #8]
	last_hwtc_count = hwtc_count;
    1b80:	610a      	str	r2, [r1, #16]
}
    1b82:	bd30      	pop	{r4, r5, pc}
    1b84:	20000560 	.word	0x20000560
    1b88:	e000e014 	.word	0xe000e014
    1b8c:	e000e018 	.word	0xe000e018

00001b90 <vTraceStoreTaskReady>:
 * vTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void vTraceStoreTaskReady(objectHandleType handle)
{
    1b90:	b570      	push	{r4, r5, r6, lr}
    1b92:	1e04      	subs	r4, r0, #0
	TREvent* tr;
	uint8_t hnd8;

	TRACE_SR_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
    1b94:	d03d      	beq.n	1c12 <vTraceStoreTaskReady+0x82>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
    1b96:	4b1f      	ldr	r3, [pc, #124]	; (1c14 <vTraceStoreTaskReady+0x84>)
    1b98:	681b      	ldr	r3, [r3, #0]
    1b9a:	2b00      	cmp	r3, #0
    1b9c:	d039      	beq.n	1c12 <vTraceStoreTaskReady+0x82>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= NTask, "vTraceStoreTaskReady: Invalid value for handle", );
    1b9e:	280f      	cmp	r0, #15
    1ba0:	d903      	bls.n	1baa <vTraceStoreTaskReady+0x1a>
    1ba2:	481d      	ldr	r0, [pc, #116]	; (1c18 <vTraceStoreTaskReady+0x88>)
    1ba4:	4b1d      	ldr	r3, [pc, #116]	; (1c1c <vTraceStoreTaskReady+0x8c>)
    1ba6:	4798      	blx	r3
    1ba8:	e033      	b.n	1c12 <vTraceStoreTaskReady+0x82>

	if (recorder_busy)
    1baa:	4b1d      	ldr	r3, [pc, #116]	; (1c20 <vTraceStoreTaskReady+0x90>)
    1bac:	681b      	ldr	r3, [r3, #0]
    1bae:	2b00      	cmp	r3, #0
    1bb0:	d003      	beq.n	1bba <vTraceStoreTaskReady+0x2a>
	 * This should never occur, as the tick- and kernel call ISR is on lowest
	 * interrupt priority and always are disabled during the critical sections
	 * of the recorder.
	 ***********************************************************************/

	 vTraceError("Recorder busy - high priority ISR using syscall? (1)");
    1bb2:	481c      	ldr	r0, [pc, #112]	; (1c24 <vTraceStoreTaskReady+0x94>)
    1bb4:	4b19      	ldr	r3, [pc, #100]	; (1c1c <vTraceStoreTaskReady+0x8c>)
    1bb6:	4798      	blx	r3
	 return;
    1bb8:	e02b      	b.n	1c12 <vTraceStoreTaskReady+0x82>
	}

	trcCRITICAL_SECTION_BEGIN();
    1bba:	4b1b      	ldr	r3, [pc, #108]	; (1c28 <vTraceStoreTaskReady+0x98>)
    1bbc:	4798      	blx	r3
    1bbe:	1c05      	adds	r5, r0, #0
    1bc0:	4b17      	ldr	r3, [pc, #92]	; (1c20 <vTraceStoreTaskReady+0x90>)
    1bc2:	681a      	ldr	r2, [r3, #0]
    1bc4:	3201      	adds	r2, #1
    1bc6:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
    1bc8:	4b18      	ldr	r3, [pc, #96]	; (1c2c <vTraceStoreTaskReady+0x9c>)
    1bca:	681b      	ldr	r3, [r3, #0]
    1bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1bce:	2b00      	cmp	r3, #0
    1bd0:	d018      	beq.n	1c04 <vTraceStoreTaskReady+0x74>
	{
		if (!TRACE_GET_TASK_FLAG_ISEXCLUDED(handle))
    1bd2:	1c23      	adds	r3, r4, #0
    1bd4:	3321      	adds	r3, #33	; 0x21
    1bd6:	10da      	asrs	r2, r3, #3
    1bd8:	4915      	ldr	r1, [pc, #84]	; (1c30 <vTraceStoreTaskReady+0xa0>)
    1bda:	5c8a      	ldrb	r2, [r1, r2]
    1bdc:	2107      	movs	r1, #7
    1bde:	400b      	ands	r3, r1
    1be0:	411a      	asrs	r2, r3
    1be2:	1c13      	adds	r3, r2, #0
    1be4:	07da      	lsls	r2, r3, #31
    1be6:	d40d      	bmi.n	1c04 <vTraceStoreTaskReady+0x74>
		{
			dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    1be8:	4812      	ldr	r0, [pc, #72]	; (1c34 <vTraceStoreTaskReady+0xa4>)
    1bea:	4b13      	ldr	r3, [pc, #76]	; (1c38 <vTraceStoreTaskReady+0xa8>)
    1bec:	4798      	blx	r3
    1bee:	1c06      	adds	r6, r0, #0
			hnd8 = prvTraceGet8BitHandle(handle);
			tr = (TREvent*)xTraceNextFreeEventBufferSlot();
    1bf0:	4b12      	ldr	r3, [pc, #72]	; (1c3c <vTraceStoreTaskReady+0xac>)
    1bf2:	4798      	blx	r3
			if (tr != NULL)
    1bf4:	2800      	cmp	r0, #0
    1bf6:	d005      	beq.n	1c04 <vTraceStoreTaskReady+0x74>
			{
				tr->type = DIV_TASK_READY;
    1bf8:	2202      	movs	r2, #2
    1bfa:	7002      	strb	r2, [r0, #0]
				tr->dts = dts3;
    1bfc:	8046      	strh	r6, [r0, #2]
				tr->objHandle = hnd8;
    1bfe:	7044      	strb	r4, [r0, #1]
				prvTraceUpdateCounters();
    1c00:	4b0f      	ldr	r3, [pc, #60]	; (1c40 <vTraceStoreTaskReady+0xb0>)
    1c02:	4798      	blx	r3
			}
		}
	}
	trcCRITICAL_SECTION_END();
    1c04:	4b06      	ldr	r3, [pc, #24]	; (1c20 <vTraceStoreTaskReady+0x90>)
    1c06:	681a      	ldr	r2, [r3, #0]
    1c08:	3a01      	subs	r2, #1
    1c0a:	601a      	str	r2, [r3, #0]
    1c0c:	1c28      	adds	r0, r5, #0
    1c0e:	4b0d      	ldr	r3, [pc, #52]	; (1c44 <vTraceStoreTaskReady+0xb4>)
    1c10:	4798      	blx	r3
}
    1c12:	bd70      	pop	{r4, r5, r6, pc}
    1c14:	20000004 	.word	0x20000004
    1c18:	00005e20 	.word	0x00005e20
    1c1c:	00001165 	.word	0x00001165
    1c20:	20000538 	.word	0x20000538
    1c24:	00005e60 	.word	0x00005e60
    1c28:	00002bed 	.word	0x00002bed
    1c2c:	200004ac 	.word	0x200004ac
    1c30:	20000528 	.word	0x20000528
    1c34:	0000ffff 	.word	0x0000ffff
    1c38:	00001755 	.word	0x00001755
    1c3c:	00001371 	.word	0x00001371
    1c40:	00001719 	.word	0x00001719
    1c44:	00002bf9 	.word	0x00002bf9

00001c48 <vTraceStoreKernelCall>:
 *
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
void vTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
    1c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c4a:	1c05      	adds	r5, r0, #0
    1c4c:	1c0c      	adds	r4, r1, #0
    1c4e:	1c16      	adds	r6, r2, #0
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "vTraceStoreKernelCall: ecode >= 0xFF", );
    1c50:	28fe      	cmp	r0, #254	; 0xfe
    1c52:	d903      	bls.n	1c5c <vTraceStoreKernelCall+0x14>
    1c54:	482d      	ldr	r0, [pc, #180]	; (1d0c <vTraceStoreKernelCall+0xc4>)
    1c56:	4b2e      	ldr	r3, [pc, #184]	; (1d10 <vTraceStoreKernelCall+0xc8>)
    1c58:	4798      	blx	r3
    1c5a:	e055      	b.n	1d08 <vTraceStoreKernelCall+0xc0>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "vTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", );
    1c5c:	2906      	cmp	r1, #6
    1c5e:	d903      	bls.n	1c68 <vTraceStoreKernelCall+0x20>
    1c60:	482c      	ldr	r0, [pc, #176]	; (1d14 <vTraceStoreKernelCall+0xcc>)
    1c62:	4b2b      	ldr	r3, [pc, #172]	; (1d10 <vTraceStoreKernelCall+0xc8>)
    1c64:	4798      	blx	r3
    1c66:	e04f      	b.n	1d08 <vTraceStoreKernelCall+0xc0>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "vTraceStoreKernelCall: Invalid value for objectNumber", );
    1c68:	4b2b      	ldr	r3, [pc, #172]	; (1d18 <vTraceStoreKernelCall+0xd0>)
    1c6a:	681b      	ldr	r3, [r3, #0]
    1c6c:	185b      	adds	r3, r3, r1
    1c6e:	3360      	adds	r3, #96	; 0x60
    1c70:	791b      	ldrb	r3, [r3, #4]
    1c72:	4293      	cmp	r3, r2
    1c74:	d203      	bcs.n	1c7e <vTraceStoreKernelCall+0x36>
    1c76:	4829      	ldr	r0, [pc, #164]	; (1d1c <vTraceStoreKernelCall+0xd4>)
    1c78:	4b25      	ldr	r3, [pc, #148]	; (1d10 <vTraceStoreKernelCall+0xc8>)
    1c7a:	4798      	blx	r3
    1c7c:	e044      	b.n	1d08 <vTraceStoreKernelCall+0xc0>

	if (recorder_busy)
    1c7e:	4b28      	ldr	r3, [pc, #160]	; (1d20 <vTraceStoreKernelCall+0xd8>)
    1c80:	681b      	ldr	r3, [r3, #0]
    1c82:	2b00      	cmp	r3, #0
    1c84:	d003      	beq.n	1c8e <vTraceStoreKernelCall+0x46>
		* or creates a user event.
		* Only ISRs that are disabled by TRACE_ENTER_CRITICAL_SECTION may use system calls
		* or user events (see TRACE_MAX_SYSCALL_INTERRUPT_PRIORITY).
		*************************************************************************/

		vTraceError("Recorder busy - high priority ISR using syscall? (2)");
    1c86:	4827      	ldr	r0, [pc, #156]	; (1d24 <vTraceStoreKernelCall+0xdc>)
    1c88:	4b21      	ldr	r3, [pc, #132]	; (1d10 <vTraceStoreKernelCall+0xc8>)
    1c8a:	4798      	blx	r3
		return;
    1c8c:	e03c      	b.n	1d08 <vTraceStoreKernelCall+0xc0>
	}

	if (handle_of_last_logged_task == 0)
    1c8e:	4b26      	ldr	r3, [pc, #152]	; (1d28 <vTraceStoreKernelCall+0xe0>)
    1c90:	781b      	ldrb	r3, [r3, #0]
    1c92:	2b00      	cmp	r3, #0
    1c94:	d038      	beq.n	1d08 <vTraceStoreKernelCall+0xc0>
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
    1c96:	4b25      	ldr	r3, [pc, #148]	; (1d2c <vTraceStoreKernelCall+0xe4>)
    1c98:	4798      	blx	r3
    1c9a:	1c07      	adds	r7, r0, #0
    1c9c:	4b20      	ldr	r3, [pc, #128]	; (1d20 <vTraceStoreKernelCall+0xd8>)
    1c9e:	681a      	ldr	r2, [r3, #0]
    1ca0:	3201      	adds	r2, #1
    1ca2:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
    1ca4:	4b1c      	ldr	r3, [pc, #112]	; (1d18 <vTraceStoreKernelCall+0xd0>)
    1ca6:	681b      	ldr	r3, [r3, #0]
    1ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1caa:	2b00      	cmp	r3, #0
    1cac:	d025      	beq.n	1cfa <vTraceStoreKernelCall+0xb2>
	{
		/* If it is an ISR or NOT an excluded task, this kernel call will be stored in the trace */
		if (nISRactive || !inExcludedTask)
    1cae:	4b1e      	ldr	r3, [pc, #120]	; (1d28 <vTraceStoreKernelCall+0xe0>)
    1cb0:	785b      	ldrb	r3, [r3, #1]
    1cb2:	b25b      	sxtb	r3, r3
    1cb4:	2b00      	cmp	r3, #0
    1cb6:	d103      	bne.n	1cc0 <vTraceStoreKernelCall+0x78>
    1cb8:	4b1b      	ldr	r3, [pc, #108]	; (1d28 <vTraceStoreKernelCall+0xe0>)
    1cba:	789b      	ldrb	r3, [r3, #2]
    1cbc:	2b00      	cmp	r3, #0
    1cbe:	d11c      	bne.n	1cfa <vTraceStoreKernelCall+0xb2>
		{
			/* Check if the referenced object or the event code is excluded */
			if (!uiTraceIsObjectExcluded(objectClass, (objectHandleType)objectNumber) && !TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(ecode))
    1cc0:	b2f6      	uxtb	r6, r6
    1cc2:	1c20      	adds	r0, r4, #0
    1cc4:	1c31      	adds	r1, r6, #0
    1cc6:	4b1a      	ldr	r3, [pc, #104]	; (1d30 <vTraceStoreKernelCall+0xe8>)
    1cc8:	4798      	blx	r3
    1cca:	2800      	cmp	r0, #0
    1ccc:	d115      	bne.n	1cfa <vTraceStoreKernelCall+0xb2>
    1cce:	08eb      	lsrs	r3, r5, #3
    1cd0:	4a18      	ldr	r2, [pc, #96]	; (1d34 <vTraceStoreKernelCall+0xec>)
    1cd2:	5cd2      	ldrb	r2, [r2, r3]
    1cd4:	2307      	movs	r3, #7
    1cd6:	402b      	ands	r3, r5
    1cd8:	411a      	asrs	r2, r3
    1cda:	1c13      	adds	r3, r2, #0
    1cdc:	07da      	lsls	r2, r3, #31
    1cde:	d40c      	bmi.n	1cfa <vTraceStoreKernelCall+0xb2>
			{
				dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
    1ce0:	4815      	ldr	r0, [pc, #84]	; (1d38 <vTraceStoreKernelCall+0xf0>)
    1ce2:	4b16      	ldr	r3, [pc, #88]	; (1d3c <vTraceStoreKernelCall+0xf4>)
    1ce4:	4798      	blx	r3
    1ce6:	1c04      	adds	r4, r0, #0
				hnd8 = prvTraceGet8BitHandle(objectNumber);
				kse = (KernelCall*) xTraceNextFreeEventBufferSlot();
    1ce8:	4b15      	ldr	r3, [pc, #84]	; (1d40 <vTraceStoreKernelCall+0xf8>)
    1cea:	4798      	blx	r3
				if (kse != NULL)
    1cec:	2800      	cmp	r0, #0
    1cee:	d004      	beq.n	1cfa <vTraceStoreKernelCall+0xb2>
				{
					kse->dts = dts1;
    1cf0:	8044      	strh	r4, [r0, #2]
					kse->type = (uint8_t)ecode;
    1cf2:	7005      	strb	r5, [r0, #0]
					kse->objHandle = hnd8;
    1cf4:	7046      	strb	r6, [r0, #1]
					prvTraceUpdateCounters();
    1cf6:	4b13      	ldr	r3, [pc, #76]	; (1d44 <vTraceStoreKernelCall+0xfc>)
    1cf8:	4798      	blx	r3
				}
			}
		}
	}
	trcCRITICAL_SECTION_END();
    1cfa:	4b09      	ldr	r3, [pc, #36]	; (1d20 <vTraceStoreKernelCall+0xd8>)
    1cfc:	681a      	ldr	r2, [r3, #0]
    1cfe:	3a01      	subs	r2, #1
    1d00:	601a      	str	r2, [r3, #0]
    1d02:	1c38      	adds	r0, r7, #0
    1d04:	4b10      	ldr	r3, [pc, #64]	; (1d48 <vTraceStoreKernelCall+0x100>)
    1d06:	4798      	blx	r3
#endif /* TRACE_SCHEDULING_ONLY */
}
    1d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d0a:	46c0      	nop			; (mov r8, r8)
    1d0c:	00005ed0 	.word	0x00005ed0
    1d10:	00001165 	.word	0x00001165
    1d14:	00005f04 	.word	0x00005f04
    1d18:	200004ac 	.word	0x200004ac
    1d1c:	00005f48 	.word	0x00005f48
    1d20:	20000538 	.word	0x20000538
    1d24:	00005f8c 	.word	0x00005f8c
    1d28:	20000578 	.word	0x20000578
    1d2c:	00002bed 	.word	0x00002bed
    1d30:	00002485 	.word	0x00002485
    1d34:	2000053c 	.word	0x2000053c
    1d38:	0000ffff 	.word	0x0000ffff
    1d3c:	00001755 	.word	0x00001755
    1d40:	00001371 	.word	0x00001371
    1d44:	00001719 	.word	0x00001719
    1d48:	00002bf9 	.word	0x00002bf9

00001d4c <vTraceStoreKernelCallWithParam>:
 ******************************************************************************/
void vTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
    1d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d4e:	464f      	mov	r7, r9
    1d50:	4646      	mov	r6, r8
    1d52:	b4c0      	push	{r6, r7}
    1d54:	1c05      	adds	r5, r0, #0
    1d56:	1c0c      	adds	r4, r1, #0
    1d58:	1c16      	adds	r6, r2, #0
    1d5a:	1c1f      	adds	r7, r3, #0
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "vTraceStoreKernelCall: evtcode >= 0xFF", );
    1d5c:	28fe      	cmp	r0, #254	; 0xfe
    1d5e:	d903      	bls.n	1d68 <vTraceStoreKernelCallWithParam+0x1c>
    1d60:	4838      	ldr	r0, [pc, #224]	; (1e44 <vTraceStoreKernelCallWithParam+0xf8>)
    1d62:	4b39      	ldr	r3, [pc, #228]	; (1e48 <vTraceStoreKernelCallWithParam+0xfc>)
    1d64:	4798      	blx	r3
    1d66:	e068      	b.n	1e3a <vTraceStoreKernelCallWithParam+0xee>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "vTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", );
    1d68:	2906      	cmp	r1, #6
    1d6a:	d903      	bls.n	1d74 <vTraceStoreKernelCallWithParam+0x28>
    1d6c:	4837      	ldr	r0, [pc, #220]	; (1e4c <vTraceStoreKernelCallWithParam+0x100>)
    1d6e:	4b36      	ldr	r3, [pc, #216]	; (1e48 <vTraceStoreKernelCallWithParam+0xfc>)
    1d70:	4798      	blx	r3
    1d72:	e062      	b.n	1e3a <vTraceStoreKernelCallWithParam+0xee>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "vTraceStoreKernelCallWithParam: Invalid value for objectNumber", );
    1d74:	4b36      	ldr	r3, [pc, #216]	; (1e50 <vTraceStoreKernelCallWithParam+0x104>)
    1d76:	681a      	ldr	r2, [r3, #0]
    1d78:	1852      	adds	r2, r2, r1
    1d7a:	3260      	adds	r2, #96	; 0x60
    1d7c:	7912      	ldrb	r2, [r2, #4]
    1d7e:	42b2      	cmp	r2, r6
    1d80:	d203      	bcs.n	1d8a <vTraceStoreKernelCallWithParam+0x3e>
    1d82:	4834      	ldr	r0, [pc, #208]	; (1e54 <vTraceStoreKernelCallWithParam+0x108>)
    1d84:	4b30      	ldr	r3, [pc, #192]	; (1e48 <vTraceStoreKernelCallWithParam+0xfc>)
    1d86:	4798      	blx	r3
    1d88:	e057      	b.n	1e3a <vTraceStoreKernelCallWithParam+0xee>

	if (recorder_busy)
    1d8a:	4b33      	ldr	r3, [pc, #204]	; (1e58 <vTraceStoreKernelCallWithParam+0x10c>)
    1d8c:	681b      	ldr	r3, [r3, #0]
    1d8e:	2b00      	cmp	r3, #0
    1d90:	d003      	beq.n	1d9a <vTraceStoreKernelCallWithParam+0x4e>
		* or creates a user event.
		* Only ISRs that are disabled by TRACE_ENTER_CRITICAL_SECTION may use system calls
		* or user events (see TRACE_MAX_SYSCALL_INTERRUPT_PRIORITY).
		*************************************************************************/

		vTraceError("Recorder busy - high priority ISR using syscall? (3)");
    1d92:	4832      	ldr	r0, [pc, #200]	; (1e5c <vTraceStoreKernelCallWithParam+0x110>)
    1d94:	4b2c      	ldr	r3, [pc, #176]	; (1e48 <vTraceStoreKernelCallWithParam+0xfc>)
    1d96:	4798      	blx	r3
		return;
    1d98:	e04f      	b.n	1e3a <vTraceStoreKernelCallWithParam+0xee>
	}

	trcCRITICAL_SECTION_BEGIN();
    1d9a:	4b31      	ldr	r3, [pc, #196]	; (1e60 <vTraceStoreKernelCallWithParam+0x114>)
    1d9c:	4798      	blx	r3
    1d9e:	4680      	mov	r8, r0
    1da0:	4b2d      	ldr	r3, [pc, #180]	; (1e58 <vTraceStoreKernelCallWithParam+0x10c>)
    1da2:	681a      	ldr	r2, [r3, #0]
    1da4:	3201      	adds	r2, #1
    1da6:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task && (! inExcludedTask || nISRactive))
    1da8:	4b29      	ldr	r3, [pc, #164]	; (1e50 <vTraceStoreKernelCallWithParam+0x104>)
    1daa:	681b      	ldr	r3, [r3, #0]
    1dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1dae:	2b00      	cmp	r3, #0
    1db0:	d03c      	beq.n	1e2c <vTraceStoreKernelCallWithParam+0xe0>
    1db2:	4b2c      	ldr	r3, [pc, #176]	; (1e64 <vTraceStoreKernelCallWithParam+0x118>)
    1db4:	781b      	ldrb	r3, [r3, #0]
    1db6:	2b00      	cmp	r3, #0
    1db8:	d038      	beq.n	1e2c <vTraceStoreKernelCallWithParam+0xe0>
    1dba:	4b2a      	ldr	r3, [pc, #168]	; (1e64 <vTraceStoreKernelCallWithParam+0x118>)
    1dbc:	789b      	ldrb	r3, [r3, #2]
    1dbe:	2b00      	cmp	r3, #0
    1dc0:	d004      	beq.n	1dcc <vTraceStoreKernelCallWithParam+0x80>
    1dc2:	4b28      	ldr	r3, [pc, #160]	; (1e64 <vTraceStoreKernelCallWithParam+0x118>)
    1dc4:	785b      	ldrb	r3, [r3, #1]
    1dc6:	b25b      	sxtb	r3, r3
    1dc8:	2b00      	cmp	r3, #0
    1dca:	d02f      	beq.n	1e2c <vTraceStoreKernelCallWithParam+0xe0>
	{
		/* Check if the referenced object or the event code is excluded */
		if (!uiTraceIsObjectExcluded(objectClass, (objectHandleType)objectNumber) &&
    1dcc:	b2f6      	uxtb	r6, r6
    1dce:	1c20      	adds	r0, r4, #0
    1dd0:	1c31      	adds	r1, r6, #0
    1dd2:	4b25      	ldr	r3, [pc, #148]	; (1e68 <vTraceStoreKernelCallWithParam+0x11c>)
    1dd4:	4798      	blx	r3
    1dd6:	2800      	cmp	r0, #0
    1dd8:	d128      	bne.n	1e2c <vTraceStoreKernelCallWithParam+0xe0>
			!TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(evtcode))
    1dda:	08eb      	lsrs	r3, r5, #3
    1ddc:	4a23      	ldr	r2, [pc, #140]	; (1e6c <vTraceStoreKernelCallWithParam+0x120>)
    1dde:	5cd2      	ldrb	r2, [r2, r3]
    1de0:	2307      	movs	r3, #7
    1de2:	402b      	ands	r3, r5
    1de4:	411a      	asrs	r2, r3
    1de6:	1c13      	adds	r3, r2, #0

	trcCRITICAL_SECTION_BEGIN();
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task && (! inExcludedTask || nISRactive))
	{
		/* Check if the referenced object or the event code is excluded */
		if (!uiTraceIsObjectExcluded(objectClass, (objectHandleType)objectNumber) &&
    1de8:	07da      	lsls	r2, r3, #31
    1dea:	d41f      	bmi.n	1e2c <vTraceStoreKernelCallWithParam+0xe0>
			!TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(evtcode))
		{
			dts2 = (uint8_t)prvTraceGetDTS(0xFF);
    1dec:	20ff      	movs	r0, #255	; 0xff
    1dee:	4b20      	ldr	r3, [pc, #128]	; (1e70 <vTraceStoreKernelCallWithParam+0x124>)
    1df0:	4798      	blx	r3
    1df2:	4681      	mov	r9, r0
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
	{
		return param;
    1df4:	1e3c      	subs	r4, r7, #0
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
    1df6:	2cff      	cmp	r4, #255	; 0xff
    1df8:	d90d      	bls.n	1e16 <vTraceStoreKernelCallWithParam+0xca>
	{
		return param;
	}
	else
	{
		xps = (XPSEvent*) xTraceNextFreeEventBufferSlot();
    1dfa:	4b1e      	ldr	r3, [pc, #120]	; (1e74 <vTraceStoreKernelCallWithParam+0x128>)
    1dfc:	4798      	blx	r3
		if (xps != NULL)
    1dfe:	2800      	cmp	r0, #0
    1e00:	d007      	beq.n	1e12 <vTraceStoreKernelCallWithParam+0xc6>
		{
			xps->type = DIV_XPS;
    1e02:	2301      	movs	r3, #1
    1e04:	7003      	strb	r3, [r0, #0]
			xps->xps_8 = (param & (0xFF00 & ~param_max)) >> 8;
    1e06:	0a3b      	lsrs	r3, r7, #8
    1e08:	7043      	strb	r3, [r0, #1]
			xps->xps_16 = (param & (0xFFFF0000 & ~param_max)) >> 16;
    1e0a:	0c3b      	lsrs	r3, r7, #16
    1e0c:	8043      	strh	r3, [r0, #2]
			prvTraceUpdateCounters();
    1e0e:	4b1a      	ldr	r3, [pc, #104]	; (1e78 <vTraceStoreKernelCallWithParam+0x12c>)
    1e10:	4798      	blx	r3
		}

		return param & param_max;
    1e12:	24ff      	movs	r4, #255	; 0xff
    1e14:	403c      	ands	r4, r7
			!TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(evtcode))
		{
			dts2 = (uint8_t)prvTraceGetDTS(0xFF);
			p8 = (uint8_t) prvTraceGetParam(0xFF, param);
			hnd8 = prvTraceGet8BitHandle((objectHandleType)objectNumber);
			kse = (KernelCallWithParamAndHandle*) xTraceNextFreeEventBufferSlot();
    1e16:	4b17      	ldr	r3, [pc, #92]	; (1e74 <vTraceStoreKernelCallWithParam+0x128>)
    1e18:	4798      	blx	r3
			if (kse != NULL)
    1e1a:	2800      	cmp	r0, #0
    1e1c:	d006      	beq.n	1e2c <vTraceStoreKernelCallWithParam+0xe0>
			{
				kse->dts = dts2;
    1e1e:	464b      	mov	r3, r9
    1e20:	70c3      	strb	r3, [r0, #3]
				kse->type = (uint8_t)evtcode;
    1e22:	7005      	strb	r5, [r0, #0]
				kse->objHandle = hnd8;
    1e24:	7046      	strb	r6, [r0, #1]
				kse->param = p8;
    1e26:	7084      	strb	r4, [r0, #2]
				prvTraceUpdateCounters();
    1e28:	4b13      	ldr	r3, [pc, #76]	; (1e78 <vTraceStoreKernelCallWithParam+0x12c>)
    1e2a:	4798      	blx	r3
			}
		}
	}
	trcCRITICAL_SECTION_END();
    1e2c:	4b0a      	ldr	r3, [pc, #40]	; (1e58 <vTraceStoreKernelCallWithParam+0x10c>)
    1e2e:	681a      	ldr	r2, [r3, #0]
    1e30:	3a01      	subs	r2, #1
    1e32:	601a      	str	r2, [r3, #0]
    1e34:	4640      	mov	r0, r8
    1e36:	4b11      	ldr	r3, [pc, #68]	; (1e7c <vTraceStoreKernelCallWithParam+0x130>)
    1e38:	4798      	blx	r3
#endif /* TRACE_SCHEDULING_ONLY */
}
    1e3a:	bc0c      	pop	{r2, r3}
    1e3c:	4690      	mov	r8, r2
    1e3e:	4699      	mov	r9, r3
    1e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e42:	46c0      	nop			; (mov r8, r8)
    1e44:	00005fc4 	.word	0x00005fc4
    1e48:	00001165 	.word	0x00001165
    1e4c:	00005ffc 	.word	0x00005ffc
    1e50:	200004ac 	.word	0x200004ac
    1e54:	00006048 	.word	0x00006048
    1e58:	20000538 	.word	0x20000538
    1e5c:	00006098 	.word	0x00006098
    1e60:	00002bed 	.word	0x00002bed
    1e64:	20000578 	.word	0x20000578
    1e68:	00002485 	.word	0x00002485
    1e6c:	2000053c 	.word	0x2000053c
    1e70:	00001755 	.word	0x00001755
    1e74:	00001371 	.word	0x00001371
    1e78:	00001719 	.word	0x00001719
    1e7c:	00002bf9 	.word	0x00002bf9

00001e80 <vTraceStoreKernelCallWithNumericParamOnly>:
 *
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
void vTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
    1e80:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e82:	4647      	mov	r7, r8
    1e84:	b480      	push	{r7}
    1e86:	1c04      	adds	r4, r0, #0
    1e88:	1c0d      	adds	r5, r1, #0
	uint16_t restParam;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	restParam = 0;

	TRACE_ASSERT(evtcode < 0xFF,
    1e8a:	28fe      	cmp	r0, #254	; 0xfe
    1e8c:	d903      	bls.n	1e96 <vTraceStoreKernelCallWithNumericParamOnly+0x16>
    1e8e:	482c      	ldr	r0, [pc, #176]	; (1f40 <vTraceStoreKernelCallWithNumericParamOnly+0xc0>)
    1e90:	4b2c      	ldr	r3, [pc, #176]	; (1f44 <vTraceStoreKernelCallWithNumericParamOnly+0xc4>)
    1e92:	4798      	blx	r3
    1e94:	e050      	b.n	1f38 <vTraceStoreKernelCallWithNumericParamOnly+0xb8>
		"vTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", );

	if (recorder_busy)
    1e96:	4b2c      	ldr	r3, [pc, #176]	; (1f48 <vTraceStoreKernelCallWithNumericParamOnly+0xc8>)
    1e98:	681b      	ldr	r3, [r3, #0]
    1e9a:	2b00      	cmp	r3, #0
    1e9c:	d003      	beq.n	1ea6 <vTraceStoreKernelCallWithNumericParamOnly+0x26>
		* or creates a user event.
		* Only ISRs that are disabled by TRACE_ENTER_CRITICAL_SECTION may use system calls
		* or user events (see TRACE_MAX_SYSCALL_INTERRUPT_PRIORITY).
		*************************************************************************/

		vTraceError("Recorder busy - high priority ISR using syscall? (4)");
    1e9e:	482b      	ldr	r0, [pc, #172]	; (1f4c <vTraceStoreKernelCallWithNumericParamOnly+0xcc>)
    1ea0:	4b28      	ldr	r3, [pc, #160]	; (1f44 <vTraceStoreKernelCallWithNumericParamOnly+0xc4>)
    1ea2:	4798      	blx	r3
		return;
    1ea4:	e048      	b.n	1f38 <vTraceStoreKernelCallWithNumericParamOnly+0xb8>
	}

	trcCRITICAL_SECTION_BEGIN();
    1ea6:	4b2a      	ldr	r3, [pc, #168]	; (1f50 <vTraceStoreKernelCallWithNumericParamOnly+0xd0>)
    1ea8:	4798      	blx	r3
    1eaa:	1c06      	adds	r6, r0, #0
    1eac:	4b26      	ldr	r3, [pc, #152]	; (1f48 <vTraceStoreKernelCallWithNumericParamOnly+0xc8>)
    1eae:	681a      	ldr	r2, [r3, #0]
    1eb0:	3201      	adds	r2, #1
    1eb2:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task
    1eb4:	4b27      	ldr	r3, [pc, #156]	; (1f54 <vTraceStoreKernelCallWithNumericParamOnly+0xd4>)
    1eb6:	681b      	ldr	r3, [r3, #0]
    1eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1eba:	2b00      	cmp	r3, #0
    1ebc:	d035      	beq.n	1f2a <vTraceStoreKernelCallWithNumericParamOnly+0xaa>
    1ebe:	4b26      	ldr	r3, [pc, #152]	; (1f58 <vTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    1ec0:	781b      	ldrb	r3, [r3, #0]
    1ec2:	2b00      	cmp	r3, #0
    1ec4:	d031      	beq.n	1f2a <vTraceStoreKernelCallWithNumericParamOnly+0xaa>
		&& (! inExcludedTask || nISRactive))
    1ec6:	4b24      	ldr	r3, [pc, #144]	; (1f58 <vTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    1ec8:	789b      	ldrb	r3, [r3, #2]
    1eca:	2b00      	cmp	r3, #0
    1ecc:	d004      	beq.n	1ed8 <vTraceStoreKernelCallWithNumericParamOnly+0x58>
    1ece:	4b22      	ldr	r3, [pc, #136]	; (1f58 <vTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    1ed0:	785b      	ldrb	r3, [r3, #1]
    1ed2:	b25b      	sxtb	r3, r3
    1ed4:	2b00      	cmp	r3, #0
    1ed6:	d028      	beq.n	1f2a <vTraceStoreKernelCallWithNumericParamOnly+0xaa>
	{
		/* Check if the event code is excluded */
		if (!TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(evtcode))
    1ed8:	08e3      	lsrs	r3, r4, #3
    1eda:	4a20      	ldr	r2, [pc, #128]	; (1f5c <vTraceStoreKernelCallWithNumericParamOnly+0xdc>)
    1edc:	5cd2      	ldrb	r2, [r2, r3]
    1ede:	2307      	movs	r3, #7
    1ee0:	4023      	ands	r3, r4
    1ee2:	411a      	asrs	r2, r3
    1ee4:	1c13      	adds	r3, r2, #0
    1ee6:	07da      	lsls	r2, r3, #31
    1ee8:	d41f      	bmi.n	1f2a <vTraceStoreKernelCallWithNumericParamOnly+0xaa>
		{
			dts6 = (uint8_t)prvTraceGetDTS(0xFF);
    1eea:	20ff      	movs	r0, #255	; 0xff
    1eec:	4b1c      	ldr	r3, [pc, #112]	; (1f60 <vTraceStoreKernelCallWithNumericParamOnly+0xe0>)
    1eee:	4798      	blx	r3
    1ef0:	4680      	mov	r8, r0
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
	{
		return param;
    1ef2:	1c2f      	adds	r7, r5, #0
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
    1ef4:	4b1b      	ldr	r3, [pc, #108]	; (1f64 <vTraceStoreKernelCallWithNumericParamOnly+0xe4>)
    1ef6:	429d      	cmp	r5, r3
    1ef8:	d90d      	bls.n	1f16 <vTraceStoreKernelCallWithNumericParamOnly+0x96>
	{
		return param;
	}
	else
	{
		xps = (XPSEvent*) xTraceNextFreeEventBufferSlot();
    1efa:	4b1b      	ldr	r3, [pc, #108]	; (1f68 <vTraceStoreKernelCallWithNumericParamOnly+0xe8>)
    1efc:	4798      	blx	r3
		if (xps != NULL)
    1efe:	2800      	cmp	r0, #0
    1f00:	d007      	beq.n	1f12 <vTraceStoreKernelCallWithNumericParamOnly+0x92>
		{
			xps->type = DIV_XPS;
    1f02:	2301      	movs	r3, #1
    1f04:	7003      	strb	r3, [r0, #0]
			xps->xps_8 = (param & (0xFF00 & ~param_max)) >> 8;
    1f06:	2300      	movs	r3, #0
    1f08:	7043      	strb	r3, [r0, #1]
			xps->xps_16 = (param & (0xFFFF0000 & ~param_max)) >> 16;
    1f0a:	0c2b      	lsrs	r3, r5, #16
    1f0c:	8043      	strh	r3, [r0, #2]
			prvTraceUpdateCounters();
    1f0e:	4b17      	ldr	r3, [pc, #92]	; (1f6c <vTraceStoreKernelCallWithNumericParamOnly+0xec>)
    1f10:	4798      	blx	r3
		}

		return param & param_max;
    1f12:	042d      	lsls	r5, r5, #16
    1f14:	0c2f      	lsrs	r7, r5, #16
		/* Check if the event code is excluded */
		if (!TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(evtcode))
		{
			dts6 = (uint8_t)prvTraceGetDTS(0xFF);
			restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
			kse = (KernelCallWithParam16*) xTraceNextFreeEventBufferSlot();
    1f16:	4b14      	ldr	r3, [pc, #80]	; (1f68 <vTraceStoreKernelCallWithNumericParamOnly+0xe8>)
    1f18:	4798      	blx	r3
			if (kse != NULL)
    1f1a:	2800      	cmp	r0, #0
    1f1c:	d005      	beq.n	1f2a <vTraceStoreKernelCallWithNumericParamOnly+0xaa>
			{
				kse->dts = dts6;
    1f1e:	4643      	mov	r3, r8
    1f20:	7043      	strb	r3, [r0, #1]
				kse->type = (uint8_t)evtcode;
    1f22:	7004      	strb	r4, [r0, #0]
				kse->param = restParam;
    1f24:	8047      	strh	r7, [r0, #2]
				prvTraceUpdateCounters();
    1f26:	4b11      	ldr	r3, [pc, #68]	; (1f6c <vTraceStoreKernelCallWithNumericParamOnly+0xec>)
    1f28:	4798      	blx	r3
			}
		}
	}
	trcCRITICAL_SECTION_END();
    1f2a:	4b07      	ldr	r3, [pc, #28]	; (1f48 <vTraceStoreKernelCallWithNumericParamOnly+0xc8>)
    1f2c:	681a      	ldr	r2, [r3, #0]
    1f2e:	3a01      	subs	r2, #1
    1f30:	601a      	str	r2, [r3, #0]
    1f32:	1c30      	adds	r0, r6, #0
    1f34:	4b0e      	ldr	r3, [pc, #56]	; (1f70 <vTraceStoreKernelCallWithNumericParamOnly+0xf0>)
    1f36:	4798      	blx	r3
#endif /* TRACE_SCHEDULING_ONLY */
}
    1f38:	bc04      	pop	{r2}
    1f3a:	4690      	mov	r8, r2
    1f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f3e:	46c0      	nop			; (mov r8, r8)
    1f40:	000060d0 	.word	0x000060d0
    1f44:	00001165 	.word	0x00001165
    1f48:	20000538 	.word	0x20000538
    1f4c:	00006124 	.word	0x00006124
    1f50:	00002bed 	.word	0x00002bed
    1f54:	200004ac 	.word	0x200004ac
    1f58:	20000578 	.word	0x20000578
    1f5c:	2000053c 	.word	0x2000053c
    1f60:	00001755 	.word	0x00001755
    1f64:	0000ffff 	.word	0x0000ffff
    1f68:	00001371 	.word	0x00001371
    1f6c:	00001719 	.word	0x00001719
    1f70:	00002bf9 	.word	0x00002bf9

00001f74 <vTraceStoreObjectNameOnCloseEvent>:
 * "old" one, valid up until this point.
 ******************************************************************************/
#if (INCLUDE_OBJECT_DELETE == 1)
void vTraceStoreObjectNameOnCloseEvent(objectHandleType handle,
										traceObjectClass objectclass)
{
    1f74:	b570      	push	{r4, r5, r6, lr}
    1f76:	1c06      	adds	r6, r0, #0
    1f78:	1e0c      	subs	r4, r1, #0
	ObjCloseNameEvent * ce;
	const char * name;
	traceLabel idx;

	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    1f7a:	2c06      	cmp	r4, #6
    1f7c:	d903      	bls.n	1f86 <vTraceStoreObjectNameOnCloseEvent+0x12>
    1f7e:	4812      	ldr	r0, [pc, #72]	; (1fc8 <vTraceStoreObjectNameOnCloseEvent+0x54>)
    1f80:	4b12      	ldr	r3, [pc, #72]	; (1fcc <vTraceStoreObjectNameOnCloseEvent+0x58>)
    1f82:	4798      	blx	r3
    1f84:	e01f      	b.n	1fc6 <vTraceStoreObjectNameOnCloseEvent+0x52>
		"vTraceStoreObjectNameOnCloseEvent: objectclass >= TRACE_NCLASSES", );
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    1f86:	4b12      	ldr	r3, [pc, #72]	; (1fd0 <vTraceStoreObjectNameOnCloseEvent+0x5c>)
    1f88:	681d      	ldr	r5, [r3, #0]
    1f8a:	186b      	adds	r3, r5, r1
    1f8c:	3360      	adds	r3, #96	; 0x60
    1f8e:	791b      	ldrb	r3, [r3, #4]
    1f90:	4283      	cmp	r3, r0
    1f92:	d203      	bcs.n	1f9c <vTraceStoreObjectNameOnCloseEvent+0x28>
    1f94:	480f      	ldr	r0, [pc, #60]	; (1fd4 <vTraceStoreObjectNameOnCloseEvent+0x60>)
    1f96:	4b0d      	ldr	r3, [pc, #52]	; (1fcc <vTraceStoreObjectNameOnCloseEvent+0x58>)
    1f98:	4798      	blx	r3
    1f9a:	e014      	b.n	1fc6 <vTraceStoreObjectNameOnCloseEvent+0x52>
		"vTraceStoreObjectNameOnCloseEvent: Invalid value for handle", );

	if (RecorderDataPtr->recorderActive)
    1f9c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    1f9e:	2b00      	cmp	r3, #0
    1fa0:	d011      	beq.n	1fc6 <vTraceStoreObjectNameOnCloseEvent+0x52>
	{
		uint8_t hnd8 = prvTraceGet8BitHandle(handle);
		name = TRACE_PROPERTY_NAME_GET(objectclass, handle);
    1fa2:	4b0d      	ldr	r3, [pc, #52]	; (1fd8 <vTraceStoreObjectNameOnCloseEvent+0x64>)
    1fa4:	4798      	blx	r3
    1fa6:	1828      	adds	r0, r5, r0
    1fa8:	308c      	adds	r0, #140	; 0x8c
		idx = prvTraceOpenSymbol(name, 0);
    1faa:	2100      	movs	r1, #0
    1fac:	4b0b      	ldr	r3, [pc, #44]	; (1fdc <vTraceStoreObjectNameOnCloseEvent+0x68>)
    1fae:	4798      	blx	r3
    1fb0:	1c05      	adds	r5, r0, #0

		// Interrupt disable not necessary, already done in trcHooks.h macro
		ce = (ObjCloseNameEvent*) xTraceNextFreeEventBufferSlot();
    1fb2:	4b0b      	ldr	r3, [pc, #44]	; (1fe0 <vTraceStoreObjectNameOnCloseEvent+0x6c>)
    1fb4:	4798      	blx	r3
		if (ce != NULL)
    1fb6:	2800      	cmp	r0, #0
    1fb8:	d005      	beq.n	1fc6 <vTraceStoreObjectNameOnCloseEvent+0x52>
		{
			ce->type = EVENTGROUP_OBJCLOSE_NAME + objectclass;
    1fba:	3408      	adds	r4, #8
    1fbc:	7004      	strb	r4, [r0, #0]
			ce->objHandle = hnd8;
    1fbe:	7046      	strb	r6, [r0, #1]
			ce->symbolIndex = idx;
    1fc0:	8045      	strh	r5, [r0, #2]
			prvTraceUpdateCounters();
    1fc2:	4b08      	ldr	r3, [pc, #32]	; (1fe4 <vTraceStoreObjectNameOnCloseEvent+0x70>)
    1fc4:	4798      	blx	r3
		}
	}
}
    1fc6:	bd70      	pop	{r4, r5, r6, pc}
    1fc8:	0000615c 	.word	0x0000615c
    1fcc:	00001165 	.word	0x00001165
    1fd0:	200004ac 	.word	0x200004ac
    1fd4:	000061ac 	.word	0x000061ac
    1fd8:	000013b1 	.word	0x000013b1
    1fdc:	00001a7d 	.word	0x00001a7d
    1fe0:	00001371 	.word	0x00001371
    1fe4:	00001719 	.word	0x00001719

00001fe8 <vTraceStoreObjectPropertiesOnCloseEvent>:

void vTraceStoreObjectPropertiesOnCloseEvent(objectHandleType handle,
											 traceObjectClass objectclass)
{
    1fe8:	b570      	push	{r4, r5, r6, lr}
    1fea:	1c05      	adds	r5, r0, #0
    1fec:	1e0c      	subs	r4, r1, #0
	ObjClosePropEvent * pe;

	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    1fee:	2c06      	cmp	r4, #6
    1ff0:	d903      	bls.n	1ffa <vTraceStoreObjectPropertiesOnCloseEvent+0x12>
    1ff2:	481d      	ldr	r0, [pc, #116]	; (2068 <STACK_SIZE+0x68>)
    1ff4:	4b1d      	ldr	r3, [pc, #116]	; (206c <STACK_SIZE+0x6c>)
    1ff6:	4798      	blx	r3
    1ff8:	e034      	b.n	2064 <STACK_SIZE+0x64>
		"vTraceStoreObjectPropertiesOnCloseEvent: objectclass >= TRACE_NCLASSES", );
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    1ffa:	4b1d      	ldr	r3, [pc, #116]	; (2070 <STACK_SIZE+0x70>)
    1ffc:	681b      	ldr	r3, [r3, #0]
    1ffe:	185a      	adds	r2, r3, r1
    2000:	3260      	adds	r2, #96	; 0x60
    2002:	7912      	ldrb	r2, [r2, #4]
    2004:	4282      	cmp	r2, r0
    2006:	d203      	bcs.n	2010 <STACK_SIZE+0x10>
    2008:	481a      	ldr	r0, [pc, #104]	; (2074 <STACK_SIZE+0x74>)
    200a:	4b18      	ldr	r3, [pc, #96]	; (206c <STACK_SIZE+0x6c>)
    200c:	4798      	blx	r3
    200e:	e029      	b.n	2064 <STACK_SIZE+0x64>
		"vTraceStoreObjectPropertiesOnCloseEvent: Invalid value for handle", );

	if (RecorderDataPtr->recorderActive)
    2010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2012:	2b00      	cmp	r3, #0
    2014:	d026      	beq.n	2064 <STACK_SIZE+0x64>
	{
		// Interrupt disable not necessary, already done in trcHooks.h macro
		pe = (ObjClosePropEvent*) xTraceNextFreeEventBufferSlot();
    2016:	4b18      	ldr	r3, [pc, #96]	; (2078 <STACK_SIZE+0x78>)
    2018:	4798      	blx	r3
    201a:	1e06      	subs	r6, r0, #0
		if (pe != NULL)
    201c:	d022      	beq.n	2064 <STACK_SIZE+0x64>
		{
			if (objectclass == TRACE_CLASS_TASK)
    201e:	2c03      	cmp	r4, #3
    2020:	d10e      	bne.n	2040 <STACK_SIZE+0x40>
			{
				pe->arg1 = TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, handle);
    2022:	1c28      	adds	r0, r5, #0
    2024:	2103      	movs	r1, #3
    2026:	4b15      	ldr	r3, [pc, #84]	; (207c <STACK_SIZE+0x7c>)
    2028:	4798      	blx	r3
    202a:	4b11      	ldr	r3, [pc, #68]	; (2070 <STACK_SIZE+0x70>)
    202c:	681b      	ldr	r3, [r3, #0]
    202e:	191a      	adds	r2, r3, r4
    2030:	3268      	adds	r2, #104	; 0x68
    2032:	7912      	ldrb	r2, [r2, #4]
    2034:	181b      	adds	r3, r3, r0
    2036:	189b      	adds	r3, r3, r2
    2038:	3389      	adds	r3, #137	; 0x89
    203a:	791b      	ldrb	r3, [r3, #4]
    203c:	7073      	strb	r3, [r6, #1]
    203e:	e00d      	b.n	205c <STACK_SIZE+0x5c>
			}
			else
			{
				pe->arg1 = TRACE_PROPERTY_OBJECT_STATE(objectclass, handle);
    2040:	1c28      	adds	r0, r5, #0
    2042:	1c21      	adds	r1, r4, #0
    2044:	4b0d      	ldr	r3, [pc, #52]	; (207c <STACK_SIZE+0x7c>)
    2046:	4798      	blx	r3
    2048:	4b09      	ldr	r3, [pc, #36]	; (2070 <STACK_SIZE+0x70>)
    204a:	681b      	ldr	r3, [r3, #0]
    204c:	191a      	adds	r2, r3, r4
    204e:	3268      	adds	r2, #104	; 0x68
    2050:	7912      	ldrb	r2, [r2, #4]
    2052:	181b      	adds	r3, r3, r0
    2054:	189b      	adds	r3, r3, r2
    2056:	3388      	adds	r3, #136	; 0x88
    2058:	791b      	ldrb	r3, [r3, #4]
    205a:	7073      	strb	r3, [r6, #1]
			}
			pe->type = EVENTGROUP_OBJCLOSE_PROP + objectclass;
    205c:	3410      	adds	r4, #16
    205e:	7034      	strb	r4, [r6, #0]
			prvTraceUpdateCounters();
    2060:	4b07      	ldr	r3, [pc, #28]	; (2080 <STACK_SIZE+0x80>)
    2062:	4798      	blx	r3
		}
	}
}
    2064:	bd70      	pop	{r4, r5, r6, pc}
    2066:	46c0      	nop			; (mov r8, r8)
    2068:	000061f8 	.word	0x000061f8
    206c:	00001165 	.word	0x00001165
    2070:	200004ac 	.word	0x200004ac
    2074:	00006250 	.word	0x00006250
    2078:	00001371 	.word	0x00001371
    207c:	000013b1 	.word	0x000013b1
    2080:	00001719 	.word	0x00001719

00002084 <vTraceSetPriorityProperty>:
#endif

void vTraceSetPriorityProperty(uint8_t objectclass, objectHandleType id, uint8_t value)
{
    2084:	b538      	push	{r3, r4, r5, lr}
    2086:	1c04      	adds	r4, r0, #0
    2088:	1c15      	adds	r5, r2, #0
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    208a:	2806      	cmp	r0, #6
    208c:	d903      	bls.n	2096 <vTraceSetPriorityProperty+0x12>
    208e:	480e      	ldr	r0, [pc, #56]	; (20c8 <vTraceSetPriorityProperty+0x44>)
    2090:	4b0e      	ldr	r3, [pc, #56]	; (20cc <vTraceSetPriorityProperty+0x48>)
    2092:	4798      	blx	r3
    2094:	e017      	b.n	20c6 <vTraceSetPriorityProperty+0x42>
		"vTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", );
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    2096:	4b0e      	ldr	r3, [pc, #56]	; (20d0 <vTraceSetPriorityProperty+0x4c>)
    2098:	681b      	ldr	r3, [r3, #0]
    209a:	181b      	adds	r3, r3, r0
    209c:	3360      	adds	r3, #96	; 0x60
    209e:	791b      	ldrb	r3, [r3, #4]
    20a0:	428b      	cmp	r3, r1
    20a2:	d203      	bcs.n	20ac <vTraceSetPriorityProperty+0x28>
    20a4:	480b      	ldr	r0, [pc, #44]	; (20d4 <vTraceSetPriorityProperty+0x50>)
    20a6:	4b09      	ldr	r3, [pc, #36]	; (20cc <vTraceSetPriorityProperty+0x48>)
    20a8:	4798      	blx	r3
    20aa:	e00c      	b.n	20c6 <vTraceSetPriorityProperty+0x42>
		"vTraceSetPriorityProperty: Invalid value for id", );

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
    20ac:	1c08      	adds	r0, r1, #0
    20ae:	1c21      	adds	r1, r4, #0
    20b0:	4b09      	ldr	r3, [pc, #36]	; (20d8 <vTraceSetPriorityProperty+0x54>)
    20b2:	4798      	blx	r3
    20b4:	4b06      	ldr	r3, [pc, #24]	; (20d0 <vTraceSetPriorityProperty+0x4c>)
    20b6:	681b      	ldr	r3, [r3, #0]
    20b8:	191c      	adds	r4, r3, r4
    20ba:	3468      	adds	r4, #104	; 0x68
    20bc:	7922      	ldrb	r2, [r4, #4]
    20be:	181b      	adds	r3, r3, r0
    20c0:	189b      	adds	r3, r3, r2
    20c2:	3389      	adds	r3, #137	; 0x89
    20c4:	711d      	strb	r5, [r3, #4]
}
    20c6:	bd38      	pop	{r3, r4, r5, pc}
    20c8:	000062a0 	.word	0x000062a0
    20cc:	00001165 	.word	0x00001165
    20d0:	200004ac 	.word	0x200004ac
    20d4:	000062e8 	.word	0x000062e8
    20d8:	000013b1 	.word	0x000013b1

000020dc <uiTraceGetPriorityProperty>:

uint8_t uiTraceGetPriorityProperty(uint8_t objectclass, objectHandleType id)
{
    20dc:	b510      	push	{r4, lr}
    20de:	1e04      	subs	r4, r0, #0
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    20e0:	2c06      	cmp	r4, #6
    20e2:	d904      	bls.n	20ee <uiTraceGetPriorityProperty+0x12>
    20e4:	480f      	ldr	r0, [pc, #60]	; (2124 <uiTraceGetPriorityProperty+0x48>)
    20e6:	4b10      	ldr	r3, [pc, #64]	; (2128 <uiTraceGetPriorityProperty+0x4c>)
    20e8:	4798      	blx	r3
    20ea:	2000      	movs	r0, #0
    20ec:	e018      	b.n	2120 <uiTraceGetPriorityProperty+0x44>
		"uiTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    20ee:	4b0f      	ldr	r3, [pc, #60]	; (212c <uiTraceGetPriorityProperty+0x50>)
    20f0:	681b      	ldr	r3, [r3, #0]
    20f2:	181b      	adds	r3, r3, r0
    20f4:	3360      	adds	r3, #96	; 0x60
    20f6:	791b      	ldrb	r3, [r3, #4]
    20f8:	428b      	cmp	r3, r1
    20fa:	d204      	bcs.n	2106 <uiTraceGetPriorityProperty+0x2a>
    20fc:	480c      	ldr	r0, [pc, #48]	; (2130 <uiTraceGetPriorityProperty+0x54>)
    20fe:	4b0a      	ldr	r3, [pc, #40]	; (2128 <uiTraceGetPriorityProperty+0x4c>)
    2100:	4798      	blx	r3
    2102:	2000      	movs	r0, #0
    2104:	e00c      	b.n	2120 <uiTraceGetPriorityProperty+0x44>
		"uiTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
    2106:	1c08      	adds	r0, r1, #0
    2108:	1c21      	adds	r1, r4, #0
    210a:	4b0a      	ldr	r3, [pc, #40]	; (2134 <uiTraceGetPriorityProperty+0x58>)
    210c:	4798      	blx	r3
    210e:	4b07      	ldr	r3, [pc, #28]	; (212c <uiTraceGetPriorityProperty+0x50>)
    2110:	681b      	ldr	r3, [r3, #0]
    2112:	191c      	adds	r4, r3, r4
    2114:	3468      	adds	r4, #104	; 0x68
    2116:	7922      	ldrb	r2, [r4, #4]
    2118:	181b      	adds	r3, r3, r0
    211a:	189b      	adds	r3, r3, r2
    211c:	3389      	adds	r3, #137	; 0x89
    211e:	7918      	ldrb	r0, [r3, #4]
}
    2120:	bd10      	pop	{r4, pc}
    2122:	46c0      	nop			; (mov r8, r8)
    2124:	00006328 	.word	0x00006328
    2128:	00001165 	.word	0x00001165
    212c:	200004ac 	.word	0x200004ac
    2130:	00006370 	.word	0x00006370
    2134:	000013b1 	.word	0x000013b1

00002138 <vTraceSetObjectState>:

void vTraceSetObjectState(uint8_t objectclass, objectHandleType id, uint8_t value)
{
    2138:	b538      	push	{r3, r4, r5, lr}
    213a:	1c04      	adds	r4, r0, #0
    213c:	1c15      	adds	r5, r2, #0
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    213e:	2806      	cmp	r0, #6
    2140:	d903      	bls.n	214a <vTraceSetObjectState+0x12>
    2142:	480e      	ldr	r0, [pc, #56]	; (217c <vTraceSetObjectState+0x44>)
    2144:	4b0e      	ldr	r3, [pc, #56]	; (2180 <vTraceSetObjectState+0x48>)
    2146:	4798      	blx	r3
    2148:	e017      	b.n	217a <vTraceSetObjectState+0x42>
		"vTraceSetObjectState: objectclass >= TRACE_NCLASSES", );
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    214a:	4b0e      	ldr	r3, [pc, #56]	; (2184 <vTraceSetObjectState+0x4c>)
    214c:	681b      	ldr	r3, [r3, #0]
    214e:	181b      	adds	r3, r3, r0
    2150:	3360      	adds	r3, #96	; 0x60
    2152:	791b      	ldrb	r3, [r3, #4]
    2154:	428b      	cmp	r3, r1
    2156:	d203      	bcs.n	2160 <vTraceSetObjectState+0x28>
    2158:	480b      	ldr	r0, [pc, #44]	; (2188 <vTraceSetObjectState+0x50>)
    215a:	4b09      	ldr	r3, [pc, #36]	; (2180 <vTraceSetObjectState+0x48>)
    215c:	4798      	blx	r3
    215e:	e00c      	b.n	217a <vTraceSetObjectState+0x42>
		"vTraceSetObjectState: Invalid value for id", );

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
    2160:	1c08      	adds	r0, r1, #0
    2162:	1c21      	adds	r1, r4, #0
    2164:	4b09      	ldr	r3, [pc, #36]	; (218c <vTraceSetObjectState+0x54>)
    2166:	4798      	blx	r3
    2168:	4b06      	ldr	r3, [pc, #24]	; (2184 <vTraceSetObjectState+0x4c>)
    216a:	681b      	ldr	r3, [r3, #0]
    216c:	191c      	adds	r4, r3, r4
    216e:	3468      	adds	r4, #104	; 0x68
    2170:	7922      	ldrb	r2, [r4, #4]
    2172:	181b      	adds	r3, r3, r0
    2174:	189b      	adds	r3, r3, r2
    2176:	3388      	adds	r3, #136	; 0x88
    2178:	711d      	strb	r5, [r3, #4]
}
    217a:	bd38      	pop	{r3, r4, r5, pc}
    217c:	000063b0 	.word	0x000063b0
    2180:	00001165 	.word	0x00001165
    2184:	200004ac 	.word	0x200004ac
    2188:	000063f4 	.word	0x000063f4
    218c:	000013b1 	.word	0x000013b1

00002190 <uiTraceGetObjectState>:

uint8_t uiTraceGetObjectState(uint8_t objectclass, objectHandleType id)
{
    2190:	b510      	push	{r4, lr}
    2192:	1e04      	subs	r4, r0, #0
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    2194:	2c06      	cmp	r4, #6
    2196:	d904      	bls.n	21a2 <uiTraceGetObjectState+0x12>
    2198:	480f      	ldr	r0, [pc, #60]	; (21d8 <uiTraceGetObjectState+0x48>)
    219a:	4b10      	ldr	r3, [pc, #64]	; (21dc <uiTraceGetObjectState+0x4c>)
    219c:	4798      	blx	r3
    219e:	2000      	movs	r0, #0
    21a0:	e018      	b.n	21d4 <uiTraceGetObjectState+0x44>
		"uiTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    21a2:	4b0f      	ldr	r3, [pc, #60]	; (21e0 <uiTraceGetObjectState+0x50>)
    21a4:	681b      	ldr	r3, [r3, #0]
    21a6:	181b      	adds	r3, r3, r0
    21a8:	3360      	adds	r3, #96	; 0x60
    21aa:	791b      	ldrb	r3, [r3, #4]
    21ac:	428b      	cmp	r3, r1
    21ae:	d204      	bcs.n	21ba <uiTraceGetObjectState+0x2a>
    21b0:	480c      	ldr	r0, [pc, #48]	; (21e4 <uiTraceGetObjectState+0x54>)
    21b2:	4b0a      	ldr	r3, [pc, #40]	; (21dc <uiTraceGetObjectState+0x4c>)
    21b4:	4798      	blx	r3
    21b6:	2000      	movs	r0, #0
    21b8:	e00c      	b.n	21d4 <uiTraceGetObjectState+0x44>
		"uiTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
    21ba:	1c08      	adds	r0, r1, #0
    21bc:	1c21      	adds	r1, r4, #0
    21be:	4b0a      	ldr	r3, [pc, #40]	; (21e8 <uiTraceGetObjectState+0x58>)
    21c0:	4798      	blx	r3
    21c2:	4b07      	ldr	r3, [pc, #28]	; (21e0 <uiTraceGetObjectState+0x50>)
    21c4:	681b      	ldr	r3, [r3, #0]
    21c6:	191c      	adds	r4, r3, r4
    21c8:	3468      	adds	r4, #104	; 0x68
    21ca:	7922      	ldrb	r2, [r4, #4]
    21cc:	181b      	adds	r3, r3, r0
    21ce:	189b      	adds	r3, r3, r2
    21d0:	3388      	adds	r3, #136	; 0x88
    21d2:	7918      	ldrb	r0, [r3, #4]
}
    21d4:	bd10      	pop	{r4, pc}
    21d6:	46c0      	nop			; (mov r8, r8)
    21d8:	00006430 	.word	0x00006430
    21dc:	00001165 	.word	0x00001165
    21e0:	200004ac 	.word	0x200004ac
    21e4:	00006474 	.word	0x00006474
    21e8:	000013b1 	.word	0x000013b1

000021ec <vTraceStoreTaskswitch>:
 * vTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void vTraceStoreTaskswitch(objectHandleType task_handle)
{
    21ec:	b570      	push	{r4, r5, r6, lr}
    21ee:	1e04      	subs	r4, r0, #0
	uint8_t hnd8;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	skipEvent = 0;

	TRACE_ASSERT(task_handle <= NTask,
    21f0:	2c0f      	cmp	r4, #15
    21f2:	d903      	bls.n	21fc <vTraceStoreTaskswitch+0x10>
    21f4:	4825      	ldr	r0, [pc, #148]	; (228c <vTraceStoreTaskswitch+0xa0>)
    21f6:	4b26      	ldr	r3, [pc, #152]	; (2290 <vTraceStoreTaskswitch+0xa4>)
    21f8:	4798      	blx	r3
    21fa:	e046      	b.n	228a <vTraceStoreTaskswitch+0x9e>
	function since critical sections should not be used in the context switch
	event...)
	***************************************************************************/

	/* Skip the event if the task has been excluded, using vTraceExcludeTask */
	if (TRACE_GET_TASK_FLAG_ISEXCLUDED(task_handle))
    21fc:	1c03      	adds	r3, r0, #0
    21fe:	3321      	adds	r3, #33	; 0x21
    2200:	10da      	asrs	r2, r3, #3
    2202:	4924      	ldr	r1, [pc, #144]	; (2294 <vTraceStoreTaskswitch+0xa8>)
    2204:	5c8a      	ldrb	r2, [r1, r2]
    2206:	2107      	movs	r1, #7
    2208:	400b      	ands	r3, r1
    220a:	411a      	asrs	r2, r3
    220c:	1c13      	adds	r3, r2, #0
    220e:	07da      	lsls	r2, r3, #31
    2210:	d504      	bpl.n	221c <vTraceStoreTaskswitch+0x30>
	{
		skipEvent = 1;
		inExcludedTask = 1;
    2212:	2201      	movs	r2, #1
    2214:	4b20      	ldr	r3, [pc, #128]	; (2298 <vTraceStoreTaskswitch+0xac>)
    2216:	709a      	strb	r2, [r3, #2]
	***************************************************************************/

	/* Skip the event if the task has been excluded, using vTraceExcludeTask */
	if (TRACE_GET_TASK_FLAG_ISEXCLUDED(task_handle))
	{
		skipEvent = 1;
    2218:	2101      	movs	r1, #1
    221a:	e003      	b.n	2224 <vTraceStoreTaskswitch+0x38>
		inExcludedTask = 1;
	}
	else
	{
		inExcludedTask = 0;
    221c:	2200      	movs	r2, #0
    221e:	4b1e      	ldr	r3, [pc, #120]	; (2298 <vTraceStoreTaskswitch+0xac>)
    2220:	709a      	strb	r2, [r3, #2]
	TSEvent* ts;
	int8_t skipEvent;
	uint8_t hnd8;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	skipEvent = 0;
    2222:	2100      	movs	r1, #0
	else
	{
		inExcludedTask = 0;
	}

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
    2224:	4b1d      	ldr	r3, [pc, #116]	; (229c <vTraceStoreTaskswitch+0xb0>)
    2226:	681a      	ldr	r2, [r3, #0]
    2228:	3201      	adds	r2, #1
    222a:	601a      	str	r2, [r3, #0]

	/* Skip the event if the same task is scheduled */
	if (task_handle == handle_of_last_logged_task)
    222c:	4b1a      	ldr	r3, [pc, #104]	; (2298 <vTraceStoreTaskswitch+0xac>)
    222e:	781b      	ldrb	r3, [r3, #0]
    2230:	42a3      	cmp	r3, r4
    2232:	d026      	beq.n	2282 <vTraceStoreTaskswitch+0x96>
	{
		skipEvent = 1;
	}

	if (!RecorderDataPtr->recorderActive)
    2234:	4b1a      	ldr	r3, [pc, #104]	; (22a0 <vTraceStoreTaskswitch+0xb4>)
    2236:	681b      	ldr	r3, [r3, #0]
    2238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    223a:	2b00      	cmp	r3, #0
    223c:	d021      	beq.n	2282 <vTraceStoreTaskswitch+0x96>
	{
		skipEvent = 1;
	}

	/* If this event should be logged, log it! */
	if (skipEvent == 0)
    223e:	2900      	cmp	r1, #0
    2240:	d11f      	bne.n	2282 <vTraceStoreTaskswitch+0x96>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    2242:	4818      	ldr	r0, [pc, #96]	; (22a4 <vTraceStoreTaskswitch+0xb8>)
    2244:	4b18      	ldr	r3, [pc, #96]	; (22a8 <vTraceStoreTaskswitch+0xbc>)
    2246:	4798      	blx	r3
    2248:	1c06      	adds	r6, r0, #0
		handle_of_last_logged_task = task_handle;
    224a:	4b13      	ldr	r3, [pc, #76]	; (2298 <vTraceStoreTaskswitch+0xac>)
    224c:	701c      	strb	r4, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
		ts = (TSEvent*)xTraceNextFreeEventBufferSlot();
    224e:	4b17      	ldr	r3, [pc, #92]	; (22ac <vTraceStoreTaskswitch+0xc0>)
    2250:	4798      	blx	r3
    2252:	1e05      	subs	r5, r0, #0

		if (ts != NULL)
    2254:	d015      	beq.n	2282 <vTraceStoreTaskswitch+0x96>
		{
			if (uiTraceGetObjectState(TRACE_CLASS_TASK,
    2256:	4b10      	ldr	r3, [pc, #64]	; (2298 <vTraceStoreTaskswitch+0xac>)
    2258:	7819      	ldrb	r1, [r3, #0]
    225a:	2003      	movs	r0, #3
    225c:	4b14      	ldr	r3, [pc, #80]	; (22b0 <vTraceStoreTaskswitch+0xc4>)
    225e:	4798      	blx	r3
    2260:	2801      	cmp	r0, #1
    2262:	d102      	bne.n	226a <vTraceStoreTaskswitch+0x7e>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
    2264:	2307      	movs	r3, #7
    2266:	702b      	strb	r3, [r5, #0]
    2268:	e001      	b.n	226e <vTraceStoreTaskswitch+0x82>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
    226a:	2306      	movs	r3, #6
    226c:	702b      	strb	r3, [r5, #0]
			}

			ts->dts = dts3;
    226e:	806e      	strh	r6, [r5, #2]
			ts->objHandle = hnd8;
    2270:	706c      	strb	r4, [r5, #1]

			vTraceSetObjectState(TRACE_CLASS_TASK,
    2272:	4b09      	ldr	r3, [pc, #36]	; (2298 <vTraceStoreTaskswitch+0xac>)
    2274:	7819      	ldrb	r1, [r3, #0]
    2276:	2003      	movs	r0, #3
    2278:	2201      	movs	r2, #1
    227a:	4b0e      	ldr	r3, [pc, #56]	; (22b4 <vTraceStoreTaskswitch+0xc8>)
    227c:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
    227e:	4b0e      	ldr	r3, [pc, #56]	; (22b8 <vTraceStoreTaskswitch+0xcc>)
    2280:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
    2282:	4b06      	ldr	r3, [pc, #24]	; (229c <vTraceStoreTaskswitch+0xb0>)
    2284:	681a      	ldr	r2, [r3, #0]
    2286:	3a01      	subs	r2, #1
    2288:	601a      	str	r2, [r3, #0]
}
    228a:	bd70      	pop	{r4, r5, r6, pc}
    228c:	000064b0 	.word	0x000064b0
    2290:	00001165 	.word	0x00001165
    2294:	20000528 	.word	0x20000528
    2298:	20000578 	.word	0x20000578
    229c:	20000538 	.word	0x20000538
    22a0:	200004ac 	.word	0x200004ac
    22a4:	0000ffff 	.word	0x0000ffff
    22a8:	00001755 	.word	0x00001755
    22ac:	00001371 	.word	0x00001371
    22b0:	00002191 	.word	0x00002191
    22b4:	00002139 	.word	0x00002139
    22b8:	00001719 	.word	0x00001719

000022bc <vTraceSetTaskInstanceFinished>:

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
}

void vTraceSetTaskInstanceFinished(objectHandleType handle)
{
    22bc:	b508      	push	{r3, lr}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
    22be:	4b0b      	ldr	r3, [pc, #44]	; (22ec <vTraceSetTaskInstanceFinished+0x30>)
    22c0:	681a      	ldr	r2, [r3, #0]
    22c2:	2367      	movs	r3, #103	; 0x67
    22c4:	5cd3      	ldrb	r3, [r2, r3]
    22c6:	4283      	cmp	r3, r0
    22c8:	d203      	bcs.n	22d2 <vTraceSetTaskInstanceFinished+0x16>
    22ca:	4809      	ldr	r0, [pc, #36]	; (22f0 <vTraceSetTaskInstanceFinished+0x34>)
    22cc:	4b09      	ldr	r3, [pc, #36]	; (22f4 <vTraceSetTaskInstanceFinished+0x38>)
    22ce:	4798      	blx	r3
    22d0:	e00b      	b.n	22ea <vTraceSetTaskInstanceFinished+0x2e>
		"vTraceSetTaskInstanceFinished: Invalid value for handle", );

#if (USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
    22d2:	2103      	movs	r1, #3
    22d4:	4b08      	ldr	r3, [pc, #32]	; (22f8 <vTraceSetTaskInstanceFinished+0x3c>)
    22d6:	4798      	blx	r3
    22d8:	4b04      	ldr	r3, [pc, #16]	; (22ec <vTraceSetTaskInstanceFinished+0x30>)
    22da:	681b      	ldr	r3, [r3, #0]
    22dc:	226f      	movs	r2, #111	; 0x6f
    22de:	5c9a      	ldrb	r2, [r3, r2]
    22e0:	181b      	adds	r3, r3, r0
    22e2:	189b      	adds	r3, r3, r2
    22e4:	3388      	adds	r3, #136	; 0x88
    22e6:	2200      	movs	r2, #0
    22e8:	711a      	strb	r2, [r3, #4]
#endif
}
    22ea:	bd08      	pop	{r3, pc}
    22ec:	200004ac 	.word	0x200004ac
    22f0:	000064f4 	.word	0x000064f4
    22f4:	00001165 	.word	0x00001165
    22f8:	000013b1 	.word	0x000013b1

000022fc <prvTraceGetObjectNumber>:
#else

extern portBASE_TYPE uxQueueGetQueueNumber(void*);

objectHandleType prvTraceGetObjectNumber(void* handle)
{
    22fc:	b508      	push	{r3, lr}
	return (objectHandleType) uxQueueGetQueueNumber(handle);
    22fe:	4b02      	ldr	r3, [pc, #8]	; (2308 <prvTraceGetObjectNumber+0xc>)
    2300:	4798      	blx	r3
    2302:	b2c0      	uxtb	r0, r0
}
    2304:	bd08      	pop	{r3, pc}
    2306:	46c0      	nop			; (mov r8, r8)
    2308:	00003711 	.word	0x00003711

0000230c <prvTraceGetObjectType>:

#endif

unsigned char prvTraceGetObjectType(void* handle)
{
    230c:	b508      	push	{r3, lr}
	return ucQueueGetQueueType(handle);
    230e:	4b01      	ldr	r3, [pc, #4]	; (2314 <prvTraceGetObjectType+0x8>)
    2310:	4798      	blx	r3
}
    2312:	bd08      	pop	{r3, pc}
    2314:	00003715 	.word	0x00003715

00002318 <prvTraceGetTaskNumber>:

objectHandleType prvTraceGetTaskNumber(void* handle)
{
    2318:	b508      	push	{r3, lr}
	return (objectHandleType)uxTaskGetTaskNumber(handle);
    231a:	4b02      	ldr	r3, [pc, #8]	; (2324 <prvTraceGetTaskNumber+0xc>)
    231c:	4798      	blx	r3
    231e:	b2c0      	uxtb	r0, r0
}
    2320:	bd08      	pop	{r3, pc}
    2322:	46c0      	nop			; (mov r8, r8)
    2324:	00004271 	.word	0x00004271

00002328 <prvTraceGetCurrentTaskHandle>:
{
	return xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED;
}

void* prvTraceGetCurrentTaskHandle()
{
    2328:	b508      	push	{r3, lr}
	return xTaskGetCurrentTaskHandle();
    232a:	4b01      	ldr	r3, [pc, #4]	; (2330 <prvTraceGetCurrentTaskHandle+0x8>)
    232c:	4798      	blx	r3
}
    232e:	bd08      	pop	{r3, pc}
    2330:	0000427d 	.word	0x0000427d

00002334 <vTraceInitObjectPropertyTable>:

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
    2334:	b510      	push	{r4, lr}
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
    2336:	4b27      	ldr	r3, [pc, #156]	; (23d4 <vTraceInitObjectPropertyTable+0xa0>)
    2338:	681b      	ldr	r3, [r3, #0]
    233a:	2207      	movs	r2, #7
    233c:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = NQueue;
    233e:	220a      	movs	r2, #10
    2340:	2164      	movs	r1, #100	; 0x64
    2342:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = NSemaphore;
    2344:	2165      	movs	r1, #101	; 0x65
    2346:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = NMutex;
    2348:	2166      	movs	r1, #102	; 0x66
    234a:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = NTask;
    234c:	220f      	movs	r2, #15
    234e:	2167      	movs	r1, #103	; 0x67
    2350:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = NISR;
    2352:	2005      	movs	r0, #5
    2354:	2168      	movs	r1, #104	; 0x68
    2356:	5458      	strb	r0, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = NTimer;
    2358:	2102      	movs	r1, #2
    235a:	2069      	movs	r0, #105	; 0x69
    235c:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = NEventGroup;	
    235e:	206a      	movs	r0, #106	; 0x6a
    2360:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = NameLenQueue;
    2362:	216c      	movs	r1, #108	; 0x6c
    2364:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = NameLenSemaphore;
    2366:	216d      	movs	r1, #109	; 0x6d
    2368:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = NameLenMutex;
    236a:	216e      	movs	r1, #110	; 0x6e
    236c:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = NameLenTask;
    236e:	216f      	movs	r1, #111	; 0x6f
    2370:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = NameLenISR;
    2372:	2170      	movs	r1, #112	; 0x70
    2374:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = NameLenTimer;
    2376:	2171      	movs	r1, #113	; 0x71
    2378:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = NameLenEventGroup;	
    237a:	2172      	movs	r1, #114	; 0x72
    237c:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
    237e:	2210      	movs	r2, #16
    2380:	2174      	movs	r1, #116	; 0x74
    2382:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
    2384:	2175      	movs	r1, #117	; 0x75
    2386:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
    2388:	2176      	movs	r1, #118	; 0x76
    238a:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
    238c:	2113      	movs	r1, #19
    238e:	2077      	movs	r0, #119	; 0x77
    2390:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
    2392:	2411      	movs	r4, #17
    2394:	2078      	movs	r0, #120	; 0x78
    2396:	541c      	strb	r4, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
    2398:	2079      	movs	r0, #121	; 0x79
    239a:	541a      	strb	r2, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
    239c:	227a      	movs	r2, #122	; 0x7a
    239e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
    23a0:	2100      	movs	r1, #0
    23a2:	227c      	movs	r2, #124	; 0x7c
    23a4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
    23a6:	21a0      	movs	r1, #160	; 0xa0
    23a8:	227e      	movs	r2, #126	; 0x7e
    23aa:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
    23ac:	0049      	lsls	r1, r1, #1
    23ae:	2280      	movs	r2, #128	; 0x80
    23b0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
    23b2:	21f0      	movs	r1, #240	; 0xf0
    23b4:	0049      	lsls	r1, r1, #1
    23b6:	2282      	movs	r2, #130	; 0x82
    23b8:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
    23ba:	4907      	ldr	r1, [pc, #28]	; (23d8 <vTraceInitObjectPropertyTable+0xa4>)
    23bc:	2284      	movs	r2, #132	; 0x84
    23be:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
    23c0:	4906      	ldr	r1, [pc, #24]	; (23dc <vTraceInitObjectPropertyTable+0xa8>)
    23c2:	2286      	movs	r2, #134	; 0x86
    23c4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
    23c6:	4906      	ldr	r1, [pc, #24]	; (23e0 <vTraceInitObjectPropertyTable+0xac>)
    23c8:	2288      	movs	r2, #136	; 0x88
    23ca:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
    23cc:	22e6      	movs	r2, #230	; 0xe6
    23ce:	0092      	lsls	r2, r2, #2
    23d0:	661a      	str	r2, [r3, #96]	; 0x60
}
    23d2:	bd10      	pop	{r4, pc}
    23d4:	200004ac 	.word	0x200004ac
    23d8:	000002fd 	.word	0x000002fd
    23dc:	00000352 	.word	0x00000352
    23e0:	00000372 	.word	0x00000372

000023e4 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, xTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
    23e4:	4b12      	ldr	r3, [pc, #72]	; (2430 <vTraceInitObjectHandleStack+0x4c>)
    23e6:	2200      	movs	r2, #0
    23e8:	81da      	strh	r2, [r3, #14]
    23ea:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = NQueue;
    23ec:	220a      	movs	r2, #10
    23ee:	821a      	strh	r2, [r3, #16]
    23f0:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = NQueue + NSemaphore;
    23f2:	2214      	movs	r2, #20
    23f4:	825a      	strh	r2, [r3, #18]
    23f6:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = NQueue + NSemaphore + NMutex;
    23f8:	221e      	movs	r2, #30
    23fa:	829a      	strh	r2, [r3, #20]
    23fc:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = NQueue + NSemaphore + NMutex + NTask;
    23fe:	222d      	movs	r2, #45	; 0x2d
    2400:	82da      	strh	r2, [r3, #22]
    2402:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = NQueue + NSemaphore + NMutex + NTask + NISR;
    2404:	2232      	movs	r2, #50	; 0x32
    2406:	831a      	strh	r2, [r3, #24]
    2408:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = NQueue + NSemaphore + NMutex + NTask + NISR + NTimer;
    240a:	2234      	movs	r2, #52	; 0x34
    240c:	835a      	strh	r2, [r3, #26]
    240e:	819a      	strh	r2, [r3, #12]

	objectHandleStacks.highestIndexOfClass[0] = NQueue - 1;
    2410:	2209      	movs	r2, #9
    2412:	839a      	strh	r2, [r3, #28]
	objectHandleStacks.highestIndexOfClass[1] = NQueue + NSemaphore - 1;
    2414:	2213      	movs	r2, #19
    2416:	83da      	strh	r2, [r3, #30]
	objectHandleStacks.highestIndexOfClass[2] = NQueue + NSemaphore + NMutex - 1;
    2418:	221d      	movs	r2, #29
    241a:	841a      	strh	r2, [r3, #32]
	objectHandleStacks.highestIndexOfClass[3] = NQueue + NSemaphore + NMutex + NTask - 1;
    241c:	222c      	movs	r2, #44	; 0x2c
    241e:	845a      	strh	r2, [r3, #34]	; 0x22
	objectHandleStacks.highestIndexOfClass[4] = NQueue + NSemaphore + NMutex + NTask + NISR - 1;
    2420:	2231      	movs	r2, #49	; 0x31
    2422:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[5] = NQueue + NSemaphore + NMutex + NTask + NISR + NTimer - 1;
    2424:	2233      	movs	r2, #51	; 0x33
    2426:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[6] = NQueue + NSemaphore + NMutex + NTask + NISR + NTimer + NEventGroup - 1;
    2428:	2235      	movs	r2, #53	; 0x35
    242a:	851a      	strh	r2, [r3, #40]	; 0x28
}
    242c:	4770      	bx	lr
    242e:	46c0      	nop			; (mov r8, r8)
    2430:	200004b4 	.word	0x200004b4

00002434 <pszTraceGetErrorNotEnoughHandles>:
	
/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
	switch(objectclass)
    2434:	2806      	cmp	r0, #6
    2436:	d80f      	bhi.n	2458 <pszTraceGetErrorNotEnoughHandles+0x24>
    2438:	0080      	lsls	r0, r0, #2
    243a:	4b09      	ldr	r3, [pc, #36]	; (2460 <pszTraceGetErrorNotEnoughHandles+0x2c>)
    243c:	581b      	ldr	r3, [r3, r0]
    243e:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase NTask in trcConfig.h";
    2440:	4808      	ldr	r0, [pc, #32]	; (2464 <pszTraceGetErrorNotEnoughHandles+0x30>)
    2442:	e00c      	b.n	245e <pszTraceGetErrorNotEnoughHandles+0x2a>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase NISR in trcConfig.h";
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase NSemaphore in trcConfig.h";
    2444:	4808      	ldr	r0, [pc, #32]	; (2468 <pszTraceGetErrorNotEnoughHandles+0x34>)
    2446:	e00a      	b.n	245e <pszTraceGetErrorNotEnoughHandles+0x2a>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase NMutex in trcConfig.h";
    2448:	4808      	ldr	r0, [pc, #32]	; (246c <pszTraceGetErrorNotEnoughHandles+0x38>)
    244a:	e008      	b.n	245e <pszTraceGetErrorNotEnoughHandles+0x2a>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase NQueue in trcConfig.h";
    244c:	4808      	ldr	r0, [pc, #32]	; (2470 <pszTraceGetErrorNotEnoughHandles+0x3c>)
    244e:	e006      	b.n	245e <pszTraceGetErrorNotEnoughHandles+0x2a>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase NTimer in trcConfig.h";
    2450:	4808      	ldr	r0, [pc, #32]	; (2474 <pszTraceGetErrorNotEnoughHandles+0x40>)
    2452:	e004      	b.n	245e <pszTraceGetErrorNotEnoughHandles+0x2a>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase NEventGroup in trcConfig.h";		
    2454:	4808      	ldr	r0, [pc, #32]	; (2478 <pszTraceGetErrorNotEnoughHandles+0x44>)
    2456:	e002      	b.n	245e <pszTraceGetErrorNotEnoughHandles+0x2a>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
    2458:	4808      	ldr	r0, [pc, #32]	; (247c <pszTraceGetErrorNotEnoughHandles+0x48>)
    245a:	e000      	b.n	245e <pszTraceGetErrorNotEnoughHandles+0x2a>
	switch(objectclass)
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase NTask in trcConfig.h";
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase NISR in trcConfig.h";
    245c:	4808      	ldr	r0, [pc, #32]	; (2480 <pszTraceGetErrorNotEnoughHandles+0x4c>)
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase NEventGroup in trcConfig.h";		
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
	}
}
    245e:	4770      	bx	lr
    2460:	0000653c 	.word	0x0000653c
    2464:	00006574 	.word	0x00006574
    2468:	000065e4 	.word	0x000065e4
    246c:	00006628 	.word	0x00006628
    2470:	00006664 	.word	0x00006664
    2474:	000066a0 	.word	0x000066a0
    2478:	000066dc 	.word	0x000066dc
    247c:	00006720 	.word	0x00006720
    2480:	000065ac 	.word	0x000065ac

00002484 <uiTraceIsObjectExcluded>:

/* Returns the exclude state of the object */
uint8_t uiTraceIsObjectExcluded(traceObjectClass objectclass, objectHandleType handle)
{
    2484:	b508      	push	{r3, lr}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, "prvTraceIsObjectExcluded: objectclass >= TRACE_NCLASSES", 1);
    2486:	2806      	cmp	r0, #6
    2488:	d904      	bls.n	2494 <uiTraceIsObjectExcluded+0x10>
    248a:	482e      	ldr	r0, [pc, #184]	; (2544 <uiTraceIsObjectExcluded+0xc0>)
    248c:	4b2e      	ldr	r3, [pc, #184]	; (2548 <uiTraceIsObjectExcluded+0xc4>)
    248e:	4798      	blx	r3
    2490:	2001      	movs	r0, #1
    2492:	e056      	b.n	2542 <uiTraceIsObjectExcluded+0xbe>
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], "uiTraceIsObjectExcluded: Invalid value for handle", 1);
    2494:	4b2d      	ldr	r3, [pc, #180]	; (254c <uiTraceIsObjectExcluded+0xc8>)
    2496:	681b      	ldr	r3, [r3, #0]
    2498:	181b      	adds	r3, r3, r0
    249a:	3360      	adds	r3, #96	; 0x60
    249c:	791b      	ldrb	r3, [r3, #4]
    249e:	428b      	cmp	r3, r1
    24a0:	d204      	bcs.n	24ac <uiTraceIsObjectExcluded+0x28>
    24a2:	482b      	ldr	r0, [pc, #172]	; (2550 <uiTraceIsObjectExcluded+0xcc>)
    24a4:	4b28      	ldr	r3, [pc, #160]	; (2548 <uiTraceIsObjectExcluded+0xc4>)
    24a6:	4798      	blx	r3
    24a8:	2001      	movs	r0, #1
    24aa:	e04a      	b.n	2542 <uiTraceIsObjectExcluded+0xbe>
	
	switch(objectclass)
    24ac:	2806      	cmp	r0, #6
    24ae:	d844      	bhi.n	253a <uiTraceIsObjectExcluded+0xb6>
    24b0:	0080      	lsls	r0, r0, #2
    24b2:	4b28      	ldr	r3, [pc, #160]	; (2554 <uiTraceIsObjectExcluded+0xd0>)
    24b4:	581b      	ldr	r3, [r3, r0]
    24b6:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return TRACE_GET_TASK_FLAG_ISEXCLUDED(handle);
    24b8:	3121      	adds	r1, #33	; 0x21
    24ba:	2007      	movs	r0, #7
    24bc:	4008      	ands	r0, r1
    24be:	2301      	movs	r3, #1
    24c0:	4083      	lsls	r3, r0
    24c2:	1c18      	adds	r0, r3, #0
    24c4:	10c9      	asrs	r1, r1, #3
    24c6:	4b24      	ldr	r3, [pc, #144]	; (2558 <uiTraceIsObjectExcluded+0xd4>)
    24c8:	5c5b      	ldrb	r3, [r3, r1]
    24ca:	4018      	ands	r0, r3
    24cc:	e039      	b.n	2542 <uiTraceIsObjectExcluded+0xbe>
	case TRACE_CLASS_SEMAPHORE:
		return TRACE_GET_SEMAPHORE_FLAG_ISEXCLUDED(handle);
    24ce:	310b      	adds	r1, #11
    24d0:	2007      	movs	r0, #7
    24d2:	4008      	ands	r0, r1
    24d4:	2301      	movs	r3, #1
    24d6:	4083      	lsls	r3, r0
    24d8:	1c18      	adds	r0, r3, #0
    24da:	10c9      	asrs	r1, r1, #3
    24dc:	4b1e      	ldr	r3, [pc, #120]	; (2558 <uiTraceIsObjectExcluded+0xd4>)
    24de:	5c5b      	ldrb	r3, [r3, r1]
    24e0:	4018      	ands	r0, r3
    24e2:	e02e      	b.n	2542 <uiTraceIsObjectExcluded+0xbe>
	case TRACE_CLASS_MUTEX:
		return TRACE_GET_MUTEX_FLAG_ISEXCLUDED(handle);
    24e4:	3116      	adds	r1, #22
    24e6:	2007      	movs	r0, #7
    24e8:	4008      	ands	r0, r1
    24ea:	2301      	movs	r3, #1
    24ec:	4083      	lsls	r3, r0
    24ee:	1c18      	adds	r0, r3, #0
    24f0:	10c9      	asrs	r1, r1, #3
    24f2:	4b19      	ldr	r3, [pc, #100]	; (2558 <uiTraceIsObjectExcluded+0xd4>)
    24f4:	5c5b      	ldrb	r3, [r3, r1]
    24f6:	4018      	ands	r0, r3
    24f8:	e023      	b.n	2542 <uiTraceIsObjectExcluded+0xbe>
	case TRACE_CLASS_QUEUE:
		return TRACE_GET_QUEUE_FLAG_ISEXCLUDED(handle);
    24fa:	2007      	movs	r0, #7
    24fc:	4008      	ands	r0, r1
    24fe:	2301      	movs	r3, #1
    2500:	4083      	lsls	r3, r0
    2502:	1c18      	adds	r0, r3, #0
    2504:	08c9      	lsrs	r1, r1, #3
    2506:	4b14      	ldr	r3, [pc, #80]	; (2558 <uiTraceIsObjectExcluded+0xd4>)
    2508:	5c5b      	ldrb	r3, [r3, r1]
    250a:	4018      	ands	r0, r3
    250c:	e019      	b.n	2542 <uiTraceIsObjectExcluded+0xbe>
	case TRACE_CLASS_TIMER:
		return TRACE_GET_TIMER_FLAG_ISEXCLUDED(handle);		
    250e:	3131      	adds	r1, #49	; 0x31
    2510:	2007      	movs	r0, #7
    2512:	4008      	ands	r0, r1
    2514:	2301      	movs	r3, #1
    2516:	4083      	lsls	r3, r0
    2518:	1c18      	adds	r0, r3, #0
    251a:	10c9      	asrs	r1, r1, #3
    251c:	4b0e      	ldr	r3, [pc, #56]	; (2558 <uiTraceIsObjectExcluded+0xd4>)
    251e:	5c5b      	ldrb	r3, [r3, r1]
    2520:	4018      	ands	r0, r3
    2522:	e00e      	b.n	2542 <uiTraceIsObjectExcluded+0xbe>
	case TRACE_CLASS_EVENTGROUP:
		return TRACE_GET_EVENTGROUP_FLAG_ISEXCLUDED(handle);				
    2524:	3134      	adds	r1, #52	; 0x34
    2526:	2007      	movs	r0, #7
    2528:	4008      	ands	r0, r1
    252a:	2301      	movs	r3, #1
    252c:	4083      	lsls	r3, r0
    252e:	1c18      	adds	r0, r3, #0
    2530:	10c9      	asrs	r1, r1, #3
    2532:	4b09      	ldr	r3, [pc, #36]	; (2558 <uiTraceIsObjectExcluded+0xd4>)
    2534:	5c5b      	ldrb	r3, [r3, r1]
    2536:	4018      	ands	r0, r3
    2538:	e003      	b.n	2542 <uiTraceIsObjectExcluded+0xbe>
	}
	
	vTraceError("Invalid object class ID in uiTraceIsObjectExcluded!");
    253a:	4808      	ldr	r0, [pc, #32]	; (255c <uiTraceIsObjectExcluded+0xd8>)
    253c:	4b02      	ldr	r3, [pc, #8]	; (2548 <uiTraceIsObjectExcluded+0xc4>)
    253e:	4798      	blx	r3
	
	/* Must never reach */
	return 1;
    2540:	2001      	movs	r0, #1
}
    2542:	bd08      	pop	{r3, pc}
    2544:	00006750 	.word	0x00006750
    2548:	00001165 	.word	0x00001165
    254c:	200004ac 	.word	0x200004ac
    2550:	00006798 	.word	0x00006798
    2554:	00006558 	.word	0x00006558
    2558:	20000528 	.word	0x20000528
    255c:	000067d8 	.word	0x000067d8

00002560 <writeInt32>:
	return i + 2;
}

/*** Locally used in vTracePrintF ***/
static uint8_t writeInt32(void * buffer, uint8_t i, uint32_t value)
{
    2560:	b510      	push	{r4, lr}
    2562:	1e03      	subs	r3, r0, #0
	TRACE_ASSERT(buffer != NULL, "writeInt32: buffer == NULL", 0);
    2564:	d006      	beq.n	2574 <writeInt32+0x14>

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
    2566:	0788      	lsls	r0, r1, #30
    2568:	d010      	beq.n	258c <writeInt32+0x2c>
	{
		if (i >= MAX_ARG_SIZE)
    256a:	2923      	cmp	r1, #35	; 0x23
    256c:	d817      	bhi.n	259e <writeInt32+0x3e>
		{
			return 255;
		}

		((uint8_t*)buffer)[i] = 0;
    256e:	2400      	movs	r4, #0
static uint8_t writeInt32(void * buffer, uint8_t i, uint32_t value)
{
	TRACE_ASSERT(buffer != NULL, "writeInt32: buffer == NULL", 0);

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
    2570:	2003      	movs	r0, #3
    2572:	e006      	b.n	2582 <writeInt32+0x22>
}

/*** Locally used in vTracePrintF ***/
static uint8_t writeInt32(void * buffer, uint8_t i, uint32_t value)
{
	TRACE_ASSERT(buffer != NULL, "writeInt32: buffer == NULL", 0);
    2574:	480c      	ldr	r0, [pc, #48]	; (25a8 <writeInt32+0x48>)
    2576:	4b0d      	ldr	r3, [pc, #52]	; (25ac <writeInt32+0x4c>)
    2578:	4798      	blx	r3
    257a:	2000      	movs	r0, #0
    257c:	e012      	b.n	25a4 <writeInt32+0x44>

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
	{
		if (i >= MAX_ARG_SIZE)
    257e:	2924      	cmp	r1, #36	; 0x24
    2580:	d00f      	beq.n	25a2 <writeInt32+0x42>
		{
			return 255;
		}

		((uint8_t*)buffer)[i] = 0;
    2582:	545c      	strb	r4, [r3, r1]
		i++;
    2584:	3101      	adds	r1, #1
    2586:	b2c9      	uxtb	r1, r1
static uint8_t writeInt32(void * buffer, uint8_t i, uint32_t value)
{
	TRACE_ASSERT(buffer != NULL, "writeInt32: buffer == NULL", 0);

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
    2588:	4208      	tst	r0, r1
    258a:	d1f8      	bne.n	257e <writeInt32+0x1e>

		((uint8_t*)buffer)[i] = 0;
		i++;
	}

	if (i + 4 > MAX_ARG_SIZE)
    258c:	1d0c      	adds	r4, r1, #4
	{
		return 255;
    258e:	20ff      	movs	r0, #255	; 0xff

		((uint8_t*)buffer)[i] = 0;
		i++;
	}

	if (i + 4 > MAX_ARG_SIZE)
    2590:	2c24      	cmp	r4, #36	; 0x24
    2592:	dc07      	bgt.n	25a4 <writeInt32+0x44>
	{
		return 255;
	}

	((uint32_t*)buffer)[i/4] = value;
    2594:	0888      	lsrs	r0, r1, #2
    2596:	0080      	lsls	r0, r0, #2
    2598:	50c2      	str	r2, [r0, r3]

	return i + 4;
    259a:	b2e0      	uxtb	r0, r4
    259c:	e002      	b.n	25a4 <writeInt32+0x44>
	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
	{
		if (i >= MAX_ARG_SIZE)
		{
			return 255;
    259e:	20ff      	movs	r0, #255	; 0xff
    25a0:	e000      	b.n	25a4 <writeInt32+0x44>
    25a2:	20ff      	movs	r0, #255	; 0xff
	}

	((uint32_t*)buffer)[i/4] = value;

	return i + 4;
}
    25a4:	bd10      	pop	{r4, pc}
    25a6:	46c0      	nop			; (mov r8, r8)
    25a8:	00006890 	.word	0x00006890
    25ac:	00001165 	.word	0x00001165

000025b0 <writeInt16>:
	return i + 1;
}

/*** Locally used in vTracePrintF ***/
static uint8_t writeInt16(void * buffer, uint8_t i, uint16_t value)
{
    25b0:	b510      	push	{r4, lr}
    25b2:	1e03      	subs	r3, r0, #0
	TRACE_ASSERT(buffer != NULL, "writeInt16: buffer == NULL", 0);
    25b4:	d006      	beq.n	25c4 <writeInt16+0x14>

	/* Align to multiple of 2 */
	while ((i % 2) != 0)
    25b6:	07c8      	lsls	r0, r1, #31
    25b8:	d510      	bpl.n	25dc <writeInt16+0x2c>
	{
		if (i >= MAX_ARG_SIZE)
    25ba:	2923      	cmp	r1, #35	; 0x23
    25bc:	d817      	bhi.n	25ee <writeInt16+0x3e>
		{
			return 255;
		}

		((uint8_t*)buffer)[i] = 0;
    25be:	2400      	movs	r4, #0
static uint8_t writeInt16(void * buffer, uint8_t i, uint16_t value)
{
	TRACE_ASSERT(buffer != NULL, "writeInt16: buffer == NULL", 0);

	/* Align to multiple of 2 */
	while ((i % 2) != 0)
    25c0:	2001      	movs	r0, #1
    25c2:	e006      	b.n	25d2 <writeInt16+0x22>
}

/*** Locally used in vTracePrintF ***/
static uint8_t writeInt16(void * buffer, uint8_t i, uint16_t value)
{
	TRACE_ASSERT(buffer != NULL, "writeInt16: buffer == NULL", 0);
    25c4:	480c      	ldr	r0, [pc, #48]	; (25f8 <writeInt16+0x48>)
    25c6:	4b0d      	ldr	r3, [pc, #52]	; (25fc <writeInt16+0x4c>)
    25c8:	4798      	blx	r3
    25ca:	2000      	movs	r0, #0
    25cc:	e012      	b.n	25f4 <writeInt16+0x44>

	/* Align to multiple of 2 */
	while ((i % 2) != 0)
	{
		if (i >= MAX_ARG_SIZE)
    25ce:	2924      	cmp	r1, #36	; 0x24
    25d0:	d00f      	beq.n	25f2 <writeInt16+0x42>
		{
			return 255;
		}

		((uint8_t*)buffer)[i] = 0;
    25d2:	545c      	strb	r4, [r3, r1]
		i++;
    25d4:	3101      	adds	r1, #1
    25d6:	b2c9      	uxtb	r1, r1
static uint8_t writeInt16(void * buffer, uint8_t i, uint16_t value)
{
	TRACE_ASSERT(buffer != NULL, "writeInt16: buffer == NULL", 0);

	/* Align to multiple of 2 */
	while ((i % 2) != 0)
    25d8:	4208      	tst	r0, r1
    25da:	d1f8      	bne.n	25ce <writeInt16+0x1e>

		((uint8_t*)buffer)[i] = 0;
		i++;
	}

	if (i + 2 > MAX_ARG_SIZE)
    25dc:	1c8c      	adds	r4, r1, #2
	{
		return 255;
    25de:	20ff      	movs	r0, #255	; 0xff

		((uint8_t*)buffer)[i] = 0;
		i++;
	}

	if (i + 2 > MAX_ARG_SIZE)
    25e0:	2c24      	cmp	r4, #36	; 0x24
    25e2:	dc07      	bgt.n	25f4 <writeInt16+0x44>
	{
		return 255;
	}

	((uint16_t*)buffer)[i/2] = value;
    25e4:	0848      	lsrs	r0, r1, #1
    25e6:	0040      	lsls	r0, r0, #1
    25e8:	52c2      	strh	r2, [r0, r3]

	return i + 2;
    25ea:	b2e0      	uxtb	r0, r4
    25ec:	e002      	b.n	25f4 <writeInt16+0x44>
	/* Align to multiple of 2 */
	while ((i % 2) != 0)
	{
		if (i >= MAX_ARG_SIZE)
		{
			return 255;
    25ee:	20ff      	movs	r0, #255	; 0xff
    25f0:	e000      	b.n	25f4 <writeInt16+0x44>
    25f2:	20ff      	movs	r0, #255	; 0xff
	}

	((uint16_t*)buffer)[i/2] = value;

	return i + 2;
}
    25f4:	bd10      	pop	{r4, pc}
    25f6:	46c0      	nop			; (mov r8, r8)
    25f8:	000068bc 	.word	0x000068bc
    25fc:	00001165 	.word	0x00001165

00002600 <vTraceInitTraceData>:
 *
 * Allocates, if necessary, and initializes the recorder data structure, based
 * on the constants in trcConfig.h.
 ******************************************************************************/
void vTraceInitTraceData(void)
{
    2600:	b508      	push	{r3, lr}
	prvTraceInitTraceData();
    2602:	4b01      	ldr	r3, [pc, #4]	; (2608 <vTraceInitTraceData+0x8>)
    2604:	4798      	blx	r3
}
    2606:	bd08      	pop	{r3, pc}
    2608:	000011c1 	.word	0x000011c1

0000260c <uiTraceStart>:
 * error. In that case, check vTraceGetLastError to get the error message.
 * Any error message is also presented when opening a trace file.
 ******************************************************************************/

uint32_t uiTraceStart(void)
{
    260c:	b570      	push	{r4, r5, r6, lr}
	objectHandleType handle;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	handle = 0;

	if (RecorderDataPtr == NULL)
    260e:	4b1d      	ldr	r3, [pc, #116]	; (2684 <uiTraceStart+0x78>)
    2610:	681b      	ldr	r3, [r3, #0]
    2612:	2b00      	cmp	r3, #0
    2614:	d104      	bne.n	2620 <uiTraceStart+0x14>
	{
		vTraceError("RecorderDataPtr is NULL. Call vTraceInitTraceData() before starting trace.");
    2616:	481c      	ldr	r0, [pc, #112]	; (2688 <uiTraceStart+0x7c>)
    2618:	4b1c      	ldr	r3, [pc, #112]	; (268c <uiTraceStart+0x80>)
    261a:	4798      	blx	r3
		return 0;
    261c:	2000      	movs	r0, #0
    261e:	e030      	b.n	2682 <uiTraceStart+0x76>
	}

	if (traceErrorMessage == NULL)
    2620:	4b1b      	ldr	r3, [pc, #108]	; (2690 <uiTraceStart+0x84>)
    2622:	681b      	ldr	r3, [r3, #0]
    2624:	2b00      	cmp	r3, #0
    2626:	d129      	bne.n	267c <uiTraceStart+0x70>
	{
		trcCRITICAL_SECTION_BEGIN();
    2628:	4b1a      	ldr	r3, [pc, #104]	; (2694 <uiTraceStart+0x88>)
    262a:	4798      	blx	r3
    262c:	1c05      	adds	r5, r0, #0
    262e:	4b1a      	ldr	r3, [pc, #104]	; (2698 <uiTraceStart+0x8c>)
    2630:	681a      	ldr	r2, [r3, #0]
    2632:	3201      	adds	r2, #1
    2634:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
    2636:	4b13      	ldr	r3, [pc, #76]	; (2684 <uiTraceStart+0x78>)
    2638:	681b      	ldr	r3, [r3, #0]
    263a:	2201      	movs	r2, #1
    263c:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
    263e:	4b17      	ldr	r3, [pc, #92]	; (269c <uiTraceStart+0x90>)
    2640:	4798      	blx	r3
    2642:	4b17      	ldr	r3, [pc, #92]	; (26a0 <uiTraceStart+0x94>)
    2644:	4798      	blx	r3
    2646:	1e04      	subs	r4, r0, #0
		if (handle == 0)
    2648:	d10e      	bne.n	2668 <uiTraceStart+0x5c>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = xTraceGetObjectHandle(TRACE_CLASS_TASK);
    264a:	2003      	movs	r0, #3
    264c:	4b15      	ldr	r3, [pc, #84]	; (26a4 <uiTraceStart+0x98>)
    264e:	4798      	blx	r3
    2650:	1c06      	adds	r6, r0, #0
    2652:	1c04      	adds	r4, r0, #0
			vTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
    2654:	2003      	movs	r0, #3
    2656:	1c31      	adds	r1, r6, #0
    2658:	4a13      	ldr	r2, [pc, #76]	; (26a8 <uiTraceStart+0x9c>)
    265a:	4b14      	ldr	r3, [pc, #80]	; (26ac <uiTraceStart+0xa0>)
    265c:	4798      	blx	r3

			vTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
    265e:	2003      	movs	r0, #3
    2660:	1c31      	adds	r1, r6, #0
    2662:	2200      	movs	r2, #0
    2664:	4b12      	ldr	r3, [pc, #72]	; (26b0 <uiTraceStart+0xa4>)
    2666:	4798      	blx	r3
		}

		vTraceStoreTaskswitch(handle); /* Register the currently running task */
    2668:	1c20      	adds	r0, r4, #0
    266a:	4b12      	ldr	r3, [pc, #72]	; (26b4 <uiTraceStart+0xa8>)
    266c:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
    266e:	4b0a      	ldr	r3, [pc, #40]	; (2698 <uiTraceStart+0x8c>)
    2670:	681a      	ldr	r2, [r3, #0]
    2672:	3a01      	subs	r2, #1
    2674:	601a      	str	r2, [r3, #0]
    2676:	1c28      	adds	r0, r5, #0
    2678:	4b0f      	ldr	r3, [pc, #60]	; (26b8 <uiTraceStart+0xac>)
    267a:	4798      	blx	r3
	}

	return RecorderDataPtr->recorderActive;
    267c:	4b01      	ldr	r3, [pc, #4]	; (2684 <uiTraceStart+0x78>)
    267e:	681b      	ldr	r3, [r3, #0]
    2680:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
    2682:	bd70      	pop	{r4, r5, r6, pc}
    2684:	200004ac 	.word	0x200004ac
    2688:	000068e8 	.word	0x000068e8
    268c:	00001165 	.word	0x00001165
    2690:	200004b0 	.word	0x200004b0
    2694:	00002bed 	.word	0x00002bed
    2698:	20000538 	.word	0x20000538
    269c:	00002329 	.word	0x00002329
    26a0:	00002319 	.word	0x00002319
    26a4:	00001405 	.word	0x00001405
    26a8:	00006934 	.word	0x00006934
    26ac:	000015c9 	.word	0x000015c9
    26b0:	00002085 	.word	0x00002085
    26b4:	000021ed 	.word	0x000021ed
    26b8:	00002bf9 	.word	0x00002bf9

000026bc <xTraceOpenLabel>:
 * therefore recommended for user events that are frequently
 * executed and/or located in time-critical code. The lookup operation is
 * however fairly fast due to the design of the symbol table.
 ******************************************************************************/
traceLabel xTraceOpenLabel(const char* label)
{
    26bc:	b508      	push	{r3, lr}
	TRACE_ASSERT(label != NULL, "xTraceOpenLabel: label == NULL", (traceLabel)0);
    26be:	2800      	cmp	r0, #0
    26c0:	d104      	bne.n	26cc <xTraceOpenLabel+0x10>
    26c2:	4804      	ldr	r0, [pc, #16]	; (26d4 <xTraceOpenLabel+0x18>)
    26c4:	4b04      	ldr	r3, [pc, #16]	; (26d8 <xTraceOpenLabel+0x1c>)
    26c6:	4798      	blx	r3
    26c8:	2000      	movs	r0, #0
    26ca:	e002      	b.n	26d2 <xTraceOpenLabel+0x16>

	return prvTraceOpenSymbol(label, 0);
    26cc:	2100      	movs	r1, #0
    26ce:	4b03      	ldr	r3, [pc, #12]	; (26dc <xTraceOpenLabel+0x20>)
    26d0:	4798      	blx	r3
}
    26d2:	bd08      	pop	{r3, pc}
    26d4:	00006af4 	.word	0x00006af4
    26d8:	00001165 	.word	0x00001165
    26dc:	00001a7d 	.word	0x00001a7d

000026e0 <vTracePrintF_Helper>:
	va_end(vl);
#endif /* TRACE_SCHEDULING_ONLY */
}

void vTracePrintF_Helper(traceLabel eventLabel, const char* formatStr, va_list vl)
{
    26e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    26e2:	465f      	mov	r7, fp
    26e4:	4656      	mov	r6, sl
    26e6:	464d      	mov	r5, r9
    26e8:	4644      	mov	r4, r8
    26ea:	b4f0      	push	{r4, r5, r6, r7}
    26ec:	b08f      	sub	sp, #60	; 0x3c
    26ee:	4682      	mov	sl, r0
    26f0:	1c0d      	adds	r5, r1, #0
    26f2:	1c14      	adds	r4, r2, #0
	* global. That would cause data corruption when two calls to vTracePrintF
	* from different tasks overlaps (interrupts are only disabled in a small
	* part of this function, otherwise enabled)
	***************************************************************************/

	TRACE_ASSERT(formatStr != NULL, "vTracePrintF: formatStr == NULL", );
    26f4:	2900      	cmp	r1, #0
    26f6:	d103      	bne.n	2700 <vTracePrintF_Helper+0x20>
    26f8:	489b      	ldr	r0, [pc, #620]	; (2968 <vTracePrintF_Helper+0x288>)
    26fa:	4b9c      	ldr	r3, [pc, #624]	; (296c <vTracePrintF_Helper+0x28c>)
    26fc:	4798      	blx	r3
    26fe:	e1b1      	b.n	2a64 <vTracePrintF_Helper+0x384>

	trcCRITICAL_SECTION_BEGIN();
    2700:	4b9b      	ldr	r3, [pc, #620]	; (2970 <vTracePrintF_Helper+0x290>)
    2702:	4798      	blx	r3
    2704:	1c07      	adds	r7, r0, #0
    2706:	4b9b      	ldr	r3, [pc, #620]	; (2974 <vTracePrintF_Helper+0x294>)
    2708:	681a      	ldr	r2, [r3, #0]
    270a:	3201      	adds	r2, #1
    270c:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->recorderActive && (! inExcludedTask || nISRactive) && handle_of_last_logged_task)
    270e:	4b9a      	ldr	r3, [pc, #616]	; (2978 <vTracePrintF_Helper+0x298>)
    2710:	681b      	ldr	r3, [r3, #0]
    2712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2714:	2b00      	cmp	r3, #0
    2716:	d100      	bne.n	271a <vTracePrintF_Helper+0x3a>
    2718:	e19d      	b.n	2a56 <vTracePrintF_Helper+0x376>
    271a:	4b98      	ldr	r3, [pc, #608]	; (297c <vTracePrintF_Helper+0x29c>)
    271c:	781b      	ldrb	r3, [r3, #0]
    271e:	2b00      	cmp	r3, #0
    2720:	d005      	beq.n	272e <vTracePrintF_Helper+0x4e>
    2722:	4b97      	ldr	r3, [pc, #604]	; (2980 <vTracePrintF_Helper+0x2a0>)
    2724:	781b      	ldrb	r3, [r3, #0]
    2726:	b25b      	sxtb	r3, r3
    2728:	2b00      	cmp	r3, #0
    272a:	d100      	bne.n	272e <vTracePrintF_Helper+0x4e>
    272c:	e193      	b.n	2a56 <vTracePrintF_Helper+0x376>
    272e:	4b95      	ldr	r3, [pc, #596]	; (2984 <vTracePrintF_Helper+0x2a4>)
    2730:	781b      	ldrb	r3, [r3, #0]
    2732:	2b00      	cmp	r3, #0
    2734:	d100      	bne.n	2738 <vTracePrintF_Helper+0x58>
    2736:	e18e      	b.n	2a56 <vTracePrintF_Helper+0x376>
		/* First, write the "primary" user event entry in the local buffer, but
		let the event type be "EVENT_BEING_WRITTEN" for now...*/

		ue1 = (UserEvent*)(&tempDataBuffer[0]);

		ue1->type = EVENT_BEING_WRITTEN;	 /* Update this as the last step */
    2738:	22aa      	movs	r2, #170	; 0xaa
    273a:	ab05      	add	r3, sp, #20
    273c:	701a      	strb	r2, [r3, #0]
    273e:	46a3      	mov	fp, r4
 ******************************************************************************/
static uint8_t prvTraceUserEventFormat(const char* formatStr, va_list vl, uint8_t* buffer, uint8_t byteOffset)
{
	uint16_t formatStrIndex = 0;
	uint8_t argCounter = 0;
	uint8_t i = byteOffset;
    2740:	2604      	movs	r6, #4
 * Parses the format string and stores the arguments in the buffer.
 ******************************************************************************/
static uint8_t prvTraceUserEventFormat(const char* formatStr, va_list vl, uint8_t* buffer, uint8_t byteOffset)
{
	uint16_t formatStrIndex = 0;
	uint8_t argCounter = 0;
    2742:	2000      	movs	r0, #0
    2744:	4681      	mov	r9, r0
 *
 * Parses the format string and stores the arguments in the buffer.
 ******************************************************************************/
static uint8_t prvTraceUserEventFormat(const char* formatStr, va_list vl, uint8_t* buffer, uint8_t byteOffset)
{
	uint16_t formatStrIndex = 0;
    2746:	2400      	movs	r4, #0
    2748:	e12c      	b.n	29a4 <vTracePrintF_Helper+0x2c4>
	uint8_t argCounter = 0;
	uint8_t i = byteOffset;

	while (formatStr[formatStrIndex] != '\0')
	{
		if (formatStr[formatStrIndex] == '%')
    274a:	2b25      	cmp	r3, #37	; 0x25
    274c:	d000      	beq.n	2750 <vTracePrintF_Helper+0x70>
    274e:	e101      	b.n	2954 <vTracePrintF_Helper+0x274>
		{
			argCounter++;
    2750:	464b      	mov	r3, r9
    2752:	3301      	adds	r3, #1
    2754:	b2db      	uxtb	r3, r3
    2756:	4699      	mov	r9, r3

			if (argCounter > 15)
    2758:	2b0f      	cmp	r3, #15
    275a:	d904      	bls.n	2766 <vTracePrintF_Helper+0x86>
			{
				vTraceError("vTracePrintF - Too many arguments, max 15 allowed!");
    275c:	488a      	ldr	r0, [pc, #552]	; (2988 <vTracePrintF_Helper+0x2a8>)
    275e:	4b83      	ldr	r3, [pc, #524]	; (296c <vTracePrintF_Helper+0x28c>)
    2760:	4798      	blx	r3
				return 0;
    2762:	2600      	movs	r6, #0
    2764:	e128      	b.n	29b8 <vTracePrintF_Helper+0x2d8>
			* the main event buffer using a fast memcpy. The event code is finalized as the
			* very last step. Before that step, the event code indicates an unfinished
			* event, which causes it to be ignored and stop the loading of the file (since
			* an unfinished event is the last event in the trace).
			*******************************************************************************/
			formatStrIndex++;
    2766:	3401      	adds	r4, #1
    2768:	b2a4      	uxth	r4, r4
    276a:	e001      	b.n	2770 <vTracePrintF_Helper+0x90>

			while ((formatStr[formatStrIndex] >= '0' && formatStr[formatStrIndex] <= '9') || formatStr[formatStrIndex] == '#' || formatStr[formatStrIndex] == '.')
				formatStrIndex++;
    276c:	3401      	adds	r4, #1
    276e:	b2a4      	uxth	r4, r4
			* event, which causes it to be ignored and stop the loading of the file (since
			* an unfinished event is the last event in the trace).
			*******************************************************************************/
			formatStrIndex++;

			while ((formatStr[formatStrIndex] >= '0' && formatStr[formatStrIndex] <= '9') || formatStr[formatStrIndex] == '#' || formatStr[formatStrIndex] == '.')
    2770:	5d2b      	ldrb	r3, [r5, r4]
    2772:	1c1a      	adds	r2, r3, #0
    2774:	3a30      	subs	r2, #48	; 0x30
    2776:	2a09      	cmp	r2, #9
    2778:	d9f8      	bls.n	276c <vTracePrintF_Helper+0x8c>
    277a:	2b23      	cmp	r3, #35	; 0x23
    277c:	d0f6      	beq.n	276c <vTracePrintF_Helper+0x8c>
    277e:	2b2e      	cmp	r3, #46	; 0x2e
    2780:	d0f4      	beq.n	276c <vTracePrintF_Helper+0x8c>
    2782:	1c21      	adds	r1, r4, #0
				formatStrIndex++;

			if (formatStr[formatStrIndex] != '\0')
    2784:	2b00      	cmp	r3, #0
    2786:	d100      	bne.n	278a <vTracePrintF_Helper+0xaa>
    2788:	e110      	b.n	29ac <vTracePrintF_Helper+0x2cc>
			{
				switch (formatStr[formatStrIndex])
    278a:	3b58      	subs	r3, #88	; 0x58
    278c:	b2da      	uxtb	r2, r3
    278e:	2a20      	cmp	r2, #32
    2790:	d900      	bls.n	2794 <vTracePrintF_Helper+0xb4>
    2792:	e0df      	b.n	2954 <vTracePrintF_Helper+0x274>
    2794:	0093      	lsls	r3, r2, #2
    2796:	4a7d      	ldr	r2, [pc, #500]	; (298c <vTracePrintF_Helper+0x2ac>)
    2798:	58d3      	ldr	r3, [r2, r3]
    279a:	469f      	mov	pc, r3
				{
					case 'd':	i = writeInt32(	buffer,
    279c:	2304      	movs	r3, #4
    279e:	4698      	mov	r8, r3
    27a0:	44d8      	add	r8, fp
    27a2:	4658      	mov	r0, fp
    27a4:	6802      	ldr	r2, [r0, #0]
    27a6:	a805      	add	r0, sp, #20
    27a8:	1c31      	adds	r1, r6, #0
    27aa:	4b79      	ldr	r3, [pc, #484]	; (2990 <vTracePrintF_Helper+0x2b0>)
    27ac:	4798      	blx	r3
    27ae:	1c06      	adds	r6, r0, #0
    27b0:	46c3      	mov	fp, r8
    27b2:	e0cf      	b.n	2954 <vTracePrintF_Helper+0x274>
												i,
												(uint32_t)va_arg(vl, uint32_t));
								break;
					case 'x':
					case 'X':
					case 'u':	i = writeInt32(	buffer,
    27b4:	2104      	movs	r1, #4
    27b6:	4688      	mov	r8, r1
    27b8:	44d8      	add	r8, fp
    27ba:	465b      	mov	r3, fp
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	a805      	add	r0, sp, #20
    27c0:	1c31      	adds	r1, r6, #0
    27c2:	4b73      	ldr	r3, [pc, #460]	; (2990 <vTracePrintF_Helper+0x2b0>)
    27c4:	4798      	blx	r3
    27c6:	1c06      	adds	r6, r0, #0
    27c8:	46c3      	mov	fp, r8
    27ca:	e0c3      	b.n	2954 <vTracePrintF_Helper+0x274>
												i,
												(uint32_t)va_arg(vl, uint32_t));
								break;
					case 's':	i = writeInt16(	buffer,
    27cc:	2004      	movs	r0, #4
    27ce:	4680      	mov	r8, r0
    27d0:	44d8      	add	r8, fp
    27d2:	4659      	mov	r1, fp
    27d4:	6808      	ldr	r0, [r1, #0]
    27d6:	4b6f      	ldr	r3, [pc, #444]	; (2994 <vTracePrintF_Helper+0x2b4>)
    27d8:	4798      	blx	r3
    27da:	1c02      	adds	r2, r0, #0
    27dc:	a805      	add	r0, sp, #20
    27de:	1c31      	adds	r1, r6, #0
    27e0:	4b6d      	ldr	r3, [pc, #436]	; (2998 <vTracePrintF_Helper+0x2b8>)
    27e2:	4798      	blx	r3
    27e4:	1c06      	adds	r6, r0, #0
    27e6:	46c3      	mov	fp, r8
    27e8:	e0b4      	b.n	2954 <vTracePrintF_Helper+0x274>
					/* Yes, "double" as type also in the float
					case. This since "float" is promoted into "double"
					by the va_arg stuff. */
					case 'f':	i = writeFloat(	buffer,
												i,
												(float)va_arg(vl, double));
    27ea:	465b      	mov	r3, fp
    27ec:	3307      	adds	r3, #7
    27ee:	2207      	movs	r2, #7
    27f0:	4393      	bics	r3, r2
    27f2:	2208      	movs	r2, #8
    27f4:	18d2      	adds	r2, r2, r3
    27f6:	4693      	mov	fp, r2
    27f8:	6818      	ldr	r0, [r3, #0]
    27fa:	6859      	ldr	r1, [r3, #4]
    27fc:	9000      	str	r0, [sp, #0]
    27fe:	9101      	str	r1, [sp, #4]
static uint8_t writeFloat(void * buffer, uint8_t i, float value)
{
	TRACE_ASSERT(buffer != NULL, "writeFloat: buffer == NULL", 0);

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
    2800:	07b1      	lsls	r1, r6, #30
    2802:	d00d      	beq.n	2820 <vTracePrintF_Helper+0x140>
	{
		if (i >= MAX_ARG_SIZE)
    2804:	2e23      	cmp	r6, #35	; 0x23
    2806:	d81e      	bhi.n	2846 <vTracePrintF_Helper+0x166>
		{
			return 255;
		}

		((uint8_t*)buffer)[i] = 0;
    2808:	2200      	movs	r2, #0
static uint8_t writeFloat(void * buffer, uint8_t i, float value)
{
	TRACE_ASSERT(buffer != NULL, "writeFloat: buffer == NULL", 0);

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
    280a:	2303      	movs	r3, #3
    280c:	e001      	b.n	2812 <vTracePrintF_Helper+0x132>
	{
		if (i >= MAX_ARG_SIZE)
    280e:	2e24      	cmp	r6, #36	; 0x24
    2810:	d01b      	beq.n	284a <vTracePrintF_Helper+0x16a>
		{
			return 255;
		}

		((uint8_t*)buffer)[i] = 0;
    2812:	a805      	add	r0, sp, #20
    2814:	1981      	adds	r1, r0, r6
    2816:	700a      	strb	r2, [r1, #0]
		i++;
    2818:	3601      	adds	r6, #1
    281a:	b2f6      	uxtb	r6, r6
static uint8_t writeFloat(void * buffer, uint8_t i, float value)
{
	TRACE_ASSERT(buffer != NULL, "writeFloat: buffer == NULL", 0);

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
    281c:	4233      	tst	r3, r6
    281e:	d1f6      	bne.n	280e <vTracePrintF_Helper+0x12e>

		((uint8_t*)buffer)[i] = 0;
		i++;
	}

	if (i + 4 > MAX_ARG_SIZE)
    2820:	1d33      	adds	r3, r6, #4
    2822:	2b24      	cmp	r3, #36	; 0x24
    2824:	dc13      	bgt.n	284e <vTracePrintF_Helper+0x16e>
	{
		return 255;
	}

	((float*)buffer)[i/4] = value;
    2826:	23ff      	movs	r3, #255	; 0xff
    2828:	009b      	lsls	r3, r3, #2
    282a:	4033      	ands	r3, r6
    282c:	a90e      	add	r1, sp, #56	; 0x38
    282e:	18cb      	adds	r3, r1, r3
    2830:	3b24      	subs	r3, #36	; 0x24
    2832:	4698      	mov	r8, r3

#if (INCLUDE_FLOAT_SUPPORT)
					/* Yes, "double" as type also in the float
					case. This since "float" is promoted into "double"
					by the va_arg stuff. */
					case 'f':	i = writeFloat(	buffer,
    2834:	9800      	ldr	r0, [sp, #0]
    2836:	9901      	ldr	r1, [sp, #4]
    2838:	4b58      	ldr	r3, [pc, #352]	; (299c <vTracePrintF_Helper+0x2bc>)
    283a:	4798      	blx	r3
    283c:	4642      	mov	r2, r8
    283e:	6010      	str	r0, [r2, #0]
		return 255;
	}

	((float*)buffer)[i/4] = value;

	return i + 4;
    2840:	3604      	adds	r6, #4
    2842:	b2f6      	uxtb	r6, r6
    2844:	e086      	b.n	2954 <vTracePrintF_Helper+0x274>
	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
	{
		if (i >= MAX_ARG_SIZE)
		{
			return 255;
    2846:	26ff      	movs	r6, #255	; 0xff
    2848:	e084      	b.n	2954 <vTracePrintF_Helper+0x274>
    284a:	26ff      	movs	r6, #255	; 0xff
    284c:	e082      	b.n	2954 <vTracePrintF_Helper+0x274>
		i++;
	}

	if (i + 4 > MAX_ARG_SIZE)
	{
		return 255;
    284e:	26ff      	movs	r6, #255	; 0xff
    2850:	e080      	b.n	2954 <vTracePrintF_Helper+0x274>
												i,
												(uint32_t)va_arg(vl, double));
								break;
#endif
					case 'l':
								formatStrIndex++;
    2852:	3101      	adds	r1, #1
    2854:	b28c      	uxth	r4, r1
								switch (formatStr[formatStrIndex])
    2856:	5d2b      	ldrb	r3, [r5, r4]
    2858:	2b66      	cmp	r3, #102	; 0x66
    285a:	d17b      	bne.n	2954 <vTracePrintF_Helper+0x274>
								{
#if (INCLUDE_FLOAT_SUPPORT)
									case 'f':	i = writeDouble(buffer,
    285c:	465b      	mov	r3, fp
    285e:	3307      	adds	r3, #7
    2860:	2207      	movs	r2, #7
    2862:	4393      	bics	r3, r2
    2864:	2008      	movs	r0, #8
    2866:	18c0      	adds	r0, r0, r3
    2868:	4683      	mov	fp, r0
    286a:	6819      	ldr	r1, [r3, #0]
    286c:	685a      	ldr	r2, [r3, #4]
    286e:	9102      	str	r1, [sp, #8]
    2870:	9203      	str	r2, [sp, #12]

	TRACE_ASSERT(buffer != NULL, "writeDouble: buffer == NULL", 0);

	/* The double is written as two 32 bit values, and should begin at an even
	4-byte address (to avoid having to align with 8 byte) */
	while (i % 4 != 0)
    2872:	07b2      	lsls	r2, r6, #30
    2874:	d00d      	beq.n	2892 <vTracePrintF_Helper+0x1b2>
	{
		if (i >= MAX_ARG_SIZE)
    2876:	2e23      	cmp	r6, #35	; 0x23
    2878:	d81b      	bhi.n	28b2 <vTracePrintF_Helper+0x1d2>
		{
			return 255;
		}

		((uint8_t*)buffer)[i] = 0;
    287a:	2100      	movs	r1, #0

	TRACE_ASSERT(buffer != NULL, "writeDouble: buffer == NULL", 0);

	/* The double is written as two 32 bit values, and should begin at an even
	4-byte address (to avoid having to align with 8 byte) */
	while (i % 4 != 0)
    287c:	2203      	movs	r2, #3
    287e:	e001      	b.n	2884 <vTracePrintF_Helper+0x1a4>
	{
		if (i >= MAX_ARG_SIZE)
    2880:	2e24      	cmp	r6, #36	; 0x24
    2882:	d018      	beq.n	28b6 <vTracePrintF_Helper+0x1d6>
		{
			return 255;
		}

		((uint8_t*)buffer)[i] = 0;
    2884:	a805      	add	r0, sp, #20
    2886:	1983      	adds	r3, r0, r6
    2888:	7019      	strb	r1, [r3, #0]
		i++;
    288a:	3601      	adds	r6, #1
    288c:	b2f6      	uxtb	r6, r6

	TRACE_ASSERT(buffer != NULL, "writeDouble: buffer == NULL", 0);

	/* The double is written as two 32 bit values, and should begin at an even
	4-byte address (to avoid having to align with 8 byte) */
	while (i % 4 != 0)
    288e:	4232      	tst	r2, r6
    2890:	d1f6      	bne.n	2880 <vTracePrintF_Helper+0x1a0>

		((uint8_t*)buffer)[i] = 0;
		i++;
	}

	if (i + 8 > MAX_ARG_SIZE)
    2892:	1c33      	adds	r3, r6, #0
    2894:	3308      	adds	r3, #8
    2896:	2b24      	cmp	r3, #36	; 0x24
    2898:	dc0f      	bgt.n	28ba <vTracePrintF_Helper+0x1da>
	{
		return 255;
	}

	dest = &(((uint32_t *)buffer)[i/4]);
    289a:	23ff      	movs	r3, #255	; 0xff
    289c:	009b      	lsls	r3, r3, #2
    289e:	4033      	ands	r3, r6
    28a0:	a905      	add	r1, sp, #20
    28a2:	18cb      	adds	r3, r1, r3

	dest[0] = src[0];
    28a4:	9a02      	ldr	r2, [sp, #8]
    28a6:	601a      	str	r2, [r3, #0]
	dest[1] = src[1];
    28a8:	9803      	ldr	r0, [sp, #12]
    28aa:	6058      	str	r0, [r3, #4]

	return i + 8;
    28ac:	3608      	adds	r6, #8
    28ae:	b2f6      	uxtb	r6, r6
    28b0:	e050      	b.n	2954 <vTracePrintF_Helper+0x274>
	4-byte address (to avoid having to align with 8 byte) */
	while (i % 4 != 0)
	{
		if (i >= MAX_ARG_SIZE)
		{
			return 255;
    28b2:	26ff      	movs	r6, #255	; 0xff
    28b4:	e04e      	b.n	2954 <vTracePrintF_Helper+0x274>
    28b6:	26ff      	movs	r6, #255	; 0xff
    28b8:	e04c      	b.n	2954 <vTracePrintF_Helper+0x274>
		i++;
	}

	if (i + 8 > MAX_ARG_SIZE)
	{
		return 255;
    28ba:	26ff      	movs	r6, #255	; 0xff
    28bc:	e04a      	b.n	2954 <vTracePrintF_Helper+0x274>
#endif

								}
								break;
					case 'h':
								formatStrIndex++;
    28be:	3101      	adds	r1, #1
    28c0:	b28c      	uxth	r4, r1
								switch (formatStr[formatStrIndex])
    28c2:	5d2b      	ldrb	r3, [r5, r4]
    28c4:	2b64      	cmp	r3, #100	; 0x64
    28c6:	d002      	beq.n	28ce <vTracePrintF_Helper+0x1ee>
    28c8:	2b75      	cmp	r3, #117	; 0x75
    28ca:	d00c      	beq.n	28e6 <vTracePrintF_Helper+0x206>
    28cc:	e042      	b.n	2954 <vTracePrintF_Helper+0x274>
								{
									case 'd':	i = writeInt16(	buffer,
																i,
																(uint16_t)va_arg(vl, uint32_t));
    28ce:	2104      	movs	r1, #4
    28d0:	4688      	mov	r8, r1
    28d2:	44d8      	add	r8, fp
								break;
					case 'h':
								formatStrIndex++;
								switch (formatStr[formatStrIndex])
								{
									case 'd':	i = writeInt16(	buffer,
    28d4:	465b      	mov	r3, fp
    28d6:	881a      	ldrh	r2, [r3, #0]
    28d8:	a805      	add	r0, sp, #20
    28da:	1c31      	adds	r1, r6, #0
    28dc:	4b2e      	ldr	r3, [pc, #184]	; (2998 <vTracePrintF_Helper+0x2b8>)
    28de:	4798      	blx	r3
    28e0:	1c06      	adds	r6, r0, #0
																i,
																(uint16_t)va_arg(vl, uint32_t));
    28e2:	46c3      	mov	fp, r8
    28e4:	e036      	b.n	2954 <vTracePrintF_Helper+0x274>
												break;
									case 'u':	i = writeInt16(	buffer,
																i,
																(uint16_t)va_arg(vl, uint32_t));
    28e6:	2004      	movs	r0, #4
    28e8:	4680      	mov	r8, r0
    28ea:	44d8      	add	r8, fp
								{
									case 'd':	i = writeInt16(	buffer,
																i,
																(uint16_t)va_arg(vl, uint32_t));
												break;
									case 'u':	i = writeInt16(	buffer,
    28ec:	4659      	mov	r1, fp
    28ee:	880a      	ldrh	r2, [r1, #0]
    28f0:	a805      	add	r0, sp, #20
    28f2:	1c31      	adds	r1, r6, #0
    28f4:	4b28      	ldr	r3, [pc, #160]	; (2998 <vTracePrintF_Helper+0x2b8>)
    28f6:	4798      	blx	r3
    28f8:	1c06      	adds	r6, r0, #0
																i,
																(uint16_t)va_arg(vl, uint32_t));
    28fa:	46c3      	mov	fp, r8
    28fc:	e02a      	b.n	2954 <vTracePrintF_Helper+0x274>
												break;
								}
								break;
					case 'b':
								formatStrIndex++;
    28fe:	3101      	adds	r1, #1
    2900:	b28c      	uxth	r4, r1
								switch (formatStr[formatStrIndex])
    2902:	5d2b      	ldrb	r3, [r5, r4]
    2904:	2b64      	cmp	r3, #100	; 0x64
    2906:	d002      	beq.n	290e <vTracePrintF_Helper+0x22e>
    2908:	2b75      	cmp	r3, #117	; 0x75
    290a:	d012      	beq.n	2932 <vTracePrintF_Helper+0x252>
    290c:	e022      	b.n	2954 <vTracePrintF_Helper+0x274>
								{
									case 'd':	i = writeInt8(	buffer,
																i,
																(uint8_t)va_arg(vl, uint32_t));
    290e:	465b      	mov	r3, fp
    2910:	3304      	adds	r3, #4
    2912:	4658      	mov	r0, fp
    2914:	6801      	ldr	r1, [r0, #0]
/*** Locally used in vTracePrintF ***/
static uint8_t writeInt8(void * buffer, uint8_t i, uint8_t value)
{
	TRACE_ASSERT(buffer != NULL, "writeInt8: buffer == NULL", 0);

	if (i >= MAX_ARG_SIZE)
    2916:	2e23      	cmp	r6, #35	; 0x23
    2918:	d807      	bhi.n	292a <vTracePrintF_Helper+0x24a>
								break;
					case 'b':
								formatStrIndex++;
								switch (formatStr[formatStrIndex])
								{
									case 'd':	i = writeInt8(	buffer,
    291a:	aa05      	add	r2, sp, #20
    291c:	5591      	strb	r1, [r2, r6]
		return 255;
	}

	((uint8_t*)buffer)[i] = value;

	if (i + 1 > MAX_ARG_SIZE)
    291e:	1c72      	adds	r2, r6, #1
	{
		return 255;
    2920:	26ff      	movs	r6, #255	; 0xff
		return 255;
	}

	((uint8_t*)buffer)[i] = value;

	if (i + 1 > MAX_ARG_SIZE)
    2922:	2a24      	cmp	r2, #36	; 0x24
    2924:	dc03      	bgt.n	292e <vTracePrintF_Helper+0x24e>
	{
		return 255;
	}

	return i + 1;
    2926:	b2d6      	uxtb	r6, r2
    2928:	e001      	b.n	292e <vTracePrintF_Helper+0x24e>
{
	TRACE_ASSERT(buffer != NULL, "writeInt8: buffer == NULL", 0);

	if (i >= MAX_ARG_SIZE)
	{
		return 255;
    292a:	26ff      	movs	r6, #255	; 0xff
    292c:	e7ff      	b.n	292e <vTracePrintF_Helper+0x24e>
								formatStrIndex++;
								switch (formatStr[formatStrIndex])
								{
									case 'd':	i = writeInt8(	buffer,
																i,
																(uint8_t)va_arg(vl, uint32_t));
    292e:	469b      	mov	fp, r3
    2930:	e010      	b.n	2954 <vTracePrintF_Helper+0x274>
												break;

									case 'u':	i = writeInt8(	buffer,
																i,
																(uint8_t)va_arg(vl, uint32_t));
    2932:	465b      	mov	r3, fp
    2934:	3304      	adds	r3, #4
    2936:	465a      	mov	r2, fp
    2938:	6811      	ldr	r1, [r2, #0]
/*** Locally used in vTracePrintF ***/
static uint8_t writeInt8(void * buffer, uint8_t i, uint8_t value)
{
	TRACE_ASSERT(buffer != NULL, "writeInt8: buffer == NULL", 0);

	if (i >= MAX_ARG_SIZE)
    293a:	2e23      	cmp	r6, #35	; 0x23
    293c:	d807      	bhi.n	294e <vTracePrintF_Helper+0x26e>
									case 'd':	i = writeInt8(	buffer,
																i,
																(uint8_t)va_arg(vl, uint32_t));
												break;

									case 'u':	i = writeInt8(	buffer,
    293e:	aa05      	add	r2, sp, #20
    2940:	5591      	strb	r1, [r2, r6]
		return 255;
	}

	((uint8_t*)buffer)[i] = value;

	if (i + 1 > MAX_ARG_SIZE)
    2942:	1c72      	adds	r2, r6, #1
	{
		return 255;
    2944:	26ff      	movs	r6, #255	; 0xff
		return 255;
	}

	((uint8_t*)buffer)[i] = value;

	if (i + 1 > MAX_ARG_SIZE)
    2946:	2a24      	cmp	r2, #36	; 0x24
    2948:	dc03      	bgt.n	2952 <vTracePrintF_Helper+0x272>
	{
		return 255;
	}

	return i + 1;
    294a:	b2d6      	uxtb	r6, r2
    294c:	e001      	b.n	2952 <vTracePrintF_Helper+0x272>
{
	TRACE_ASSERT(buffer != NULL, "writeInt8: buffer == NULL", 0);

	if (i >= MAX_ARG_SIZE)
	{
		return 255;
    294e:	26ff      	movs	r6, #255	; 0xff
    2950:	e7ff      	b.n	2952 <vTracePrintF_Helper+0x272>
																(uint8_t)va_arg(vl, uint32_t));
												break;

									case 'u':	i = writeInt8(	buffer,
																i,
																(uint8_t)va_arg(vl, uint32_t));
    2952:	469b      	mov	fp, r3
				}
			}
			else
				break;
		}
		formatStrIndex++;
    2954:	3401      	adds	r4, #1
    2956:	b2a4      	uxth	r4, r4
		if (i == 255)
    2958:	2eff      	cmp	r6, #255	; 0xff
    295a:	d123      	bne.n	29a4 <vTracePrintF_Helper+0x2c4>
		{
			vTraceError("vTracePrintF - Too large arguments, max 32 byte allowed!");
    295c:	4810      	ldr	r0, [pc, #64]	; (29a0 <vTracePrintF_Helper+0x2c0>)
    295e:	4b03      	ldr	r3, [pc, #12]	; (296c <vTracePrintF_Helper+0x28c>)
    2960:	4798      	blx	r3
			return 0;
    2962:	2600      	movs	r6, #0
    2964:	e028      	b.n	29b8 <vTracePrintF_Helper+0x2d8>
    2966:	46c0      	nop			; (mov r8, r8)
    2968:	00006b24 	.word	0x00006b24
    296c:	00001165 	.word	0x00001165
    2970:	00002bed 	.word	0x00002bed
    2974:	20000538 	.word	0x20000538
    2978:	200004ac 	.word	0x200004ac
    297c:	2000057a 	.word	0x2000057a
    2980:	20000579 	.word	0x20000579
    2984:	20000578 	.word	0x20000578
    2988:	00006b54 	.word	0x00006b54
    298c:	0000680c 	.word	0x0000680c
    2990:	00002561 	.word	0x00002561
    2994:	000026bd 	.word	0x000026bd
    2998:	000025b1 	.word	0x000025b1
    299c:	0000535d 	.word	0x0000535d
    29a0:	00006b88 	.word	0x00006b88
{
	uint16_t formatStrIndex = 0;
	uint8_t argCounter = 0;
	uint8_t i = byteOffset;

	while (formatStr[formatStrIndex] != '\0')
    29a4:	5d2b      	ldrb	r3, [r5, r4]
    29a6:	2b00      	cmp	r3, #0
    29a8:	d000      	beq.n	29ac <vTracePrintF_Helper+0x2cc>
    29aa:	e6ce      	b.n	274a <vTracePrintF_Helper+0x6a>
		{
			vTraceError("vTracePrintF - Too large arguments, max 32 byte allowed!");
			return 0;
		}
	}
	return (i+3)/4;
    29ac:	3603      	adds	r6, #3
    29ae:	17f3      	asrs	r3, r6, #31
    29b0:	0f9b      	lsrs	r3, r3, #30
    29b2:	199e      	adds	r6, r3, r6
    29b4:	10b6      	asrs	r6, r6, #2
    29b6:	b2f6      	uxtb	r6, r6
		ue1->type = EVENT_BEING_WRITTEN;	 /* Update this as the last step */

		noOfSlots = prvTraceUserEventFormat(formatStr, vl, (uint8_t*)tempDataBuffer, 4);

		/* Store the format string, with a reference to the channel symbol */
		ue1->payload = prvTraceOpenSymbol(formatStr, eventLabel);
    29b8:	1c28      	adds	r0, r5, #0
    29ba:	4651      	mov	r1, sl
    29bc:	4b2d      	ldr	r3, [pc, #180]	; (2a74 <vTracePrintF_Helper+0x394>)
    29be:	4798      	blx	r3
    29c0:	ac05      	add	r4, sp, #20
    29c2:	8060      	strh	r0, [r4, #2]

		ue1->dts = (uint8_t)prvTraceGetDTS(0xFF);
    29c4:	20ff      	movs	r0, #255	; 0xff
    29c6:	4b2c      	ldr	r3, [pc, #176]	; (2a78 <vTracePrintF_Helper+0x398>)
    29c8:	4798      	blx	r3
    29ca:	7060      	strb	r0, [r4, #1]

		 /* prvTraceGetDTS might stop the recorder in some cases... */
		if (RecorderDataPtr->recorderActive)
    29cc:	4b2b      	ldr	r3, [pc, #172]	; (2a7c <vTracePrintF_Helper+0x39c>)
    29ce:	681b      	ldr	r3, [r3, #0]
    29d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
    29d2:	2800      	cmp	r0, #0
    29d4:	d03f      	beq.n	2a56 <vTracePrintF_Helper+0x376>

		ue1 = (UserEvent*)(&tempDataBuffer[0]);

		ue1->type = EVENT_BEING_WRITTEN;	 /* Update this as the last step */

		noOfSlots = prvTraceUserEventFormat(formatStr, vl, (uint8_t*)tempDataBuffer, 4);
    29d6:	1c34      	adds	r4, r6, #0
		if (RecorderDataPtr->recorderActive)
		{

			/* If the data does not fit in the remaining main buffer, wrap around to
			0 if allowed, otherwise stop the recorder and quit). */
			if (RecorderDataPtr->nextFreeIndex + noOfSlots > RecorderDataPtr->maxEvents)
    29d8:	69d9      	ldr	r1, [r3, #28]
    29da:	699a      	ldr	r2, [r3, #24]
    29dc:	1870      	adds	r0, r6, r1
    29de:	4290      	cmp	r0, r2
    29e0:	d912      	bls.n	2a08 <vTracePrintF_Helper+0x328>
			{
				#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
				(void)memset(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
						0,
						(RecorderDataPtr->maxEvents - RecorderDataPtr->nextFreeIndex)*4);
    29e2:	1a52      	subs	r2, r2, r1
    29e4:	0092      	lsls	r2, r2, #2
			/* If the data does not fit in the remaining main buffer, wrap around to
			0 if allowed, otherwise stop the recorder and quit). */
			if (RecorderDataPtr->nextFreeIndex + noOfSlots > RecorderDataPtr->maxEvents)
			{
				#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
				(void)memset(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
    29e6:	0088      	lsls	r0, r1, #2
    29e8:	2183      	movs	r1, #131	; 0x83
    29ea:	0109      	lsls	r1, r1, #4
    29ec:	1840      	adds	r0, r0, r1
    29ee:	1818      	adds	r0, r3, r0
    29f0:	2100      	movs	r1, #0
    29f2:	4b23      	ldr	r3, [pc, #140]	; (2a80 <vTracePrintF_Helper+0x3a0>)
    29f4:	4798      	blx	r3
						0,
						(RecorderDataPtr->maxEvents - RecorderDataPtr->nextFreeIndex)*4);
				RecorderDataPtr->nextFreeIndex = 0;
    29f6:	4b21      	ldr	r3, [pc, #132]	; (2a7c <vTracePrintF_Helper+0x39c>)
    29f8:	681b      	ldr	r3, [r3, #0]
    29fa:	2200      	movs	r2, #0
    29fc:	61da      	str	r2, [r3, #28]
				RecorderDataPtr->bufferIsFull = 1;
    29fe:	2201      	movs	r2, #1
    2a00:	621a      	str	r2, [r3, #32]
				vTraceStop();
				#endif
			}

			/* Check if recorder has been stopped (i.e., vTraceStop above) */
			if (RecorderDataPtr->recorderActive)
    2a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2a04:	2b00      	cmp	r3, #0
    2a06:	d023      	beq.n	2a50 <vTracePrintF_Helper+0x370>
				/* Check that the buffer to be overwritten does not contain any user
				events that would be partially overwritten. If so, they must be "killed"
				by replacing the user event and following data with NULL events (i.e.,
				using a memset to zero).*/
				#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
				prvCheckDataToBeOverwrittenForMultiEntryEvents((uint8_t)noOfSlots);
    2a08:	1c30      	adds	r0, r6, #0
    2a0a:	4b1e      	ldr	r3, [pc, #120]	; (2a84 <vTracePrintF_Helper+0x3a4>)
    2a0c:	4798      	blx	r3
				#endif
				/* Copy the local buffer to the main buffer */
				(void)memcpy(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
    2a0e:	4d1b      	ldr	r5, [pc, #108]	; (2a7c <vTracePrintF_Helper+0x39c>)
    2a10:	682b      	ldr	r3, [r5, #0]
    2a12:	69da      	ldr	r2, [r3, #28]
    2a14:	0090      	lsls	r0, r2, #2
    2a16:	2183      	movs	r1, #131	; 0x83
    2a18:	0109      	lsls	r1, r1, #4
    2a1a:	1840      	adds	r0, r0, r1
    2a1c:	1818      	adds	r0, r3, r0
						tempDataBuffer,
						noOfSlots * 4);
    2a1e:	00a2      	lsls	r2, r4, #2
				using a memset to zero).*/
				#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
				prvCheckDataToBeOverwrittenForMultiEntryEvents((uint8_t)noOfSlots);
				#endif
				/* Copy the local buffer to the main buffer */
				(void)memcpy(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
    2a20:	a905      	add	r1, sp, #20
    2a22:	4b19      	ldr	r3, [pc, #100]	; (2a88 <vTracePrintF_Helper+0x3a8>)
    2a24:	4798      	blx	r3
						noOfSlots * 4);

				/* Update the event type, i.e., number of data entries following the
				main USER_EVENT entry (Note: important that this is after the memcpy,
				but within the critical section!)*/
				RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4] =
    2a26:	682b      	ldr	r3, [r5, #0]
    2a28:	69da      	ldr	r2, [r3, #28]
    2a2a:	0091      	lsls	r1, r2, #2
    2a2c:	1859      	adds	r1, r3, r1
    2a2e:	2083      	movs	r0, #131	; 0x83
    2a30:	0100      	lsls	r0, r0, #4
    2a32:	1809      	adds	r1, r1, r0
				 (uint8_t) ( USER_EVENT + noOfSlots - 1 );
    2a34:	3e69      	subs	r6, #105	; 0x69
						noOfSlots * 4);

				/* Update the event type, i.e., number of data entries following the
				main USER_EVENT entry (Note: important that this is after the memcpy,
				but within the critical section!)*/
				RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4] =
    2a36:	700e      	strb	r6, [r1, #0]
				 (uint8_t) ( USER_EVENT + noOfSlots - 1 );

				/* Update the main buffer event index (already checked that it fits in
				the buffer, so no need to check for wrapping)*/

				RecorderDataPtr->nextFreeIndex += noOfSlots;
    2a38:	18a2      	adds	r2, r4, r2
    2a3a:	61da      	str	r2, [r3, #28]
				RecorderDataPtr->numEvents += noOfSlots;
    2a3c:	6959      	ldr	r1, [r3, #20]
    2a3e:	190c      	adds	r4, r1, r4
    2a40:	615c      	str	r4, [r3, #20]

				if (RecorderDataPtr->nextFreeIndex >= EVENT_BUFFER_SIZE)
    2a42:	4912      	ldr	r1, [pc, #72]	; (2a8c <vTracePrintF_Helper+0x3ac>)
    2a44:	428a      	cmp	r2, r1
    2a46:	d903      	bls.n	2a50 <vTracePrintF_Helper+0x370>
				{
					#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
					/* We have reached the end, but this is a ring buffer. Start from the beginning again. */
					RecorderDataPtr->bufferIsFull = 1;
    2a48:	2201      	movs	r2, #1
    2a4a:	621a      	str	r2, [r3, #32]
					RecorderDataPtr->nextFreeIndex = 0;
    2a4c:	2200      	movs	r2, #0
    2a4e:	61da      	str	r2, [r3, #28]
				}
			}

			#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
			/* Make sure the next entry is cleared correctly */
			prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
    2a50:	2001      	movs	r0, #1
    2a52:	4b0c      	ldr	r3, [pc, #48]	; (2a84 <vTracePrintF_Helper+0x3a4>)
    2a54:	4798      	blx	r3
			#endif

		}
	}
	trcCRITICAL_SECTION_END();
    2a56:	4b0e      	ldr	r3, [pc, #56]	; (2a90 <vTracePrintF_Helper+0x3b0>)
    2a58:	681a      	ldr	r2, [r3, #0]
    2a5a:	3a01      	subs	r2, #1
    2a5c:	601a      	str	r2, [r3, #0]
    2a5e:	1c38      	adds	r0, r7, #0
    2a60:	4b0c      	ldr	r3, [pc, #48]	; (2a94 <vTracePrintF_Helper+0x3b4>)
    2a62:	4798      	blx	r3
		channel = xTraceRegisterChannelFormat(eventLabel, formatLabel);

		prvTraceUserEventHelper1(channel, eventLabel, formatLabel, vl);
	}
#endif
}
    2a64:	b00f      	add	sp, #60	; 0x3c
    2a66:	bc3c      	pop	{r2, r3, r4, r5}
    2a68:	4690      	mov	r8, r2
    2a6a:	4699      	mov	r9, r3
    2a6c:	46a2      	mov	sl, r4
    2a6e:	46ab      	mov	fp, r5
    2a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a72:	46c0      	nop			; (mov r8, r8)
    2a74:	00001a7d 	.word	0x00001a7d
    2a78:	00001755 	.word	0x00001755
    2a7c:	200004ac 	.word	0x200004ac
    2a80:	00005541 	.word	0x00005541
    2a84:	00001659 	.word	0x00001659
    2a88:	000054bd 	.word	0x000054bd
    2a8c:	000003e7 	.word	0x000003e7
    2a90:	20000538 	.word	0x20000538
    2a94:	00002bf9 	.word	0x00002bf9

00002a98 <vTracePrintF>:
 * Before using a %lf argument on a 16-bit MCU, please verify that
 * "sizeof(double)" actually gives 8 as expected. If not, use %f instead.
 ******************************************************************************/

void vTracePrintF(traceLabel eventLabel, const char* formatStr, ...)
{
    2a98:	b40e      	push	{r1, r2, r3}
    2a9a:	b500      	push	{lr}
    2a9c:	b082      	sub	sp, #8
    2a9e:	aa03      	add	r2, sp, #12
    2aa0:	ca08      	ldmia	r2!, {r3}
#if (TRACE_SCHEDULING_ONLY == 0)
	va_list vl;

	va_start(vl, formatStr);
    2aa2:	9201      	str	r2, [sp, #4]
	vTracePrintF_Helper(eventLabel, formatStr, vl);
    2aa4:	1c19      	adds	r1, r3, #0
    2aa6:	4b03      	ldr	r3, [pc, #12]	; (2ab4 <vTracePrintF+0x1c>)
    2aa8:	4798      	blx	r3
	va_end(vl);
#endif /* TRACE_SCHEDULING_ONLY */
}
    2aaa:	b002      	add	sp, #8
    2aac:	bc08      	pop	{r3}
    2aae:	b003      	add	sp, #12
    2ab0:	4718      	bx	r3
    2ab2:	46c0      	nop			; (mov r8, r8)
    2ab4:	000026e1 	.word	0x000026e1

00002ab8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2ab8:	1c03      	adds	r3, r0, #0
    2aba:	3308      	adds	r3, #8
    2abc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2abe:	2201      	movs	r2, #1
    2ac0:	4252      	negs	r2, r2
    2ac2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2ac4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2ac6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    2ac8:	2300      	movs	r3, #0
    2aca:	6003      	str	r3, [r0, #0]
}
    2acc:	4770      	bx	lr
    2ace:	46c0      	nop			; (mov r8, r8)

00002ad0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2ad0:	2300      	movs	r3, #0
    2ad2:	6103      	str	r3, [r0, #16]
}
    2ad4:	4770      	bx	lr
    2ad6:	46c0      	nop			; (mov r8, r8)

00002ad8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    2ad8:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    2ada:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    2adc:	689a      	ldr	r2, [r3, #8]
    2ade:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    2ae0:	689a      	ldr	r2, [r3, #8]
    2ae2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    2ae4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2ae6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    2ae8:	6803      	ldr	r3, [r0, #0]
    2aea:	3301      	adds	r3, #1
    2aec:	6003      	str	r3, [r0, #0]
}
    2aee:	4770      	bx	lr

00002af0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2af0:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2af2:	680c      	ldr	r4, [r1, #0]
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2af4:	1c02      	adds	r2, r0, #0
    2af6:	3208      	adds	r2, #8
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2af8:	1c63      	adds	r3, r4, #1
    2afa:	d101      	bne.n	2b00 <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2afc:	6902      	ldr	r2, [r0, #16]
    2afe:	e005      	b.n	2b0c <vListInsert+0x1c>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2b00:	6853      	ldr	r3, [r2, #4]
    2b02:	681d      	ldr	r5, [r3, #0]
    2b04:	42ac      	cmp	r4, r5
    2b06:	d301      	bcc.n	2b0c <vListInsert+0x1c>
    2b08:	1c1a      	adds	r2, r3, #0
    2b0a:	e7f9      	b.n	2b00 <vListInsert+0x10>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2b0c:	6853      	ldr	r3, [r2, #4]
    2b0e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2b10:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    2b12:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    2b14:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2b16:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    2b18:	6803      	ldr	r3, [r0, #0]
    2b1a:	3301      	adds	r3, #1
    2b1c:	6003      	str	r3, [r0, #0]
}
    2b1e:	bd30      	pop	{r4, r5, pc}

00002b20 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    2b20:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2b22:	6842      	ldr	r2, [r0, #4]
    2b24:	6881      	ldr	r1, [r0, #8]
    2b26:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2b28:	6882      	ldr	r2, [r0, #8]
    2b2a:	6841      	ldr	r1, [r0, #4]
    2b2c:	6051      	str	r1, [r2, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2b2e:	685a      	ldr	r2, [r3, #4]
    2b30:	4282      	cmp	r2, r0
    2b32:	d101      	bne.n	2b38 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2b34:	6892      	ldr	r2, [r2, #8]
    2b36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    2b38:	2200      	movs	r2, #0
    2b3a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    2b3c:	6818      	ldr	r0, [r3, #0]
    2b3e:	3801      	subs	r0, #1
    2b40:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
    2b42:	4770      	bx	lr

00002b44 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    2b44:	4b03      	ldr	r3, [pc, #12]	; (2b54 <prvTaskExitError+0x10>)
    2b46:	681b      	ldr	r3, [r3, #0]
    2b48:	3301      	adds	r3, #1
    2b4a:	d001      	beq.n	2b50 <prvTaskExitError+0xc>
    2b4c:	b672      	cpsid	i
    2b4e:	e7fe      	b.n	2b4e <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
    2b50:	b672      	cpsid	i
    2b52:	e7fe      	b.n	2b52 <prvTaskExitError+0xe>
    2b54:	20000010 	.word	0x20000010

00002b58 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    2b58:	4a06      	ldr	r2, [pc, #24]	; (2b74 <pxCurrentTCBConst2>)
    2b5a:	6813      	ldr	r3, [r2, #0]
    2b5c:	6818      	ldr	r0, [r3, #0]
    2b5e:	3020      	adds	r0, #32
    2b60:	f380 8809 	msr	PSP, r0
    2b64:	2002      	movs	r0, #2
    2b66:	f380 8814 	msr	CONTROL, r0
    2b6a:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    2b6c:	46ae      	mov	lr, r5
    2b6e:	b662      	cpsie	i
    2b70:	bd00      	pop	{pc}
    2b72:	46c0      	nop			; (mov r8, r8)

00002b74 <pxCurrentTCBConst2>:
    2b74:	20001550 	.word	0x20001550

00002b78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    2b78:	b510      	push	{r4, lr}
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    2b7a:	1f03      	subs	r3, r0, #4
    2b7c:	2480      	movs	r4, #128	; 0x80
    2b7e:	0464      	lsls	r4, r4, #17
    2b80:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    2b82:	3b04      	subs	r3, #4
    2b84:	6019      	str	r1, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    2b86:	3b04      	subs	r3, #4
    2b88:	4902      	ldr	r1, [pc, #8]	; (2b94 <pxPortInitialiseStack+0x1c>)
    2b8a:	6019      	str	r1, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    2b8c:	3b14      	subs	r3, #20
    2b8e:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */

	return pxTopOfStack;
    2b90:	3840      	subs	r0, #64	; 0x40
}
    2b92:	bd10      	pop	{r4, pc}
    2b94:	00002b45 	.word	0x00002b45

00002b98 <SVC_Handler>:

void vPortSVCHandler( void )
{
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    2b98:	4770      	bx	lr
    2b9a:	46c0      	nop			; (mov r8, r8)

00002b9c <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    2b9c:	2280      	movs	r2, #128	; 0x80
    2b9e:	0552      	lsls	r2, r2, #21
    2ba0:	4b03      	ldr	r3, [pc, #12]	; (2bb0 <vPortYield+0x14>)
    2ba2:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    2ba4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    2ba8:	f3bf 8f6f 	isb	sy
}
    2bac:	4770      	bx	lr
    2bae:	46c0      	nop			; (mov r8, r8)
    2bb0:	e000ed04 	.word	0xe000ed04

00002bb4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
    2bb4:	b672      	cpsid	i
    uxCriticalNesting++;
    2bb6:	4b04      	ldr	r3, [pc, #16]	; (2bc8 <vPortEnterCritical+0x14>)
    2bb8:	681a      	ldr	r2, [r3, #0]
    2bba:	3201      	adds	r2, #1
    2bbc:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
    2bbe:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    2bc2:	f3bf 8f6f 	isb	sy
}
    2bc6:	4770      	bx	lr
    2bc8:	20000010 	.word	0x20000010

00002bcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
    2bcc:	4b06      	ldr	r3, [pc, #24]	; (2be8 <vPortExitCritical+0x1c>)
    2bce:	681b      	ldr	r3, [r3, #0]
    2bd0:	2b00      	cmp	r3, #0
    2bd2:	d101      	bne.n	2bd8 <vPortExitCritical+0xc>
    2bd4:	b672      	cpsid	i
    2bd6:	e7fe      	b.n	2bd6 <vPortExitCritical+0xa>
    uxCriticalNesting--;
    2bd8:	3b01      	subs	r3, #1
    2bda:	4a03      	ldr	r2, [pc, #12]	; (2be8 <vPortExitCritical+0x1c>)
    2bdc:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    2bde:	2b00      	cmp	r3, #0
    2be0:	d100      	bne.n	2be4 <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
    2be2:	b662      	cpsie	i
    }
}
    2be4:	4770      	bx	lr
    2be6:	46c0      	nop			; (mov r8, r8)
    2be8:	20000010 	.word	0x20000010

00002bec <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    2bec:	f3ef 8010 	mrs	r0, PRIMASK
    2bf0:	b672      	cpsid	i
    2bf2:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
    2bf4:	2000      	movs	r0, #0
    2bf6:	46c0      	nop			; (mov r8, r8)

00002bf8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
    2bf8:	f380 8810 	msr	PRIMASK, r0
    2bfc:	4770      	bx	lr
    2bfe:	46c0      	nop			; (mov r8, r8)

00002c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    2c00:	f3ef 8009 	mrs	r0, PSP
    2c04:	4b0e      	ldr	r3, [pc, #56]	; (2c40 <pxCurrentTCBConst>)
    2c06:	681a      	ldr	r2, [r3, #0]
    2c08:	3820      	subs	r0, #32
    2c0a:	6010      	str	r0, [r2, #0]
    2c0c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    2c0e:	4644      	mov	r4, r8
    2c10:	464d      	mov	r5, r9
    2c12:	4656      	mov	r6, sl
    2c14:	465f      	mov	r7, fp
    2c16:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    2c18:	b508      	push	{r3, lr}
    2c1a:	b672      	cpsid	i
    2c1c:	f001 f97e 	bl	3f1c <vTaskSwitchContext>
    2c20:	b662      	cpsie	i
    2c22:	bc0c      	pop	{r2, r3}
    2c24:	6811      	ldr	r1, [r2, #0]
    2c26:	6808      	ldr	r0, [r1, #0]
    2c28:	3010      	adds	r0, #16
    2c2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    2c2c:	46a0      	mov	r8, r4
    2c2e:	46a9      	mov	r9, r5
    2c30:	46b2      	mov	sl, r6
    2c32:	46bb      	mov	fp, r7
    2c34:	f380 8809 	msr	PSP, r0
    2c38:	3820      	subs	r0, #32
    2c3a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    2c3c:	4718      	bx	r3
    2c3e:	46c0      	nop			; (mov r8, r8)

00002c40 <pxCurrentTCBConst>:
    2c40:	20001550 	.word	0x20001550

00002c44 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    2c44:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    2c46:	4b07      	ldr	r3, [pc, #28]	; (2c64 <SysTick_Handler+0x20>)
    2c48:	4798      	blx	r3
    2c4a:	1c04      	adds	r4, r0, #0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    2c4c:	4b06      	ldr	r3, [pc, #24]	; (2c68 <SysTick_Handler+0x24>)
    2c4e:	4798      	blx	r3
    2c50:	2800      	cmp	r0, #0
    2c52:	d003      	beq.n	2c5c <SysTick_Handler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    2c54:	2280      	movs	r2, #128	; 0x80
    2c56:	0552      	lsls	r2, r2, #21
    2c58:	4b04      	ldr	r3, [pc, #16]	; (2c6c <SysTick_Handler+0x28>)
    2c5a:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    2c5c:	1c20      	adds	r0, r4, #0
    2c5e:	4b04      	ldr	r3, [pc, #16]	; (2c70 <SysTick_Handler+0x2c>)
    2c60:	4798      	blx	r3
}
    2c62:	bd10      	pop	{r4, pc}
    2c64:	00002bed 	.word	0x00002bed
    2c68:	00003c59 	.word	0x00003c59
    2c6c:	e000ed04 	.word	0xe000ed04
    2c70:	00002bf9 	.word	0x00002bf9

00002c74 <vPortSetupTimerInterrupt>:
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
    2c74:	2200      	movs	r2, #0
    2c76:	4b04      	ldr	r3, [pc, #16]	; (2c88 <vPortSetupTimerInterrupt+0x14>)
    2c78:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    2c7a:	4a04      	ldr	r2, [pc, #16]	; (2c8c <vPortSetupTimerInterrupt+0x18>)
    2c7c:	4b04      	ldr	r3, [pc, #16]	; (2c90 <vPortSetupTimerInterrupt+0x1c>)
    2c7e:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    2c80:	2207      	movs	r2, #7
    2c82:	4b04      	ldr	r3, [pc, #16]	; (2c94 <vPortSetupTimerInterrupt+0x20>)
    2c84:	601a      	str	r2, [r3, #0]
}
    2c86:	4770      	bx	lr
    2c88:	e000e018 	.word	0xe000e018
    2c8c:	0000bb7f 	.word	0x0000bb7f
    2c90:	e000e014 	.word	0xe000e014
    2c94:	e000e010 	.word	0xe000e010

00002c98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    2c98:	b508      	push	{r3, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    2c9a:	4b0a      	ldr	r3, [pc, #40]	; (2cc4 <xPortStartScheduler+0x2c>)
    2c9c:	6819      	ldr	r1, [r3, #0]
    2c9e:	22ff      	movs	r2, #255	; 0xff
    2ca0:	0412      	lsls	r2, r2, #16
    2ca2:	430a      	orrs	r2, r1
    2ca4:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    2ca6:	6819      	ldr	r1, [r3, #0]
    2ca8:	22ff      	movs	r2, #255	; 0xff
    2caa:	0612      	lsls	r2, r2, #24
    2cac:	430a      	orrs	r2, r1
    2cae:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    2cb0:	4b05      	ldr	r3, [pc, #20]	; (2cc8 <xPortStartScheduler+0x30>)
    2cb2:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    2cb4:	2200      	movs	r2, #0
    2cb6:	4b05      	ldr	r3, [pc, #20]	; (2ccc <xPortStartScheduler+0x34>)
    2cb8:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    2cba:	4b05      	ldr	r3, [pc, #20]	; (2cd0 <xPortStartScheduler+0x38>)
    2cbc:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
    2cbe:	4b05      	ldr	r3, [pc, #20]	; (2cd4 <xPortStartScheduler+0x3c>)
    2cc0:	4798      	blx	r3
    2cc2:	46c0      	nop			; (mov r8, r8)
    2cc4:	e000ed20 	.word	0xe000ed20
    2cc8:	00002c75 	.word	0x00002c75
    2ccc:	20000010 	.word	0x20000010
    2cd0:	00002b59 	.word	0x00002b59
    2cd4:	00002b45 	.word	0x00002b45

00002cd8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2cd8:	b538      	push	{r3, r4, r5, lr}
    2cda:	1c04      	adds	r4, r0, #0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    2cdc:	0743      	lsls	r3, r0, #29
    2cde:	d002      	beq.n	2ce6 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    2ce0:	2307      	movs	r3, #7
    2ce2:	439c      	bics	r4, r3
    2ce4:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
    2ce6:	4b10      	ldr	r3, [pc, #64]	; (2d28 <pvPortMalloc+0x50>)
    2ce8:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    2cea:	4b10      	ldr	r3, [pc, #64]	; (2d2c <pvPortMalloc+0x54>)
    2cec:	681b      	ldr	r3, [r3, #0]
    2cee:	2b00      	cmp	r3, #0
    2cf0:	d105      	bne.n	2cfe <pvPortMalloc+0x26>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    2cf2:	4b0e      	ldr	r3, [pc, #56]	; (2d2c <pvPortMalloc+0x54>)
    2cf4:	1c1a      	adds	r2, r3, #0
    2cf6:	320c      	adds	r2, #12
    2cf8:	2107      	movs	r1, #7
    2cfa:	438a      	bics	r2, r1
    2cfc:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    2cfe:	4b0c      	ldr	r3, [pc, #48]	; (2d30 <pvPortMalloc+0x58>)
    2d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d02:	18e4      	adds	r4, r4, r3
    2d04:	4a0b      	ldr	r2, [pc, #44]	; (2d34 <pvPortMalloc+0x5c>)
    2d06:	4294      	cmp	r4, r2
    2d08:	d807      	bhi.n	2d1a <pvPortMalloc+0x42>
    2d0a:	42a3      	cmp	r3, r4
    2d0c:	d207      	bcs.n	2d1e <pvPortMalloc+0x46>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    2d0e:	4a07      	ldr	r2, [pc, #28]	; (2d2c <pvPortMalloc+0x54>)
    2d10:	6815      	ldr	r5, [r2, #0]
    2d12:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
    2d14:	4b06      	ldr	r3, [pc, #24]	; (2d30 <pvPortMalloc+0x58>)
    2d16:	625c      	str	r4, [r3, #36]	; 0x24
    2d18:	e002      	b.n	2d20 <pvPortMalloc+0x48>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    2d1a:	2500      	movs	r5, #0
    2d1c:	e000      	b.n	2d20 <pvPortMalloc+0x48>
    2d1e:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    2d20:	4b05      	ldr	r3, [pc, #20]	; (2d38 <pvPortMalloc+0x60>)
    2d22:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    2d24:	1c28      	adds	r0, r5, #0
    2d26:	bd38      	pop	{r3, r4, r5, pc}
    2d28:	00003c09 	.word	0x00003c09
    2d2c:	2000057c 	.word	0x2000057c
    2d30:	200014fc 	.word	0x200014fc
    2d34:	00000f97 	.word	0x00000f97
    2d38:	00003da5 	.word	0x00003da5

00002d3c <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    2d3c:	2800      	cmp	r0, #0
    2d3e:	d001      	beq.n	2d44 <vPortFree+0x8>
    2d40:	b672      	cpsid	i
    2d42:	e7fe      	b.n	2d42 <vPortFree+0x6>
}
    2d44:	4770      	bx	lr
    2d46:	46c0      	nop			; (mov r8, r8)

00002d48 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    2d48:	b538      	push	{r3, r4, r5, lr}
    2d4a:	1c04      	adds	r4, r0, #0
    2d4c:	1c15      	adds	r5, r2, #0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    2d4e:	6c02      	ldr	r2, [r0, #64]	; 0x40
    2d50:	2a00      	cmp	r2, #0
    2d52:	d108      	bne.n	2d66 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2d54:	6801      	ldr	r1, [r0, #0]
    2d56:	2900      	cmp	r1, #0
    2d58:	d12a      	bne.n	2db0 <prvCopyDataToQueue+0x68>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    2d5a:	6840      	ldr	r0, [r0, #4]
    2d5c:	4b16      	ldr	r3, [pc, #88]	; (2db8 <prvCopyDataToQueue+0x70>)
    2d5e:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    2d60:	2300      	movs	r3, #0
    2d62:	6063      	str	r3, [r4, #4]
    2d64:	e024      	b.n	2db0 <prvCopyDataToQueue+0x68>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    2d66:	2d00      	cmp	r5, #0
    2d68:	d10c      	bne.n	2d84 <prvCopyDataToQueue+0x3c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    2d6a:	6880      	ldr	r0, [r0, #8]
    2d6c:	4b13      	ldr	r3, [pc, #76]	; (2dbc <prvCopyDataToQueue+0x74>)
    2d6e:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2d70:	68a2      	ldr	r2, [r4, #8]
    2d72:	6c21      	ldr	r1, [r4, #64]	; 0x40
    2d74:	1853      	adds	r3, r2, r1
    2d76:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2d78:	6862      	ldr	r2, [r4, #4]
    2d7a:	4293      	cmp	r3, r2
    2d7c:	d318      	bcc.n	2db0 <prvCopyDataToQueue+0x68>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    2d7e:	6823      	ldr	r3, [r4, #0]
    2d80:	60a3      	str	r3, [r4, #8]
    2d82:	e015      	b.n	2db0 <prvCopyDataToQueue+0x68>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2d84:	68c0      	ldr	r0, [r0, #12]
    2d86:	4b0d      	ldr	r3, [pc, #52]	; (2dbc <prvCopyDataToQueue+0x74>)
    2d88:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    2d8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    2d8c:	424a      	negs	r2, r1
    2d8e:	68e1      	ldr	r1, [r4, #12]
    2d90:	188b      	adds	r3, r1, r2
    2d92:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2d94:	6821      	ldr	r1, [r4, #0]
    2d96:	428b      	cmp	r3, r1
    2d98:	d202      	bcs.n	2da0 <prvCopyDataToQueue+0x58>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    2d9a:	6863      	ldr	r3, [r4, #4]
    2d9c:	189a      	adds	r2, r3, r2
    2d9e:	60e2      	str	r2, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    2da0:	2d02      	cmp	r5, #2
    2da2:	d105      	bne.n	2db0 <prvCopyDataToQueue+0x68>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2da4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2da6:	2b00      	cmp	r3, #0
    2da8:	d002      	beq.n	2db0 <prvCopyDataToQueue+0x68>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    2daa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2dac:	3b01      	subs	r3, #1
    2dae:	63a3      	str	r3, [r4, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    2db0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2db2:	3301      	adds	r3, #1
    2db4:	63a3      	str	r3, [r4, #56]	; 0x38
}
    2db6:	bd38      	pop	{r3, r4, r5, pc}
    2db8:	00004379 	.word	0x00004379
    2dbc:	000054bd 	.word	0x000054bd

00002dc0 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    2dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dc2:	4657      	mov	r7, sl
    2dc4:	464e      	mov	r6, r9
    2dc6:	4645      	mov	r5, r8
    2dc8:	b4e0      	push	{r5, r6, r7}
    2dca:	b082      	sub	sp, #8
    2dcc:	9001      	str	r0, [sp, #4]
    2dce:	4688      	mov	r8, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    2dd0:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    2dd2:	2c00      	cmp	r4, #0
    2dd4:	d101      	bne.n	2dda <prvNotifyQueueSetContainer+0x1a>
    2dd6:	b672      	cpsid	i
    2dd8:	e7fe      	b.n	2dd8 <prvNotifyQueueSetContainer+0x18>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    2dda:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2ddc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2dde:	429a      	cmp	r2, r3
    2de0:	d301      	bcc.n	2de6 <prvNotifyQueueSetContainer+0x26>
    2de2:	b672      	cpsid	i
    2de4:	e7fe      	b.n	2de4 <prvNotifyQueueSetContainer+0x24>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    2de6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    2de8:	2000      	movs	r0, #0
		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    2dea:	4293      	cmp	r3, r2
    2dec:	d937      	bls.n	2e5e <prvNotifyQueueSetContainer+0x9e>
		{
			traceQUEUE_SEND( pxQueueSetContainer );
    2dee:	1c20      	adds	r0, r4, #0
    2df0:	4e1e      	ldr	r6, [pc, #120]	; (2e6c <prvNotifyQueueSetContainer+0xac>)
    2df2:	47b0      	blx	r6
    2df4:	4d1e      	ldr	r5, [pc, #120]	; (2e70 <prvNotifyQueueSetContainer+0xb0>)
    2df6:	5c2b      	ldrb	r3, [r5, r0]
    2df8:	3320      	adds	r3, #32
    2dfa:	b2db      	uxtb	r3, r3
    2dfc:	469a      	mov	sl, r3
    2dfe:	1c20      	adds	r0, r4, #0
    2e00:	47b0      	blx	r6
    2e02:	5c28      	ldrb	r0, [r5, r0]
    2e04:	4681      	mov	r9, r0
    2e06:	1c20      	adds	r0, r4, #0
    2e08:	4f1a      	ldr	r7, [pc, #104]	; (2e74 <prvNotifyQueueSetContainer+0xb4>)
    2e0a:	47b8      	blx	r7
    2e0c:	1c02      	adds	r2, r0, #0
    2e0e:	4650      	mov	r0, sl
    2e10:	4649      	mov	r1, r9
    2e12:	4b19      	ldr	r3, [pc, #100]	; (2e78 <prvNotifyQueueSetContainer+0xb8>)
    2e14:	4798      	blx	r3
    2e16:	1c20      	adds	r0, r4, #0
    2e18:	47b0      	blx	r6
    2e1a:	5c28      	ldrb	r0, [r5, r0]
    2e1c:	4681      	mov	r9, r0
    2e1e:	1c20      	adds	r0, r4, #0
    2e20:	47b8      	blx	r7
    2e22:	1c07      	adds	r7, r0, #0
    2e24:	1c20      	adds	r0, r4, #0
    2e26:	47b0      	blx	r6
    2e28:	5c2b      	ldrb	r3, [r5, r0]
    2e2a:	2b02      	cmp	r3, #2
    2e2c:	d003      	beq.n	2e36 <prvNotifyQueueSetContainer+0x76>
    2e2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2e30:	3301      	adds	r3, #1
    2e32:	b2da      	uxtb	r2, r3
    2e34:	e000      	b.n	2e38 <prvNotifyQueueSetContainer+0x78>
    2e36:	2200      	movs	r2, #0
    2e38:	4648      	mov	r0, r9
    2e3a:	1c39      	adds	r1, r7, #0
    2e3c:	4b0f      	ldr	r3, [pc, #60]	; (2e7c <prvNotifyQueueSetContainer+0xbc>)
    2e3e:	4798      	blx	r3
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    2e40:	1c20      	adds	r0, r4, #0
    2e42:	a901      	add	r1, sp, #4
    2e44:	4642      	mov	r2, r8
    2e46:	4b0e      	ldr	r3, [pc, #56]	; (2e80 <prvNotifyQueueSetContainer+0xc0>)
    2e48:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    2e4a:	2000      	movs	r0, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    2e4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2e4e:	2b00      	cmp	r3, #0
    2e50:	d005      	beq.n	2e5e <prvNotifyQueueSetContainer+0x9e>
			{
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    2e52:	1c20      	adds	r0, r4, #0
    2e54:	3024      	adds	r0, #36	; 0x24
    2e56:	4b0b      	ldr	r3, [pc, #44]	; (2e84 <prvNotifyQueueSetContainer+0xc4>)
    2e58:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    2e5a:	1e43      	subs	r3, r0, #1
    2e5c:	4198      	sbcs	r0, r3
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    2e5e:	b002      	add	sp, #8
    2e60:	bc1c      	pop	{r2, r3, r4}
    2e62:	4690      	mov	r8, r2
    2e64:	4699      	mov	r9, r3
    2e66:	46a2      	mov	sl, r4
    2e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e6a:	46c0      	nop			; (mov r8, r8)
    2e6c:	0000230d 	.word	0x0000230d
    2e70:	20000008 	.word	0x20000008
    2e74:	000022fd 	.word	0x000022fd
    2e78:	00001c49 	.word	0x00001c49
    2e7c:	00002139 	.word	0x00002139
    2e80:	00002d49 	.word	0x00002d49
    2e84:	00004145 	.word	0x00004145

00002e88 <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    2e88:	b538      	push	{r3, r4, r5, lr}
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    2e8a:	6804      	ldr	r4, [r0, #0]
    2e8c:	2c00      	cmp	r4, #0
    2e8e:	d00c      	beq.n	2eaa <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    2e90:	6c02      	ldr	r2, [r0, #64]	; 0x40
    2e92:	68c5      	ldr	r5, [r0, #12]
    2e94:	18ab      	adds	r3, r5, r2
    2e96:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    2e98:	6845      	ldr	r5, [r0, #4]
    2e9a:	42ab      	cmp	r3, r5
    2e9c:	d300      	bcc.n	2ea0 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    2e9e:	60c4      	str	r4, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    2ea0:	68c3      	ldr	r3, [r0, #12]
    2ea2:	1c08      	adds	r0, r1, #0
    2ea4:	1c19      	adds	r1, r3, #0
    2ea6:	4b01      	ldr	r3, [pc, #4]	; (2eac <prvCopyDataFromQueue+0x24>)
    2ea8:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    2eaa:	bd38      	pop	{r3, r4, r5, pc}
    2eac:	000054bd 	.word	0x000054bd

00002eb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    2eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2eb2:	1c04      	adds	r4, r0, #0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    2eb4:	4b23      	ldr	r3, [pc, #140]	; (2f44 <prvUnlockQueue+0x94>)
    2eb6:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2eb8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2eba:	2b00      	cmp	r3, #0
    2ebc:	dd1c      	ble.n	2ef8 <prvUnlockQueue+0x48>
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2ebe:	4e22      	ldr	r6, [pc, #136]	; (2f48 <prvUnlockQueue+0x98>)
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    2ec0:	4d22      	ldr	r5, [pc, #136]	; (2f4c <prvUnlockQueue+0x9c>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    2ec2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2ec4:	2b00      	cmp	r3, #0
    2ec6:	d007      	beq.n	2ed8 <prvUnlockQueue+0x28>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    2ec8:	1c20      	adds	r0, r4, #0
    2eca:	2100      	movs	r1, #0
    2ecc:	47a8      	blx	r5
    2ece:	2801      	cmp	r0, #1
    2ed0:	d10c      	bne.n	2eec <prvUnlockQueue+0x3c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    2ed2:	4b1f      	ldr	r3, [pc, #124]	; (2f50 <prvUnlockQueue+0xa0>)
    2ed4:	4798      	blx	r3
    2ed6:	e009      	b.n	2eec <prvUnlockQueue+0x3c>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2eda:	2b00      	cmp	r3, #0
    2edc:	d00c      	beq.n	2ef8 <prvUnlockQueue+0x48>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2ede:	1c20      	adds	r0, r4, #0
    2ee0:	3024      	adds	r0, #36	; 0x24
    2ee2:	47b0      	blx	r6
    2ee4:	2800      	cmp	r0, #0
    2ee6:	d001      	beq.n	2eec <prvUnlockQueue+0x3c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    2ee8:	4b19      	ldr	r3, [pc, #100]	; (2f50 <prvUnlockQueue+0xa0>)
    2eea:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    2eec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2eee:	3b01      	subs	r3, #1
    2ef0:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2ef2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2ef4:	2b00      	cmp	r3, #0
    2ef6:	dce4      	bgt.n	2ec2 <prvUnlockQueue+0x12>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    2ef8:	2301      	movs	r3, #1
    2efa:	425b      	negs	r3, r3
    2efc:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    2efe:	4b15      	ldr	r3, [pc, #84]	; (2f54 <prvUnlockQueue+0xa4>)
    2f00:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    2f02:	4b10      	ldr	r3, [pc, #64]	; (2f44 <prvUnlockQueue+0x94>)
    2f04:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2f06:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2f08:	2b00      	cmp	r3, #0
    2f0a:	dd15      	ble.n	2f38 <prvUnlockQueue+0x88>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2f0c:	6923      	ldr	r3, [r4, #16]
    2f0e:	2b00      	cmp	r3, #0
    2f10:	d012      	beq.n	2f38 <prvUnlockQueue+0x88>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2f12:	1c27      	adds	r7, r4, #0
    2f14:	3710      	adds	r7, #16
    2f16:	4e0c      	ldr	r6, [pc, #48]	; (2f48 <prvUnlockQueue+0x98>)
				{
					vTaskMissedYield();
    2f18:	4d0d      	ldr	r5, [pc, #52]	; (2f50 <prvUnlockQueue+0xa0>)
    2f1a:	e002      	b.n	2f22 <prvUnlockQueue+0x72>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2f1c:	6923      	ldr	r3, [r4, #16]
    2f1e:	2b00      	cmp	r3, #0
    2f20:	d00a      	beq.n	2f38 <prvUnlockQueue+0x88>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2f22:	1c38      	adds	r0, r7, #0
    2f24:	47b0      	blx	r6
    2f26:	2800      	cmp	r0, #0
    2f28:	d000      	beq.n	2f2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
    2f2a:	47a8      	blx	r5
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    2f2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2f2e:	3b01      	subs	r3, #1
    2f30:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2f32:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2f34:	2b00      	cmp	r3, #0
    2f36:	dcf1      	bgt.n	2f1c <prvUnlockQueue+0x6c>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    2f38:	2301      	movs	r3, #1
    2f3a:	425b      	negs	r3, r3
    2f3c:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    2f3e:	4b05      	ldr	r3, [pc, #20]	; (2f54 <prvUnlockQueue+0xa4>)
    2f40:	4798      	blx	r3
}
    2f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f44:	00002bb5 	.word	0x00002bb5
    2f48:	00004145 	.word	0x00004145
    2f4c:	00002dc1 	.word	0x00002dc1
    2f50:	00004265 	.word	0x00004265
    2f54:	00002bcd 	.word	0x00002bcd

00002f58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    2f58:	b538      	push	{r3, r4, r5, lr}
    2f5a:	1c04      	adds	r4, r0, #0
    2f5c:	1c0d      	adds	r5, r1, #0
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    2f5e:	2800      	cmp	r0, #0
    2f60:	d101      	bne.n	2f66 <xQueueGenericReset+0xe>
    2f62:	b672      	cpsid	i
    2f64:	e7fe      	b.n	2f64 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
    2f66:	4b15      	ldr	r3, [pc, #84]	; (2fbc <xQueueGenericReset+0x64>)
    2f68:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    2f6a:	6823      	ldr	r3, [r4, #0]
    2f6c:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2f6e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    2f70:	4350      	muls	r0, r2
    2f72:	1819      	adds	r1, r3, r0
    2f74:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    2f76:	2100      	movs	r1, #0
    2f78:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2f7a:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    2f7c:	1a82      	subs	r2, r0, r2
    2f7e:	189b      	adds	r3, r3, r2
    2f80:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    2f82:	2301      	movs	r3, #1
    2f84:	425b      	negs	r3, r3
    2f86:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    2f88:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
    2f8a:	2d00      	cmp	r5, #0
    2f8c:	d10b      	bne.n	2fa6 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2f8e:	6921      	ldr	r1, [r4, #16]
    2f90:	2900      	cmp	r1, #0
    2f92:	d00f      	beq.n	2fb4 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    2f94:	1c20      	adds	r0, r4, #0
    2f96:	3010      	adds	r0, #16
    2f98:	4b09      	ldr	r3, [pc, #36]	; (2fc0 <xQueueGenericReset+0x68>)
    2f9a:	4798      	blx	r3
    2f9c:	2801      	cmp	r0, #1
    2f9e:	d109      	bne.n	2fb4 <xQueueGenericReset+0x5c>
				{
					queueYIELD_IF_USING_PREEMPTION();
    2fa0:	4b08      	ldr	r3, [pc, #32]	; (2fc4 <xQueueGenericReset+0x6c>)
    2fa2:	4798      	blx	r3
    2fa4:	e006      	b.n	2fb4 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2fa6:	1c20      	adds	r0, r4, #0
    2fa8:	3010      	adds	r0, #16
    2faa:	4d07      	ldr	r5, [pc, #28]	; (2fc8 <xQueueGenericReset+0x70>)
    2fac:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    2fae:	1c20      	adds	r0, r4, #0
    2fb0:	3024      	adds	r0, #36	; 0x24
    2fb2:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
    2fb4:	4b05      	ldr	r3, [pc, #20]	; (2fcc <xQueueGenericReset+0x74>)
    2fb6:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    2fb8:	2001      	movs	r0, #1
    2fba:	bd38      	pop	{r3, r4, r5, pc}
    2fbc:	00002bb5 	.word	0x00002bb5
    2fc0:	00004145 	.word	0x00004145
    2fc4:	00002b9d 	.word	0x00002b9d
    2fc8:	00002ab9 	.word	0x00002ab9
    2fcc:	00002bcd 	.word	0x00002bcd

00002fd0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    2fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fd2:	464f      	mov	r7, r9
    2fd4:	4646      	mov	r6, r8
    2fd6:	b4c0      	push	{r6, r7}
    2fd8:	1c05      	adds	r5, r0, #0
    2fda:	1c0f      	adds	r7, r1, #0
    2fdc:	1c16      	adds	r6, r2, #0
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
    2fde:	2800      	cmp	r0, #0
    2fe0:	d019      	beq.n	3016 <xQueueGenericCreate+0x46>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    2fe2:	2058      	movs	r0, #88	; 0x58
    2fe4:	4b26      	ldr	r3, [pc, #152]	; (3080 <xQueueGenericCreate+0xb0>)
    2fe6:	4798      	blx	r3
    2fe8:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    2fea:	d014      	beq.n	3016 <xQueueGenericCreate+0x46>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2fec:	1c38      	adds	r0, r7, #0
    2fee:	4368      	muls	r0, r5
    2ff0:	3001      	adds	r0, #1

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
    2ff2:	4b23      	ldr	r3, [pc, #140]	; (3080 <xQueueGenericCreate+0xb0>)
    2ff4:	4798      	blx	r3
    2ff6:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
    2ff8:	2800      	cmp	r0, #0
    2ffa:	d10e      	bne.n	301a <xQueueGenericCreate+0x4a>
				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
    2ffc:	4b21      	ldr	r3, [pc, #132]	; (3084 <xQueueGenericCreate+0xb4>)
    2ffe:	5d99      	ldrb	r1, [r3, r6]
    3000:	1c08      	adds	r0, r1, #0
    3002:	3040      	adds	r0, #64	; 0x40
    3004:	b2c0      	uxtb	r0, r0
    3006:	2200      	movs	r2, #0
    3008:	4b1f      	ldr	r3, [pc, #124]	; (3088 <xQueueGenericCreate+0xb8>)
    300a:	4798      	blx	r3
				vPortFree( pxNewQueue );
    300c:	1c20      	adds	r0, r4, #0
    300e:	4b1f      	ldr	r3, [pc, #124]	; (308c <xQueueGenericCreate+0xbc>)
    3010:	4798      	blx	r3
    3012:	e000      	b.n	3016 <xQueueGenericCreate+0x46>
    3014:	e7fe      	b.n	3014 <xQueueGenericCreate+0x44>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    3016:	b672      	cpsid	i
    3018:	e7fc      	b.n	3014 <xQueueGenericCreate+0x44>
			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    301a:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    301c:	6427      	str	r7, [r4, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    301e:	1c20      	adds	r0, r4, #0
    3020:	2101      	movs	r1, #1
    3022:	4b1b      	ldr	r3, [pc, #108]	; (3090 <xQueueGenericCreate+0xc0>)
    3024:	4798      	blx	r3

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
    3026:	2350      	movs	r3, #80	; 0x50
    3028:	54e6      	strb	r6, [r4, r3]
				}
				#endif /* configUSE_TRACE_FACILITY */

				#if( configUSE_QUEUE_SETS == 1 )
				{
					pxNewQueue->pxQueueSetContainer = NULL;
    302a:	2300      	movs	r3, #0
    302c:	6563      	str	r3, [r4, #84]	; 0x54
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
    302e:	1c20      	adds	r0, r4, #0
    3030:	4e18      	ldr	r6, [pc, #96]	; (3094 <xQueueGenericCreate+0xc4>)
    3032:	47b0      	blx	r6
    3034:	4d13      	ldr	r5, [pc, #76]	; (3084 <xQueueGenericCreate+0xb4>)
    3036:	5c28      	ldrb	r0, [r5, r0]
    3038:	4b17      	ldr	r3, [pc, #92]	; (3098 <xQueueGenericCreate+0xc8>)
    303a:	4798      	blx	r3
    303c:	64e0      	str	r0, [r4, #76]	; 0x4c
    303e:	1c20      	adds	r0, r4, #0
    3040:	47b0      	blx	r6
    3042:	5c2b      	ldrb	r3, [r5, r0]
    3044:	3318      	adds	r3, #24
    3046:	b2db      	uxtb	r3, r3
    3048:	4699      	mov	r9, r3
    304a:	1c20      	adds	r0, r4, #0
    304c:	47b0      	blx	r6
    304e:	5c28      	ldrb	r0, [r5, r0]
    3050:	4680      	mov	r8, r0
    3052:	1c20      	adds	r0, r4, #0
    3054:	4f11      	ldr	r7, [pc, #68]	; (309c <xQueueGenericCreate+0xcc>)
    3056:	47b8      	blx	r7
    3058:	1c02      	adds	r2, r0, #0
    305a:	4648      	mov	r0, r9
    305c:	4641      	mov	r1, r8
    305e:	4b0a      	ldr	r3, [pc, #40]	; (3088 <xQueueGenericCreate+0xb8>)
    3060:	4798      	blx	r3
    3062:	1c20      	adds	r0, r4, #0
    3064:	47b0      	blx	r6
    3066:	5c2d      	ldrb	r5, [r5, r0]
    3068:	1c20      	adds	r0, r4, #0
    306a:	47b8      	blx	r7
    306c:	1c01      	adds	r1, r0, #0
    306e:	1c28      	adds	r0, r5, #0
    3070:	2200      	movs	r2, #0
    3072:	4b0b      	ldr	r3, [pc, #44]	; (30a0 <xQueueGenericCreate+0xd0>)
    3074:	4798      	blx	r3
	}

	configASSERT( xReturn );

	return xReturn;
}
    3076:	1c20      	adds	r0, r4, #0
    3078:	bc0c      	pop	{r2, r3}
    307a:	4690      	mov	r8, r2
    307c:	4699      	mov	r9, r3
    307e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3080:	00002cd9 	.word	0x00002cd9
    3084:	20000008 	.word	0x20000008
    3088:	00001c49 	.word	0x00001c49
    308c:	00002d3d 	.word	0x00002d3d
    3090:	00002f59 	.word	0x00002f59
    3094:	0000230d 	.word	0x0000230d
    3098:	00001405 	.word	0x00001405
    309c:	000022fd 	.word	0x000022fd
    30a0:	00002139 	.word	0x00002139

000030a4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    30a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    30a6:	465f      	mov	r7, fp
    30a8:	4656      	mov	r6, sl
    30aa:	464d      	mov	r5, r9
    30ac:	4644      	mov	r4, r8
    30ae:	b4f0      	push	{r4, r5, r6, r7}
    30b0:	b085      	sub	sp, #20
    30b2:	1c04      	adds	r4, r0, #0
    30b4:	4688      	mov	r8, r1
    30b6:	9201      	str	r2, [sp, #4]
    30b8:	1c1d      	adds	r5, r3, #0
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    30ba:	2800      	cmp	r0, #0
    30bc:	d101      	bne.n	30c2 <xQueueGenericSend+0x1e>
    30be:	b672      	cpsid	i
    30c0:	e7fe      	b.n	30c0 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    30c2:	2900      	cmp	r1, #0
    30c4:	d104      	bne.n	30d0 <xQueueGenericSend+0x2c>
    30c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
    30c8:	2b00      	cmp	r3, #0
    30ca:	d001      	beq.n	30d0 <xQueueGenericSend+0x2c>
    30cc:	b672      	cpsid	i
    30ce:	e7fe      	b.n	30ce <xQueueGenericSend+0x2a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    30d0:	2d02      	cmp	r5, #2
    30d2:	d104      	bne.n	30de <xQueueGenericSend+0x3a>
    30d4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    30d6:	2a01      	cmp	r2, #1
    30d8:	d001      	beq.n	30de <xQueueGenericSend+0x3a>
    30da:	b672      	cpsid	i
    30dc:	e7fe      	b.n	30dc <xQueueGenericSend+0x38>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    30de:	4b73      	ldr	r3, [pc, #460]	; (32ac <xQueueGenericSend+0x208>)
    30e0:	4798      	blx	r3
    30e2:	2800      	cmp	r0, #0
    30e4:	d102      	bne.n	30ec <xQueueGenericSend+0x48>
    30e6:	9b01      	ldr	r3, [sp, #4]
    30e8:	2b00      	cmp	r3, #0
    30ea:	d103      	bne.n	30f4 <xQueueGenericSend+0x50>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    30ec:	2600      	movs	r6, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    30ee:	4a70      	ldr	r2, [pc, #448]	; (32b0 <xQueueGenericSend+0x20c>)
    30f0:	4692      	mov	sl, r2
    30f2:	e001      	b.n	30f8 <xQueueGenericSend+0x54>
	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    30f4:	b672      	cpsid	i
    30f6:	e7fe      	b.n	30f6 <xQueueGenericSend+0x52>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    30f8:	47d0      	blx	sl
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    30fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    30fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    30fe:	4293      	cmp	r3, r2
    3100:	d301      	bcc.n	3106 <xQueueGenericSend+0x62>
    3102:	2d02      	cmp	r5, #2
    3104:	d149      	bne.n	319a <xQueueGenericSend+0xf6>
			{
				traceQUEUE_SEND( pxQueue );
    3106:	1c20      	adds	r0, r4, #0
    3108:	4f6a      	ldr	r7, [pc, #424]	; (32b4 <xQueueGenericSend+0x210>)
    310a:	47b8      	blx	r7
    310c:	4e6a      	ldr	r6, [pc, #424]	; (32b8 <xQueueGenericSend+0x214>)
    310e:	5c33      	ldrb	r3, [r6, r0]
    3110:	3320      	adds	r3, #32
    3112:	b2db      	uxtb	r3, r3
    3114:	469b      	mov	fp, r3
    3116:	1c20      	adds	r0, r4, #0
    3118:	47b8      	blx	r7
    311a:	5c30      	ldrb	r0, [r6, r0]
    311c:	4682      	mov	sl, r0
    311e:	1c20      	adds	r0, r4, #0
    3120:	4b66      	ldr	r3, [pc, #408]	; (32bc <xQueueGenericSend+0x218>)
    3122:	4699      	mov	r9, r3
    3124:	4798      	blx	r3
    3126:	1c02      	adds	r2, r0, #0
    3128:	4658      	mov	r0, fp
    312a:	4651      	mov	r1, sl
    312c:	4b64      	ldr	r3, [pc, #400]	; (32c0 <xQueueGenericSend+0x21c>)
    312e:	4798      	blx	r3
    3130:	1c20      	adds	r0, r4, #0
    3132:	47b8      	blx	r7
    3134:	5c30      	ldrb	r0, [r6, r0]
    3136:	4682      	mov	sl, r0
    3138:	1c20      	adds	r0, r4, #0
    313a:	47c8      	blx	r9
    313c:	4681      	mov	r9, r0
    313e:	1c20      	adds	r0, r4, #0
    3140:	47b8      	blx	r7
    3142:	5c33      	ldrb	r3, [r6, r0]
    3144:	2b02      	cmp	r3, #2
    3146:	d003      	beq.n	3150 <xQueueGenericSend+0xac>
    3148:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    314a:	3201      	adds	r2, #1
    314c:	b2d2      	uxtb	r2, r2
    314e:	e000      	b.n	3152 <xQueueGenericSend+0xae>
    3150:	2200      	movs	r2, #0
    3152:	4650      	mov	r0, sl
    3154:	4649      	mov	r1, r9
    3156:	4b5b      	ldr	r3, [pc, #364]	; (32c4 <xQueueGenericSend+0x220>)
    3158:	4798      	blx	r3
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    315a:	1c20      	adds	r0, r4, #0
    315c:	4641      	mov	r1, r8
    315e:	1c2a      	adds	r2, r5, #0
    3160:	4b59      	ldr	r3, [pc, #356]	; (32c8 <xQueueGenericSend+0x224>)
    3162:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    3164:	6d62      	ldr	r2, [r4, #84]	; 0x54
    3166:	2a00      	cmp	r2, #0
    3168:	d008      	beq.n	317c <xQueueGenericSend+0xd8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    316a:	1c20      	adds	r0, r4, #0
    316c:	1c29      	adds	r1, r5, #0
    316e:	4b57      	ldr	r3, [pc, #348]	; (32cc <xQueueGenericSend+0x228>)
    3170:	4798      	blx	r3
    3172:	2801      	cmp	r0, #1
    3174:	d10d      	bne.n	3192 <xQueueGenericSend+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    3176:	4b56      	ldr	r3, [pc, #344]	; (32d0 <xQueueGenericSend+0x22c>)
    3178:	4798      	blx	r3
    317a:	e00a      	b.n	3192 <xQueueGenericSend+0xee>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    317c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    317e:	2b00      	cmp	r3, #0
    3180:	d007      	beq.n	3192 <xQueueGenericSend+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    3182:	1c20      	adds	r0, r4, #0
    3184:	3024      	adds	r0, #36	; 0x24
    3186:	4b53      	ldr	r3, [pc, #332]	; (32d4 <xQueueGenericSend+0x230>)
    3188:	4798      	blx	r3
    318a:	2801      	cmp	r0, #1
    318c:	d101      	bne.n	3192 <xQueueGenericSend+0xee>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    318e:	4b50      	ldr	r3, [pc, #320]	; (32d0 <xQueueGenericSend+0x22c>)
    3190:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    3192:	4b51      	ldr	r3, [pc, #324]	; (32d8 <xQueueGenericSend+0x234>)
    3194:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    3196:	2001      	movs	r0, #1
    3198:	e081      	b.n	329e <xQueueGenericSend+0x1fa>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    319a:	9a01      	ldr	r2, [sp, #4]
    319c:	2a00      	cmp	r2, #0
    319e:	d115      	bne.n	31cc <xQueueGenericSend+0x128>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    31a0:	4b4d      	ldr	r3, [pc, #308]	; (32d8 <xQueueGenericSend+0x234>)
    31a2:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
    31a4:	1c20      	adds	r0, r4, #0
    31a6:	4e43      	ldr	r6, [pc, #268]	; (32b4 <xQueueGenericSend+0x210>)
    31a8:	47b0      	blx	r6
    31aa:	4d43      	ldr	r5, [pc, #268]	; (32b8 <xQueueGenericSend+0x214>)
    31ac:	5c2f      	ldrb	r7, [r5, r0]
    31ae:	3748      	adds	r7, #72	; 0x48
    31b0:	b2ff      	uxtb	r7, r7
    31b2:	1c20      	adds	r0, r4, #0
    31b4:	47b0      	blx	r6
    31b6:	5c2d      	ldrb	r5, [r5, r0]
    31b8:	1c20      	adds	r0, r4, #0
    31ba:	4b40      	ldr	r3, [pc, #256]	; (32bc <xQueueGenericSend+0x218>)
    31bc:	4798      	blx	r3
    31be:	1c02      	adds	r2, r0, #0
    31c0:	1c38      	adds	r0, r7, #0
    31c2:	1c29      	adds	r1, r5, #0
    31c4:	4b3e      	ldr	r3, [pc, #248]	; (32c0 <xQueueGenericSend+0x21c>)
    31c6:	4798      	blx	r3
					return errQUEUE_FULL;
    31c8:	2000      	movs	r0, #0
    31ca:	e068      	b.n	329e <xQueueGenericSend+0x1fa>
				}
				else if( xEntryTimeSet == pdFALSE )
    31cc:	2e00      	cmp	r6, #0
    31ce:	d103      	bne.n	31d8 <xQueueGenericSend+0x134>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    31d0:	a802      	add	r0, sp, #8
    31d2:	4b42      	ldr	r3, [pc, #264]	; (32dc <xQueueGenericSend+0x238>)
    31d4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    31d6:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    31d8:	4a3f      	ldr	r2, [pc, #252]	; (32d8 <xQueueGenericSend+0x234>)
    31da:	4790      	blx	r2

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    31dc:	4b40      	ldr	r3, [pc, #256]	; (32e0 <xQueueGenericSend+0x23c>)
    31de:	4798      	blx	r3
		prvLockQueue( pxQueue );
    31e0:	4b33      	ldr	r3, [pc, #204]	; (32b0 <xQueueGenericSend+0x20c>)
    31e2:	4798      	blx	r3
    31e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    31e6:	3301      	adds	r3, #1
    31e8:	d101      	bne.n	31ee <xQueueGenericSend+0x14a>
    31ea:	2300      	movs	r3, #0
    31ec:	6463      	str	r3, [r4, #68]	; 0x44
    31ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    31f0:	3301      	adds	r3, #1
    31f2:	d101      	bne.n	31f8 <xQueueGenericSend+0x154>
    31f4:	2300      	movs	r3, #0
    31f6:	64a3      	str	r3, [r4, #72]	; 0x48
    31f8:	4b37      	ldr	r3, [pc, #220]	; (32d8 <xQueueGenericSend+0x234>)
    31fa:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    31fc:	a802      	add	r0, sp, #8
    31fe:	a901      	add	r1, sp, #4
    3200:	4b38      	ldr	r3, [pc, #224]	; (32e4 <xQueueGenericSend+0x240>)
    3202:	4798      	blx	r3
    3204:	2800      	cmp	r0, #0
    3206:	d132      	bne.n	326e <xQueueGenericSend+0x1ca>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3208:	4b29      	ldr	r3, [pc, #164]	; (32b0 <xQueueGenericSend+0x20c>)
    320a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    320c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    320e:	4699      	mov	r9, r3
    3210:	6be7      	ldr	r7, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    3212:	4b31      	ldr	r3, [pc, #196]	; (32d8 <xQueueGenericSend+0x234>)
    3214:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    3216:	45b9      	cmp	r9, r7
    3218:	d123      	bne.n	3262 <xQueueGenericSend+0x1be>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
    321a:	1c20      	adds	r0, r4, #0
    321c:	4a25      	ldr	r2, [pc, #148]	; (32b4 <xQueueGenericSend+0x210>)
    321e:	4691      	mov	r9, r2
    3220:	4790      	blx	r2
    3222:	4f25      	ldr	r7, [pc, #148]	; (32b8 <xQueueGenericSend+0x214>)
    3224:	5c3b      	ldrb	r3, [r7, r0]
    3226:	3370      	adds	r3, #112	; 0x70
    3228:	b2db      	uxtb	r3, r3
    322a:	469b      	mov	fp, r3
    322c:	1c20      	adds	r0, r4, #0
    322e:	47c8      	blx	r9
    3230:	5c3f      	ldrb	r7, [r7, r0]
    3232:	1c20      	adds	r0, r4, #0
    3234:	4b21      	ldr	r3, [pc, #132]	; (32bc <xQueueGenericSend+0x218>)
    3236:	4798      	blx	r3
    3238:	1c02      	adds	r2, r0, #0
    323a:	4658      	mov	r0, fp
    323c:	1c39      	adds	r1, r7, #0
    323e:	4b20      	ldr	r3, [pc, #128]	; (32c0 <xQueueGenericSend+0x21c>)
    3240:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    3242:	1c20      	adds	r0, r4, #0
    3244:	3010      	adds	r0, #16
    3246:	9901      	ldr	r1, [sp, #4]
    3248:	4b27      	ldr	r3, [pc, #156]	; (32e8 <xQueueGenericSend+0x244>)
    324a:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    324c:	1c20      	adds	r0, r4, #0
    324e:	4b27      	ldr	r3, [pc, #156]	; (32ec <xQueueGenericSend+0x248>)
    3250:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    3252:	4b27      	ldr	r3, [pc, #156]	; (32f0 <xQueueGenericSend+0x24c>)
    3254:	4798      	blx	r3
    3256:	2800      	cmp	r0, #0
    3258:	d000      	beq.n	325c <xQueueGenericSend+0x1b8>
    325a:	e74d      	b.n	30f8 <xQueueGenericSend+0x54>
				{
					portYIELD_WITHIN_API();
    325c:	4b1c      	ldr	r3, [pc, #112]	; (32d0 <xQueueGenericSend+0x22c>)
    325e:	4798      	blx	r3
    3260:	e74a      	b.n	30f8 <xQueueGenericSend+0x54>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3262:	1c20      	adds	r0, r4, #0
    3264:	4b21      	ldr	r3, [pc, #132]	; (32ec <xQueueGenericSend+0x248>)
    3266:	4798      	blx	r3
				( void ) xTaskResumeAll();
    3268:	4b21      	ldr	r3, [pc, #132]	; (32f0 <xQueueGenericSend+0x24c>)
    326a:	4798      	blx	r3
    326c:	e744      	b.n	30f8 <xQueueGenericSend+0x54>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    326e:	1c20      	adds	r0, r4, #0
    3270:	4b1e      	ldr	r3, [pc, #120]	; (32ec <xQueueGenericSend+0x248>)
    3272:	4798      	blx	r3
			( void ) xTaskResumeAll();
    3274:	4b1e      	ldr	r3, [pc, #120]	; (32f0 <xQueueGenericSend+0x24c>)
    3276:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
    3278:	1c20      	adds	r0, r4, #0
    327a:	4e0e      	ldr	r6, [pc, #56]	; (32b4 <xQueueGenericSend+0x210>)
    327c:	47b0      	blx	r6
    327e:	4d0e      	ldr	r5, [pc, #56]	; (32b8 <xQueueGenericSend+0x214>)
    3280:	5c2f      	ldrb	r7, [r5, r0]
    3282:	3748      	adds	r7, #72	; 0x48
    3284:	b2ff      	uxtb	r7, r7
    3286:	1c20      	adds	r0, r4, #0
    3288:	47b0      	blx	r6
    328a:	5c2d      	ldrb	r5, [r5, r0]
    328c:	1c20      	adds	r0, r4, #0
    328e:	4b0b      	ldr	r3, [pc, #44]	; (32bc <xQueueGenericSend+0x218>)
    3290:	4798      	blx	r3
    3292:	1c02      	adds	r2, r0, #0
    3294:	1c38      	adds	r0, r7, #0
    3296:	1c29      	adds	r1, r5, #0
    3298:	4b09      	ldr	r3, [pc, #36]	; (32c0 <xQueueGenericSend+0x21c>)
    329a:	4798      	blx	r3
			return errQUEUE_FULL;
    329c:	2000      	movs	r0, #0
		}
	}
}
    329e:	b005      	add	sp, #20
    32a0:	bc3c      	pop	{r2, r3, r4, r5}
    32a2:	4690      	mov	r8, r2
    32a4:	4699      	mov	r9, r3
    32a6:	46a2      	mov	sl, r4
    32a8:	46ab      	mov	fp, r5
    32aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32ac:	00004289 	.word	0x00004289
    32b0:	00002bb5 	.word	0x00002bb5
    32b4:	0000230d 	.word	0x0000230d
    32b8:	20000008 	.word	0x20000008
    32bc:	000022fd 	.word	0x000022fd
    32c0:	00001c49 	.word	0x00001c49
    32c4:	00002139 	.word	0x00002139
    32c8:	00002d49 	.word	0x00002d49
    32cc:	00002dc1 	.word	0x00002dc1
    32d0:	00002b9d 	.word	0x00002b9d
    32d4:	00004145 	.word	0x00004145
    32d8:	00002bcd 	.word	0x00002bcd
    32dc:	000041d5 	.word	0x000041d5
    32e0:	00003c09 	.word	0x00003c09
    32e4:	000041f5 	.word	0x000041f5
    32e8:	00004091 	.word	0x00004091
    32ec:	00002eb1 	.word	0x00002eb1
    32f0:	00003da5 	.word	0x00003da5

000032f4 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    32f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    32f6:	465f      	mov	r7, fp
    32f8:	4656      	mov	r6, sl
    32fa:	464d      	mov	r5, r9
    32fc:	4644      	mov	r4, r8
    32fe:	b4f0      	push	{r4, r5, r6, r7}
    3300:	b083      	sub	sp, #12
    3302:	1c04      	adds	r4, r0, #0
    3304:	468a      	mov	sl, r1
    3306:	1c15      	adds	r5, r2, #0
    3308:	1c1e      	adds	r6, r3, #0
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    330a:	2800      	cmp	r0, #0
    330c:	d101      	bne.n	3312 <xQueueGenericSendFromISR+0x1e>
    330e:	b672      	cpsid	i
    3310:	e7fe      	b.n	3310 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    3312:	2900      	cmp	r1, #0
    3314:	d104      	bne.n	3320 <xQueueGenericSendFromISR+0x2c>
    3316:	6c03      	ldr	r3, [r0, #64]	; 0x40
    3318:	2b00      	cmp	r3, #0
    331a:	d001      	beq.n	3320 <xQueueGenericSendFromISR+0x2c>
    331c:	b672      	cpsid	i
    331e:	e7fe      	b.n	331e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    3320:	2e02      	cmp	r6, #2
    3322:	d169      	bne.n	33f8 <xQueueGenericSendFromISR+0x104>
    3324:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    3326:	2a01      	cmp	r2, #1
    3328:	d06e      	beq.n	3408 <xQueueGenericSendFromISR+0x114>
    332a:	b672      	cpsid	i
    332c:	e7fe      	b.n	332c <xQueueGenericSendFromISR+0x38>
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );
    332e:	1c20      	adds	r0, r4, #0
    3330:	4b3d      	ldr	r3, [pc, #244]	; (3428 <xQueueGenericSendFromISR+0x134>)
    3332:	4698      	mov	r8, r3
    3334:	4798      	blx	r3
    3336:	4f3d      	ldr	r7, [pc, #244]	; (342c <xQueueGenericSendFromISR+0x138>)
    3338:	5c3b      	ldrb	r3, [r7, r0]
    333a:	3330      	adds	r3, #48	; 0x30
    333c:	b2db      	uxtb	r3, r3
    333e:	9300      	str	r3, [sp, #0]
    3340:	1c20      	adds	r0, r4, #0
    3342:	47c0      	blx	r8
    3344:	5c38      	ldrb	r0, [r7, r0]
    3346:	9001      	str	r0, [sp, #4]
    3348:	1c20      	adds	r0, r4, #0
    334a:	4a39      	ldr	r2, [pc, #228]	; (3430 <xQueueGenericSendFromISR+0x13c>)
    334c:	4693      	mov	fp, r2
    334e:	4790      	blx	r2
    3350:	1c02      	adds	r2, r0, #0
    3352:	9800      	ldr	r0, [sp, #0]
    3354:	9901      	ldr	r1, [sp, #4]
    3356:	4b37      	ldr	r3, [pc, #220]	; (3434 <xQueueGenericSendFromISR+0x140>)
    3358:	4798      	blx	r3
    335a:	1c20      	adds	r0, r4, #0
    335c:	47c0      	blx	r8
    335e:	5c3f      	ldrb	r7, [r7, r0]
    3360:	1c20      	adds	r0, r4, #0
    3362:	47d8      	blx	fp
    3364:	1c01      	adds	r1, r0, #0
    3366:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3368:	3201      	adds	r2, #1
    336a:	b2d2      	uxtb	r2, r2
    336c:	1c38      	adds	r0, r7, #0
    336e:	4b32      	ldr	r3, [pc, #200]	; (3438 <xQueueGenericSendFromISR+0x144>)
    3370:	4798      	blx	r3

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3372:	1c20      	adds	r0, r4, #0
    3374:	4651      	mov	r1, sl
    3376:	1c32      	adds	r2, r6, #0
    3378:	4b30      	ldr	r3, [pc, #192]	; (343c <xQueueGenericSendFromISR+0x148>)
    337a:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    337c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    337e:	3301      	adds	r3, #1
    3380:	d11d      	bne.n	33be <xQueueGenericSendFromISR+0xca>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    3382:	6d63      	ldr	r3, [r4, #84]	; 0x54
    3384:	2b00      	cmp	r3, #0
    3386:	d00b      	beq.n	33a0 <xQueueGenericSendFromISR+0xac>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    3388:	1c20      	adds	r0, r4, #0
    338a:	1c31      	adds	r1, r6, #0
    338c:	4b2c      	ldr	r3, [pc, #176]	; (3440 <xQueueGenericSendFromISR+0x14c>)
    338e:	4798      	blx	r3
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    3390:	2601      	movs	r6, #1
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    3392:	2801      	cmp	r0, #1
    3394:	d13d      	bne.n	3412 <xQueueGenericSendFromISR+0x11e>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    3396:	2d00      	cmp	r5, #0
    3398:	d02a      	beq.n	33f0 <xQueueGenericSendFromISR+0xfc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    339a:	2301      	movs	r3, #1
    339c:	602b      	str	r3, [r5, #0]
    339e:	e038      	b.n	3412 <xQueueGenericSendFromISR+0x11e>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    33a0:	2601      	movs	r6, #1
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    33a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    33a4:	2a00      	cmp	r2, #0
    33a6:	d034      	beq.n	3412 <xQueueGenericSendFromISR+0x11e>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    33a8:	1c20      	adds	r0, r4, #0
    33aa:	3024      	adds	r0, #36	; 0x24
    33ac:	4b25      	ldr	r3, [pc, #148]	; (3444 <xQueueGenericSendFromISR+0x150>)
    33ae:	4798      	blx	r3
    33b0:	2800      	cmp	r0, #0
    33b2:	d02e      	beq.n	3412 <xQueueGenericSendFromISR+0x11e>
							{
								/* The task waiting has a higher priority so record that a
								context	switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    33b4:	2d00      	cmp	r5, #0
    33b6:	d01d      	beq.n	33f4 <xQueueGenericSendFromISR+0x100>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    33b8:	2301      	movs	r3, #1
    33ba:	602b      	str	r3, [r5, #0]
    33bc:	e029      	b.n	3412 <xQueueGenericSendFromISR+0x11e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    33be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    33c0:	3301      	adds	r3, #1
    33c2:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
    33c4:	2601      	movs	r6, #1
    33c6:	e024      	b.n	3412 <xQueueGenericSendFromISR+0x11e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    33c8:	1c20      	adds	r0, r4, #0
    33ca:	4e17      	ldr	r6, [pc, #92]	; (3428 <xQueueGenericSendFromISR+0x134>)
    33cc:	47b0      	blx	r6
    33ce:	4d17      	ldr	r5, [pc, #92]	; (342c <xQueueGenericSendFromISR+0x138>)
    33d0:	5c2f      	ldrb	r7, [r5, r0]
    33d2:	3758      	adds	r7, #88	; 0x58
    33d4:	b2ff      	uxtb	r7, r7
    33d6:	1c20      	adds	r0, r4, #0
    33d8:	47b0      	blx	r6
    33da:	5c2d      	ldrb	r5, [r5, r0]
    33dc:	1c20      	adds	r0, r4, #0
    33de:	4b14      	ldr	r3, [pc, #80]	; (3430 <xQueueGenericSendFromISR+0x13c>)
    33e0:	4798      	blx	r3
    33e2:	1c02      	adds	r2, r0, #0
    33e4:	1c38      	adds	r0, r7, #0
    33e6:	1c29      	adds	r1, r5, #0
    33e8:	4b12      	ldr	r3, [pc, #72]	; (3434 <xQueueGenericSendFromISR+0x140>)
    33ea:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    33ec:	2600      	movs	r6, #0
    33ee:	e010      	b.n	3412 <xQueueGenericSendFromISR+0x11e>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    33f0:	2601      	movs	r6, #1
    33f2:	e00e      	b.n	3412 <xQueueGenericSendFromISR+0x11e>
    33f4:	2601      	movs	r6, #1
    33f6:	e00c      	b.n	3412 <xQueueGenericSendFromISR+0x11e>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    33f8:	4b13      	ldr	r3, [pc, #76]	; (3448 <xQueueGenericSendFromISR+0x154>)
    33fa:	4798      	blx	r3
    33fc:	4681      	mov	r9, r0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    33fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3400:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    3402:	4293      	cmp	r3, r2
    3404:	d2e0      	bcs.n	33c8 <xQueueGenericSendFromISR+0xd4>
    3406:	e792      	b.n	332e <xQueueGenericSendFromISR+0x3a>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3408:	4b0f      	ldr	r3, [pc, #60]	; (3448 <xQueueGenericSendFromISR+0x154>)
    340a:	4798      	blx	r3
    340c:	4681      	mov	r9, r0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    340e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3410:	e78d      	b.n	332e <xQueueGenericSendFromISR+0x3a>
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3412:	4648      	mov	r0, r9
    3414:	4b0d      	ldr	r3, [pc, #52]	; (344c <xQueueGenericSendFromISR+0x158>)
    3416:	4798      	blx	r3

	return xReturn;
}
    3418:	1c30      	adds	r0, r6, #0
    341a:	b003      	add	sp, #12
    341c:	bc3c      	pop	{r2, r3, r4, r5}
    341e:	4690      	mov	r8, r2
    3420:	4699      	mov	r9, r3
    3422:	46a2      	mov	sl, r4
    3424:	46ab      	mov	fp, r5
    3426:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3428:	0000230d 	.word	0x0000230d
    342c:	20000008 	.word	0x20000008
    3430:	000022fd 	.word	0x000022fd
    3434:	00001c49 	.word	0x00001c49
    3438:	00002139 	.word	0x00002139
    343c:	00002d49 	.word	0x00002d49
    3440:	00002dc1 	.word	0x00002dc1
    3444:	00004145 	.word	0x00004145
    3448:	00002bed 	.word	0x00002bed
    344c:	00002bf9 	.word	0x00002bf9

00003450 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    3450:	b5f0      	push	{r4, r5, r6, r7, lr}
    3452:	465f      	mov	r7, fp
    3454:	4656      	mov	r6, sl
    3456:	464d      	mov	r5, r9
    3458:	4644      	mov	r4, r8
    345a:	b4f0      	push	{r4, r5, r6, r7}
    345c:	b085      	sub	sp, #20
    345e:	1c04      	adds	r4, r0, #0
    3460:	1c0f      	adds	r7, r1, #0
    3462:	9201      	str	r2, [sp, #4]
    3464:	9300      	str	r3, [sp, #0]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    3466:	2800      	cmp	r0, #0
    3468:	d101      	bne.n	346e <xQueueGenericReceive+0x1e>
    346a:	b672      	cpsid	i
    346c:	e7fe      	b.n	346c <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    346e:	2900      	cmp	r1, #0
    3470:	d104      	bne.n	347c <xQueueGenericReceive+0x2c>
    3472:	6c03      	ldr	r3, [r0, #64]	; 0x40
    3474:	2b00      	cmp	r3, #0
    3476:	d001      	beq.n	347c <xQueueGenericReceive+0x2c>
    3478:	b672      	cpsid	i
    347a:	e7fe      	b.n	347a <xQueueGenericReceive+0x2a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    347c:	4b8e      	ldr	r3, [pc, #568]	; (36b8 <xQueueGenericReceive+0x268>)
    347e:	4798      	blx	r3
    3480:	2800      	cmp	r0, #0
    3482:	d102      	bne.n	348a <xQueueGenericReceive+0x3a>
    3484:	9b01      	ldr	r3, [sp, #4]
    3486:	2b00      	cmp	r3, #0
    3488:	d104      	bne.n	3494 <xQueueGenericReceive+0x44>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    348a:	2300      	movs	r3, #0
    348c:	4698      	mov	r8, r3
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    348e:	4b8b      	ldr	r3, [pc, #556]	; (36bc <xQueueGenericReceive+0x26c>)
    3490:	4699      	mov	r9, r3
    3492:	e001      	b.n	3498 <xQueueGenericReceive+0x48>

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    3494:	b672      	cpsid	i
    3496:	e7fe      	b.n	3496 <xQueueGenericReceive+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    3498:	47c8      	blx	r9
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    349a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    349c:	2b00      	cmp	r3, #0
    349e:	d06d      	beq.n	357c <xQueueGenericReceive+0x12c>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    34a0:	68e3      	ldr	r3, [r4, #12]
    34a2:	4698      	mov	r8, r3

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    34a4:	1c20      	adds	r0, r4, #0
    34a6:	1c39      	adds	r1, r7, #0
    34a8:	4b85      	ldr	r3, [pc, #532]	; (36c0 <xQueueGenericReceive+0x270>)
    34aa:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    34ac:	9b00      	ldr	r3, [sp, #0]
    34ae:	2b00      	cmp	r3, #0
    34b0:	d141      	bne.n	3536 <xQueueGenericReceive+0xe6>
				{
					traceQUEUE_RECEIVE( pxQueue );
    34b2:	1c20      	adds	r0, r4, #0
    34b4:	4e83      	ldr	r6, [pc, #524]	; (36c4 <xQueueGenericReceive+0x274>)
    34b6:	47b0      	blx	r6
    34b8:	4d83      	ldr	r5, [pc, #524]	; (36c8 <xQueueGenericReceive+0x278>)
    34ba:	5c2b      	ldrb	r3, [r5, r0]
    34bc:	3328      	adds	r3, #40	; 0x28
    34be:	b2db      	uxtb	r3, r3
    34c0:	4699      	mov	r9, r3
    34c2:	1c20      	adds	r0, r4, #0
    34c4:	47b0      	blx	r6
    34c6:	5c28      	ldrb	r0, [r5, r0]
    34c8:	4680      	mov	r8, r0
    34ca:	1c20      	adds	r0, r4, #0
    34cc:	4f7f      	ldr	r7, [pc, #508]	; (36cc <xQueueGenericReceive+0x27c>)
    34ce:	47b8      	blx	r7
    34d0:	1c02      	adds	r2, r0, #0
    34d2:	4648      	mov	r0, r9
    34d4:	4641      	mov	r1, r8
    34d6:	4b7e      	ldr	r3, [pc, #504]	; (36d0 <xQueueGenericReceive+0x280>)
    34d8:	4798      	blx	r3
    34da:	1c20      	adds	r0, r4, #0
    34dc:	47b0      	blx	r6
    34de:	5c28      	ldrb	r0, [r5, r0]
    34e0:	4680      	mov	r8, r0
    34e2:	1c20      	adds	r0, r4, #0
    34e4:	47b8      	blx	r7
    34e6:	1c07      	adds	r7, r0, #0
    34e8:	1c20      	adds	r0, r4, #0
    34ea:	47b0      	blx	r6
    34ec:	5c2b      	ldrb	r3, [r5, r0]
    34ee:	2b02      	cmp	r3, #2
    34f0:	d105      	bne.n	34fe <xQueueGenericReceive+0xae>
    34f2:	4b78      	ldr	r3, [pc, #480]	; (36d4 <xQueueGenericReceive+0x284>)
    34f4:	4798      	blx	r3
    34f6:	4b78      	ldr	r3, [pc, #480]	; (36d8 <xQueueGenericReceive+0x288>)
    34f8:	4798      	blx	r3
    34fa:	1c02      	adds	r2, r0, #0
    34fc:	e002      	b.n	3504 <xQueueGenericReceive+0xb4>
    34fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3500:	3a01      	subs	r2, #1
    3502:	b2d2      	uxtb	r2, r2
    3504:	4640      	mov	r0, r8
    3506:	1c39      	adds	r1, r7, #0
    3508:	4b74      	ldr	r3, [pc, #464]	; (36dc <xQueueGenericReceive+0x28c>)
    350a:	4798      	blx	r3

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    350c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    350e:	3b01      	subs	r3, #1
    3510:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3512:	6823      	ldr	r3, [r4, #0]
    3514:	2b00      	cmp	r3, #0
    3516:	d102      	bne.n	351e <xQueueGenericReceive+0xce>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    3518:	4b71      	ldr	r3, [pc, #452]	; (36e0 <xQueueGenericReceive+0x290>)
    351a:	4798      	blx	r3
    351c:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    351e:	6923      	ldr	r3, [r4, #16]
    3520:	2b00      	cmp	r3, #0
    3522:	d027      	beq.n	3574 <xQueueGenericReceive+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    3524:	1c20      	adds	r0, r4, #0
    3526:	3010      	adds	r0, #16
    3528:	4b6e      	ldr	r3, [pc, #440]	; (36e4 <xQueueGenericReceive+0x294>)
    352a:	4798      	blx	r3
    352c:	2801      	cmp	r0, #1
    352e:	d121      	bne.n	3574 <xQueueGenericReceive+0x124>
						{
							queueYIELD_IF_USING_PREEMPTION();
    3530:	4b6d      	ldr	r3, [pc, #436]	; (36e8 <xQueueGenericReceive+0x298>)
    3532:	4798      	blx	r3
    3534:	e01e      	b.n	3574 <xQueueGenericReceive+0x124>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					traceQUEUE_PEEK( pxQueue );
    3536:	1c20      	adds	r0, r4, #0
    3538:	4e62      	ldr	r6, [pc, #392]	; (36c4 <xQueueGenericReceive+0x274>)
    353a:	47b0      	blx	r6
    353c:	4d62      	ldr	r5, [pc, #392]	; (36c8 <xQueueGenericReceive+0x278>)
    353e:	5c2f      	ldrb	r7, [r5, r0]
    3540:	3778      	adds	r7, #120	; 0x78
    3542:	b2ff      	uxtb	r7, r7
    3544:	1c20      	adds	r0, r4, #0
    3546:	47b0      	blx	r6
    3548:	5c2d      	ldrb	r5, [r5, r0]
    354a:	1c20      	adds	r0, r4, #0
    354c:	4b5f      	ldr	r3, [pc, #380]	; (36cc <xQueueGenericReceive+0x27c>)
    354e:	4798      	blx	r3
    3550:	1c02      	adds	r2, r0, #0
    3552:	1c38      	adds	r0, r7, #0
    3554:	1c29      	adds	r1, r5, #0
    3556:	4b5e      	ldr	r3, [pc, #376]	; (36d0 <xQueueGenericReceive+0x280>)
    3558:	4798      	blx	r3

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    355a:	4643      	mov	r3, r8
    355c:	60e3      	str	r3, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    355e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3560:	2b00      	cmp	r3, #0
    3562:	d007      	beq.n	3574 <xQueueGenericReceive+0x124>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3564:	1c20      	adds	r0, r4, #0
    3566:	3024      	adds	r0, #36	; 0x24
    3568:	4b5e      	ldr	r3, [pc, #376]	; (36e4 <xQueueGenericReceive+0x294>)
    356a:	4798      	blx	r3
    356c:	2800      	cmp	r0, #0
    356e:	d001      	beq.n	3574 <xQueueGenericReceive+0x124>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    3570:	4b5d      	ldr	r3, [pc, #372]	; (36e8 <xQueueGenericReceive+0x298>)
    3572:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    3574:	4b5d      	ldr	r3, [pc, #372]	; (36ec <xQueueGenericReceive+0x29c>)
    3576:	4798      	blx	r3
				return pdPASS;
    3578:	2001      	movs	r0, #1
    357a:	e096      	b.n	36aa <xQueueGenericReceive+0x25a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    357c:	9b01      	ldr	r3, [sp, #4]
    357e:	2b00      	cmp	r3, #0
    3580:	d115      	bne.n	35ae <xQueueGenericReceive+0x15e>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3582:	4b5a      	ldr	r3, [pc, #360]	; (36ec <xQueueGenericReceive+0x29c>)
    3584:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    3586:	1c20      	adds	r0, r4, #0
    3588:	4e4e      	ldr	r6, [pc, #312]	; (36c4 <xQueueGenericReceive+0x274>)
    358a:	47b0      	blx	r6
    358c:	4d4e      	ldr	r5, [pc, #312]	; (36c8 <xQueueGenericReceive+0x278>)
    358e:	5c2f      	ldrb	r7, [r5, r0]
    3590:	3750      	adds	r7, #80	; 0x50
    3592:	b2ff      	uxtb	r7, r7
    3594:	1c20      	adds	r0, r4, #0
    3596:	47b0      	blx	r6
    3598:	5c2d      	ldrb	r5, [r5, r0]
    359a:	1c20      	adds	r0, r4, #0
    359c:	4b4b      	ldr	r3, [pc, #300]	; (36cc <xQueueGenericReceive+0x27c>)
    359e:	4798      	blx	r3
    35a0:	1c02      	adds	r2, r0, #0
    35a2:	1c38      	adds	r0, r7, #0
    35a4:	1c29      	adds	r1, r5, #0
    35a6:	4b4a      	ldr	r3, [pc, #296]	; (36d0 <xQueueGenericReceive+0x280>)
    35a8:	4798      	blx	r3
					return errQUEUE_EMPTY;
    35aa:	2000      	movs	r0, #0
    35ac:	e07d      	b.n	36aa <xQueueGenericReceive+0x25a>
				}
				else if( xEntryTimeSet == pdFALSE )
    35ae:	4643      	mov	r3, r8
    35b0:	2b00      	cmp	r3, #0
    35b2:	d104      	bne.n	35be <xQueueGenericReceive+0x16e>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    35b4:	a802      	add	r0, sp, #8
    35b6:	4b4e      	ldr	r3, [pc, #312]	; (36f0 <xQueueGenericReceive+0x2a0>)
    35b8:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    35ba:	2301      	movs	r3, #1
    35bc:	4698      	mov	r8, r3
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    35be:	4b4b      	ldr	r3, [pc, #300]	; (36ec <xQueueGenericReceive+0x29c>)
    35c0:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    35c2:	4b4c      	ldr	r3, [pc, #304]	; (36f4 <xQueueGenericReceive+0x2a4>)
    35c4:	4798      	blx	r3
		prvLockQueue( pxQueue );
    35c6:	4b3d      	ldr	r3, [pc, #244]	; (36bc <xQueueGenericReceive+0x26c>)
    35c8:	4798      	blx	r3
    35ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
    35cc:	3301      	adds	r3, #1
    35ce:	d101      	bne.n	35d4 <xQueueGenericReceive+0x184>
    35d0:	2300      	movs	r3, #0
    35d2:	6463      	str	r3, [r4, #68]	; 0x44
    35d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    35d6:	3301      	adds	r3, #1
    35d8:	d101      	bne.n	35de <xQueueGenericReceive+0x18e>
    35da:	2300      	movs	r3, #0
    35dc:	64a3      	str	r3, [r4, #72]	; 0x48
    35de:	4b43      	ldr	r3, [pc, #268]	; (36ec <xQueueGenericReceive+0x29c>)
    35e0:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    35e2:	a802      	add	r0, sp, #8
    35e4:	a901      	add	r1, sp, #4
    35e6:	4b44      	ldr	r3, [pc, #272]	; (36f8 <xQueueGenericReceive+0x2a8>)
    35e8:	4798      	blx	r3
    35ea:	2800      	cmp	r0, #0
    35ec:	d145      	bne.n	367a <xQueueGenericReceive+0x22a>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    35ee:	4b33      	ldr	r3, [pc, #204]	; (36bc <xQueueGenericReceive+0x26c>)
    35f0:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    35f2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    35f4:	4b3d      	ldr	r3, [pc, #244]	; (36ec <xQueueGenericReceive+0x29c>)
    35f6:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    35f8:	2d00      	cmp	r5, #0
    35fa:	d138      	bne.n	366e <xQueueGenericReceive+0x21e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    35fc:	1c20      	adds	r0, r4, #0
    35fe:	4e31      	ldr	r6, [pc, #196]	; (36c4 <xQueueGenericReceive+0x274>)
    3600:	47b0      	blx	r6
    3602:	4d31      	ldr	r5, [pc, #196]	; (36c8 <xQueueGenericReceive+0x278>)
    3604:	5c2b      	ldrb	r3, [r5, r0]
    3606:	3368      	adds	r3, #104	; 0x68
    3608:	b2db      	uxtb	r3, r3
    360a:	469b      	mov	fp, r3
    360c:	1c20      	adds	r0, r4, #0
    360e:	47b0      	blx	r6
    3610:	5c28      	ldrb	r0, [r5, r0]
    3612:	4682      	mov	sl, r0
    3614:	1c20      	adds	r0, r4, #0
    3616:	4b2d      	ldr	r3, [pc, #180]	; (36cc <xQueueGenericReceive+0x27c>)
    3618:	4798      	blx	r3
    361a:	1c02      	adds	r2, r0, #0
    361c:	4658      	mov	r0, fp
    361e:	4651      	mov	r1, sl
    3620:	4b2b      	ldr	r3, [pc, #172]	; (36d0 <xQueueGenericReceive+0x280>)
    3622:	4798      	blx	r3
    3624:	1c20      	adds	r0, r4, #0
    3626:	47b0      	blx	r6
    3628:	5c2b      	ldrb	r3, [r5, r0]
    362a:	2b02      	cmp	r3, #2
    362c:	d005      	beq.n	363a <xQueueGenericReceive+0x1ea>
    362e:	4b29      	ldr	r3, [pc, #164]	; (36d4 <xQueueGenericReceive+0x284>)
    3630:	4798      	blx	r3
    3632:	4b29      	ldr	r3, [pc, #164]	; (36d8 <xQueueGenericReceive+0x288>)
    3634:	4798      	blx	r3
    3636:	4b31      	ldr	r3, [pc, #196]	; (36fc <xQueueGenericReceive+0x2ac>)
    3638:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    363a:	6823      	ldr	r3, [r4, #0]
    363c:	2b00      	cmp	r3, #0
    363e:	d106      	bne.n	364e <xQueueGenericReceive+0x1fe>
					{
						taskENTER_CRITICAL();
    3640:	4b1e      	ldr	r3, [pc, #120]	; (36bc <xQueueGenericReceive+0x26c>)
    3642:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    3644:	6860      	ldr	r0, [r4, #4]
    3646:	4b2e      	ldr	r3, [pc, #184]	; (3700 <xQueueGenericReceive+0x2b0>)
    3648:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    364a:	4b28      	ldr	r3, [pc, #160]	; (36ec <xQueueGenericReceive+0x29c>)
    364c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    364e:	1c20      	adds	r0, r4, #0
    3650:	3024      	adds	r0, #36	; 0x24
    3652:	9901      	ldr	r1, [sp, #4]
    3654:	4b2b      	ldr	r3, [pc, #172]	; (3704 <xQueueGenericReceive+0x2b4>)
    3656:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    3658:	1c20      	adds	r0, r4, #0
    365a:	4b2b      	ldr	r3, [pc, #172]	; (3708 <xQueueGenericReceive+0x2b8>)
    365c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    365e:	4b2b      	ldr	r3, [pc, #172]	; (370c <xQueueGenericReceive+0x2bc>)
    3660:	4798      	blx	r3
    3662:	2800      	cmp	r0, #0
    3664:	d000      	beq.n	3668 <xQueueGenericReceive+0x218>
    3666:	e717      	b.n	3498 <xQueueGenericReceive+0x48>
				{
					portYIELD_WITHIN_API();
    3668:	4b1f      	ldr	r3, [pc, #124]	; (36e8 <xQueueGenericReceive+0x298>)
    366a:	4798      	blx	r3
    366c:	e714      	b.n	3498 <xQueueGenericReceive+0x48>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    366e:	1c20      	adds	r0, r4, #0
    3670:	4b25      	ldr	r3, [pc, #148]	; (3708 <xQueueGenericReceive+0x2b8>)
    3672:	4798      	blx	r3
				( void ) xTaskResumeAll();
    3674:	4b25      	ldr	r3, [pc, #148]	; (370c <xQueueGenericReceive+0x2bc>)
    3676:	4798      	blx	r3
    3678:	e70e      	b.n	3498 <xQueueGenericReceive+0x48>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    367a:	1c20      	adds	r0, r4, #0
    367c:	4b22      	ldr	r3, [pc, #136]	; (3708 <xQueueGenericReceive+0x2b8>)
    367e:	4798      	blx	r3
			( void ) xTaskResumeAll();
    3680:	4b22      	ldr	r3, [pc, #136]	; (370c <xQueueGenericReceive+0x2bc>)
    3682:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
    3684:	1c20      	adds	r0, r4, #0
    3686:	4e0f      	ldr	r6, [pc, #60]	; (36c4 <xQueueGenericReceive+0x274>)
    3688:	47b0      	blx	r6
    368a:	4d0f      	ldr	r5, [pc, #60]	; (36c8 <xQueueGenericReceive+0x278>)
    368c:	5c2f      	ldrb	r7, [r5, r0]
    368e:	3750      	adds	r7, #80	; 0x50
    3690:	b2ff      	uxtb	r7, r7
    3692:	1c20      	adds	r0, r4, #0
    3694:	47b0      	blx	r6
    3696:	5c2d      	ldrb	r5, [r5, r0]
    3698:	1c20      	adds	r0, r4, #0
    369a:	4b0c      	ldr	r3, [pc, #48]	; (36cc <xQueueGenericReceive+0x27c>)
    369c:	4798      	blx	r3
    369e:	1c02      	adds	r2, r0, #0
    36a0:	1c38      	adds	r0, r7, #0
    36a2:	1c29      	adds	r1, r5, #0
    36a4:	4b0a      	ldr	r3, [pc, #40]	; (36d0 <xQueueGenericReceive+0x280>)
    36a6:	4798      	blx	r3
			return errQUEUE_EMPTY;
    36a8:	2000      	movs	r0, #0
		}
	}
}
    36aa:	b005      	add	sp, #20
    36ac:	bc3c      	pop	{r2, r3, r4, r5}
    36ae:	4690      	mov	r8, r2
    36b0:	4699      	mov	r9, r3
    36b2:	46a2      	mov	sl, r4
    36b4:	46ab      	mov	fp, r5
    36b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36b8:	00004289 	.word	0x00004289
    36bc:	00002bb5 	.word	0x00002bb5
    36c0:	00002e89 	.word	0x00002e89
    36c4:	0000230d 	.word	0x0000230d
    36c8:	20000008 	.word	0x20000008
    36cc:	000022fd 	.word	0x000022fd
    36d0:	00001c49 	.word	0x00001c49
    36d4:	00002329 	.word	0x00002329
    36d8:	00002319 	.word	0x00002319
    36dc:	00002139 	.word	0x00002139
    36e0:	0000427d 	.word	0x0000427d
    36e4:	00004145 	.word	0x00004145
    36e8:	00002b9d 	.word	0x00002b9d
    36ec:	00002bcd 	.word	0x00002bcd
    36f0:	000041d5 	.word	0x000041d5
    36f4:	00003c09 	.word	0x00003c09
    36f8:	000041f5 	.word	0x000041f5
    36fc:	000022bd 	.word	0x000022bd
    3700:	000042a5 	.word	0x000042a5
    3704:	00004091 	.word	0x00004091
    3708:	00002eb1 	.word	0x00002eb1
    370c:	00003da5 	.word	0x00003da5

00003710 <uxQueueGetQueueNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
    3710:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	}
    3712:	4770      	bx	lr

00003714 <ucQueueGetQueueType>:

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
		return ( ( Queue_t * ) xQueue )->ucQueueType;
    3714:	2350      	movs	r3, #80	; 0x50
    3716:	5cc0      	ldrb	r0, [r0, r3]
	}
    3718:	4770      	bx	lr
    371a:	46c0      	nop			; (mov r8, r8)

0000371c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
    371c:	b538      	push	{r3, r4, r5, lr}
    371e:	1c04      	adds	r4, r0, #0
    3720:	1c0d      	adds	r5, r1, #0
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    3722:	4b0d      	ldr	r3, [pc, #52]	; (3758 <vQueueWaitForMessageRestricted+0x3c>)
    3724:	4798      	blx	r3
    3726:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3728:	3301      	adds	r3, #1
    372a:	d101      	bne.n	3730 <vQueueWaitForMessageRestricted+0x14>
    372c:	2300      	movs	r3, #0
    372e:	6463      	str	r3, [r4, #68]	; 0x44
    3730:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3732:	3301      	adds	r3, #1
    3734:	d101      	bne.n	373a <vQueueWaitForMessageRestricted+0x1e>
    3736:	2300      	movs	r3, #0
    3738:	64a3      	str	r3, [r4, #72]	; 0x48
    373a:	4b08      	ldr	r3, [pc, #32]	; (375c <vQueueWaitForMessageRestricted+0x40>)
    373c:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    373e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3740:	2b00      	cmp	r3, #0
    3742:	d104      	bne.n	374e <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3744:	1c20      	adds	r0, r4, #0
    3746:	3024      	adds	r0, #36	; 0x24
    3748:	1c29      	adds	r1, r5, #0
    374a:	4b05      	ldr	r3, [pc, #20]	; (3760 <vQueueWaitForMessageRestricted+0x44>)
    374c:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    374e:	1c20      	adds	r0, r4, #0
    3750:	4b04      	ldr	r3, [pc, #16]	; (3764 <vQueueWaitForMessageRestricted+0x48>)
    3752:	4798      	blx	r3
	}
    3754:	bd38      	pop	{r3, r4, r5, pc}
    3756:	46c0      	nop			; (mov r8, r8)
    3758:	00002bb5 	.word	0x00002bb5
    375c:	00002bcd 	.word	0x00002bcd
    3760:	000040e1 	.word	0x000040e1
    3764:	00002eb1 	.word	0x00002eb1

00003768 <prvTaskIsTaskSuspended>:

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
    3768:	2800      	cmp	r0, #0
    376a:	d101      	bne.n	3770 <prvTaskIsTaskSuspended+0x8>
    376c:	b672      	cpsid	i
    376e:	e7fe      	b.n	376e <prvTaskIsTaskSuspended+0x6>

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
	BaseType_t xReturn = pdFALSE;
    3770:	2300      	movs	r3, #0

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3772:	4a07      	ldr	r2, [pc, #28]	; (3790 <prvTaskIsTaskSuspended+0x28>)
    3774:	6941      	ldr	r1, [r0, #20]
    3776:	4291      	cmp	r1, r2
    3778:	d107      	bne.n	378a <prvTaskIsTaskSuspended+0x22>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    377a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    377c:	3214      	adds	r2, #20
    377e:	4293      	cmp	r3, r2
    3780:	d002      	beq.n	3788 <prvTaskIsTaskSuspended+0x20>

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
	BaseType_t xReturn = pdFALSE;
    3782:	425a      	negs	r2, r3
    3784:	4153      	adcs	r3, r2
    3786:	e000      	b.n	378a <prvTaskIsTaskSuspended+0x22>
    3788:	2300      	movs	r3, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    378a:	1c18      	adds	r0, r3, #0
    378c:	4770      	bx	lr
    378e:	46c0      	nop			; (mov r8, r8)
    3790:	20001524 	.word	0x20001524

00003794 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3794:	4b08      	ldr	r3, [pc, #32]	; (37b8 <prvResetNextTaskUnblockTime+0x24>)
    3796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3798:	681b      	ldr	r3, [r3, #0]
    379a:	2b00      	cmp	r3, #0
    379c:	d104      	bne.n	37a8 <prvResetNextTaskUnblockTime+0x14>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    379e:	2201      	movs	r2, #1
    37a0:	4252      	negs	r2, r2
    37a2:	4b06      	ldr	r3, [pc, #24]	; (37bc <prvResetNextTaskUnblockTime+0x28>)
    37a4:	601a      	str	r2, [r3, #0]
    37a6:	e006      	b.n	37b6 <prvResetNextTaskUnblockTime+0x22>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    37a8:	4b03      	ldr	r3, [pc, #12]	; (37b8 <prvResetNextTaskUnblockTime+0x24>)
    37aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    37ac:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    37ae:	68db      	ldr	r3, [r3, #12]
    37b0:	685a      	ldr	r2, [r3, #4]
    37b2:	4b02      	ldr	r3, [pc, #8]	; (37bc <prvResetNextTaskUnblockTime+0x28>)
    37b4:	601a      	str	r2, [r3, #0]
	}
}
    37b6:	4770      	bx	lr
    37b8:	20001524 	.word	0x20001524
    37bc:	20000014 	.word	0x20000014

000037c0 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    37c0:	b510      	push	{r4, lr}
    37c2:	1c04      	adds	r4, r0, #0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    37c4:	4b0c      	ldr	r3, [pc, #48]	; (37f8 <prvAddCurrentTaskToDelayedList+0x38>)
    37c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    37c8:	6050      	str	r0, [r2, #4]

	if( xTimeToWake < xTickCount )
    37ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    37cc:	4298      	cmp	r0, r3
    37ce:	d206      	bcs.n	37de <prvAddCurrentTaskToDelayedList+0x1e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    37d0:	4b09      	ldr	r3, [pc, #36]	; (37f8 <prvAddCurrentTaskToDelayedList+0x38>)
    37d2:	6b58      	ldr	r0, [r3, #52]	; 0x34
    37d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    37d6:	3104      	adds	r1, #4
    37d8:	4b08      	ldr	r3, [pc, #32]	; (37fc <prvAddCurrentTaskToDelayedList+0x3c>)
    37da:	4798      	blx	r3
    37dc:	e00b      	b.n	37f6 <prvAddCurrentTaskToDelayedList+0x36>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    37de:	4b06      	ldr	r3, [pc, #24]	; (37f8 <prvAddCurrentTaskToDelayedList+0x38>)
    37e0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    37e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    37e4:	3104      	adds	r1, #4
    37e6:	4b05      	ldr	r3, [pc, #20]	; (37fc <prvAddCurrentTaskToDelayedList+0x3c>)
    37e8:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    37ea:	4b05      	ldr	r3, [pc, #20]	; (3800 <prvAddCurrentTaskToDelayedList+0x40>)
    37ec:	681b      	ldr	r3, [r3, #0]
    37ee:	429c      	cmp	r4, r3
    37f0:	d201      	bcs.n	37f6 <prvAddCurrentTaskToDelayedList+0x36>
		{
			xNextTaskUnblockTime = xTimeToWake;
    37f2:	4b03      	ldr	r3, [pc, #12]	; (3800 <prvAddCurrentTaskToDelayedList+0x40>)
    37f4:	601c      	str	r4, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    37f6:	bd10      	pop	{r4, pc}
    37f8:	20001524 	.word	0x20001524
    37fc:	00002af1 	.word	0x00002af1
    3800:	20000014 	.word	0x20000014

00003804 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    3804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3806:	465f      	mov	r7, fp
    3808:	4656      	mov	r6, sl
    380a:	464d      	mov	r5, r9
    380c:	4644      	mov	r4, r8
    380e:	b4f0      	push	{r4, r5, r6, r7}
    3810:	4680      	mov	r8, r0
    3812:	1c0f      	adds	r7, r1, #0
    3814:	1c16      	adds	r6, r2, #0
    3816:	469a      	mov	sl, r3
    3818:	9d0a      	ldr	r5, [sp, #40]	; 0x28
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
    381a:	2800      	cmp	r0, #0
    381c:	d101      	bne.n	3822 <xTaskGenericCreate+0x1e>
    381e:	b672      	cpsid	i
    3820:	e7fe      	b.n	3820 <xTaskGenericCreate+0x1c>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
    3822:	2d04      	cmp	r5, #4
    3824:	d901      	bls.n	382a <xTaskGenericCreate+0x26>
    3826:	b672      	cpsid	i
    3828:	e7fe      	b.n	3828 <xTaskGenericCreate+0x24>
{
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    382a:	2048      	movs	r0, #72	; 0x48
    382c:	4b75      	ldr	r3, [pc, #468]	; (3a04 <xTaskGenericCreate+0x200>)
    382e:	4798      	blx	r3
    3830:	1e04      	subs	r4, r0, #0

	if( pxNewTCB != NULL )
    3832:	d100      	bne.n	3836 <xTaskGenericCreate+0x32>
    3834:	e0ac      	b.n	3990 <xTaskGenericCreate+0x18c>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3836:	990c      	ldr	r1, [sp, #48]	; 0x30
    3838:	2900      	cmp	r1, #0
    383a:	d000      	beq.n	383e <xTaskGenericCreate+0x3a>
    383c:	e0a4      	b.n	3988 <xTaskGenericCreate+0x184>
    383e:	00b0      	lsls	r0, r6, #2
    3840:	4b70      	ldr	r3, [pc, #448]	; (3a04 <xTaskGenericCreate+0x200>)
    3842:	4798      	blx	r3
    3844:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    3846:	2800      	cmp	r0, #0
    3848:	d103      	bne.n	3852 <xTaskGenericCreate+0x4e>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    384a:	1c20      	adds	r0, r4, #0
    384c:	4b6e      	ldr	r3, [pc, #440]	; (3a08 <xTaskGenericCreate+0x204>)
    384e:	4798      	blx	r3
    3850:	e09e      	b.n	3990 <xTaskGenericCreate+0x18c>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
    3852:	00b2      	lsls	r2, r6, #2
    3854:	21a5      	movs	r1, #165	; 0xa5
    3856:	4b6d      	ldr	r3, [pc, #436]	; (3a0c <xTaskGenericCreate+0x208>)
    3858:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
    385a:	4a6d      	ldr	r2, [pc, #436]	; (3a10 <xTaskGenericCreate+0x20c>)
    385c:	18b3      	adds	r3, r6, r2
    385e:	009b      	lsls	r3, r3, #2
    3860:	6b21      	ldr	r1, [r4, #48]	; 0x30
    3862:	18cb      	adds	r3, r1, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    3864:	2207      	movs	r2, #7
    3866:	4393      	bics	r3, r2
    3868:	469b      	mov	fp, r3
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    386a:	783a      	ldrb	r2, [r7, #0]
    386c:	2334      	movs	r3, #52	; 0x34
    386e:	54e2      	strb	r2, [r4, r3]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    3870:	783b      	ldrb	r3, [r7, #0]
    3872:	2b00      	cmp	r3, #0
    3874:	d00a      	beq.n	388c <xTaskGenericCreate+0x88>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3876:	2301      	movs	r3, #1
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    3878:	5cf9      	ldrb	r1, [r7, r3]
    387a:	18e2      	adds	r2, r4, r3
    387c:	3234      	adds	r2, #52	; 0x34
    387e:	7011      	strb	r1, [r2, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    3880:	5cfa      	ldrb	r2, [r7, r3]
    3882:	2a00      	cmp	r2, #0
    3884:	d002      	beq.n	388c <xTaskGenericCreate+0x88>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3886:	3301      	adds	r3, #1
    3888:	2b05      	cmp	r3, #5
    388a:	d1f5      	bne.n	3878 <xTaskGenericCreate+0x74>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    388c:	2200      	movs	r2, #0
    388e:	2338      	movs	r3, #56	; 0x38
    3890:	54e2      	strb	r2, [r4, r3]
    3892:	1e2e      	subs	r6, r5, #0
    3894:	2e04      	cmp	r6, #4
    3896:	d900      	bls.n	389a <xTaskGenericCreate+0x96>
    3898:	2604      	movs	r6, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    389a:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    389c:	6466      	str	r6, [r4, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    389e:	1d27      	adds	r7, r4, #4
    38a0:	1c38      	adds	r0, r7, #0
    38a2:	4a5c      	ldr	r2, [pc, #368]	; (3a14 <xTaskGenericCreate+0x210>)
    38a4:	4691      	mov	r9, r2
    38a6:	4790      	blx	r2
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    38a8:	1c20      	adds	r0, r4, #0
    38aa:	3018      	adds	r0, #24
    38ac:	47c8      	blx	r9

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    38ae:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    38b0:	2305      	movs	r3, #5
    38b2:	1b9e      	subs	r6, r3, r6
    38b4:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    38b6:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    38b8:	4658      	mov	r0, fp
    38ba:	4641      	mov	r1, r8
    38bc:	4652      	mov	r2, sl
    38be:	4b56      	ldr	r3, [pc, #344]	; (3a18 <xTaskGenericCreate+0x214>)
    38c0:	4798      	blx	r3
    38c2:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    38c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    38c6:	2b00      	cmp	r3, #0
    38c8:	d000      	beq.n	38cc <xTaskGenericCreate+0xc8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    38ca:	601c      	str	r4, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    38cc:	4b53      	ldr	r3, [pc, #332]	; (3a1c <xTaskGenericCreate+0x218>)
    38ce:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
    38d0:	4b53      	ldr	r3, [pc, #332]	; (3a20 <xTaskGenericCreate+0x21c>)
    38d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    38d4:	3201      	adds	r2, #1
    38d6:	639a      	str	r2, [r3, #56]	; 0x38
			if( pxCurrentTCB == NULL )
    38d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    38da:	2b00      	cmp	r3, #0
    38dc:	d12d      	bne.n	393a <xTaskGenericCreate+0x136>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    38de:	4b50      	ldr	r3, [pc, #320]	; (3a20 <xTaskGenericCreate+0x21c>)
    38e0:	62dc      	str	r4, [r3, #44]	; 0x2c

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    38e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    38e4:	2b01      	cmp	r3, #1
    38e6:	d15b      	bne.n	39a0 <xTaskGenericCreate+0x19c>
    38e8:	4b4d      	ldr	r3, [pc, #308]	; (3a20 <xTaskGenericCreate+0x21c>)
    38ea:	1c1e      	adds	r6, r3, #0
    38ec:	363c      	adds	r6, #60	; 0x3c
    38ee:	33a0      	adds	r3, #160	; 0xa0
    38f0:	4699      	mov	r9, r3
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    38f2:	494c      	ldr	r1, [pc, #304]	; (3a24 <xTaskGenericCreate+0x220>)
    38f4:	4688      	mov	r8, r1
    38f6:	1c30      	adds	r0, r6, #0
    38f8:	47c0      	blx	r8
    38fa:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    38fc:	454e      	cmp	r6, r9
    38fe:	d1fa      	bne.n	38f6 <xTaskGenericCreate+0xf2>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    3900:	4a49      	ldr	r2, [pc, #292]	; (3a28 <xTaskGenericCreate+0x224>)
    3902:	4691      	mov	r9, r2
    3904:	2320      	movs	r3, #32
    3906:	469b      	mov	fp, r3
    3908:	44cb      	add	fp, r9
    390a:	4658      	mov	r0, fp
    390c:	4e45      	ldr	r6, [pc, #276]	; (3a24 <xTaskGenericCreate+0x220>)
    390e:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    3910:	2134      	movs	r1, #52	; 0x34
    3912:	468a      	mov	sl, r1
    3914:	44ca      	add	sl, r9
    3916:	4650      	mov	r0, sl
    3918:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    391a:	4a41      	ldr	r2, [pc, #260]	; (3a20 <xTaskGenericCreate+0x21c>)
    391c:	4690      	mov	r8, r2
    391e:	1c10      	adds	r0, r2, #0
    3920:	3014      	adds	r0, #20
    3922:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    3924:	4648      	mov	r0, r9
    3926:	3048      	adds	r0, #72	; 0x48
    3928:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    392a:	4640      	mov	r0, r8
    392c:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    392e:	465b      	mov	r3, fp
    3930:	4641      	mov	r1, r8
    3932:	628b      	str	r3, [r1, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    3934:	4652      	mov	r2, sl
    3936:	634a      	str	r2, [r1, #52]	; 0x34
    3938:	e032      	b.n	39a0 <xTaskGenericCreate+0x19c>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    393a:	4b3b      	ldr	r3, [pc, #236]	; (3a28 <xTaskGenericCreate+0x224>)
    393c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    393e:	2b00      	cmp	r3, #0
    3940:	d12e      	bne.n	39a0 <xTaskGenericCreate+0x19c>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    3942:	4b37      	ldr	r3, [pc, #220]	; (3a20 <xTaskGenericCreate+0x21c>)
    3944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3948:	429d      	cmp	r5, r3
    394a:	d329      	bcc.n	39a0 <xTaskGenericCreate+0x19c>
					{
						pxCurrentTCB = pxNewTCB;
    394c:	4b34      	ldr	r3, [pc, #208]	; (3a20 <xTaskGenericCreate+0x21c>)
    394e:	62dc      	str	r4, [r3, #44]	; 0x2c
    3950:	e026      	b.n	39a0 <xTaskGenericCreate+0x19c>
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    3952:	4a35      	ldr	r2, [pc, #212]	; (3a28 <xTaskGenericCreate+0x224>)
    3954:	6613      	str	r3, [r2, #96]	; 0x60
    3956:	009a      	lsls	r2, r3, #2
    3958:	18d3      	adds	r3, r2, r3
    395a:	009b      	lsls	r3, r3, #2
    395c:	4830      	ldr	r0, [pc, #192]	; (3a20 <xTaskGenericCreate+0x21c>)
    395e:	303c      	adds	r0, #60	; 0x3c
    3960:	18c0      	adds	r0, r0, r3
    3962:	1c39      	adds	r1, r7, #0
    3964:	4b31      	ldr	r3, [pc, #196]	; (3a2c <xTaskGenericCreate+0x228>)
    3966:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    3968:	4b31      	ldr	r3, [pc, #196]	; (3a30 <xTaskGenericCreate+0x22c>)
    396a:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    396c:	4b2e      	ldr	r3, [pc, #184]	; (3a28 <xTaskGenericCreate+0x224>)
    396e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
    3970:	2001      	movs	r0, #1
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    3972:	2b00      	cmp	r3, #0
    3974:	d040      	beq.n	39f8 <xTaskGenericCreate+0x1f4>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    3976:	4b2a      	ldr	r3, [pc, #168]	; (3a20 <xTaskGenericCreate+0x21c>)
    3978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    397c:	429d      	cmp	r5, r3
    397e:	d93b      	bls.n	39f8 <xTaskGenericCreate+0x1f4>
			{
				taskYIELD_IF_USING_PREEMPTION();
    3980:	4b2c      	ldr	r3, [pc, #176]	; (3a34 <xTaskGenericCreate+0x230>)
    3982:	4798      	blx	r3
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
    3984:	2001      	movs	r0, #1
    3986:	e037      	b.n	39f8 <xTaskGenericCreate+0x1f4>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    398a:	6303      	str	r3, [r0, #48]	; 0x30
    398c:	1c18      	adds	r0, r3, #0
    398e:	e760      	b.n	3852 <xTaskGenericCreate+0x4e>
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
		traceTASK_CREATE_FAILED();
    3990:	2043      	movs	r0, #67	; 0x43
    3992:	2103      	movs	r1, #3
    3994:	2200      	movs	r2, #0
    3996:	4b28      	ldr	r3, [pc, #160]	; (3a38 <xTaskGenericCreate+0x234>)
    3998:	4798      	blx	r3
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    399a:	2001      	movs	r0, #1
    399c:	4240      	negs	r0, r0
    399e:	e02b      	b.n	39f8 <xTaskGenericCreate+0x1f4>
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    39a0:	4921      	ldr	r1, [pc, #132]	; (3a28 <xTaskGenericCreate+0x224>)
    39a2:	4688      	mov	r8, r1
    39a4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    39a6:	3301      	adds	r3, #1
    39a8:	664b      	str	r3, [r1, #100]	; 0x64

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
    39aa:	63e3      	str	r3, [r4, #60]	; 0x3c
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );
    39ac:	2003      	movs	r0, #3
    39ae:	4b23      	ldr	r3, [pc, #140]	; (3a3c <xTaskGenericCreate+0x238>)
    39b0:	4798      	blx	r3
    39b2:	6420      	str	r0, [r4, #64]	; 0x40
    39b4:	1c20      	adds	r0, r4, #0
    39b6:	4e22      	ldr	r6, [pc, #136]	; (3a40 <xTaskGenericCreate+0x23c>)
    39b8:	47b0      	blx	r6
    39ba:	1c01      	adds	r1, r0, #0
    39bc:	1c22      	adds	r2, r4, #0
    39be:	3234      	adds	r2, #52	; 0x34
    39c0:	2003      	movs	r0, #3
    39c2:	4b20      	ldr	r3, [pc, #128]	; (3a44 <xTaskGenericCreate+0x240>)
    39c4:	4798      	blx	r3
    39c6:	1c20      	adds	r0, r4, #0
    39c8:	47b0      	blx	r6
    39ca:	1c01      	adds	r1, r0, #0
    39cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    39ce:	b2da      	uxtb	r2, r3
    39d0:	2003      	movs	r0, #3
    39d2:	4b1d      	ldr	r3, [pc, #116]	; (3a48 <xTaskGenericCreate+0x244>)
    39d4:	4798      	blx	r3
    39d6:	1c20      	adds	r0, r4, #0
    39d8:	47b0      	blx	r6
    39da:	1c02      	adds	r2, r0, #0
    39dc:	201b      	movs	r0, #27
    39de:	2103      	movs	r1, #3
    39e0:	4b15      	ldr	r3, [pc, #84]	; (3a38 <xTaskGenericCreate+0x234>)
    39e2:	4798      	blx	r3

			prvAddTaskToReadyList( pxNewTCB );
    39e4:	1c20      	adds	r0, r4, #0
    39e6:	47b0      	blx	r6
    39e8:	4b18      	ldr	r3, [pc, #96]	; (3a4c <xTaskGenericCreate+0x248>)
    39ea:	4798      	blx	r3
    39ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    39ee:	4641      	mov	r1, r8
    39f0:	6e0a      	ldr	r2, [r1, #96]	; 0x60
    39f2:	4293      	cmp	r3, r2
    39f4:	d8ad      	bhi.n	3952 <xTaskGenericCreate+0x14e>
    39f6:	e7ae      	b.n	3956 <xTaskGenericCreate+0x152>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
    39f8:	bc3c      	pop	{r2, r3, r4, r5}
    39fa:	4690      	mov	r8, r2
    39fc:	4699      	mov	r9, r3
    39fe:	46a2      	mov	sl, r4
    3a00:	46ab      	mov	fp, r5
    3a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a04:	00002cd9 	.word	0x00002cd9
    3a08:	00002d3d 	.word	0x00002d3d
    3a0c:	00005541 	.word	0x00005541
    3a10:	3fffffff 	.word	0x3fffffff
    3a14:	00002ad1 	.word	0x00002ad1
    3a18:	00002b79 	.word	0x00002b79
    3a1c:	00002bb5 	.word	0x00002bb5
    3a20:	20001524 	.word	0x20001524
    3a24:	00002ab9 	.word	0x00002ab9
    3a28:	200015a4 	.word	0x200015a4
    3a2c:	00002ad9 	.word	0x00002ad9
    3a30:	00002bcd 	.word	0x00002bcd
    3a34:	00002b9d 	.word	0x00002b9d
    3a38:	00001c49 	.word	0x00001c49
    3a3c:	00001405 	.word	0x00001405
    3a40:	00002319 	.word	0x00002319
    3a44:	000015c9 	.word	0x000015c9
    3a48:	00002085 	.word	0x00002085
    3a4c:	00001b91 	.word	0x00001b91

00003a50 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    3a50:	b570      	push	{r4, r5, r6, lr}
    3a52:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
    3a54:	d101      	bne.n	3a5a <vTaskResume+0xa>
    3a56:	b672      	cpsid	i
    3a58:	e7fe      	b.n	3a58 <vTaskResume+0x8>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    3a5a:	4b1b      	ldr	r3, [pc, #108]	; (3ac8 <vTaskResume+0x78>)
    3a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3a5e:	4298      	cmp	r0, r3
    3a60:	d030      	beq.n	3ac4 <vTaskResume+0x74>
		{
			taskENTER_CRITICAL();
    3a62:	4b1a      	ldr	r3, [pc, #104]	; (3acc <vTaskResume+0x7c>)
    3a64:	4798      	blx	r3
			{
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    3a66:	1c20      	adds	r0, r4, #0
    3a68:	4b19      	ldr	r3, [pc, #100]	; (3ad0 <vTaskResume+0x80>)
    3a6a:	4798      	blx	r3
    3a6c:	2801      	cmp	r0, #1
    3a6e:	d127      	bne.n	3ac0 <vTaskResume+0x70>
				{
					traceTASK_RESUME( pxTCB );
    3a70:	1c20      	adds	r0, r4, #0
    3a72:	4d18      	ldr	r5, [pc, #96]	; (3ad4 <vTaskResume+0x84>)
    3a74:	47a8      	blx	r5
    3a76:	1c02      	adds	r2, r0, #0
    3a78:	208b      	movs	r0, #139	; 0x8b
    3a7a:	2103      	movs	r1, #3
    3a7c:	4b16      	ldr	r3, [pc, #88]	; (3ad8 <vTaskResume+0x88>)
    3a7e:	4798      	blx	r3

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
    3a80:	1d26      	adds	r6, r4, #4
    3a82:	1c30      	adds	r0, r6, #0
    3a84:	4b15      	ldr	r3, [pc, #84]	; (3adc <vTaskResume+0x8c>)
    3a86:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    3a88:	1c20      	adds	r0, r4, #0
    3a8a:	47a8      	blx	r5
    3a8c:	4b14      	ldr	r3, [pc, #80]	; (3ae0 <vTaskResume+0x90>)
    3a8e:	4798      	blx	r3
    3a90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3a92:	4a14      	ldr	r2, [pc, #80]	; (3ae4 <vTaskResume+0x94>)
    3a94:	6e12      	ldr	r2, [r2, #96]	; 0x60
    3a96:	4293      	cmp	r3, r2
    3a98:	d901      	bls.n	3a9e <vTaskResume+0x4e>
    3a9a:	4a12      	ldr	r2, [pc, #72]	; (3ae4 <vTaskResume+0x94>)
    3a9c:	6613      	str	r3, [r2, #96]	; 0x60
    3a9e:	4d0a      	ldr	r5, [pc, #40]	; (3ac8 <vTaskResume+0x78>)
    3aa0:	1c28      	adds	r0, r5, #0
    3aa2:	303c      	adds	r0, #60	; 0x3c
    3aa4:	009a      	lsls	r2, r3, #2
    3aa6:	18d3      	adds	r3, r2, r3
    3aa8:	009b      	lsls	r3, r3, #2
    3aaa:	18c0      	adds	r0, r0, r3
    3aac:	1c31      	adds	r1, r6, #0
    3aae:	4b0e      	ldr	r3, [pc, #56]	; (3ae8 <vTaskResume+0x98>)
    3ab0:	4798      	blx	r3

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3ab2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    3ab4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3ab8:	429a      	cmp	r2, r3
    3aba:	d301      	bcc.n	3ac0 <vTaskResume+0x70>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    3abc:	4b0b      	ldr	r3, [pc, #44]	; (3aec <vTaskResume+0x9c>)
    3abe:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    3ac0:	4b0b      	ldr	r3, [pc, #44]	; (3af0 <vTaskResume+0xa0>)
    3ac2:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3ac4:	bd70      	pop	{r4, r5, r6, pc}
    3ac6:	46c0      	nop			; (mov r8, r8)
    3ac8:	20001524 	.word	0x20001524
    3acc:	00002bb5 	.word	0x00002bb5
    3ad0:	00003769 	.word	0x00003769
    3ad4:	00002319 	.word	0x00002319
    3ad8:	00001c49 	.word	0x00001c49
    3adc:	00002b21 	.word	0x00002b21
    3ae0:	00001b91 	.word	0x00001b91
    3ae4:	200015a4 	.word	0x200015a4
    3ae8:	00002ad9 	.word	0x00002ad9
    3aec:	00002b9d 	.word	0x00002b9d
    3af0:	00002bcd 	.word	0x00002bcd

00003af4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    3af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3af6:	1e04      	subs	r4, r0, #0
	BaseType_t xYieldRequired = pdFALSE;
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
    3af8:	d101      	bne.n	3afe <xTaskResumeFromISR+0xa>
    3afa:	b672      	cpsid	i
    3afc:	e7fe      	b.n	3afc <xTaskResumeFromISR+0x8>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3afe:	4b20      	ldr	r3, [pc, #128]	; (3b80 <xTaskResumeFromISR+0x8c>)
    3b00:	4798      	blx	r3
    3b02:	1c07      	adds	r7, r0, #0
		{
			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    3b04:	1c20      	adds	r0, r4, #0
    3b06:	4b1f      	ldr	r3, [pc, #124]	; (3b84 <xTaskResumeFromISR+0x90>)
    3b08:	4798      	blx	r3

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
	BaseType_t xYieldRequired = pdFALSE;
    3b0a:	2500      	movs	r5, #0
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    3b0c:	2801      	cmp	r0, #1
    3b0e:	d132      	bne.n	3b76 <xTaskResumeFromISR+0x82>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );
    3b10:	1c20      	adds	r0, r4, #0
    3b12:	4b1d      	ldr	r3, [pc, #116]	; (3b88 <xTaskResumeFromISR+0x94>)
    3b14:	4798      	blx	r3
    3b16:	1c02      	adds	r2, r0, #0
    3b18:	208c      	movs	r0, #140	; 0x8c
    3b1a:	2103      	movs	r1, #3
    3b1c:	4b1b      	ldr	r3, [pc, #108]	; (3b8c <xTaskResumeFromISR+0x98>)
    3b1e:	4798      	blx	r3

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3b20:	4b1b      	ldr	r3, [pc, #108]	; (3b90 <xTaskResumeFromISR+0x9c>)
    3b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    3b24:	2b00      	cmp	r3, #0
    3b26:	d11f      	bne.n	3b68 <xTaskResumeFromISR+0x74>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3b28:	4b1a      	ldr	r3, [pc, #104]	; (3b94 <xTaskResumeFromISR+0xa0>)
    3b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3b2e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3b30:	429a      	cmp	r2, r3
    3b32:	416d      	adcs	r5, r5
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
    3b34:	1d26      	adds	r6, r4, #4
    3b36:	1c30      	adds	r0, r6, #0
    3b38:	4b17      	ldr	r3, [pc, #92]	; (3b98 <xTaskResumeFromISR+0xa4>)
    3b3a:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    3b3c:	1c20      	adds	r0, r4, #0
    3b3e:	4b12      	ldr	r3, [pc, #72]	; (3b88 <xTaskResumeFromISR+0x94>)
    3b40:	4798      	blx	r3
    3b42:	4b16      	ldr	r3, [pc, #88]	; (3b9c <xTaskResumeFromISR+0xa8>)
    3b44:	4798      	blx	r3
    3b46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3b48:	4a11      	ldr	r2, [pc, #68]	; (3b90 <xTaskResumeFromISR+0x9c>)
    3b4a:	6e12      	ldr	r2, [r2, #96]	; 0x60
    3b4c:	4293      	cmp	r3, r2
    3b4e:	d901      	bls.n	3b54 <xTaskResumeFromISR+0x60>
    3b50:	4a0f      	ldr	r2, [pc, #60]	; (3b90 <xTaskResumeFromISR+0x9c>)
    3b52:	6613      	str	r3, [r2, #96]	; 0x60
    3b54:	009a      	lsls	r2, r3, #2
    3b56:	18d3      	adds	r3, r2, r3
    3b58:	009b      	lsls	r3, r3, #2
    3b5a:	480e      	ldr	r0, [pc, #56]	; (3b94 <xTaskResumeFromISR+0xa0>)
    3b5c:	303c      	adds	r0, #60	; 0x3c
    3b5e:	18c0      	adds	r0, r0, r3
    3b60:	1c31      	adds	r1, r6, #0
    3b62:	4b0f      	ldr	r3, [pc, #60]	; (3ba0 <xTaskResumeFromISR+0xac>)
    3b64:	4798      	blx	r3
    3b66:	e006      	b.n	3b76 <xTaskResumeFromISR+0x82>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3b68:	1c21      	adds	r1, r4, #0
    3b6a:	3118      	adds	r1, #24
    3b6c:	4809      	ldr	r0, [pc, #36]	; (3b94 <xTaskResumeFromISR+0xa0>)
    3b6e:	3014      	adds	r0, #20
    3b70:	4b0b      	ldr	r3, [pc, #44]	; (3ba0 <xTaskResumeFromISR+0xac>)
    3b72:	4798      	blx	r3

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
	BaseType_t xYieldRequired = pdFALSE;
    3b74:	2500      	movs	r5, #0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3b76:	1c38      	adds	r0, r7, #0
    3b78:	4b0a      	ldr	r3, [pc, #40]	; (3ba4 <xTaskResumeFromISR+0xb0>)
    3b7a:	4798      	blx	r3

		return xYieldRequired;
	}
    3b7c:	1c28      	adds	r0, r5, #0
    3b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b80:	00002bed 	.word	0x00002bed
    3b84:	00003769 	.word	0x00003769
    3b88:	00002319 	.word	0x00002319
    3b8c:	00001c49 	.word	0x00001c49
    3b90:	200015a4 	.word	0x200015a4
    3b94:	20001524 	.word	0x20001524
    3b98:	00002b21 	.word	0x00002b21
    3b9c:	00001b91 	.word	0x00001b91
    3ba0:	00002ad9 	.word	0x00002ad9
    3ba4:	00002bf9 	.word	0x00002bf9

00003ba8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    3ba8:	b510      	push	{r4, lr}
    3baa:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    3bac:	2300      	movs	r3, #0
    3bae:	9300      	str	r3, [sp, #0]
    3bb0:	9301      	str	r3, [sp, #4]
    3bb2:	9302      	str	r3, [sp, #8]
    3bb4:	9303      	str	r3, [sp, #12]
    3bb6:	480d      	ldr	r0, [pc, #52]	; (3bec <vTaskStartScheduler+0x44>)
    3bb8:	490d      	ldr	r1, [pc, #52]	; (3bf0 <vTaskStartScheduler+0x48>)
    3bba:	228c      	movs	r2, #140	; 0x8c
    3bbc:	4c0d      	ldr	r4, [pc, #52]	; (3bf4 <vTaskStartScheduler+0x4c>)
    3bbe:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    3bc0:	2801      	cmp	r0, #1
    3bc2:	d10d      	bne.n	3be0 <vTaskStartScheduler+0x38>
		{
			xReturn = xTimerCreateTimerTask();
    3bc4:	4b0c      	ldr	r3, [pc, #48]	; (3bf8 <vTaskStartScheduler+0x50>)
    3bc6:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    3bc8:	2801      	cmp	r0, #1
    3bca:	d109      	bne.n	3be0 <vTaskStartScheduler+0x38>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    3bcc:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
    3bce:	2201      	movs	r2, #1
    3bd0:	4b0a      	ldr	r3, [pc, #40]	; (3bfc <vTaskStartScheduler+0x54>)
    3bd2:	65da      	str	r2, [r3, #92]	; 0x5c
		xTickCount = ( TickType_t ) 0U;
    3bd4:	2200      	movs	r2, #0
    3bd6:	4b0a      	ldr	r3, [pc, #40]	; (3c00 <vTaskStartScheduler+0x58>)
    3bd8:	631a      	str	r2, [r3, #48]	; 0x30
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    3bda:	4b0a      	ldr	r3, [pc, #40]	; (3c04 <vTaskStartScheduler+0x5c>)
    3bdc:	4798      	blx	r3
    3bde:	e003      	b.n	3be8 <vTaskStartScheduler+0x40>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
    3be0:	2800      	cmp	r0, #0
    3be2:	d101      	bne.n	3be8 <vTaskStartScheduler+0x40>
    3be4:	b672      	cpsid	i
    3be6:	e7fe      	b.n	3be6 <vTaskStartScheduler+0x3e>
	}
}
    3be8:	b004      	add	sp, #16
    3bea:	bd10      	pop	{r4, pc}
    3bec:	00003ea1 	.word	0x00003ea1
    3bf0:	00006bc4 	.word	0x00006bc4
    3bf4:	00003805 	.word	0x00003805
    3bf8:	000044bd 	.word	0x000044bd
    3bfc:	200015a4 	.word	0x200015a4
    3c00:	20001524 	.word	0x20001524
    3c04:	00002c99 	.word	0x00002c99

00003c08 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    3c08:	4b02      	ldr	r3, [pc, #8]	; (3c14 <vTaskSuspendAll+0xc>)
    3c0a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    3c0c:	3201      	adds	r2, #1
    3c0e:	66da      	str	r2, [r3, #108]	; 0x6c
}
    3c10:	4770      	bx	lr
    3c12:	46c0      	nop			; (mov r8, r8)
    3c14:	200015a4 	.word	0x200015a4

00003c18 <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    3c18:	b510      	push	{r4, lr}
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    3c1a:	4b04      	ldr	r3, [pc, #16]	; (3c2c <xTaskGetTickCount+0x14>)
    3c1c:	4798      	blx	r3
	{
		xTicks = xTickCount;
    3c1e:	4b04      	ldr	r3, [pc, #16]	; (3c30 <xTaskGetTickCount+0x18>)
    3c20:	6b1c      	ldr	r4, [r3, #48]	; 0x30
	}
	taskEXIT_CRITICAL();
    3c22:	4b04      	ldr	r3, [pc, #16]	; (3c34 <xTaskGetTickCount+0x1c>)
    3c24:	4798      	blx	r3

	return xTicks;
}
    3c26:	1c20      	adds	r0, r4, #0
    3c28:	bd10      	pop	{r4, pc}
    3c2a:	46c0      	nop			; (mov r8, r8)
    3c2c:	00002bb5 	.word	0x00002bb5
    3c30:	20001524 	.word	0x20001524
    3c34:	00002bcd 	.word	0x00002bcd

00003c38 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    3c38:	b510      	push	{r4, lr}
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3c3a:	4b04      	ldr	r3, [pc, #16]	; (3c4c <xTaskGetTickCountFromISR+0x14>)
    3c3c:	4798      	blx	r3
	{
		xReturn = xTickCount;
    3c3e:	4b04      	ldr	r3, [pc, #16]	; (3c50 <xTaskGetTickCountFromISR+0x18>)
    3c40:	6b1c      	ldr	r4, [r3, #48]	; 0x30
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3c42:	4b04      	ldr	r3, [pc, #16]	; (3c54 <xTaskGetTickCountFromISR+0x1c>)
    3c44:	4798      	blx	r3

	return xReturn;
}
    3c46:	1c20      	adds	r0, r4, #0
    3c48:	bd10      	pop	{r4, pc}
    3c4a:	46c0      	nop			; (mov r8, r8)
    3c4c:	00002bed 	.word	0x00002bed
    3c50:	20001524 	.word	0x20001524
    3c54:	00002bf9 	.word	0x00002bf9

00003c58 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    3c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c5a:	4657      	mov	r7, sl
    3c5c:	464e      	mov	r6, r9
    3c5e:	b4c0      	push	{r6, r7}
BaseType_t xSwitchRequired = pdFALSE;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
    3c60:	4b46      	ldr	r3, [pc, #280]	; (3d7c <xTaskIncrementTick+0x124>)
    3c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    3c64:	2b01      	cmp	r3, #1
    3c66:	d003      	beq.n	3c70 <xTaskIncrementTick+0x18>
    3c68:	4b44      	ldr	r3, [pc, #272]	; (3d7c <xTaskIncrementTick+0x124>)
    3c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    3c6c:	2b00      	cmp	r3, #0
    3c6e:	d106      	bne.n	3c7e <xTaskIncrementTick+0x26>
    3c70:	4b43      	ldr	r3, [pc, #268]	; (3d80 <xTaskIncrementTick+0x128>)
    3c72:	681a      	ldr	r2, [r3, #0]
    3c74:	3201      	adds	r2, #1
    3c76:	601a      	str	r2, [r3, #0]
    3c78:	2000      	movs	r0, #0
    3c7a:	4b42      	ldr	r3, [pc, #264]	; (3d84 <xTaskIncrementTick+0x12c>)
    3c7c:	4798      	blx	r3
    3c7e:	4b3f      	ldr	r3, [pc, #252]	; (3d7c <xTaskIncrementTick+0x124>)
    3c80:	6eda      	ldr	r2, [r3, #108]	; 0x6c
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    3c84:	2b00      	cmp	r3, #0
    3c86:	d167      	bne.n	3d58 <xTaskIncrementTick+0x100>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    3c88:	4b3f      	ldr	r3, [pc, #252]	; (3d88 <xTaskIncrementTick+0x130>)
    3c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3c8c:	3201      	adds	r2, #1
    3c8e:	631a      	str	r2, [r3, #48]	; 0x30

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    3c90:	6b1f      	ldr	r7, [r3, #48]	; 0x30

			if( xConstTickCount == ( TickType_t ) 0U )
    3c92:	2f00      	cmp	r7, #0
    3c94:	d110      	bne.n	3cb8 <xTaskIncrementTick+0x60>
			{
				taskSWITCH_DELAYED_LISTS();
    3c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c98:	681b      	ldr	r3, [r3, #0]
    3c9a:	2b00      	cmp	r3, #0
    3c9c:	d001      	beq.n	3ca2 <xTaskIncrementTick+0x4a>
    3c9e:	b672      	cpsid	i
    3ca0:	e7fe      	b.n	3ca0 <xTaskIncrementTick+0x48>
    3ca2:	4b39      	ldr	r3, [pc, #228]	; (3d88 <xTaskIncrementTick+0x130>)
    3ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3ca6:	6b59      	ldr	r1, [r3, #52]	; 0x34
    3ca8:	6299      	str	r1, [r3, #40]	; 0x28
    3caa:	635a      	str	r2, [r3, #52]	; 0x34
    3cac:	4b33      	ldr	r3, [pc, #204]	; (3d7c <xTaskIncrementTick+0x124>)
    3cae:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    3cb0:	3201      	adds	r2, #1
    3cb2:	675a      	str	r2, [r3, #116]	; 0x74
    3cb4:	4b35      	ldr	r3, [pc, #212]	; (3d8c <xTaskIncrementTick+0x134>)
    3cb6:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    3cb8:	4b35      	ldr	r3, [pc, #212]	; (3d90 <xTaskIncrementTick+0x138>)
    3cba:	681b      	ldr	r3, [r3, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    3cbc:	2500      	movs	r5, #0

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    3cbe:	429f      	cmp	r7, r3
    3cc0:	d33f      	bcc.n	3d42 <xTaskIncrementTick+0xea>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3cc2:	4a31      	ldr	r2, [pc, #196]	; (3d88 <xTaskIncrementTick+0x130>)
    3cc4:	4692      	mov	sl, r2
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    3cc6:	4691      	mov	r9, r2
    3cc8:	233c      	movs	r3, #60	; 0x3c
    3cca:	4499      	add	r9, r3
    3ccc:	e000      	b.n	3cd0 <xTaskIncrementTick+0x78>
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
							{
								xSwitchRequired = pdTRUE;
    3cce:	2501      	movs	r5, #1
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3cd0:	4652      	mov	r2, sl
    3cd2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3cd4:	681b      	ldr	r3, [r3, #0]
    3cd6:	2b00      	cmp	r3, #0
    3cd8:	d104      	bne.n	3ce4 <xTaskIncrementTick+0x8c>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    3cda:	2201      	movs	r2, #1
    3cdc:	4252      	negs	r2, r2
    3cde:	4b2c      	ldr	r3, [pc, #176]	; (3d90 <xTaskIncrementTick+0x138>)
    3ce0:	601a      	str	r2, [r3, #0]
						break;
    3ce2:	e02e      	b.n	3d42 <xTaskIncrementTick+0xea>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3ce4:	4b28      	ldr	r3, [pc, #160]	; (3d88 <xTaskIncrementTick+0x130>)
    3ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ce8:	68db      	ldr	r3, [r3, #12]
    3cea:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    3cec:	6863      	ldr	r3, [r4, #4]

						if( xConstTickCount < xItemValue )
    3cee:	429f      	cmp	r7, r3
    3cf0:	d202      	bcs.n	3cf8 <xTaskIncrementTick+0xa0>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
    3cf2:	4a27      	ldr	r2, [pc, #156]	; (3d90 <xTaskIncrementTick+0x138>)
    3cf4:	6013      	str	r3, [r2, #0]
							break;
    3cf6:	e024      	b.n	3d42 <xTaskIncrementTick+0xea>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3cf8:	1d26      	adds	r6, r4, #4
    3cfa:	1c30      	adds	r0, r6, #0
    3cfc:	4b25      	ldr	r3, [pc, #148]	; (3d94 <xTaskIncrementTick+0x13c>)
    3cfe:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    3d00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3d02:	2b00      	cmp	r3, #0
    3d04:	d003      	beq.n	3d0e <xTaskIncrementTick+0xb6>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3d06:	1c20      	adds	r0, r4, #0
    3d08:	3018      	adds	r0, #24
    3d0a:	4b22      	ldr	r3, [pc, #136]	; (3d94 <xTaskIncrementTick+0x13c>)
    3d0c:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    3d0e:	1c20      	adds	r0, r4, #0
    3d10:	4b21      	ldr	r3, [pc, #132]	; (3d98 <xTaskIncrementTick+0x140>)
    3d12:	4798      	blx	r3
    3d14:	4b21      	ldr	r3, [pc, #132]	; (3d9c <xTaskIncrementTick+0x144>)
    3d16:	4798      	blx	r3
    3d18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3d1a:	4a18      	ldr	r2, [pc, #96]	; (3d7c <xTaskIncrementTick+0x124>)
    3d1c:	6e12      	ldr	r2, [r2, #96]	; 0x60
    3d1e:	4293      	cmp	r3, r2
    3d20:	d901      	bls.n	3d26 <xTaskIncrementTick+0xce>
    3d22:	4a16      	ldr	r2, [pc, #88]	; (3d7c <xTaskIncrementTick+0x124>)
    3d24:	6613      	str	r3, [r2, #96]	; 0x60
    3d26:	0098      	lsls	r0, r3, #2
    3d28:	18c0      	adds	r0, r0, r3
    3d2a:	0080      	lsls	r0, r0, #2
    3d2c:	4448      	add	r0, r9
    3d2e:	1c31      	adds	r1, r6, #0
    3d30:	4b1b      	ldr	r3, [pc, #108]	; (3da0 <xTaskIncrementTick+0x148>)
    3d32:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3d34:	4a14      	ldr	r2, [pc, #80]	; (3d88 <xTaskIncrementTick+0x130>)
    3d36:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    3d38:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3d3c:	429a      	cmp	r2, r3
    3d3e:	d2c6      	bcs.n	3cce <xTaskIncrementTick+0x76>
    3d40:	e7c6      	b.n	3cd0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    3d42:	4b11      	ldr	r3, [pc, #68]	; (3d88 <xTaskIncrementTick+0x130>)
    3d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3d46:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    3d48:	0091      	lsls	r1, r2, #2
    3d4a:	188a      	adds	r2, r1, r2
    3d4c:	0092      	lsls	r2, r2, #2
    3d4e:	189b      	adds	r3, r3, r2
    3d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3d52:	2b01      	cmp	r3, #1
    3d54:	d806      	bhi.n	3d64 <xTaskIncrementTick+0x10c>
    3d56:	e006      	b.n	3d66 <xTaskIncrementTick+0x10e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    3d58:	4b08      	ldr	r3, [pc, #32]	; (3d7c <xTaskIncrementTick+0x124>)
    3d5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    3d5c:	3201      	adds	r2, #1
    3d5e:	671a      	str	r2, [r3, #112]	; 0x70

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    3d60:	2500      	movs	r5, #0
    3d62:	e000      	b.n	3d66 <xTaskIncrementTick+0x10e>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
    3d64:	2501      	movs	r5, #1
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    3d66:	4b05      	ldr	r3, [pc, #20]	; (3d7c <xTaskIncrementTick+0x124>)
    3d68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    3d6a:	2b00      	cmp	r3, #0
    3d6c:	d000      	beq.n	3d70 <xTaskIncrementTick+0x118>
		{
			xSwitchRequired = pdTRUE;
    3d6e:	2501      	movs	r5, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
    3d70:	1c28      	adds	r0, r5, #0
    3d72:	bc0c      	pop	{r2, r3}
    3d74:	4691      	mov	r9, r2
    3d76:	469a      	mov	sl, r3
    3d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d7a:	46c0      	nop			; (mov r8, r8)
    3d7c:	200015a4 	.word	0x200015a4
    3d80:	2000056c 	.word	0x2000056c
    3d84:	00001b19 	.word	0x00001b19
    3d88:	20001524 	.word	0x20001524
    3d8c:	00003795 	.word	0x00003795
    3d90:	20000014 	.word	0x20000014
    3d94:	00002b21 	.word	0x00002b21
    3d98:	00002319 	.word	0x00002319
    3d9c:	00001b91 	.word	0x00001b91
    3da0:	00002ad9 	.word	0x00002ad9

00003da4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    3da4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3da6:	4647      	mov	r7, r8
    3da8:	b480      	push	{r7}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    3daa:	4b33      	ldr	r3, [pc, #204]	; (3e78 <xTaskResumeAll+0xd4>)
    3dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    3dae:	2b00      	cmp	r3, #0
    3db0:	d101      	bne.n	3db6 <xTaskResumeAll+0x12>
    3db2:	b672      	cpsid	i
    3db4:	e7fe      	b.n	3db4 <xTaskResumeAll+0x10>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3db6:	4b31      	ldr	r3, [pc, #196]	; (3e7c <xTaskResumeAll+0xd8>)
    3db8:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    3dba:	4b2f      	ldr	r3, [pc, #188]	; (3e78 <xTaskResumeAll+0xd4>)
    3dbc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    3dbe:	3a01      	subs	r2, #1
    3dc0:	66da      	str	r2, [r3, #108]	; 0x6c

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    3dc4:	2400      	movs	r4, #0
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d14f      	bne.n	3e6a <xTaskResumeAll+0xc6>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    3dca:	4b2d      	ldr	r3, [pc, #180]	; (3e80 <xTaskResumeAll+0xdc>)
    3dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3dce:	2b00      	cmp	r3, #0
    3dd0:	d04b      	beq.n	3e6a <xTaskResumeAll+0xc6>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3dd2:	4d2b      	ldr	r5, [pc, #172]	; (3e80 <xTaskResumeAll+0xdc>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
    3dd4:	46a8      	mov	r8, r5
    3dd6:	223c      	movs	r2, #60	; 0x3c
    3dd8:	4490      	add	r8, r2
    3dda:	e025      	b.n	3e28 <xTaskResumeAll+0x84>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    3ddc:	4b28      	ldr	r3, [pc, #160]	; (3e80 <xTaskResumeAll+0xdc>)
    3dde:	6a1b      	ldr	r3, [r3, #32]
    3de0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3de2:	1c20      	adds	r0, r4, #0
    3de4:	3018      	adds	r0, #24
    3de6:	4f27      	ldr	r7, [pc, #156]	; (3e84 <xTaskResumeAll+0xe0>)
    3de8:	47b8      	blx	r7
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3dea:	1d26      	adds	r6, r4, #4
    3dec:	1c30      	adds	r0, r6, #0
    3dee:	47b8      	blx	r7
					prvAddTaskToReadyList( pxTCB );
    3df0:	1c20      	adds	r0, r4, #0
    3df2:	4b25      	ldr	r3, [pc, #148]	; (3e88 <xTaskResumeAll+0xe4>)
    3df4:	4798      	blx	r3
    3df6:	4b25      	ldr	r3, [pc, #148]	; (3e8c <xTaskResumeAll+0xe8>)
    3df8:	4798      	blx	r3
    3dfa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3dfc:	4a1e      	ldr	r2, [pc, #120]	; (3e78 <xTaskResumeAll+0xd4>)
    3dfe:	6e12      	ldr	r2, [r2, #96]	; 0x60
    3e00:	4293      	cmp	r3, r2
    3e02:	d901      	bls.n	3e08 <xTaskResumeAll+0x64>
    3e04:	4a1c      	ldr	r2, [pc, #112]	; (3e78 <xTaskResumeAll+0xd4>)
    3e06:	6613      	str	r3, [r2, #96]	; 0x60
    3e08:	0098      	lsls	r0, r3, #2
    3e0a:	18c0      	adds	r0, r0, r3
    3e0c:	0080      	lsls	r0, r0, #2
    3e0e:	4440      	add	r0, r8
    3e10:	1c31      	adds	r1, r6, #0
    3e12:	4b1f      	ldr	r3, [pc, #124]	; (3e90 <xTaskResumeAll+0xec>)
    3e14:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3e16:	4a1a      	ldr	r2, [pc, #104]	; (3e80 <xTaskResumeAll+0xdc>)
    3e18:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    3e1a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3e1e:	429a      	cmp	r2, r3
    3e20:	d302      	bcc.n	3e28 <xTaskResumeAll+0x84>
					{
						xYieldPending = pdTRUE;
    3e22:	2201      	movs	r2, #1
    3e24:	4b14      	ldr	r3, [pc, #80]	; (3e78 <xTaskResumeAll+0xd4>)
    3e26:	679a      	str	r2, [r3, #120]	; 0x78
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3e28:	696b      	ldr	r3, [r5, #20]
    3e2a:	2b00      	cmp	r3, #0
    3e2c:	d1d6      	bne.n	3ddc <xTaskResumeAll+0x38>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    3e2e:	4b12      	ldr	r3, [pc, #72]	; (3e78 <xTaskResumeAll+0xd4>)
    3e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    3e32:	2b00      	cmp	r3, #0
    3e34:	d011      	beq.n	3e5a <xTaskResumeAll+0xb6>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    3e36:	4b10      	ldr	r3, [pc, #64]	; (3e78 <xTaskResumeAll+0xd4>)
    3e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    3e3a:	2b00      	cmp	r3, #0
    3e3c:	d00d      	beq.n	3e5a <xTaskResumeAll+0xb6>
					{
						if( xTaskIncrementTick() != pdFALSE )
    3e3e:	4e15      	ldr	r6, [pc, #84]	; (3e94 <xTaskResumeAll+0xf0>)
						{
							xYieldPending = pdTRUE;
    3e40:	4d0d      	ldr	r5, [pc, #52]	; (3e78 <xTaskResumeAll+0xd4>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    3e42:	1c2c      	adds	r4, r5, #0
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
    3e44:	47b0      	blx	r6
    3e46:	2800      	cmp	r0, #0
    3e48:	d001      	beq.n	3e4e <xTaskResumeAll+0xaa>
						{
							xYieldPending = pdTRUE;
    3e4a:	2301      	movs	r3, #1
    3e4c:	67ab      	str	r3, [r5, #120]	; 0x78
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    3e4e:	6f23      	ldr	r3, [r4, #112]	; 0x70
    3e50:	3b01      	subs	r3, #1
    3e52:	6723      	str	r3, [r4, #112]	; 0x70
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    3e54:	6f23      	ldr	r3, [r4, #112]	; 0x70
    3e56:	2b00      	cmp	r3, #0
    3e58:	d1f4      	bne.n	3e44 <xTaskResumeAll+0xa0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    3e5a:	4b07      	ldr	r3, [pc, #28]	; (3e78 <xTaskResumeAll+0xd4>)
    3e5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    3e5e:	2400      	movs	r4, #0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    3e60:	2b01      	cmp	r3, #1
    3e62:	d102      	bne.n	3e6a <xTaskResumeAll+0xc6>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    3e64:	4b0c      	ldr	r3, [pc, #48]	; (3e98 <xTaskResumeAll+0xf4>)
    3e66:	4798      	blx	r3

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    3e68:	2401      	movs	r4, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    3e6a:	4b0c      	ldr	r3, [pc, #48]	; (3e9c <xTaskResumeAll+0xf8>)
    3e6c:	4798      	blx	r3

	return xAlreadyYielded;
}
    3e6e:	1c20      	adds	r0, r4, #0
    3e70:	bc04      	pop	{r2}
    3e72:	4690      	mov	r8, r2
    3e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e76:	46c0      	nop			; (mov r8, r8)
    3e78:	200015a4 	.word	0x200015a4
    3e7c:	00002bb5 	.word	0x00002bb5
    3e80:	20001524 	.word	0x20001524
    3e84:	00002b21 	.word	0x00002b21
    3e88:	00002319 	.word	0x00002319
    3e8c:	00001b91 	.word	0x00001b91
    3e90:	00002ad9 	.word	0x00002ad9
    3e94:	00003c59 	.word	0x00003c59
    3e98:	00002b9d 	.word	0x00002b9d
    3e9c:	00002bcd 	.word	0x00002bcd

00003ea0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    3ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    3ea2:	4e15      	ldr	r6, [pc, #84]	; (3ef8 <prvIdleTask+0x58>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    3ea4:	4f15      	ldr	r7, [pc, #84]	; (3efc <prvIdleTask+0x5c>)
    3ea6:	e01d      	b.n	3ee4 <prvIdleTask+0x44>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    3ea8:	4b15      	ldr	r3, [pc, #84]	; (3f00 <prvIdleTask+0x60>)
    3eaa:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    3eac:	4b12      	ldr	r3, [pc, #72]	; (3ef8 <prvIdleTask+0x58>)
    3eae:	6c9c      	ldr	r4, [r3, #72]	; 0x48
			}
			( void ) xTaskResumeAll();
    3eb0:	4b14      	ldr	r3, [pc, #80]	; (3f04 <prvIdleTask+0x64>)
    3eb2:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    3eb4:	2c00      	cmp	r4, #0
    3eb6:	d015      	beq.n	3ee4 <prvIdleTask+0x44>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    3eb8:	4b13      	ldr	r3, [pc, #76]	; (3f08 <prvIdleTask+0x68>)
    3eba:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    3ebc:	4d0e      	ldr	r5, [pc, #56]	; (3ef8 <prvIdleTask+0x58>)
    3ebe:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    3ec0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3ec2:	1d20      	adds	r0, r4, #4
    3ec4:	4b11      	ldr	r3, [pc, #68]	; (3f0c <prvIdleTask+0x6c>)
    3ec6:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    3ec8:	4b0c      	ldr	r3, [pc, #48]	; (3efc <prvIdleTask+0x5c>)
    3eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3ecc:	3a01      	subs	r2, #1
    3ece:	639a      	str	r2, [r3, #56]	; 0x38
					--uxTasksDeleted;
    3ed0:	6eab      	ldr	r3, [r5, #104]	; 0x68
    3ed2:	3b01      	subs	r3, #1
    3ed4:	66ab      	str	r3, [r5, #104]	; 0x68
				}
				taskEXIT_CRITICAL();
    3ed6:	4b0e      	ldr	r3, [pc, #56]	; (3f10 <prvIdleTask+0x70>)
    3ed8:	4798      	blx	r3
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
    3eda:	6b20      	ldr	r0, [r4, #48]	; 0x30
    3edc:	4d0d      	ldr	r5, [pc, #52]	; (3f14 <prvIdleTask+0x74>)
    3ede:	47a8      	blx	r5
		vPortFree( pxTCB );
    3ee0:	1c20      	adds	r0, r4, #0
    3ee2:	47a8      	blx	r5
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    3ee4:	6eb3      	ldr	r3, [r6, #104]	; 0x68
    3ee6:	2b00      	cmp	r3, #0
    3ee8:	d1de      	bne.n	3ea8 <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    3eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3eec:	2b01      	cmp	r3, #1
    3eee:	d9f9      	bls.n	3ee4 <prvIdleTask+0x44>
			{
				taskYIELD();
    3ef0:	4b09      	ldr	r3, [pc, #36]	; (3f18 <prvIdleTask+0x78>)
    3ef2:	4798      	blx	r3
    3ef4:	e7f6      	b.n	3ee4 <prvIdleTask+0x44>
    3ef6:	46c0      	nop			; (mov r8, r8)
    3ef8:	200015a4 	.word	0x200015a4
    3efc:	20001524 	.word	0x20001524
    3f00:	00003c09 	.word	0x00003c09
    3f04:	00003da5 	.word	0x00003da5
    3f08:	00002bb5 	.word	0x00002bb5
    3f0c:	00002b21 	.word	0x00002b21
    3f10:	00002bcd 	.word	0x00002bcd
    3f14:	00002d3d 	.word	0x00002d3d
    3f18:	00002b9d 	.word	0x00002b9d

00003f1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3f1c:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    3f1e:	4b24      	ldr	r3, [pc, #144]	; (3fb0 <vTaskSwitchContext+0x94>)
    3f20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    3f22:	2b00      	cmp	r3, #0
    3f24:	d003      	beq.n	3f2e <vTaskSwitchContext+0x12>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    3f26:	2201      	movs	r2, #1
    3f28:	4b21      	ldr	r3, [pc, #132]	; (3fb0 <vTaskSwitchContext+0x94>)
    3f2a:	679a      	str	r2, [r3, #120]	; 0x78
    3f2c:	e03e      	b.n	3fac <vTaskSwitchContext+0x90>
	}
	else
	{
		xYieldPending = pdFALSE;
    3f2e:	4b20      	ldr	r3, [pc, #128]	; (3fb0 <vTaskSwitchContext+0x94>)
    3f30:	2200      	movs	r2, #0
    3f32:	679a      	str	r2, [r3, #120]	; 0x78
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    3f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    3f36:	009a      	lsls	r2, r3, #2
    3f38:	18d3      	adds	r3, r2, r3
    3f3a:	009b      	lsls	r3, r3, #2
    3f3c:	4a1d      	ldr	r2, [pc, #116]	; (3fb4 <vTaskSwitchContext+0x98>)
    3f3e:	18d3      	adds	r3, r2, r3
    3f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3f42:	2b00      	cmp	r3, #0
    3f44:	d117      	bne.n	3f76 <vTaskSwitchContext+0x5a>
    3f46:	4b1a      	ldr	r3, [pc, #104]	; (3fb0 <vTaskSwitchContext+0x94>)
    3f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    3f4a:	2b00      	cmp	r3, #0
    3f4c:	d105      	bne.n	3f5a <vTaskSwitchContext+0x3e>
    3f4e:	e002      	b.n	3f56 <vTaskSwitchContext+0x3a>
    3f50:	6e02      	ldr	r2, [r0, #96]	; 0x60
    3f52:	2a00      	cmp	r2, #0
    3f54:	d104      	bne.n	3f60 <vTaskSwitchContext+0x44>
    3f56:	b672      	cpsid	i
    3f58:	e7fe      	b.n	3f58 <vTaskSwitchContext+0x3c>
    3f5a:	4b15      	ldr	r3, [pc, #84]	; (3fb0 <vTaskSwitchContext+0x94>)
    3f5c:	4c15      	ldr	r4, [pc, #84]	; (3fb4 <vTaskSwitchContext+0x98>)
    3f5e:	1c18      	adds	r0, r3, #0
    3f60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    3f62:	3a01      	subs	r2, #1
    3f64:	661a      	str	r2, [r3, #96]	; 0x60
    3f66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    3f68:	0091      	lsls	r1, r2, #2
    3f6a:	188a      	adds	r2, r1, r2
    3f6c:	0092      	lsls	r2, r2, #2
    3f6e:	18a2      	adds	r2, r4, r2
    3f70:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    3f72:	2a00      	cmp	r2, #0
    3f74:	d0ec      	beq.n	3f50 <vTaskSwitchContext+0x34>
    3f76:	4b0e      	ldr	r3, [pc, #56]	; (3fb0 <vTaskSwitchContext+0x94>)
    3f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    3f7a:	009a      	lsls	r2, r3, #2
    3f7c:	18d3      	adds	r3, r2, r3
    3f7e:	009b      	lsls	r3, r3, #2
    3f80:	4a0c      	ldr	r2, [pc, #48]	; (3fb4 <vTaskSwitchContext+0x98>)
    3f82:	323c      	adds	r2, #60	; 0x3c
    3f84:	18d3      	adds	r3, r2, r3
    3f86:	685a      	ldr	r2, [r3, #4]
    3f88:	6852      	ldr	r2, [r2, #4]
    3f8a:	605a      	str	r2, [r3, #4]
    3f8c:	1c19      	adds	r1, r3, #0
    3f8e:	3108      	adds	r1, #8
    3f90:	428a      	cmp	r2, r1
    3f92:	d101      	bne.n	3f98 <vTaskSwitchContext+0x7c>
    3f94:	6852      	ldr	r2, [r2, #4]
    3f96:	605a      	str	r2, [r3, #4]
    3f98:	685b      	ldr	r3, [r3, #4]
    3f9a:	68da      	ldr	r2, [r3, #12]
    3f9c:	4b05      	ldr	r3, [pc, #20]	; (3fb4 <vTaskSwitchContext+0x98>)
    3f9e:	62da      	str	r2, [r3, #44]	; 0x2c

		traceTASK_SWITCHED_IN();
    3fa0:	4b05      	ldr	r3, [pc, #20]	; (3fb8 <vTaskSwitchContext+0x9c>)
    3fa2:	4798      	blx	r3
    3fa4:	4b05      	ldr	r3, [pc, #20]	; (3fbc <vTaskSwitchContext+0xa0>)
    3fa6:	4798      	blx	r3
    3fa8:	4b05      	ldr	r3, [pc, #20]	; (3fc0 <vTaskSwitchContext+0xa4>)
    3faa:	4798      	blx	r3
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    3fac:	bd10      	pop	{r4, pc}
    3fae:	46c0      	nop			; (mov r8, r8)
    3fb0:	200015a4 	.word	0x200015a4
    3fb4:	20001524 	.word	0x20001524
    3fb8:	00002329 	.word	0x00002329
    3fbc:	00002319 	.word	0x00002319
    3fc0:	000021ed 	.word	0x000021ed

00003fc4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    3fc4:	b570      	push	{r4, r5, r6, lr}
    3fc6:	1c04      	adds	r4, r0, #0
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    3fc8:	4b25      	ldr	r3, [pc, #148]	; (4060 <vTaskSuspend+0x9c>)
    3fca:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    3fcc:	2c00      	cmp	r4, #0
    3fce:	d101      	bne.n	3fd4 <vTaskSuspend+0x10>
    3fd0:	4b24      	ldr	r3, [pc, #144]	; (4064 <vTaskSuspend+0xa0>)
    3fd2:	6adc      	ldr	r4, [r3, #44]	; 0x2c

			traceTASK_SUSPEND( pxTCB );
    3fd4:	1c20      	adds	r0, r4, #0
    3fd6:	4d24      	ldr	r5, [pc, #144]	; (4068 <vTaskSuspend+0xa4>)
    3fd8:	47a8      	blx	r5
    3fda:	1c02      	adds	r2, r0, #0
    3fdc:	208a      	movs	r0, #138	; 0x8a
    3fde:	2103      	movs	r1, #3
    3fe0:	4b22      	ldr	r3, [pc, #136]	; (406c <vTaskSuspend+0xa8>)
    3fe2:	4798      	blx	r3
    3fe4:	1c20      	adds	r0, r4, #0
    3fe6:	47a8      	blx	r5
    3fe8:	4b21      	ldr	r3, [pc, #132]	; (4070 <vTaskSuspend+0xac>)
    3fea:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3fec:	1d26      	adds	r6, r4, #4
    3fee:	1c30      	adds	r0, r6, #0
    3ff0:	4b20      	ldr	r3, [pc, #128]	; (4074 <vTaskSuspend+0xb0>)
    3ff2:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    3ff4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3ff6:	2b00      	cmp	r3, #0
    3ff8:	d003      	beq.n	4002 <vTaskSuspend+0x3e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3ffa:	1c20      	adds	r0, r4, #0
    3ffc:	3018      	adds	r0, #24
    3ffe:	4b1d      	ldr	r3, [pc, #116]	; (4074 <vTaskSuspend+0xb0>)
    4000:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4002:	4d18      	ldr	r5, [pc, #96]	; (4064 <vTaskSuspend+0xa0>)
    4004:	1c28      	adds	r0, r5, #0
    4006:	1c31      	adds	r1, r6, #0
    4008:	4b1b      	ldr	r3, [pc, #108]	; (4078 <vTaskSuspend+0xb4>)
    400a:	4798      	blx	r3
		}
		taskEXIT_CRITICAL();
    400c:	4b1b      	ldr	r3, [pc, #108]	; (407c <vTaskSuspend+0xb8>)
    400e:	4798      	blx	r3

		if( pxTCB == pxCurrentTCB )
    4010:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    4012:	429c      	cmp	r4, r3
    4014:	d118      	bne.n	4048 <vTaskSuspend+0x84>
		{
			if( xSchedulerRunning != pdFALSE )
    4016:	4b1a      	ldr	r3, [pc, #104]	; (4080 <vTaskSuspend+0xbc>)
    4018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    401a:	2b00      	cmp	r3, #0
    401c:	d008      	beq.n	4030 <vTaskSuspend+0x6c>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
    401e:	4b18      	ldr	r3, [pc, #96]	; (4080 <vTaskSuspend+0xbc>)
    4020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    4022:	2b00      	cmp	r3, #0
    4024:	d001      	beq.n	402a <vTaskSuspend+0x66>
    4026:	b672      	cpsid	i
    4028:	e7fe      	b.n	4028 <vTaskSuspend+0x64>
				portYIELD_WITHIN_API();
    402a:	4b16      	ldr	r3, [pc, #88]	; (4084 <vTaskSuspend+0xc0>)
    402c:	4798      	blx	r3
    402e:	e015      	b.n	405c <vTaskSuspend+0x98>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4030:	4b0c      	ldr	r3, [pc, #48]	; (4064 <vTaskSuspend+0xa0>)
    4032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4034:	681b      	ldr	r3, [r3, #0]
    4036:	4293      	cmp	r3, r2
    4038:	d103      	bne.n	4042 <vTaskSuspend+0x7e>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    403a:	2200      	movs	r2, #0
    403c:	4b09      	ldr	r3, [pc, #36]	; (4064 <vTaskSuspend+0xa0>)
    403e:	62da      	str	r2, [r3, #44]	; 0x2c
    4040:	e00c      	b.n	405c <vTaskSuspend+0x98>
				}
				else
				{
					vTaskSwitchContext();
    4042:	4b11      	ldr	r3, [pc, #68]	; (4088 <vTaskSuspend+0xc4>)
    4044:	4798      	blx	r3
    4046:	e009      	b.n	405c <vTaskSuspend+0x98>
				}
			}
		}
		else
		{
			if( xSchedulerRunning != pdFALSE )
    4048:	4b0d      	ldr	r3, [pc, #52]	; (4080 <vTaskSuspend+0xbc>)
    404a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    404c:	2b00      	cmp	r3, #0
    404e:	d005      	beq.n	405c <vTaskSuspend+0x98>
			{
				/* A task other than the currently running task was suspended,
				reset the next expected unblock time in case it referred to the
				task that is now in the Suspended state. */
				taskENTER_CRITICAL();
    4050:	4b03      	ldr	r3, [pc, #12]	; (4060 <vTaskSuspend+0x9c>)
    4052:	4798      	blx	r3
				{
					prvResetNextTaskUnblockTime();
    4054:	4b0d      	ldr	r3, [pc, #52]	; (408c <vTaskSuspend+0xc8>)
    4056:	4798      	blx	r3
				}
				taskEXIT_CRITICAL();
    4058:	4b08      	ldr	r3, [pc, #32]	; (407c <vTaskSuspend+0xb8>)
    405a:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    405c:	bd70      	pop	{r4, r5, r6, pc}
    405e:	46c0      	nop			; (mov r8, r8)
    4060:	00002bb5 	.word	0x00002bb5
    4064:	20001524 	.word	0x20001524
    4068:	00002319 	.word	0x00002319
    406c:	00001c49 	.word	0x00001c49
    4070:	000022bd 	.word	0x000022bd
    4074:	00002b21 	.word	0x00002b21
    4078:	00002ad9 	.word	0x00002ad9
    407c:	00002bcd 	.word	0x00002bcd
    4080:	200015a4 	.word	0x200015a4
    4084:	00002b9d 	.word	0x00002b9d
    4088:	00003f1d 	.word	0x00003f1d
    408c:	00003795 	.word	0x00003795

00004090 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    4090:	b538      	push	{r3, r4, r5, lr}
    4092:	1c0c      	adds	r4, r1, #0
TickType_t xTimeToWake;

	configASSERT( pxEventList );
    4094:	2800      	cmp	r0, #0
    4096:	d101      	bne.n	409c <vTaskPlaceOnEventList+0xc>
    4098:	b672      	cpsid	i
    409a:	e7fe      	b.n	409a <vTaskPlaceOnEventList+0xa>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    409c:	4d0b      	ldr	r5, [pc, #44]	; (40cc <vTaskPlaceOnEventList+0x3c>)
    409e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    40a0:	3118      	adds	r1, #24
    40a2:	4b0b      	ldr	r3, [pc, #44]	; (40d0 <vTaskPlaceOnEventList+0x40>)
    40a4:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    40a6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    40a8:	3004      	adds	r0, #4
    40aa:	4b0a      	ldr	r3, [pc, #40]	; (40d4 <vTaskPlaceOnEventList+0x44>)
    40ac:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    40ae:	1c63      	adds	r3, r4, #1
    40b0:	d105      	bne.n	40be <vTaskPlaceOnEventList+0x2e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    40b2:	4806      	ldr	r0, [pc, #24]	; (40cc <vTaskPlaceOnEventList+0x3c>)
    40b4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    40b6:	3104      	adds	r1, #4
    40b8:	4b07      	ldr	r3, [pc, #28]	; (40d8 <vTaskPlaceOnEventList+0x48>)
    40ba:	4798      	blx	r3
    40bc:	e004      	b.n	40c8 <vTaskPlaceOnEventList+0x38>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    40be:	4b03      	ldr	r3, [pc, #12]	; (40cc <vTaskPlaceOnEventList+0x3c>)
    40c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
    40c2:	1820      	adds	r0, r4, r0
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    40c4:	4b05      	ldr	r3, [pc, #20]	; (40dc <vTaskPlaceOnEventList+0x4c>)
    40c6:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    40c8:	bd38      	pop	{r3, r4, r5, pc}
    40ca:	46c0      	nop			; (mov r8, r8)
    40cc:	20001524 	.word	0x20001524
    40d0:	00002af1 	.word	0x00002af1
    40d4:	00002b21 	.word	0x00002b21
    40d8:	00002ad9 	.word	0x00002ad9
    40dc:	000037c1 	.word	0x000037c1

000040e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
    40e0:	b570      	push	{r4, r5, r6, lr}
    40e2:	1c0d      	adds	r5, r1, #0
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
    40e4:	2800      	cmp	r0, #0
    40e6:	d101      	bne.n	40ec <vTaskPlaceOnEventListRestricted+0xc>
    40e8:	b672      	cpsid	i
    40ea:	e7fe      	b.n	40ea <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    40ec:	4c0d      	ldr	r4, [pc, #52]	; (4124 <vTaskPlaceOnEventListRestricted+0x44>)
    40ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    40f0:	3118      	adds	r1, #24
    40f2:	4b0d      	ldr	r3, [pc, #52]	; (4128 <vTaskPlaceOnEventListRestricted+0x48>)
    40f4:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    40f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    40f8:	3004      	adds	r0, #4
    40fa:	4b0c      	ldr	r3, [pc, #48]	; (412c <vTaskPlaceOnEventListRestricted+0x4c>)
    40fc:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
    40fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4100:	18ed      	adds	r5, r5, r3

		traceTASK_DELAY_UNTIL();
    4102:	2088      	movs	r0, #136	; 0x88
    4104:	1c29      	adds	r1, r5, #0
    4106:	4b0a      	ldr	r3, [pc, #40]	; (4130 <vTaskPlaceOnEventListRestricted+0x50>)
    4108:	4798      	blx	r3
    410a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    410c:	4e09      	ldr	r6, [pc, #36]	; (4134 <vTaskPlaceOnEventListRestricted+0x54>)
    410e:	47b0      	blx	r6
    4110:	4c09      	ldr	r4, [pc, #36]	; (4138 <vTaskPlaceOnEventListRestricted+0x58>)
    4112:	47a0      	blx	r4
    4114:	4b09      	ldr	r3, [pc, #36]	; (413c <vTaskPlaceOnEventListRestricted+0x5c>)
    4116:	4798      	blx	r3
    4118:	47b0      	blx	r6
    411a:	47a0      	blx	r4
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    411c:	1c28      	adds	r0, r5, #0
    411e:	4b08      	ldr	r3, [pc, #32]	; (4140 <vTaskPlaceOnEventListRestricted+0x60>)
    4120:	4798      	blx	r3
	}
    4122:	bd70      	pop	{r4, r5, r6, pc}
    4124:	20001524 	.word	0x20001524
    4128:	00002ad9 	.word	0x00002ad9
    412c:	00002b21 	.word	0x00002b21
    4130:	00001e81 	.word	0x00001e81
    4134:	00002319 	.word	0x00002319
    4138:	000022bd 	.word	0x000022bd
    413c:	00002329 	.word	0x00002329
    4140:	000037c1 	.word	0x000037c1

00004144 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    4144:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    4146:	68c3      	ldr	r3, [r0, #12]
    4148:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    414a:	2c00      	cmp	r4, #0
    414c:	d101      	bne.n	4152 <xTaskRemoveFromEventList+0xe>
    414e:	b672      	cpsid	i
    4150:	e7fe      	b.n	4150 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    4152:	1c25      	adds	r5, r4, #0
    4154:	3518      	adds	r5, #24
    4156:	1c28      	adds	r0, r5, #0
    4158:	4b18      	ldr	r3, [pc, #96]	; (41bc <xTaskRemoveFromEventList+0x78>)
    415a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    415c:	4b18      	ldr	r3, [pc, #96]	; (41c0 <xTaskRemoveFromEventList+0x7c>)
    415e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    4160:	2b00      	cmp	r3, #0
    4162:	d119      	bne.n	4198 <xTaskRemoveFromEventList+0x54>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    4164:	1d25      	adds	r5, r4, #4
    4166:	1c28      	adds	r0, r5, #0
    4168:	4b14      	ldr	r3, [pc, #80]	; (41bc <xTaskRemoveFromEventList+0x78>)
    416a:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    416c:	1c20      	adds	r0, r4, #0
    416e:	4b15      	ldr	r3, [pc, #84]	; (41c4 <xTaskRemoveFromEventList+0x80>)
    4170:	4798      	blx	r3
    4172:	4b15      	ldr	r3, [pc, #84]	; (41c8 <xTaskRemoveFromEventList+0x84>)
    4174:	4798      	blx	r3
    4176:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4178:	4a11      	ldr	r2, [pc, #68]	; (41c0 <xTaskRemoveFromEventList+0x7c>)
    417a:	6e12      	ldr	r2, [r2, #96]	; 0x60
    417c:	4293      	cmp	r3, r2
    417e:	d901      	bls.n	4184 <xTaskRemoveFromEventList+0x40>
    4180:	4a0f      	ldr	r2, [pc, #60]	; (41c0 <xTaskRemoveFromEventList+0x7c>)
    4182:	6613      	str	r3, [r2, #96]	; 0x60
    4184:	009a      	lsls	r2, r3, #2
    4186:	18d3      	adds	r3, r2, r3
    4188:	009b      	lsls	r3, r3, #2
    418a:	4810      	ldr	r0, [pc, #64]	; (41cc <xTaskRemoveFromEventList+0x88>)
    418c:	303c      	adds	r0, #60	; 0x3c
    418e:	18c0      	adds	r0, r0, r3
    4190:	1c29      	adds	r1, r5, #0
    4192:	4b0f      	ldr	r3, [pc, #60]	; (41d0 <xTaskRemoveFromEventList+0x8c>)
    4194:	4798      	blx	r3
    4196:	e004      	b.n	41a2 <xTaskRemoveFromEventList+0x5e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    4198:	480c      	ldr	r0, [pc, #48]	; (41cc <xTaskRemoveFromEventList+0x88>)
    419a:	3014      	adds	r0, #20
    419c:	1c29      	adds	r1, r5, #0
    419e:	4b0c      	ldr	r3, [pc, #48]	; (41d0 <xTaskRemoveFromEventList+0x8c>)
    41a0:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    41a2:	4b0a      	ldr	r3, [pc, #40]	; (41cc <xTaskRemoveFromEventList+0x88>)
    41a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    41a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    41a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xReturn = pdFALSE;
    41aa:	2000      	movs	r0, #0
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    41ac:	429a      	cmp	r2, r3
    41ae:	d903      	bls.n	41b8 <xTaskRemoveFromEventList+0x74>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    41b0:	2201      	movs	r2, #1
    41b2:	4b03      	ldr	r3, [pc, #12]	; (41c0 <xTaskRemoveFromEventList+0x7c>)
    41b4:	679a      	str	r2, [r3, #120]	; 0x78
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    41b6:	2001      	movs	r0, #1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    41b8:	bd38      	pop	{r3, r4, r5, pc}
    41ba:	46c0      	nop			; (mov r8, r8)
    41bc:	00002b21 	.word	0x00002b21
    41c0:	200015a4 	.word	0x200015a4
    41c4:	00002319 	.word	0x00002319
    41c8:	00001b91 	.word	0x00001b91
    41cc:	20001524 	.word	0x20001524
    41d0:	00002ad9 	.word	0x00002ad9

000041d4 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
    41d4:	2800      	cmp	r0, #0
    41d6:	d101      	bne.n	41dc <vTaskSetTimeOutState+0x8>
    41d8:	b672      	cpsid	i
    41da:	e7fe      	b.n	41da <vTaskSetTimeOutState+0x6>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    41dc:	4b03      	ldr	r3, [pc, #12]	; (41ec <vTaskSetTimeOutState+0x18>)
    41de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    41e0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    41e2:	4b03      	ldr	r3, [pc, #12]	; (41f0 <vTaskSetTimeOutState+0x1c>)
    41e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    41e6:	6043      	str	r3, [r0, #4]
}
    41e8:	4770      	bx	lr
    41ea:	46c0      	nop			; (mov r8, r8)
    41ec:	200015a4 	.word	0x200015a4
    41f0:	20001524 	.word	0x20001524

000041f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    41f4:	b570      	push	{r4, r5, r6, lr}
    41f6:	1c04      	adds	r4, r0, #0
    41f8:	1c0e      	adds	r6, r1, #0
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    41fa:	2800      	cmp	r0, #0
    41fc:	d101      	bne.n	4202 <xTaskCheckForTimeOut+0xe>
    41fe:	b672      	cpsid	i
    4200:	e7fe      	b.n	4200 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
    4202:	2900      	cmp	r1, #0
    4204:	d101      	bne.n	420a <xTaskCheckForTimeOut+0x16>
    4206:	b672      	cpsid	i
    4208:	e7fe      	b.n	4208 <xTaskCheckForTimeOut+0x14>

	taskENTER_CRITICAL();
    420a:	4b11      	ldr	r3, [pc, #68]	; (4250 <xTaskCheckForTimeOut+0x5c>)
    420c:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    420e:	4b11      	ldr	r3, [pc, #68]	; (4254 <xTaskCheckForTimeOut+0x60>)
    4210:	6b1a      	ldr	r2, [r3, #48]	; 0x30

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    4212:	6833      	ldr	r3, [r6, #0]
    4214:	1c58      	adds	r0, r3, #1
    4216:	d015      	beq.n	4244 <xTaskCheckForTimeOut+0x50>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    4218:	490f      	ldr	r1, [pc, #60]	; (4258 <xTaskCheckForTimeOut+0x64>)
    421a:	6f49      	ldr	r1, [r1, #116]	; 0x74
    421c:	6820      	ldr	r0, [r4, #0]
    421e:	4288      	cmp	r0, r1
    4220:	d003      	beq.n	422a <xTaskCheckForTimeOut+0x36>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    4222:	2501      	movs	r5, #1
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    4224:	6861      	ldr	r1, [r4, #4]
    4226:	428a      	cmp	r2, r1
    4228:	d20d      	bcs.n	4246 <xTaskCheckForTimeOut+0x52>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    422a:	6861      	ldr	r1, [r4, #4]
    422c:	1a50      	subs	r0, r2, r1
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    422e:	2501      	movs	r5, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    4230:	4283      	cmp	r3, r0
    4232:	d908      	bls.n	4246 <xTaskCheckForTimeOut+0x52>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    4234:	1a8a      	subs	r2, r1, r2
    4236:	18d3      	adds	r3, r2, r3
    4238:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
    423a:	1c20      	adds	r0, r4, #0
    423c:	4b07      	ldr	r3, [pc, #28]	; (425c <xTaskCheckForTimeOut+0x68>)
    423e:	4798      	blx	r3
			xReturn = pdFALSE;
    4240:	2500      	movs	r5, #0
    4242:	e000      	b.n	4246 <xTaskCheckForTimeOut+0x52>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
    4244:	2500      	movs	r5, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    4246:	4b06      	ldr	r3, [pc, #24]	; (4260 <xTaskCheckForTimeOut+0x6c>)
    4248:	4798      	blx	r3

	return xReturn;
}
    424a:	1c28      	adds	r0, r5, #0
    424c:	bd70      	pop	{r4, r5, r6, pc}
    424e:	46c0      	nop			; (mov r8, r8)
    4250:	00002bb5 	.word	0x00002bb5
    4254:	20001524 	.word	0x20001524
    4258:	200015a4 	.word	0x200015a4
    425c:	000041d5 	.word	0x000041d5
    4260:	00002bcd 	.word	0x00002bcd

00004264 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    4264:	2201      	movs	r2, #1
    4266:	4b01      	ldr	r3, [pc, #4]	; (426c <vTaskMissedYield+0x8>)
    4268:	679a      	str	r2, [r3, #120]	; 0x78
}
    426a:	4770      	bx	lr
    426c:	200015a4 	.word	0x200015a4

00004270 <uxTaskGetTaskNumber>:
	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
    4270:	2800      	cmp	r0, #0
    4272:	d001      	beq.n	4278 <uxTaskGetTaskNumber+0x8>
		{
			pxTCB = ( TCB_t * ) xTask;
			uxReturn = pxTCB->uxTaskNumber;
    4274:	6c00      	ldr	r0, [r0, #64]	; 0x40
    4276:	e000      	b.n	427a <uxTaskGetTaskNumber+0xa>
		}
		else
		{
			uxReturn = 0U;
    4278:	2000      	movs	r0, #0
		}

		return uxReturn;
	}
    427a:	4770      	bx	lr

0000427c <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    427c:	4b01      	ldr	r3, [pc, #4]	; (4284 <xTaskGetCurrentTaskHandle+0x8>)
    427e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c

		return xReturn;
	}
    4280:	4770      	bx	lr
    4282:	46c0      	nop			; (mov r8, r8)
    4284:	20001524 	.word	0x20001524

00004288 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    4288:	4b05      	ldr	r3, [pc, #20]	; (42a0 <xTaskGetSchedulerState+0x18>)
    428a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    428c:	2001      	movs	r0, #1

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    428e:	2b00      	cmp	r3, #0
    4290:	d004      	beq.n	429c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4292:	4b03      	ldr	r3, [pc, #12]	; (42a0 <xTaskGetSchedulerState+0x18>)
    4294:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
			{
				xReturn = taskSCHEDULER_RUNNING;
    4296:	4243      	negs	r3, r0
    4298:	4158      	adcs	r0, r3
    429a:	0040      	lsls	r0, r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
    429c:	4770      	bx	lr
    429e:	46c0      	nop			; (mov r8, r8)
    42a0:	200015a4 	.word	0x200015a4

000042a4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    42a4:	b570      	push	{r4, r5, r6, lr}
    42a6:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    42a8:	d053      	beq.n	4352 <vTaskPriorityInherit+0xae>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    42aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    42ac:	4a29      	ldr	r2, [pc, #164]	; (4354 <vTaskPriorityInherit+0xb0>)
    42ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    42b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    42b2:	4293      	cmp	r3, r2
    42b4:	d24d      	bcs.n	4352 <vTaskPriorityInherit+0xae>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    42b6:	6982      	ldr	r2, [r0, #24]
    42b8:	2a00      	cmp	r2, #0
    42ba:	db05      	blt.n	42c8 <vTaskPriorityInherit+0x24>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    42bc:	4a25      	ldr	r2, [pc, #148]	; (4354 <vTaskPriorityInherit+0xb0>)
    42be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    42c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    42c2:	2105      	movs	r1, #5
    42c4:	1a8a      	subs	r2, r1, r2
    42c6:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    42c8:	009a      	lsls	r2, r3, #2
    42ca:	18d3      	adds	r3, r2, r3
    42cc:	009b      	lsls	r3, r3, #2
    42ce:	4a21      	ldr	r2, [pc, #132]	; (4354 <vTaskPriorityInherit+0xb0>)
    42d0:	323c      	adds	r2, #60	; 0x3c
    42d2:	18d3      	adds	r3, r2, r3
    42d4:	6962      	ldr	r2, [r4, #20]
    42d6:	429a      	cmp	r2, r3
    42d8:	d11d      	bne.n	4316 <vTaskPriorityInherit+0x72>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    42da:	1d25      	adds	r5, r4, #4
    42dc:	1c28      	adds	r0, r5, #0
    42de:	4b1e      	ldr	r3, [pc, #120]	; (4358 <vTaskPriorityInherit+0xb4>)
    42e0:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    42e2:	4b1c      	ldr	r3, [pc, #112]	; (4354 <vTaskPriorityInherit+0xb0>)
    42e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    42e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    42e8:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    42ea:	1c20      	adds	r0, r4, #0
    42ec:	4b1b      	ldr	r3, [pc, #108]	; (435c <vTaskPriorityInherit+0xb8>)
    42ee:	4798      	blx	r3
    42f0:	4b1b      	ldr	r3, [pc, #108]	; (4360 <vTaskPriorityInherit+0xbc>)
    42f2:	4798      	blx	r3
    42f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    42f6:	4a1b      	ldr	r2, [pc, #108]	; (4364 <vTaskPriorityInherit+0xc0>)
    42f8:	6e12      	ldr	r2, [r2, #96]	; 0x60
    42fa:	4293      	cmp	r3, r2
    42fc:	d901      	bls.n	4302 <vTaskPriorityInherit+0x5e>
    42fe:	4a19      	ldr	r2, [pc, #100]	; (4364 <vTaskPriorityInherit+0xc0>)
    4300:	6613      	str	r3, [r2, #96]	; 0x60
    4302:	0098      	lsls	r0, r3, #2
    4304:	18c3      	adds	r3, r0, r3
    4306:	009b      	lsls	r3, r3, #2
    4308:	4812      	ldr	r0, [pc, #72]	; (4354 <vTaskPriorityInherit+0xb0>)
    430a:	303c      	adds	r0, #60	; 0x3c
    430c:	18c0      	adds	r0, r0, r3
    430e:	1c29      	adds	r1, r5, #0
    4310:	4b15      	ldr	r3, [pc, #84]	; (4368 <vTaskPriorityInherit+0xc4>)
    4312:	4798      	blx	r3
    4314:	e003      	b.n	431e <vTaskPriorityInherit+0x7a>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4316:	4b0f      	ldr	r3, [pc, #60]	; (4354 <vTaskPriorityInherit+0xb0>)
    4318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    431c:	62e3      	str	r3, [r4, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
    431e:	1c20      	adds	r0, r4, #0
    4320:	4d0e      	ldr	r5, [pc, #56]	; (435c <vTaskPriorityInherit+0xb8>)
    4322:	47a8      	blx	r5
    4324:	1c06      	adds	r6, r0, #0
    4326:	1c20      	adds	r0, r4, #0
    4328:	47a8      	blx	r5
    432a:	1c01      	adds	r1, r0, #0
    432c:	2003      	movs	r0, #3
    432e:	4b0f      	ldr	r3, [pc, #60]	; (436c <vTaskPriorityInherit+0xc8>)
    4330:	4798      	blx	r3
    4332:	1c03      	adds	r3, r0, #0
    4334:	208e      	movs	r0, #142	; 0x8e
    4336:	2103      	movs	r1, #3
    4338:	1c32      	adds	r2, r6, #0
    433a:	4e0d      	ldr	r6, [pc, #52]	; (4370 <vTaskPriorityInherit+0xcc>)
    433c:	47b0      	blx	r6
    433e:	1c20      	adds	r0, r4, #0
    4340:	47a8      	blx	r5
    4342:	1c01      	adds	r1, r0, #0
    4344:	4b03      	ldr	r3, [pc, #12]	; (4354 <vTaskPriorityInherit+0xb0>)
    4346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    434a:	b2d2      	uxtb	r2, r2
    434c:	2003      	movs	r0, #3
    434e:	4b09      	ldr	r3, [pc, #36]	; (4374 <vTaskPriorityInherit+0xd0>)
    4350:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4352:	bd70      	pop	{r4, r5, r6, pc}
    4354:	20001524 	.word	0x20001524
    4358:	00002b21 	.word	0x00002b21
    435c:	00002319 	.word	0x00002319
    4360:	00001b91 	.word	0x00001b91
    4364:	200015a4 	.word	0x200015a4
    4368:	00002ad9 	.word	0x00002ad9
    436c:	000020dd 	.word	0x000020dd
    4370:	00001d4d 	.word	0x00001d4d
    4374:	00002085 	.word	0x00002085

00004378 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    4378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    437a:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    437c:	d03c      	beq.n	43f8 <vTaskPriorityDisinherit+0x80>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    437e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    4380:	6c43      	ldr	r3, [r0, #68]	; 0x44
    4382:	429a      	cmp	r2, r3
    4384:	d038      	beq.n	43f8 <vTaskPriorityDisinherit+0x80>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    4386:	1d06      	adds	r6, r0, #4
    4388:	1c30      	adds	r0, r6, #0
    438a:	4b1c      	ldr	r3, [pc, #112]	; (43fc <vTaskPriorityDisinherit+0x84>)
    438c:	4798      	blx	r3
					mtCOVERAGE_TEST_MARKER();
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    438e:	1c20      	adds	r0, r4, #0
    4390:	4d1b      	ldr	r5, [pc, #108]	; (4400 <vTaskPriorityDisinherit+0x88>)
    4392:	47a8      	blx	r5
    4394:	1c07      	adds	r7, r0, #0
    4396:	1c20      	adds	r0, r4, #0
    4398:	47a8      	blx	r5
    439a:	1c01      	adds	r1, r0, #0
    439c:	2003      	movs	r0, #3
    439e:	4b19      	ldr	r3, [pc, #100]	; (4404 <vTaskPriorityDisinherit+0x8c>)
    43a0:	4798      	blx	r3
    43a2:	1c03      	adds	r3, r0, #0
    43a4:	208f      	movs	r0, #143	; 0x8f
    43a6:	2103      	movs	r1, #3
    43a8:	1c3a      	adds	r2, r7, #0
    43aa:	4f17      	ldr	r7, [pc, #92]	; (4408 <vTaskPriorityDisinherit+0x90>)
    43ac:	47b8      	blx	r7
    43ae:	1c20      	adds	r0, r4, #0
    43b0:	47a8      	blx	r5
    43b2:	1c01      	adds	r1, r0, #0
    43b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    43b6:	b2da      	uxtb	r2, r3
    43b8:	2003      	movs	r0, #3
    43ba:	4b14      	ldr	r3, [pc, #80]	; (440c <vTaskPriorityDisinherit+0x94>)
    43bc:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    43be:	6c63      	ldr	r3, [r4, #68]	; 0x44
    43c0:	62e3      	str	r3, [r4, #44]	; 0x2c

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    43c2:	69a2      	ldr	r2, [r4, #24]
    43c4:	2a00      	cmp	r2, #0
    43c6:	db02      	blt.n	43ce <vTaskPriorityDisinherit+0x56>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    43c8:	2205      	movs	r2, #5
    43ca:	1ad3      	subs	r3, r2, r3
    43cc:	61a3      	str	r3, [r4, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
    43ce:	1c20      	adds	r0, r4, #0
    43d0:	4b0b      	ldr	r3, [pc, #44]	; (4400 <vTaskPriorityDisinherit+0x88>)
    43d2:	4798      	blx	r3
    43d4:	4b0e      	ldr	r3, [pc, #56]	; (4410 <vTaskPriorityDisinherit+0x98>)
    43d6:	4798      	blx	r3
    43d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    43da:	4a0e      	ldr	r2, [pc, #56]	; (4414 <vTaskPriorityDisinherit+0x9c>)
    43dc:	6e12      	ldr	r2, [r2, #96]	; 0x60
    43de:	4293      	cmp	r3, r2
    43e0:	d901      	bls.n	43e6 <vTaskPriorityDisinherit+0x6e>
    43e2:	4a0c      	ldr	r2, [pc, #48]	; (4414 <vTaskPriorityDisinherit+0x9c>)
    43e4:	6613      	str	r3, [r2, #96]	; 0x60
    43e6:	0098      	lsls	r0, r3, #2
    43e8:	18c3      	adds	r3, r0, r3
    43ea:	009b      	lsls	r3, r3, #2
    43ec:	480a      	ldr	r0, [pc, #40]	; (4418 <vTaskPriorityDisinherit+0xa0>)
    43ee:	303c      	adds	r0, #60	; 0x3c
    43f0:	18c0      	adds	r0, r0, r3
    43f2:	1c31      	adds	r1, r6, #0
    43f4:	4b09      	ldr	r3, [pc, #36]	; (441c <vTaskPriorityDisinherit+0xa4>)
    43f6:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    43f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43fa:	46c0      	nop			; (mov r8, r8)
    43fc:	00002b21 	.word	0x00002b21
    4400:	00002319 	.word	0x00002319
    4404:	000020dd 	.word	0x000020dd
    4408:	00001d4d 	.word	0x00001d4d
    440c:	00002085 	.word	0x00002085
    4410:	00001b91 	.word	0x00001b91
    4414:	200015a4 	.word	0x200015a4
    4418:	20001524 	.word	0x20001524
    441c:	00002ad9 	.word	0x00002ad9

00004420 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    4420:	b510      	push	{r4, lr}
    4422:	1c04      	adds	r4, r0, #0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    4424:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4426:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
    4428:	4291      	cmp	r1, r2
    442a:	d80b      	bhi.n	4444 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    442c:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    442e:	2001      	movs	r0, #1

	if( xNextExpiryTime <= xTimeNow )
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    4430:	69a3      	ldr	r3, [r4, #24]
    4432:	429a      	cmp	r2, r3
    4434:	d211      	bcs.n	445a <prvInsertTimerInActiveList+0x3a>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    4436:	4b09      	ldr	r3, [pc, #36]	; (445c <prvInsertTimerInActiveList+0x3c>)
    4438:	6818      	ldr	r0, [r3, #0]
    443a:	1d21      	adds	r1, r4, #4
    443c:	4b08      	ldr	r3, [pc, #32]	; (4460 <prvInsertTimerInActiveList+0x40>)
    443e:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    4440:	2000      	movs	r0, #0
    4442:	e00a      	b.n	445a <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    4444:	429a      	cmp	r2, r3
    4446:	d202      	bcs.n	444e <prvInsertTimerInActiveList+0x2e>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    4448:	2001      	movs	r0, #1
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    444a:	4299      	cmp	r1, r3
    444c:	d205      	bcs.n	445a <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    444e:	4b03      	ldr	r3, [pc, #12]	; (445c <prvInsertTimerInActiveList+0x3c>)
    4450:	6858      	ldr	r0, [r3, #4]
    4452:	1d21      	adds	r1, r4, #4
    4454:	4b02      	ldr	r3, [pc, #8]	; (4460 <prvInsertTimerInActiveList+0x40>)
    4456:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    4458:	2000      	movs	r0, #0
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
    445a:	bd10      	pop	{r4, pc}
    445c:	20001620 	.word	0x20001620
    4460:	00002af1 	.word	0x00002af1

00004464 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    4464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    4466:	4b10      	ldr	r3, [pc, #64]	; (44a8 <prvCheckForValidListAndQueue+0x44>)
    4468:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    446a:	4b10      	ldr	r3, [pc, #64]	; (44ac <prvCheckForValidListAndQueue+0x48>)
    446c:	689b      	ldr	r3, [r3, #8]
    446e:	2b00      	cmp	r3, #0
    4470:	d117      	bne.n	44a2 <prvCheckForValidListAndQueue+0x3e>
		{
			vListInitialise( &xActiveTimerList1 );
    4472:	4c0e      	ldr	r4, [pc, #56]	; (44ac <prvCheckForValidListAndQueue+0x48>)
    4474:	1c26      	adds	r6, r4, #0
    4476:	360c      	adds	r6, #12
    4478:	1c30      	adds	r0, r6, #0
    447a:	4f0d      	ldr	r7, [pc, #52]	; (44b0 <prvCheckForValidListAndQueue+0x4c>)
    447c:	47b8      	blx	r7
			vListInitialise( &xActiveTimerList2 );
    447e:	1c25      	adds	r5, r4, #0
    4480:	3520      	adds	r5, #32
    4482:	1c28      	adds	r0, r5, #0
    4484:	47b8      	blx	r7
			pxCurrentTimerList = &xActiveTimerList1;
    4486:	6066      	str	r6, [r4, #4]
			pxOverflowTimerList = &xActiveTimerList2;
    4488:	6025      	str	r5, [r4, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    448a:	2002      	movs	r0, #2
    448c:	210c      	movs	r1, #12
    448e:	2200      	movs	r2, #0
    4490:	4b08      	ldr	r3, [pc, #32]	; (44b4 <prvCheckForValidListAndQueue+0x50>)
    4492:	4798      	blx	r3
			configASSERT( xTimerQueue );
    4494:	2800      	cmp	r0, #0
    4496:	d002      	beq.n	449e <prvCheckForValidListAndQueue+0x3a>
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    4498:	4b04      	ldr	r3, [pc, #16]	; (44ac <prvCheckForValidListAndQueue+0x48>)
    449a:	6098      	str	r0, [r3, #8]
    449c:	e001      	b.n	44a2 <prvCheckForValidListAndQueue+0x3e>
			configASSERT( xTimerQueue );
    449e:	b672      	cpsid	i
    44a0:	e7fe      	b.n	44a0 <prvCheckForValidListAndQueue+0x3c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    44a2:	4b05      	ldr	r3, [pc, #20]	; (44b8 <prvCheckForValidListAndQueue+0x54>)
    44a4:	4798      	blx	r3
}
    44a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    44a8:	00002bb5 	.word	0x00002bb5
    44ac:	20001620 	.word	0x20001620
    44b0:	00002ab9 	.word	0x00002ab9
    44b4:	00002fd1 	.word	0x00002fd1
    44b8:	00002bcd 	.word	0x00002bcd

000044bc <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    44bc:	b510      	push	{r4, lr}
    44be:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    44c0:	4b0c      	ldr	r3, [pc, #48]	; (44f4 <xTimerCreateTimerTask+0x38>)
    44c2:	4798      	blx	r3

	if( xTimerQueue != NULL )
    44c4:	4b0c      	ldr	r3, [pc, #48]	; (44f8 <xTimerCreateTimerTask+0x3c>)
    44c6:	689b      	ldr	r3, [r3, #8]
    44c8:	2b00      	cmp	r3, #0
    44ca:	d00e      	beq.n	44ea <xTimerCreateTimerTask+0x2e>
	{
		#if ( INCLUDE_xTimerGetTimerDaemonTaskHandle == 1 )
		{
			/* Create the timer task, storing its handle in xTimerTaskHandle so
			it can be returned by the xTimerGetTimerDaemonTaskHandle() function. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
    44cc:	2303      	movs	r3, #3
    44ce:	9300      	str	r3, [sp, #0]
    44d0:	4b09      	ldr	r3, [pc, #36]	; (44f8 <xTimerCreateTimerTask+0x3c>)
    44d2:	3334      	adds	r3, #52	; 0x34
    44d4:	9301      	str	r3, [sp, #4]
    44d6:	2300      	movs	r3, #0
    44d8:	9302      	str	r3, [sp, #8]
    44da:	9303      	str	r3, [sp, #12]
    44dc:	4807      	ldr	r0, [pc, #28]	; (44fc <xTimerCreateTimerTask+0x40>)
    44de:	4908      	ldr	r1, [pc, #32]	; (4500 <xTimerCreateTimerTask+0x44>)
    44e0:	22aa      	movs	r2, #170	; 0xaa
    44e2:	4c08      	ldr	r4, [pc, #32]	; (4504 <xTimerCreateTimerTask+0x48>)
    44e4:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    44e6:	2800      	cmp	r0, #0
    44e8:	d101      	bne.n	44ee <xTimerCreateTimerTask+0x32>
    44ea:	b672      	cpsid	i
    44ec:	e7fe      	b.n	44ec <xTimerCreateTimerTask+0x30>
	return xReturn;
}
    44ee:	b004      	add	sp, #16
    44f0:	bd10      	pop	{r4, pc}
    44f2:	46c0      	nop			; (mov r8, r8)
    44f4:	00004465 	.word	0x00004465
    44f8:	20001620 	.word	0x20001620
    44fc:	00004741 	.word	0x00004741
    4500:	00006bf4 	.word	0x00006bf4
    4504:	00003805 	.word	0x00003805

00004508 <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    4508:	b5f0      	push	{r4, r5, r6, r7, lr}
    450a:	4647      	mov	r7, r8
    450c:	b480      	push	{r7}
    450e:	4680      	mov	r8, r0
    4510:	1c0d      	adds	r5, r1, #0
    4512:	1c17      	adds	r7, r2, #0
    4514:	1c1e      	adds	r6, r3, #0
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
    4516:	2900      	cmp	r1, #0
    4518:	d02b      	beq.n	4572 <xTimerCreate+0x6a>
	{
		pxNewTimer = NULL;
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    451a:	202c      	movs	r0, #44	; 0x2c
    451c:	4b18      	ldr	r3, [pc, #96]	; (4580 <xTimerCreate+0x78>)
    451e:	4798      	blx	r3
    4520:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
    4522:	d01c      	beq.n	455e <xTimerCreate+0x56>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
    4524:	4b17      	ldr	r3, [pc, #92]	; (4584 <xTimerCreate+0x7c>)
    4526:	4798      	blx	r3

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
    4528:	4643      	mov	r3, r8
    452a:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    452c:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
    452e:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
    4530:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    4532:	9b06      	ldr	r3, [sp, #24]
    4534:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    4536:	1d20      	adds	r0, r4, #4
    4538:	4b13      	ldr	r3, [pc, #76]	; (4588 <xTimerCreate+0x80>)
    453a:	4798      	blx	r3

			traceTIMER_CREATE( pxNewTimer );
    453c:	2005      	movs	r0, #5
    453e:	4b13      	ldr	r3, [pc, #76]	; (458c <xTimerCreate+0x84>)
    4540:	4798      	blx	r3
    4542:	1c01      	adds	r1, r0, #0
    4544:	62a0      	str	r0, [r4, #40]	; 0x28
    4546:	2005      	movs	r0, #5
    4548:	6822      	ldr	r2, [r4, #0]
    454a:	4b11      	ldr	r3, [pc, #68]	; (4590 <xTimerCreate+0x88>)
    454c:	4798      	blx	r3
    454e:	22ff      	movs	r2, #255	; 0xff
    4550:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4552:	401a      	ands	r2, r3
    4554:	20b0      	movs	r0, #176	; 0xb0
    4556:	2105      	movs	r1, #5
    4558:	4b0e      	ldr	r3, [pc, #56]	; (4594 <xTimerCreate+0x8c>)
    455a:	4798      	blx	r3
    455c:	e00b      	b.n	4576 <xTimerCreate+0x6e>
		}
		else
		{
			traceTIMER_CREATE_FAILED();
    455e:	2300      	movs	r3, #0
    4560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4562:	23ff      	movs	r3, #255	; 0xff
    4564:	401a      	ands	r2, r3
    4566:	20b9      	movs	r0, #185	; 0xb9
    4568:	2105      	movs	r1, #5
    456a:	4b0a      	ldr	r3, [pc, #40]	; (4594 <xTimerCreate+0x8c>)
    456c:	4798      	blx	r3
    456e:	e002      	b.n	4576 <xTimerCreate+0x6e>
    4570:	e7fe      	b.n	4570 <xTimerCreate+0x68>
		}
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
    4572:	b672      	cpsid	i
    4574:	e7fc      	b.n	4570 <xTimerCreate+0x68>

	return ( TimerHandle_t ) pxNewTimer;
}
    4576:	1c20      	adds	r0, r4, #0
    4578:	bc04      	pop	{r2}
    457a:	4690      	mov	r8, r2
    457c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    457e:	46c0      	nop			; (mov r8, r8)
    4580:	00002cd9 	.word	0x00002cd9
    4584:	00004465 	.word	0x00004465
    4588:	00002ad1 	.word	0x00002ad1
    458c:	00001405 	.word	0x00001405
    4590:	000015c9 	.word	0x000015c9
    4594:	00001c49 	.word	0x00001c49

00004598 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    4598:	b5f0      	push	{r4, r5, r6, r7, lr}
    459a:	b085      	sub	sp, #20
    459c:	1c06      	adds	r6, r0, #0
    459e:	1c0c      	adds	r4, r1, #0
    45a0:	1c17      	adds	r7, r2, #0
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    45a2:	4931      	ldr	r1, [pc, #196]	; (4668 <xTimerGenericCommand+0xd0>)
    45a4:	6888      	ldr	r0, [r1, #8]
    45a6:	2800      	cmp	r0, #0
    45a8:	d059      	beq.n	465e <xTimerGenericCommand+0xc6>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    45aa:	9401      	str	r4, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    45ac:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    45ae:	9603      	str	r6, [sp, #12]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    45b0:	2c05      	cmp	r4, #5
    45b2:	dc15      	bgt.n	45e0 <xTimerGenericCommand+0x48>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    45b4:	4b2d      	ldr	r3, [pc, #180]	; (466c <xTimerGenericCommand+0xd4>)
    45b6:	4798      	blx	r3
    45b8:	2802      	cmp	r0, #2
    45ba:	d108      	bne.n	45ce <xTimerGenericCommand+0x36>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    45bc:	4b2a      	ldr	r3, [pc, #168]	; (4668 <xTimerGenericCommand+0xd0>)
    45be:	6898      	ldr	r0, [r3, #8]
    45c0:	a901      	add	r1, sp, #4
    45c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    45c4:	2300      	movs	r3, #0
    45c6:	4d2a      	ldr	r5, [pc, #168]	; (4670 <xTimerGenericCommand+0xd8>)
    45c8:	47a8      	blx	r5
    45ca:	1c05      	adds	r5, r0, #0
    45cc:	e00e      	b.n	45ec <xTimerGenericCommand+0x54>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    45ce:	4b26      	ldr	r3, [pc, #152]	; (4668 <xTimerGenericCommand+0xd0>)
    45d0:	6898      	ldr	r0, [r3, #8]
    45d2:	a901      	add	r1, sp, #4
    45d4:	2200      	movs	r2, #0
    45d6:	2300      	movs	r3, #0
    45d8:	4d25      	ldr	r5, [pc, #148]	; (4670 <xTimerGenericCommand+0xd8>)
    45da:	47a8      	blx	r5
    45dc:	1c05      	adds	r5, r0, #0
    45de:	e005      	b.n	45ec <xTimerGenericCommand+0x54>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    45e0:	a901      	add	r1, sp, #4
    45e2:	1c1a      	adds	r2, r3, #0
    45e4:	2300      	movs	r3, #0
    45e6:	4d23      	ldr	r5, [pc, #140]	; (4674 <xTimerGenericCommand+0xdc>)
    45e8:	47a8      	blx	r5
    45ea:	1c05      	adds	r5, r0, #0
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
    45ec:	2c00      	cmp	r4, #0
    45ee:	dd37      	ble.n	4660 <xTimerGenericCommand+0xc8>
    45f0:	2c04      	cmp	r4, #4
    45f2:	d10b      	bne.n	460c <xTimerGenericCommand+0x74>
    45f4:	20bd      	movs	r0, #189	; 0xbd
    45f6:	2d01      	cmp	r5, #1
    45f8:	d100      	bne.n	45fc <xTimerGenericCommand+0x64>
    45fa:	20b4      	movs	r0, #180	; 0xb4
    45fc:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    45fe:	23ff      	movs	r3, #255	; 0xff
    4600:	401a      	ands	r2, r3
    4602:	2105      	movs	r1, #5
    4604:	1c3b      	adds	r3, r7, #0
    4606:	4c1c      	ldr	r4, [pc, #112]	; (4678 <xTimerGenericCommand+0xe0>)
    4608:	47a0      	blx	r4
    460a:	e029      	b.n	4660 <xTimerGenericCommand+0xc8>
    460c:	2c05      	cmp	r4, #5
    460e:	d119      	bne.n	4644 <xTimerGenericCommand+0xac>
    4610:	24b5      	movs	r4, #181	; 0xb5
    4612:	2d01      	cmp	r5, #1
    4614:	d11a      	bne.n	464c <xTimerGenericCommand+0xb4>
    4616:	22ff      	movs	r2, #255	; 0xff
    4618:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    461a:	401a      	ands	r2, r3
    461c:	20b5      	movs	r0, #181	; 0xb5
    461e:	2105      	movs	r1, #5
    4620:	4b16      	ldr	r3, [pc, #88]	; (467c <xTimerGenericCommand+0xe4>)
    4622:	4798      	blx	r3
    4624:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    4626:	b2d8      	uxtb	r0, r3
    4628:	2105      	movs	r1, #5
    462a:	4b15      	ldr	r3, [pc, #84]	; (4680 <xTimerGenericCommand+0xe8>)
    462c:	4798      	blx	r3
    462e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    4630:	b2d8      	uxtb	r0, r3
    4632:	2105      	movs	r1, #5
    4634:	4b13      	ldr	r3, [pc, #76]	; (4684 <xTimerGenericCommand+0xec>)
    4636:	4798      	blx	r3
    4638:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    463a:	b2c9      	uxtb	r1, r1
    463c:	2005      	movs	r0, #5
    463e:	4b12      	ldr	r3, [pc, #72]	; (4688 <xTimerGenericCommand+0xf0>)
    4640:	4798      	blx	r3
    4642:	e00d      	b.n	4660 <xTimerGenericCommand+0xc8>
    4644:	34b0      	adds	r4, #176	; 0xb0
    4646:	2300      	movs	r3, #0
    4648:	2d01      	cmp	r5, #1
    464a:	d000      	beq.n	464e <xTimerGenericCommand+0xb6>
    464c:	2309      	movs	r3, #9
    464e:	18e0      	adds	r0, r4, r3
    4650:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    4652:	23ff      	movs	r3, #255	; 0xff
    4654:	401a      	ands	r2, r3
    4656:	2105      	movs	r1, #5
    4658:	4b08      	ldr	r3, [pc, #32]	; (467c <xTimerGenericCommand+0xe4>)
    465a:	4798      	blx	r3
    465c:	e000      	b.n	4660 <xTimerGenericCommand+0xc8>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    465e:	2500      	movs	r5, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    4660:	1c28      	adds	r0, r5, #0
    4662:	b005      	add	sp, #20
    4664:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4666:	46c0      	nop			; (mov r8, r8)
    4668:	20001620 	.word	0x20001620
    466c:	00004289 	.word	0x00004289
    4670:	000030a5 	.word	0x000030a5
    4674:	000032f5 	.word	0x000032f5
    4678:	00001d4d 	.word	0x00001d4d
    467c:	00001c49 	.word	0x00001c49
    4680:	00001f75 	.word	0x00001f75
    4684:	00001fe9 	.word	0x00001fe9
    4688:	00001559 	.word	0x00001559

0000468c <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    468c:	b5f0      	push	{r4, r5, r6, r7, lr}
    468e:	4657      	mov	r7, sl
    4690:	464e      	mov	r6, r9
    4692:	4645      	mov	r5, r8
    4694:	b4e0      	push	{r5, r6, r7}
    4696:	b082      	sub	sp, #8
    4698:	4681      	mov	r9, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    469a:	4b24      	ldr	r3, [pc, #144]	; (472c <prvSampleTimeNow+0xa0>)
    469c:	4798      	blx	r3
    469e:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
    46a0:	4b23      	ldr	r3, [pc, #140]	; (4730 <prvSampleTimeNow+0xa4>)
    46a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    46a4:	4298      	cmp	r0, r3
    46a6:	d233      	bcs.n	4710 <prvSampleTimeNow+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    46a8:	4e21      	ldr	r6, [pc, #132]	; (4730 <prvSampleTimeNow+0xa4>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    46aa:	4f22      	ldr	r7, [pc, #136]	; (4734 <prvSampleTimeNow+0xa8>)
    46ac:	e024      	b.n	46f8 <prvSampleTimeNow+0x6c>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    46ae:	68db      	ldr	r3, [r3, #12]
    46b0:	6819      	ldr	r1, [r3, #0]
    46b2:	468a      	mov	sl, r1

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    46b4:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    46b6:	1d25      	adds	r5, r4, #4
    46b8:	1c28      	adds	r0, r5, #0
    46ba:	47b8      	blx	r7
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    46bc:	1c20      	adds	r0, r4, #0
    46be:	6a62      	ldr	r2, [r4, #36]	; 0x24
    46c0:	4790      	blx	r2

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    46c2:	69e3      	ldr	r3, [r4, #28]
    46c4:	2b01      	cmp	r3, #1
    46c6:	d117      	bne.n	46f8 <prvSampleTimeNow+0x6c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    46c8:	69a1      	ldr	r1, [r4, #24]
    46ca:	1c0b      	adds	r3, r1, #0
    46cc:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
    46ce:	4553      	cmp	r3, sl
    46d0:	d907      	bls.n	46e2 <prvSampleTimeNow+0x56>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    46d2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    46d4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    46d6:	4b16      	ldr	r3, [pc, #88]	; (4730 <prvSampleTimeNow+0xa4>)
    46d8:	6858      	ldr	r0, [r3, #4]
    46da:	1c29      	adds	r1, r5, #0
    46dc:	4b16      	ldr	r3, [pc, #88]	; (4738 <prvSampleTimeNow+0xac>)
    46de:	4798      	blx	r3
    46e0:	e00a      	b.n	46f8 <prvSampleTimeNow+0x6c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    46e2:	2300      	movs	r3, #0
    46e4:	9300      	str	r3, [sp, #0]
    46e6:	1c20      	adds	r0, r4, #0
    46e8:	2100      	movs	r1, #0
    46ea:	4652      	mov	r2, sl
    46ec:	4c13      	ldr	r4, [pc, #76]	; (473c <prvSampleTimeNow+0xb0>)
    46ee:	47a0      	blx	r4
				configASSERT( xResult );
    46f0:	2800      	cmp	r0, #0
    46f2:	d101      	bne.n	46f8 <prvSampleTimeNow+0x6c>
    46f4:	b672      	cpsid	i
    46f6:	e7fe      	b.n	46f6 <prvSampleTimeNow+0x6a>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    46f8:	6873      	ldr	r3, [r6, #4]
    46fa:	6819      	ldr	r1, [r3, #0]
    46fc:	2900      	cmp	r1, #0
    46fe:	d1d6      	bne.n	46ae <prvSampleTimeNow+0x22>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    4700:	4a0b      	ldr	r2, [pc, #44]	; (4730 <prvSampleTimeNow+0xa4>)
    4702:	6814      	ldr	r4, [r2, #0]
    4704:	6054      	str	r4, [r2, #4]
	pxOverflowTimerList = pxTemp;
    4706:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
    4708:	2301      	movs	r3, #1
    470a:	4649      	mov	r1, r9
    470c:	600b      	str	r3, [r1, #0]
    470e:	e002      	b.n	4716 <prvSampleTimeNow+0x8a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    4710:	2300      	movs	r3, #0
    4712:	464a      	mov	r2, r9
    4714:	6013      	str	r3, [r2, #0]
	}

	xLastTime = xTimeNow;
    4716:	4b06      	ldr	r3, [pc, #24]	; (4730 <prvSampleTimeNow+0xa4>)
    4718:	4644      	mov	r4, r8
    471a:	639c      	str	r4, [r3, #56]	; 0x38

	return xTimeNow;
}
    471c:	4640      	mov	r0, r8
    471e:	b002      	add	sp, #8
    4720:	bc1c      	pop	{r2, r3, r4}
    4722:	4690      	mov	r8, r2
    4724:	4699      	mov	r9, r3
    4726:	46a2      	mov	sl, r4
    4728:	bdf0      	pop	{r4, r5, r6, r7, pc}
    472a:	46c0      	nop			; (mov r8, r8)
    472c:	00003c19 	.word	0x00003c19
    4730:	20001620 	.word	0x20001620
    4734:	00002b21 	.word	0x00002b21
    4738:	00002af1 	.word	0x00002af1
    473c:	00004599 	.word	0x00004599

00004740 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    4740:	b5f0      	push	{r4, r5, r6, r7, lr}
    4742:	4647      	mov	r7, r8
    4744:	b480      	push	{r7}
    4746:	b086      	sub	sp, #24
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    4748:	484e      	ldr	r0, [pc, #312]	; (4884 <prvTimerTask+0x144>)
    474a:	4680      	mov	r8, r0
    474c:	4641      	mov	r1, r8
    474e:	684b      	ldr	r3, [r1, #4]
	if( *pxListWasEmpty == pdFALSE )
    4750:	681a      	ldr	r2, [r3, #0]
    4752:	2a00      	cmp	r2, #0
    4754:	d100      	bne.n	4758 <prvTimerTask+0x18>
    4756:	e08a      	b.n	486e <prvTimerTask+0x12e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4758:	68db      	ldr	r3, [r3, #12]
    475a:	681c      	ldr	r4, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    475c:	4b4a      	ldr	r3, [pc, #296]	; (4888 <prvTimerTask+0x148>)
    475e:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4760:	a803      	add	r0, sp, #12
    4762:	4b4a      	ldr	r3, [pc, #296]	; (488c <prvTimerTask+0x14c>)
    4764:	4798      	blx	r3
    4766:	1c05      	adds	r5, r0, #0
		if( xTimerListsWereSwitched == pdFALSE )
    4768:	9b03      	ldr	r3, [sp, #12]
    476a:	2b00      	cmp	r3, #0
    476c:	d131      	bne.n	47d2 <prvTimerTask+0x92>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    476e:	4284      	cmp	r4, r0
    4770:	d823      	bhi.n	47ba <prvTimerTask+0x7a>
			{
				( void ) xTaskResumeAll();
    4772:	4b47      	ldr	r3, [pc, #284]	; (4890 <prvTimerTask+0x150>)
    4774:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    4776:	4b43      	ldr	r3, [pc, #268]	; (4884 <prvTimerTask+0x144>)
    4778:	685b      	ldr	r3, [r3, #4]
    477a:	68db      	ldr	r3, [r3, #12]
    477c:	68de      	ldr	r6, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    477e:	1d30      	adds	r0, r6, #4
    4780:	4b44      	ldr	r3, [pc, #272]	; (4894 <prvTimerTask+0x154>)
    4782:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4784:	69f7      	ldr	r7, [r6, #28]
    4786:	2f01      	cmp	r7, #1
    4788:	d113      	bne.n	47b2 <prvTimerTask+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    478a:	69b0      	ldr	r0, [r6, #24]
    478c:	1821      	adds	r1, r4, r0
    478e:	1c30      	adds	r0, r6, #0
    4790:	1c2a      	adds	r2, r5, #0
    4792:	1c23      	adds	r3, r4, #0
    4794:	4d40      	ldr	r5, [pc, #256]	; (4898 <prvTimerTask+0x158>)
    4796:	47a8      	blx	r5
    4798:	2801      	cmp	r0, #1
    479a:	d10a      	bne.n	47b2 <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    479c:	2300      	movs	r3, #0
    479e:	9300      	str	r3, [sp, #0]
    47a0:	1c30      	adds	r0, r6, #0
    47a2:	2100      	movs	r1, #0
    47a4:	1c22      	adds	r2, r4, #0
    47a6:	4c3d      	ldr	r4, [pc, #244]	; (489c <prvTimerTask+0x15c>)
    47a8:	47a0      	blx	r4
			configASSERT( xResult );
    47aa:	2800      	cmp	r0, #0
    47ac:	d101      	bne.n	47b2 <prvTimerTask+0x72>
    47ae:	b672      	cpsid	i
    47b0:	e7fe      	b.n	47b0 <prvTimerTask+0x70>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    47b2:	6a73      	ldr	r3, [r6, #36]	; 0x24
    47b4:	1c30      	adds	r0, r6, #0
    47b6:	4798      	blx	r3
    47b8:	e00d      	b.n	47d6 <prvTimerTask+0x96>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    47ba:	4b32      	ldr	r3, [pc, #200]	; (4884 <prvTimerTask+0x144>)
    47bc:	6898      	ldr	r0, [r3, #8]
    47be:	1b61      	subs	r1, r4, r5
    47c0:	4b37      	ldr	r3, [pc, #220]	; (48a0 <prvTimerTask+0x160>)
    47c2:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    47c4:	4b32      	ldr	r3, [pc, #200]	; (4890 <prvTimerTask+0x150>)
    47c6:	4798      	blx	r3
    47c8:	2800      	cmp	r0, #0
    47ca:	d104      	bne.n	47d6 <prvTimerTask+0x96>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
    47cc:	4b35      	ldr	r3, [pc, #212]	; (48a4 <prvTimerTask+0x164>)
    47ce:	4798      	blx	r3
    47d0:	e001      	b.n	47d6 <prvTimerTask+0x96>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    47d2:	4b2f      	ldr	r3, [pc, #188]	; (4890 <prvTimerTask+0x150>)
    47d4:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    47d6:	4d2b      	ldr	r5, [pc, #172]	; (4884 <prvTimerTask+0x144>)
    47d8:	4c33      	ldr	r4, [pc, #204]	; (48a8 <prvTimerTask+0x168>)
    47da:	e040      	b.n	485e <prvTimerTask+0x11e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    47dc:	9903      	ldr	r1, [sp, #12]
    47de:	2900      	cmp	r1, #0
    47e0:	db3d      	blt.n	485e <prvTimerTask+0x11e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    47e2:	9e05      	ldr	r6, [sp, #20]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    47e4:	6972      	ldr	r2, [r6, #20]
    47e6:	2a00      	cmp	r2, #0
    47e8:	d002      	beq.n	47f0 <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    47ea:	1d30      	adds	r0, r6, #4
    47ec:	4b29      	ldr	r3, [pc, #164]	; (4894 <prvTimerTask+0x154>)
    47ee:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    47f0:	a802      	add	r0, sp, #8
    47f2:	4b26      	ldr	r3, [pc, #152]	; (488c <prvTimerTask+0x14c>)
    47f4:	4798      	blx	r3
    47f6:	1c03      	adds	r3, r0, #0

			switch( xMessage.xMessageID )
    47f8:	9f03      	ldr	r7, [sp, #12]
    47fa:	2f09      	cmp	r7, #9
    47fc:	d82f      	bhi.n	485e <prvTimerTask+0x11e>
    47fe:	00ba      	lsls	r2, r7, #2
    4800:	492a      	ldr	r1, [pc, #168]	; (48ac <prvTimerTask+0x16c>)
    4802:	588a      	ldr	r2, [r1, r2]
    4804:	4697      	mov	pc, r2
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    4806:	9f04      	ldr	r7, [sp, #16]
    4808:	69b2      	ldr	r2, [r6, #24]
    480a:	18b9      	adds	r1, r7, r2
    480c:	1c30      	adds	r0, r6, #0
    480e:	1c1a      	adds	r2, r3, #0
    4810:	1c3b      	adds	r3, r7, #0
    4812:	4f21      	ldr	r7, [pc, #132]	; (4898 <prvTimerTask+0x158>)
    4814:	47b8      	blx	r7
    4816:	2801      	cmp	r0, #1
    4818:	d121      	bne.n	485e <prvTimerTask+0x11e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    481a:	1c30      	adds	r0, r6, #0
    481c:	6a71      	ldr	r1, [r6, #36]	; 0x24
    481e:	4788      	blx	r1
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4820:	69f2      	ldr	r2, [r6, #28]
    4822:	2a01      	cmp	r2, #1
    4824:	d11b      	bne.n	485e <prvTimerTask+0x11e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    4826:	69b3      	ldr	r3, [r6, #24]
    4828:	9f04      	ldr	r7, [sp, #16]
    482a:	19da      	adds	r2, r3, r7
    482c:	2300      	movs	r3, #0
    482e:	9300      	str	r3, [sp, #0]
    4830:	1c30      	adds	r0, r6, #0
    4832:	2100      	movs	r1, #0
    4834:	4e19      	ldr	r6, [pc, #100]	; (489c <prvTimerTask+0x15c>)
    4836:	47b0      	blx	r6
							configASSERT( xResult );
    4838:	2800      	cmp	r0, #0
    483a:	d110      	bne.n	485e <prvTimerTask+0x11e>
    483c:	b672      	cpsid	i
    483e:	e7fe      	b.n	483e <prvTimerTask+0xfe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    4840:	9904      	ldr	r1, [sp, #16]
    4842:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    4844:	2900      	cmp	r1, #0
    4846:	d101      	bne.n	484c <prvTimerTask+0x10c>
    4848:	b672      	cpsid	i
    484a:	e7fe      	b.n	484a <prvTimerTask+0x10a>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    484c:	1859      	adds	r1, r3, r1
    484e:	1c30      	adds	r0, r6, #0
    4850:	1c1a      	adds	r2, r3, #0
    4852:	4e11      	ldr	r6, [pc, #68]	; (4898 <prvTimerTask+0x158>)
    4854:	47b0      	blx	r6
    4856:	e002      	b.n	485e <prvTimerTask+0x11e>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    4858:	1c30      	adds	r0, r6, #0
    485a:	4b15      	ldr	r3, [pc, #84]	; (48b0 <prvTimerTask+0x170>)
    485c:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    485e:	68a8      	ldr	r0, [r5, #8]
    4860:	a903      	add	r1, sp, #12
    4862:	2200      	movs	r2, #0
    4864:	2300      	movs	r3, #0
    4866:	47a0      	blx	r4
    4868:	2800      	cmp	r0, #0
    486a:	d1b7      	bne.n	47dc <prvTimerTask+0x9c>
    486c:	e76e      	b.n	474c <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    486e:	4806      	ldr	r0, [pc, #24]	; (4888 <prvTimerTask+0x148>)
    4870:	4780      	blx	r0
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4872:	a803      	add	r0, sp, #12
    4874:	4905      	ldr	r1, [pc, #20]	; (488c <prvTimerTask+0x14c>)
    4876:	4788      	blx	r1
    4878:	1c05      	adds	r5, r0, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    487a:	2400      	movs	r4, #0
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
    487c:	9a03      	ldr	r2, [sp, #12]
    487e:	42a2      	cmp	r2, r4
    4880:	d09b      	beq.n	47ba <prvTimerTask+0x7a>
    4882:	e7a6      	b.n	47d2 <prvTimerTask+0x92>
    4884:	20001620 	.word	0x20001620
    4888:	00003c09 	.word	0x00003c09
    488c:	0000468d 	.word	0x0000468d
    4890:	00003da5 	.word	0x00003da5
    4894:	00002b21 	.word	0x00002b21
    4898:	00004421 	.word	0x00004421
    489c:	00004599 	.word	0x00004599
    48a0:	0000371d 	.word	0x0000371d
    48a4:	00002b9d 	.word	0x00002b9d
    48a8:	00003451 	.word	0x00003451
    48ac:	00006bcc 	.word	0x00006bcc
    48b0:	00002d3d 	.word	0x00002d3d

000048b4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    48b4:	e7fe      	b.n	48b4 <Dummy_Handler>
    48b6:	46c0      	nop			; (mov r8, r8)

000048b8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    48b8:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    48ba:	4b2c      	ldr	r3, [pc, #176]	; (496c <Reset_Handler+0xb4>)
    48bc:	4a2c      	ldr	r2, [pc, #176]	; (4970 <Reset_Handler+0xb8>)
    48be:	429a      	cmp	r2, r3
    48c0:	d003      	beq.n	48ca <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    48c2:	4b2c      	ldr	r3, [pc, #176]	; (4974 <Reset_Handler+0xbc>)
    48c4:	4a29      	ldr	r2, [pc, #164]	; (496c <Reset_Handler+0xb4>)
    48c6:	429a      	cmp	r2, r3
    48c8:	d304      	bcc.n	48d4 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    48ca:	4b2b      	ldr	r3, [pc, #172]	; (4978 <Reset_Handler+0xc0>)
    48cc:	4a2b      	ldr	r2, [pc, #172]	; (497c <Reset_Handler+0xc4>)
    48ce:	429a      	cmp	r2, r3
    48d0:	d310      	bcc.n	48f4 <Reset_Handler+0x3c>
    48d2:	e01b      	b.n	490c <Reset_Handler+0x54>
    48d4:	4b2a      	ldr	r3, [pc, #168]	; (4980 <Reset_Handler+0xc8>)
    48d6:	4827      	ldr	r0, [pc, #156]	; (4974 <Reset_Handler+0xbc>)
    48d8:	3003      	adds	r0, #3
    48da:	1ac0      	subs	r0, r0, r3
    48dc:	0880      	lsrs	r0, r0, #2
    48de:	3001      	adds	r0, #1
    48e0:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    48e2:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    48e4:	4921      	ldr	r1, [pc, #132]	; (496c <Reset_Handler+0xb4>)
    48e6:	4a22      	ldr	r2, [pc, #136]	; (4970 <Reset_Handler+0xb8>)
    48e8:	58d4      	ldr	r4, [r2, r3]
    48ea:	50cc      	str	r4, [r1, r3]
    48ec:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    48ee:	4283      	cmp	r3, r0
    48f0:	d1fa      	bne.n	48e8 <Reset_Handler+0x30>
    48f2:	e7ea      	b.n	48ca <Reset_Handler+0x12>
    48f4:	4b21      	ldr	r3, [pc, #132]	; (497c <Reset_Handler+0xc4>)
    48f6:	1d1a      	adds	r2, r3, #4
    48f8:	491f      	ldr	r1, [pc, #124]	; (4978 <Reset_Handler+0xc0>)
    48fa:	3103      	adds	r1, #3
    48fc:	1a89      	subs	r1, r1, r2
    48fe:	0889      	lsrs	r1, r1, #2
    4900:	0089      	lsls	r1, r1, #2
    4902:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    4904:	2100      	movs	r1, #0
    4906:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4908:	4293      	cmp	r3, r2
    490a:	d1fc      	bne.n	4906 <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    490c:	4b1d      	ldr	r3, [pc, #116]	; (4984 <Reset_Handler+0xcc>)
    490e:	21ff      	movs	r1, #255	; 0xff
    4910:	4a1d      	ldr	r2, [pc, #116]	; (4988 <Reset_Handler+0xd0>)
    4912:	438a      	bics	r2, r1
    4914:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4916:	2102      	movs	r1, #2
    4918:	2390      	movs	r3, #144	; 0x90
    491a:	005b      	lsls	r3, r3, #1
    491c:	4a1b      	ldr	r2, [pc, #108]	; (498c <Reset_Handler+0xd4>)
    491e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4920:	4b1b      	ldr	r3, [pc, #108]	; (4990 <Reset_Handler+0xd8>)
    4922:	78d8      	ldrb	r0, [r3, #3]
    4924:	2103      	movs	r1, #3
    4926:	4388      	bics	r0, r1
    4928:	2202      	movs	r2, #2
    492a:	4310      	orrs	r0, r2
    492c:	70d8      	strb	r0, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    492e:	78dd      	ldrb	r5, [r3, #3]
    4930:	240c      	movs	r4, #12
    4932:	43a5      	bics	r5, r4
    4934:	2008      	movs	r0, #8
    4936:	4305      	orrs	r5, r0
    4938:	70dd      	strb	r5, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    493a:	4b16      	ldr	r3, [pc, #88]	; (4994 <Reset_Handler+0xdc>)
    493c:	7b9e      	ldrb	r6, [r3, #14]
    493e:	2530      	movs	r5, #48	; 0x30
    4940:	43ae      	bics	r6, r5
    4942:	2520      	movs	r5, #32
    4944:	4335      	orrs	r5, r6
    4946:	739d      	strb	r5, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    4948:	7b9d      	ldrb	r5, [r3, #14]
    494a:	43a5      	bics	r5, r4
    494c:	4328      	orrs	r0, r5
    494e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4950:	7b98      	ldrb	r0, [r3, #14]
    4952:	4388      	bics	r0, r1
    4954:	4302      	orrs	r2, r0
    4956:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    4958:	4b0f      	ldr	r3, [pc, #60]	; (4998 <Reset_Handler+0xe0>)
    495a:	6859      	ldr	r1, [r3, #4]
    495c:	2280      	movs	r2, #128	; 0x80
    495e:	430a      	orrs	r2, r1
    4960:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    4962:	4b0e      	ldr	r3, [pc, #56]	; (499c <Reset_Handler+0xe4>)
    4964:	4798      	blx	r3

        /* Branch to main function */
        main();
    4966:	4b0e      	ldr	r3, [pc, #56]	; (49a0 <Reset_Handler+0xe8>)
    4968:	4798      	blx	r3
    496a:	e7fe      	b.n	496a <Reset_Handler+0xb2>
    496c:	20000000 	.word	0x20000000
    4970:	00006cb8 	.word	0x00006cb8
    4974:	20000448 	.word	0x20000448
    4978:	20002efc 	.word	0x20002efc
    497c:	20000448 	.word	0x20000448
    4980:	20000004 	.word	0x20000004
    4984:	e000ed00 	.word	0xe000ed00
    4988:	00000000 	.word	0x00000000
    498c:	41007000 	.word	0x41007000
    4990:	41005000 	.word	0x41005000
    4994:	41004800 	.word	0x41004800
    4998:	41004000 	.word	0x41004000
    499c:	00005475 	.word	0x00005475
    49a0:	000002f5 	.word	0x000002f5

000049a4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    49a4:	b508      	push	{r3, lr}
	switch (clock_source) {
    49a6:	2808      	cmp	r0, #8
    49a8:	d834      	bhi.n	4a14 <system_clock_source_get_hz+0x70>
    49aa:	0080      	lsls	r0, r0, #2
    49ac:	4b1b      	ldr	r3, [pc, #108]	; (4a1c <system_clock_source_get_hz+0x78>)
    49ae:	581b      	ldr	r3, [r3, r0]
    49b0:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    49b2:	2080      	movs	r0, #128	; 0x80
    49b4:	0200      	lsls	r0, r0, #8
    49b6:	e030      	b.n	4a1a <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    49b8:	4b19      	ldr	r3, [pc, #100]	; (4a20 <system_clock_source_get_hz+0x7c>)
    49ba:	6918      	ldr	r0, [r3, #16]
    49bc:	e02d      	b.n	4a1a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    49be:	4b19      	ldr	r3, [pc, #100]	; (4a24 <system_clock_source_get_hz+0x80>)
    49c0:	6a18      	ldr	r0, [r3, #32]
    49c2:	0580      	lsls	r0, r0, #22
    49c4:	0f80      	lsrs	r0, r0, #30
    49c6:	4b18      	ldr	r3, [pc, #96]	; (4a28 <system_clock_source_get_hz+0x84>)
    49c8:	40c3      	lsrs	r3, r0
    49ca:	1c18      	adds	r0, r3, #0
    49cc:	e025      	b.n	4a1a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    49ce:	4b14      	ldr	r3, [pc, #80]	; (4a20 <system_clock_source_get_hz+0x7c>)
    49d0:	6958      	ldr	r0, [r3, #20]
    49d2:	e022      	b.n	4a1a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    49d4:	4b12      	ldr	r3, [pc, #72]	; (4a20 <system_clock_source_get_hz+0x7c>)
    49d6:	681b      	ldr	r3, [r3, #0]
    49d8:	2002      	movs	r0, #2
    49da:	4018      	ands	r0, r3
    49dc:	d01d      	beq.n	4a1a <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    49de:	4911      	ldr	r1, [pc, #68]	; (4a24 <system_clock_source_get_hz+0x80>)
    49e0:	2210      	movs	r2, #16
    49e2:	68cb      	ldr	r3, [r1, #12]
    49e4:	421a      	tst	r2, r3
    49e6:	d0fc      	beq.n	49e2 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    49e8:	4b0d      	ldr	r3, [pc, #52]	; (4a20 <system_clock_source_get_hz+0x7c>)
    49ea:	681b      	ldr	r3, [r3, #0]
    49ec:	075a      	lsls	r2, r3, #29
    49ee:	d513      	bpl.n	4a18 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    49f0:	2000      	movs	r0, #0
    49f2:	4b0e      	ldr	r3, [pc, #56]	; (4a2c <system_clock_source_get_hz+0x88>)
    49f4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    49f6:	4b0a      	ldr	r3, [pc, #40]	; (4a20 <system_clock_source_get_hz+0x7c>)
    49f8:	689b      	ldr	r3, [r3, #8]
    49fa:	041b      	lsls	r3, r3, #16
    49fc:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    49fe:	4358      	muls	r0, r3
    4a00:	e00b      	b.n	4a1a <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4a02:	2350      	movs	r3, #80	; 0x50
    4a04:	4a07      	ldr	r2, [pc, #28]	; (4a24 <system_clock_source_get_hz+0x80>)
    4a06:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    4a08:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4a0a:	075a      	lsls	r2, r3, #29
    4a0c:	d505      	bpl.n	4a1a <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    4a0e:	4b04      	ldr	r3, [pc, #16]	; (4a20 <system_clock_source_get_hz+0x7c>)
    4a10:	68d8      	ldr	r0, [r3, #12]
    4a12:	e002      	b.n	4a1a <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
    4a14:	2000      	movs	r0, #0
    4a16:	e000      	b.n	4a1a <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    4a18:	4805      	ldr	r0, [pc, #20]	; (4a30 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    4a1a:	bd08      	pop	{r3, pc}
    4a1c:	00006bfc 	.word	0x00006bfc
    4a20:	2000165c 	.word	0x2000165c
    4a24:	40000800 	.word	0x40000800
    4a28:	007a1200 	.word	0x007a1200
    4a2c:	000050d1 	.word	0x000050d1
    4a30:	02dc6c00 	.word	0x02dc6c00

00004a34 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4a34:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4a36:	4b0c      	ldr	r3, [pc, #48]	; (4a68 <system_clock_source_osc8m_set_config+0x34>)
    4a38:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4a3a:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4a3c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    4a3e:	7840      	ldrb	r0, [r0, #1]
    4a40:	2201      	movs	r2, #1
    4a42:	4010      	ands	r0, r2
    4a44:	0180      	lsls	r0, r0, #6
    4a46:	2640      	movs	r6, #64	; 0x40
    4a48:	43b4      	bics	r4, r6
    4a4a:	4304      	orrs	r4, r0
    4a4c:	402a      	ands	r2, r5
    4a4e:	01d0      	lsls	r0, r2, #7
    4a50:	2280      	movs	r2, #128	; 0x80
    4a52:	4394      	bics	r4, r2
    4a54:	1c22      	adds	r2, r4, #0
    4a56:	4302      	orrs	r2, r0
    4a58:	2003      	movs	r0, #3
    4a5a:	4001      	ands	r1, r0
    4a5c:	0209      	lsls	r1, r1, #8
    4a5e:	4803      	ldr	r0, [pc, #12]	; (4a6c <system_clock_source_osc8m_set_config+0x38>)
    4a60:	4002      	ands	r2, r0
    4a62:	430a      	orrs	r2, r1
    4a64:	621a      	str	r2, [r3, #32]
}
    4a66:	bd70      	pop	{r4, r5, r6, pc}
    4a68:	40000800 	.word	0x40000800
    4a6c:	fffffcff 	.word	0xfffffcff

00004a70 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    4a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a72:	465f      	mov	r7, fp
    4a74:	4656      	mov	r6, sl
    4a76:	464d      	mov	r5, r9
    4a78:	4644      	mov	r4, r8
    4a7a:	b4f0      	push	{r4, r5, r6, r7}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    4a7c:	4a25      	ldr	r2, [pc, #148]	; (4b14 <system_clock_source_xosc32k_set_config+0xa4>)
    4a7e:	8a94      	ldrh	r4, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
    4a80:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    4a82:	7803      	ldrb	r3, [r0, #0]
    4a84:	4259      	negs	r1, r3
    4a86:	4159      	adcs	r1, r3
    4a88:	468a      	mov	sl, r1
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    4a8a:	7883      	ldrb	r3, [r0, #2]
    4a8c:	469c      	mov	ip, r3
	temp.bit.EN1K = config->enable_1khz_output;
    4a8e:	78c1      	ldrb	r1, [r0, #3]
    4a90:	4688      	mov	r8, r1
	temp.bit.EN32K = config->enable_32khz_output;
    4a92:	7903      	ldrb	r3, [r0, #4]
    4a94:	4699      	mov	r9, r3

	temp.bit.ONDEMAND = config->on_demand;
    4a96:	7b46      	ldrb	r6, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4a98:	7b07      	ldrb	r7, [r0, #12]
	temp.bit.WRTLOCK  = config->write_once;
    4a9a:	7b81      	ldrb	r1, [r0, #14]
    4a9c:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    4a9e:	6880      	ldr	r0, [r0, #8]
    4aa0:	4b1d      	ldr	r3, [pc, #116]	; (4b18 <system_clock_source_xosc32k_set_config+0xa8>)
    4aa2:	6158      	str	r0, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    4aa4:	2301      	movs	r3, #1
    4aa6:	4651      	mov	r1, sl
    4aa8:	0088      	lsls	r0, r1, #2
    4aaa:	2104      	movs	r1, #4
    4aac:	438c      	bics	r4, r1
    4aae:	4304      	orrs	r4, r0
    4ab0:	4648      	mov	r0, r9
    4ab2:	4018      	ands	r0, r3
    4ab4:	00c0      	lsls	r0, r0, #3
    4ab6:	2108      	movs	r1, #8
    4ab8:	438c      	bics	r4, r1
    4aba:	4304      	orrs	r4, r0
    4abc:	4640      	mov	r0, r8
    4abe:	4018      	ands	r0, r3
    4ac0:	0100      	lsls	r0, r0, #4
    4ac2:	2110      	movs	r1, #16
    4ac4:	438c      	bics	r4, r1
    4ac6:	4304      	orrs	r4, r0
    4ac8:	4660      	mov	r0, ip
    4aca:	4018      	ands	r0, r3
    4acc:	0140      	lsls	r0, r0, #5
    4ace:	2120      	movs	r1, #32
    4ad0:	438c      	bics	r4, r1
    4ad2:	4304      	orrs	r4, r0
    4ad4:	1c18      	adds	r0, r3, #0
    4ad6:	4038      	ands	r0, r7
    4ad8:	0180      	lsls	r0, r0, #6
    4ada:	2740      	movs	r7, #64	; 0x40
    4adc:	43bc      	bics	r4, r7
    4ade:	4304      	orrs	r4, r0
    4ae0:	1c18      	adds	r0, r3, #0
    4ae2:	4030      	ands	r0, r6
    4ae4:	01c0      	lsls	r0, r0, #7
    4ae6:	2680      	movs	r6, #128	; 0x80
    4ae8:	43b4      	bics	r4, r6
    4aea:	4304      	orrs	r4, r0
    4aec:	2007      	movs	r0, #7
    4aee:	4028      	ands	r0, r5
    4af0:	0200      	lsls	r0, r0, #8
    4af2:	4d0a      	ldr	r5, [pc, #40]	; (4b1c <system_clock_source_xosc32k_set_config+0xac>)
    4af4:	402c      	ands	r4, r5
    4af6:	4304      	orrs	r4, r0
    4af8:	4659      	mov	r1, fp
    4afa:	400b      	ands	r3, r1
    4afc:	0319      	lsls	r1, r3, #12
    4afe:	4808      	ldr	r0, [pc, #32]	; (4b20 <system_clock_source_xosc32k_set_config+0xb0>)
    4b00:	1c23      	adds	r3, r4, #0
    4b02:	4003      	ands	r3, r0
    4b04:	430b      	orrs	r3, r1
    4b06:	8293      	strh	r3, [r2, #20]
}
    4b08:	bc3c      	pop	{r2, r3, r4, r5}
    4b0a:	4690      	mov	r8, r2
    4b0c:	4699      	mov	r9, r3
    4b0e:	46a2      	mov	sl, r4
    4b10:	46ab      	mov	fp, r5
    4b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b14:	40000800 	.word	0x40000800
    4b18:	2000165c 	.word	0x2000165c
    4b1c:	fffff8ff 	.word	0xfffff8ff
    4b20:	ffffefff 	.word	0xffffefff

00004b24 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    4b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b26:	1c04      	adds	r4, r0, #0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    4b28:	68c5      	ldr	r5, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    4b2a:	7d03      	ldrb	r3, [r0, #20]
    4b2c:	2b01      	cmp	r3, #1
    4b2e:	d106      	bne.n	4b3e <system_clock_source_dpll_set_config+0x1a>
		refclk = refclk / (2 * (config->reference_divider + 1));
    4b30:	8a01      	ldrh	r1, [r0, #16]
    4b32:	3101      	adds	r1, #1
    4b34:	0049      	lsls	r1, r1, #1
    4b36:	1c28      	adds	r0, r5, #0
    4b38:	4b1e      	ldr	r3, [pc, #120]	; (4bb4 <system_clock_source_dpll_set_config+0x90>)
    4b3a:	4798      	blx	r3
    4b3c:	1c05      	adds	r5, r0, #0
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    4b3e:	68a3      	ldr	r3, [r4, #8]
    4b40:	0118      	lsls	r0, r3, #4
    4b42:	1c29      	adds	r1, r5, #0
    4b44:	4b1b      	ldr	r3, [pc, #108]	; (4bb4 <system_clock_source_dpll_set_config+0x90>)
    4b46:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    4b48:	220f      	movs	r2, #15
    4b4a:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    4b4c:	0900      	lsrs	r0, r0, #4

	SYSCTRL->DPLLCTRLA.reg =
    4b4e:	7866      	ldrb	r6, [r4, #1]
    4b50:	01b6      	lsls	r6, r6, #6
    4b52:	7823      	ldrb	r3, [r4, #0]
    4b54:	01db      	lsls	r3, r3, #7
    4b56:	431e      	orrs	r6, r3
    4b58:	b2f6      	uxtb	r6, r6
    4b5a:	4b17      	ldr	r3, [pc, #92]	; (4bb8 <system_clock_source_dpll_set_config+0x94>)
    4b5c:	2144      	movs	r1, #68	; 0x44
    4b5e:	545e      	strb	r6, [r3, r1]
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    4b60:	0416      	lsls	r6, r2, #16
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
	tmpldrfrac = tmpldr & 0x0f;
	tmpldr = (tmpldr >> 4) - 1;
    4b62:	1e41      	subs	r1, r0, #1
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
    4b64:	0509      	lsls	r1, r1, #20
    4b66:	0d09      	lsrs	r1, r1, #20
	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    4b68:	4331      	orrs	r1, r6

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
    4b6a:	6499      	str	r1, [r3, #72]	; 0x48
	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    4b6c:	78e6      	ldrb	r6, [r4, #3]
    4b6e:	00f6      	lsls	r6, r6, #3
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    4b70:	78a1      	ldrb	r1, [r4, #2]
    4b72:	0309      	lsls	r1, r1, #12
	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    4b74:	4331      	orrs	r1, r6
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    4b76:	7926      	ldrb	r6, [r4, #4]
    4b78:	00b6      	lsls	r6, r6, #2
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    4b7a:	4331      	orrs	r1, r6
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
    4b7c:	7ca6      	ldrb	r6, [r4, #18]
    4b7e:	2703      	movs	r7, #3
    4b80:	403e      	ands	r6, r7
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    4b82:	4331      	orrs	r1, r6
	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    4b84:	8a26      	ldrh	r6, [r4, #16]
    4b86:	0436      	lsls	r6, r6, #16
    4b88:	4f0c      	ldr	r7, [pc, #48]	; (4bbc <system_clock_source_dpll_set_config+0x98>)
    4b8a:	403e      	ands	r6, r7
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    4b8c:	4331      	orrs	r1, r6
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    4b8e:	7ce7      	ldrb	r7, [r4, #19]
    4b90:	023f      	lsls	r7, r7, #8
    4b92:	26e0      	movs	r6, #224	; 0xe0
    4b94:	00f6      	lsls	r6, r6, #3
    4b96:	403e      	ands	r6, r7
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    4b98:	4331      	orrs	r1, r6

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    4b9a:	7d24      	ldrb	r4, [r4, #20]
    4b9c:	0124      	lsls	r4, r4, #4
    4b9e:	2630      	movs	r6, #48	; 0x30
    4ba0:	4034      	ands	r4, r6
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    4ba2:	4321      	orrs	r1, r4

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
    4ba4:	64d9      	str	r1, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
    4ba6:	0100      	lsls	r0, r0, #4
    4ba8:	1812      	adds	r2, r2, r0
    4baa:	4355      	muls	r5, r2
    4bac:	092d      	lsrs	r5, r5, #4
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
    4bae:	4b04      	ldr	r3, [pc, #16]	; (4bc0 <system_clock_source_dpll_set_config+0x9c>)
    4bb0:	60dd      	str	r5, [r3, #12]
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
}
    4bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4bb4:	00005279 	.word	0x00005279
    4bb8:	40000800 	.word	0x40000800
    4bbc:	07ff0000 	.word	0x07ff0000
    4bc0:	2000165c 	.word	0x2000165c

00004bc4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    4bc4:	2808      	cmp	r0, #8
    4bc6:	d849      	bhi.n	4c5c <system_clock_source_enable+0x98>
    4bc8:	0080      	lsls	r0, r0, #2
    4bca:	4b25      	ldr	r3, [pc, #148]	; (4c60 <system_clock_source_enable+0x9c>)
    4bcc:	581b      	ldr	r3, [r3, r0]
    4bce:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4bd0:	2000      	movs	r0, #0
    4bd2:	e044      	b.n	4c5e <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4bd4:	4b23      	ldr	r3, [pc, #140]	; (4c64 <system_clock_source_enable+0xa0>)
    4bd6:	6a19      	ldr	r1, [r3, #32]
    4bd8:	2202      	movs	r2, #2
    4bda:	430a      	orrs	r2, r1
    4bdc:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    4bde:	2000      	movs	r0, #0
    4be0:	e03d      	b.n	4c5e <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    4be2:	4b20      	ldr	r3, [pc, #128]	; (4c64 <system_clock_source_enable+0xa0>)
    4be4:	6999      	ldr	r1, [r3, #24]
    4be6:	2202      	movs	r2, #2
    4be8:	430a      	orrs	r2, r1
    4bea:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4bec:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    4bee:	e036      	b.n	4c5e <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4bf0:	4b1c      	ldr	r3, [pc, #112]	; (4c64 <system_clock_source_enable+0xa0>)
    4bf2:	8a19      	ldrh	r1, [r3, #16]
    4bf4:	2202      	movs	r2, #2
    4bf6:	430a      	orrs	r2, r1
    4bf8:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4bfa:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    4bfc:	e02f      	b.n	4c5e <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    4bfe:	4b19      	ldr	r3, [pc, #100]	; (4c64 <system_clock_source_enable+0xa0>)
    4c00:	8a99      	ldrh	r1, [r3, #20]
    4c02:	2202      	movs	r2, #2
    4c04:	430a      	orrs	r2, r1
    4c06:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4c08:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    4c0a:	e028      	b.n	4c5e <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4c0c:	4a16      	ldr	r2, [pc, #88]	; (4c68 <system_clock_source_enable+0xa4>)
    4c0e:	6811      	ldr	r1, [r2, #0]
    4c10:	2302      	movs	r3, #2
    4c12:	4319      	orrs	r1, r3
    4c14:	6011      	str	r1, [r2, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4c16:	4a13      	ldr	r2, [pc, #76]	; (4c64 <system_clock_source_enable+0xa0>)
    4c18:	8493      	strh	r3, [r2, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4c1a:	1c11      	adds	r1, r2, #0
    4c1c:	2210      	movs	r2, #16
    4c1e:	68cb      	ldr	r3, [r1, #12]
    4c20:	421a      	tst	r2, r3
    4c22:	d0fc      	beq.n	4c1e <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4c24:	4a10      	ldr	r2, [pc, #64]	; (4c68 <system_clock_source_enable+0xa4>)
    4c26:	6891      	ldr	r1, [r2, #8]
    4c28:	4b0e      	ldr	r3, [pc, #56]	; (4c64 <system_clock_source_enable+0xa0>)
    4c2a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4c2c:	6852      	ldr	r2, [r2, #4]
    4c2e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    4c30:	2200      	movs	r2, #0
    4c32:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4c34:	1c19      	adds	r1, r3, #0
    4c36:	2210      	movs	r2, #16
    4c38:	68cb      	ldr	r3, [r1, #12]
    4c3a:	421a      	tst	r2, r3
    4c3c:	d0fc      	beq.n	4c38 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4c3e:	4b0a      	ldr	r3, [pc, #40]	; (4c68 <system_clock_source_enable+0xa4>)
    4c40:	681a      	ldr	r2, [r3, #0]
    4c42:	b292      	uxth	r2, r2
    4c44:	4b07      	ldr	r3, [pc, #28]	; (4c64 <system_clock_source_enable+0xa0>)
    4c46:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4c48:	2000      	movs	r0, #0
    4c4a:	e008      	b.n	4c5e <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4c4c:	4a05      	ldr	r2, [pc, #20]	; (4c64 <system_clock_source_enable+0xa0>)
    4c4e:	2344      	movs	r3, #68	; 0x44
    4c50:	5cd0      	ldrb	r0, [r2, r3]
    4c52:	2102      	movs	r1, #2
    4c54:	4301      	orrs	r1, r0
    4c56:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4c58:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    4c5a:	e000      	b.n	4c5e <system_clock_source_enable+0x9a>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4c5c:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    4c5e:	4770      	bx	lr
    4c60:	00006c20 	.word	0x00006c20
    4c64:	40000800 	.word	0x40000800
    4c68:	2000165c 	.word	0x2000165c

00004c6c <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    4c6c:	2808      	cmp	r0, #8
    4c6e:	d832      	bhi.n	4cd6 <system_clock_source_disable+0x6a>
    4c70:	0080      	lsls	r0, r0, #2
    4c72:	4b1a      	ldr	r3, [pc, #104]	; (4cdc <system_clock_source_disable+0x70>)
    4c74:	581b      	ldr	r3, [r3, r0]
    4c76:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg &= ~SYSCTRL_OSC8M_ENABLE;
    4c78:	4b19      	ldr	r3, [pc, #100]	; (4ce0 <system_clock_source_disable+0x74>)
    4c7a:	6a1a      	ldr	r2, [r3, #32]
    4c7c:	2102      	movs	r1, #2
    4c7e:	438a      	bics	r2, r1
    4c80:	621a      	str	r2, [r3, #32]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    4c82:	2000      	movs	r0, #0
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg &= ~SYSCTRL_OSC8M_ENABLE;
		break;
    4c84:	e028      	b.n	4cd8 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    4c86:	4b16      	ldr	r3, [pc, #88]	; (4ce0 <system_clock_source_disable+0x74>)
    4c88:	699a      	ldr	r2, [r3, #24]
    4c8a:	2102      	movs	r1, #2
    4c8c:	438a      	bics	r2, r1
    4c8e:	619a      	str	r2, [r3, #24]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    4c90:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg &= ~SYSCTRL_OSC8M_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
		break;
    4c92:	e021      	b.n	4cd8 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg &= ~SYSCTRL_XOSC_ENABLE;
    4c94:	4b12      	ldr	r3, [pc, #72]	; (4ce0 <system_clock_source_disable+0x74>)
    4c96:	8a1a      	ldrh	r2, [r3, #16]
    4c98:	2102      	movs	r1, #2
    4c9a:	438a      	bics	r2, r1
    4c9c:	821a      	strh	r2, [r3, #16]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    4c9e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg &= ~SYSCTRL_XOSC_ENABLE;
		break;
    4ca0:	e01a      	b.n	4cd8 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg &= ~SYSCTRL_XOSC32K_ENABLE;
    4ca2:	4b0f      	ldr	r3, [pc, #60]	; (4ce0 <system_clock_source_disable+0x74>)
    4ca4:	8a9a      	ldrh	r2, [r3, #20]
    4ca6:	2102      	movs	r1, #2
    4ca8:	438a      	bics	r2, r1
    4caa:	829a      	strh	r2, [r3, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    4cac:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg &= ~SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg &= ~SYSCTRL_XOSC32K_ENABLE;
		break;
    4cae:	e013      	b.n	4cd8 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~SYSCTRL_DFLLCTRL_ENABLE;
    4cb0:	4b0c      	ldr	r3, [pc, #48]	; (4ce4 <system_clock_source_disable+0x78>)
    4cb2:	681a      	ldr	r2, [r3, #0]
    4cb4:	2102      	movs	r1, #2
    4cb6:	438a      	bics	r2, r1
    4cb8:	601a      	str	r2, [r3, #0]
		SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4cba:	681a      	ldr	r2, [r3, #0]
    4cbc:	b292      	uxth	r2, r2
    4cbe:	4b08      	ldr	r3, [pc, #32]	; (4ce0 <system_clock_source_disable+0x74>)
    4cc0:	849a      	strh	r2, [r3, #36]	; 0x24
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    4cc2:	2000      	movs	r0, #0
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~SYSCTRL_DFLLCTRL_ENABLE;
		SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
		break;
    4cc4:	e008      	b.n	4cd8 <system_clock_source_disable+0x6c>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg &= ~SYSCTRL_DPLLCTRLA_ENABLE;
    4cc6:	4a06      	ldr	r2, [pc, #24]	; (4ce0 <system_clock_source_disable+0x74>)
    4cc8:	2344      	movs	r3, #68	; 0x44
    4cca:	5cd1      	ldrb	r1, [r2, r3]
    4ccc:	2002      	movs	r0, #2
    4cce:	4381      	bics	r1, r0
    4cd0:	54d1      	strb	r1, [r2, r3]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    4cd2:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg &= ~SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    4cd4:	e000      	b.n	4cd8 <system_clock_source_disable+0x6c>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4cd6:	2017      	movs	r0, #23

	}

	return STATUS_OK;
}
    4cd8:	4770      	bx	lr
    4cda:	46c0      	nop			; (mov r8, r8)
    4cdc:	00006c44 	.word	0x00006c44
    4ce0:	40000800 	.word	0x40000800
    4ce4:	2000165c 	.word	0x2000165c

00004ce8 <system_clock_source_is_ready>:
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
	uint32_t mask = 0;

	switch (clock_source) {
    4ce8:	2808      	cmp	r0, #8
    4cea:	d820      	bhi.n	4d2e <system_clock_source_is_ready+0x46>
    4cec:	0080      	lsls	r0, r0, #2
    4cee:	4b11      	ldr	r3, [pc, #68]	; (4d34 <system_clock_source_is_ready+0x4c>)
    4cf0:	581b      	ldr	r3, [r3, r0]
    4cf2:	469f      	mov	pc, r3
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    4cf4:	2001      	movs	r0, #1
    4cf6:	e01b      	b.n	4d30 <system_clock_source_is_ready+0x48>
	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    4cf8:	2301      	movs	r3, #1
		break;
    4cfa:	e010      	b.n	4d1e <system_clock_source_is_ready+0x36>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    4cfc:	2302      	movs	r3, #2
		break;
    4cfe:	e00e      	b.n	4d1e <system_clock_source_is_ready+0x36>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    4d00:	2310      	movs	r3, #16
		}
		break;
    4d02:	e00c      	b.n	4d1e <system_clock_source_is_ready+0x36>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    4d04:	2350      	movs	r3, #80	; 0x50
    4d06:	4a0c      	ldr	r2, [pc, #48]	; (4d38 <system_clock_source_is_ready+0x50>)
    4d08:	5cd0      	ldrb	r0, [r2, r3]
    4d0a:	2303      	movs	r3, #3
    4d0c:	4018      	ands	r0, r3
    4d0e:	3803      	subs	r0, #3
    4d10:	4243      	negs	r3, r0
    4d12:	4158      	adcs	r0, r3
    4d14:	b2c0      	uxtb	r0, r0
    4d16:	e00b      	b.n	4d30 <system_clock_source_is_ready+0x48>
{
	uint32_t mask = 0;

	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    4d18:	2308      	movs	r3, #8
    4d1a:	e000      	b.n	4d1e <system_clock_source_is_ready+0x36>
		break;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    4d1c:	2304      	movs	r3, #4

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4d1e:	4a06      	ldr	r2, [pc, #24]	; (4d38 <system_clock_source_is_ready+0x50>)
    4d20:	68d0      	ldr	r0, [r2, #12]
    4d22:	4018      	ands	r0, r3
    4d24:	1ac0      	subs	r0, r0, r3
    4d26:	4243      	negs	r3, r0
    4d28:	4158      	adcs	r0, r3
    4d2a:	b2c0      	uxtb	r0, r0
    4d2c:	e000      	b.n	4d30 <system_clock_source_is_ready+0x48>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;

	default:
		return false;
    4d2e:	2000      	movs	r0, #0
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
}
    4d30:	4770      	bx	lr
    4d32:	46c0      	nop			; (mov r8, r8)
    4d34:	00006c68 	.word	0x00006c68
    4d38:	40000800 	.word	0x40000800

00004d3c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4d3c:	b570      	push	{r4, r5, r6, lr}
    4d3e:	b08e      	sub	sp, #56	; 0x38
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4d40:	22c2      	movs	r2, #194	; 0xc2
    4d42:	00d2      	lsls	r2, r2, #3
    4d44:	4b42      	ldr	r3, [pc, #264]	; (4e50 <system_clock_init+0x114>)
    4d46:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4d48:	4a42      	ldr	r2, [pc, #264]	; (4e54 <system_clock_init+0x118>)
    4d4a:	6851      	ldr	r1, [r2, #4]
    4d4c:	231e      	movs	r3, #30
    4d4e:	4399      	bics	r1, r3
    4d50:	2302      	movs	r3, #2
    4d52:	4319      	orrs	r1, r3
    4d54:	6051      	str	r1, [r2, #4]
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    4d56:	466a      	mov	r2, sp
    4d58:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4d5a:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4d5c:	4d3e      	ldr	r5, [pc, #248]	; (4e58 <system_clock_init+0x11c>)
    4d5e:	b2e0      	uxtb	r0, r4
    4d60:	4669      	mov	r1, sp
    4d62:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4d64:	3401      	adds	r4, #1
    4d66:	2c25      	cmp	r4, #37	; 0x25
    4d68:	d1f9      	bne.n	4d5e <system_clock_init+0x22>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    4d6a:	a80a      	add	r0, sp, #40	; 0x28
    4d6c:	2300      	movs	r3, #0
    4d6e:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
    4d70:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    4d72:	2280      	movs	r2, #128	; 0x80
    4d74:	0212      	lsls	r2, r2, #8
    4d76:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    4d78:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    4d7a:	2201      	movs	r2, #1
    4d7c:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    4d7e:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    4d80:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    4d82:	2206      	movs	r2, #6
    4d84:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    4d86:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    4d88:	4b34      	ldr	r3, [pc, #208]	; (4e5c <system_clock_init+0x120>)
    4d8a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    4d8c:	2005      	movs	r0, #5
    4d8e:	4b34      	ldr	r3, [pc, #208]	; (4e60 <system_clock_init+0x124>)
    4d90:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4d92:	492f      	ldr	r1, [pc, #188]	; (4e50 <system_clock_init+0x114>)
    4d94:	2202      	movs	r2, #2
    4d96:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    4d98:	421a      	tst	r2, r3
    4d9a:	d0fc      	beq.n	4d96 <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    4d9c:	4b2c      	ldr	r3, [pc, #176]	; (4e50 <system_clock_init+0x114>)
    4d9e:	8a99      	ldrh	r1, [r3, #20]
    4da0:	2280      	movs	r2, #128	; 0x80
    4da2:	430a      	orrs	r2, r1
    4da4:	829a      	strh	r2, [r3, #20]
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    4da6:	a809      	add	r0, sp, #36	; 0x24
    4da8:	2400      	movs	r4, #0
    4daa:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    4dac:	2501      	movs	r5, #1
    4dae:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4db0:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    4db2:	4b2c      	ldr	r3, [pc, #176]	; (4e64 <system_clock_init+0x128>)
    4db4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4db6:	2006      	movs	r0, #6
    4db8:	4e29      	ldr	r6, [pc, #164]	; (4e60 <system_clock_init+0x124>)
    4dba:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4dbc:	4b2a      	ldr	r3, [pc, #168]	; (4e68 <system_clock_init+0x12c>)
    4dbe:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4dc0:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    4dc2:	466b      	mov	r3, sp
    4dc4:	705c      	strb	r4, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    4dc6:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    4dc8:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    4dca:	2305      	movs	r3, #5
    4dcc:	466a      	mov	r2, sp
    4dce:	7013      	strb	r3, [r2, #0]
    4dd0:	2001      	movs	r0, #1
    4dd2:	4669      	mov	r1, sp
    4dd4:	4b25      	ldr	r3, [pc, #148]	; (4e6c <system_clock_init+0x130>)
    4dd6:	4798      	blx	r3
    4dd8:	2001      	movs	r0, #1
    4dda:	4b25      	ldr	r3, [pc, #148]	; (4e70 <system_clock_init+0x134>)
    4ddc:	4798      	blx	r3
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
	config->on_demand           = true;
	config->run_in_standby      = false;
    4dde:	a803      	add	r0, sp, #12
    4de0:	7044      	strb	r4, [r0, #1]
	config->lock_bypass         = false;
    4de2:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    4de4:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;
    4de6:	7104      	strb	r4, [r0, #4]

	config->output_frequency    = 48000000;
    4de8:	4b22      	ldr	r3, [pc, #136]	; (4e74 <system_clock_init+0x138>)
    4dea:	6083      	str	r3, [r0, #8]
	config->reference_frequency = 32768;
    4dec:	2380      	movs	r3, #128	; 0x80
    4dee:	021b      	lsls	r3, r3, #8
    4df0:	60c3      	str	r3, [r0, #12]
	config->reference_divider   = 1;
    4df2:	8205      	strh	r5, [r0, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
    4df4:	7504      	strb	r4, [r0, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    4df6:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    4df8:	7484      	strb	r4, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    4dfa:	7004      	strb	r4, [r0, #0]
	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
    4dfc:	4b1e      	ldr	r3, [pc, #120]	; (4e78 <system_clock_init+0x13c>)
    4dfe:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    4e00:	2008      	movs	r0, #8
    4e02:	47b0      	blx	r6
		}
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    4e04:	4812      	ldr	r0, [pc, #72]	; (4e50 <system_clock_init+0x114>)
    4e06:	2150      	movs	r1, #80	; 0x50
    4e08:	2203      	movs	r2, #3
    4e0a:	5c43      	ldrb	r3, [r0, r1]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    4e0c:	4013      	ands	r3, r2
    4e0e:	2b03      	cmp	r3, #3
    4e10:	d1fb      	bne.n	4e0a <system_clock_init+0xce>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    4e12:	4a0f      	ldr	r2, [pc, #60]	; (4e50 <system_clock_init+0x114>)
    4e14:	2344      	movs	r3, #68	; 0x44
    4e16:	5cd0      	ldrb	r0, [r2, r3]
    4e18:	2180      	movs	r1, #128	; 0x80
    4e1a:	4249      	negs	r1, r1
    4e1c:	4301      	orrs	r1, r0
    4e1e:	54d1      	strb	r1, [r2, r3]
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    4e20:	4a16      	ldr	r2, [pc, #88]	; (4e7c <system_clock_init+0x140>)
    4e22:	2300      	movs	r3, #0
    4e24:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    4e26:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    4e28:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    4e2a:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4e2c:	2201      	movs	r2, #1
    4e2e:	9201      	str	r2, [sp, #4]
	config->high_when_disabled = false;
    4e30:	466a      	mov	r2, sp
    4e32:	7053      	strb	r3, [r2, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    4e34:	7213      	strb	r3, [r2, #8]
	config->output_enable      = false;
    4e36:	7253      	strb	r3, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4e38:	2308      	movs	r3, #8
    4e3a:	7013      	strb	r3, [r2, #0]
    4e3c:	2000      	movs	r0, #0
    4e3e:	4669      	mov	r1, sp
    4e40:	4b0a      	ldr	r3, [pc, #40]	; (4e6c <system_clock_init+0x130>)
    4e42:	4798      	blx	r3
    4e44:	2000      	movs	r0, #0
    4e46:	4b0a      	ldr	r3, [pc, #40]	; (4e70 <system_clock_init+0x134>)
    4e48:	4798      	blx	r3
#endif
}
    4e4a:	b00e      	add	sp, #56	; 0x38
    4e4c:	bd70      	pop	{r4, r5, r6, pc}
    4e4e:	46c0      	nop			; (mov r8, r8)
    4e50:	40000800 	.word	0x40000800
    4e54:	41004000 	.word	0x41004000
    4e58:	000050b5 	.word	0x000050b5
    4e5c:	00004a71 	.word	0x00004a71
    4e60:	00004bc5 	.word	0x00004bc5
    4e64:	00004a35 	.word	0x00004a35
    4e68:	00004e81 	.word	0x00004e81
    4e6c:	00004ea5 	.word	0x00004ea5
    4e70:	00004f59 	.word	0x00004f59
    4e74:	02dc6c00 	.word	0x02dc6c00
    4e78:	00004b25 	.word	0x00004b25
    4e7c:	40000400 	.word	0x40000400

00004e80 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4e80:	4b06      	ldr	r3, [pc, #24]	; (4e9c <system_gclk_init+0x1c>)
    4e82:	6999      	ldr	r1, [r3, #24]
    4e84:	2208      	movs	r2, #8
    4e86:	430a      	orrs	r2, r1
    4e88:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    4e8a:	2201      	movs	r2, #1
    4e8c:	4b04      	ldr	r3, [pc, #16]	; (4ea0 <system_gclk_init+0x20>)
    4e8e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    4e90:	1c19      	adds	r1, r3, #0
    4e92:	780b      	ldrb	r3, [r1, #0]
    4e94:	4213      	tst	r3, r2
    4e96:	d1fc      	bne.n	4e92 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    4e98:	4770      	bx	lr
    4e9a:	46c0      	nop			; (mov r8, r8)
    4e9c:	40000400 	.word	0x40000400
    4ea0:	40000c00 	.word	0x40000c00

00004ea4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ea6:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    4ea8:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4eaa:	780d      	ldrb	r5, [r1, #0]
    4eac:	022d      	lsls	r5, r5, #8
    4eae:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    4eb0:	784b      	ldrb	r3, [r1, #1]
    4eb2:	2b00      	cmp	r3, #0
    4eb4:	d002      	beq.n	4ebc <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4eb6:	2380      	movs	r3, #128	; 0x80
    4eb8:	02db      	lsls	r3, r3, #11
    4eba:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4ebc:	7a4b      	ldrb	r3, [r1, #9]
    4ebe:	2b00      	cmp	r3, #0
    4ec0:	d002      	beq.n	4ec8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4ec2:	2380      	movs	r3, #128	; 0x80
    4ec4:	031b      	lsls	r3, r3, #12
    4ec6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4ec8:	684c      	ldr	r4, [r1, #4]
    4eca:	2c01      	cmp	r4, #1
    4ecc:	d917      	bls.n	4efe <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4ece:	1e63      	subs	r3, r4, #1
    4ed0:	421c      	tst	r4, r3
    4ed2:	d10f      	bne.n	4ef4 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4ed4:	2c02      	cmp	r4, #2
    4ed6:	d906      	bls.n	4ee6 <system_gclk_gen_set_config+0x42>
    4ed8:	2302      	movs	r3, #2
    4eda:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    4edc:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    4ede:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4ee0:	429c      	cmp	r4, r3
    4ee2:	d8fb      	bhi.n	4edc <system_gclk_gen_set_config+0x38>
    4ee4:	e000      	b.n	4ee8 <system_gclk_gen_set_config+0x44>
    4ee6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4ee8:	0217      	lsls	r7, r2, #8
    4eea:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4eec:	2380      	movs	r3, #128	; 0x80
    4eee:	035b      	lsls	r3, r3, #13
    4ef0:	431d      	orrs	r5, r3
    4ef2:	e004      	b.n	4efe <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4ef4:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    4ef6:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4ef8:	2380      	movs	r3, #128	; 0x80
    4efa:	029b      	lsls	r3, r3, #10
    4efc:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4efe:	7a0b      	ldrb	r3, [r1, #8]
    4f00:	2b00      	cmp	r3, #0
    4f02:	d002      	beq.n	4f0a <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    4f04:	2380      	movs	r3, #128	; 0x80
    4f06:	039b      	lsls	r3, r3, #14
    4f08:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4f0a:	4a0f      	ldr	r2, [pc, #60]	; (4f48 <system_gclk_gen_set_config+0xa4>)
    4f0c:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    4f0e:	b25b      	sxtb	r3, r3
    4f10:	2b00      	cmp	r3, #0
    4f12:	dbfb      	blt.n	4f0c <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4f14:	4b0d      	ldr	r3, [pc, #52]	; (4f4c <system_gclk_gen_set_config+0xa8>)
    4f16:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4f18:	4b0d      	ldr	r3, [pc, #52]	; (4f50 <system_gclk_gen_set_config+0xac>)
    4f1a:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4f1c:	4a0a      	ldr	r2, [pc, #40]	; (4f48 <system_gclk_gen_set_config+0xa4>)
    4f1e:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4f20:	b25b      	sxtb	r3, r3
    4f22:	2b00      	cmp	r3, #0
    4f24:	dbfb      	blt.n	4f1e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4f26:	4b08      	ldr	r3, [pc, #32]	; (4f48 <system_gclk_gen_set_config+0xa4>)
    4f28:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4f2a:	1c1a      	adds	r2, r3, #0
    4f2c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    4f2e:	b25b      	sxtb	r3, r3
    4f30:	2b00      	cmp	r3, #0
    4f32:	dbfb      	blt.n	4f2c <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4f34:	4b04      	ldr	r3, [pc, #16]	; (4f48 <system_gclk_gen_set_config+0xa4>)
    4f36:	6859      	ldr	r1, [r3, #4]
    4f38:	2280      	movs	r2, #128	; 0x80
    4f3a:	0252      	lsls	r2, r2, #9
    4f3c:	400a      	ands	r2, r1
    4f3e:	4315      	orrs	r5, r2
    4f40:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4f42:	4b04      	ldr	r3, [pc, #16]	; (4f54 <system_gclk_gen_set_config+0xb0>)
    4f44:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f48:	40000c00 	.word	0x40000c00
    4f4c:	00005135 	.word	0x00005135
    4f50:	40000c08 	.word	0x40000c08
    4f54:	00005171 	.word	0x00005171

00004f58 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4f58:	b510      	push	{r4, lr}
    4f5a:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4f5c:	4a0b      	ldr	r2, [pc, #44]	; (4f8c <system_gclk_gen_enable+0x34>)
    4f5e:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    4f60:	b25b      	sxtb	r3, r3
    4f62:	2b00      	cmp	r3, #0
    4f64:	dbfb      	blt.n	4f5e <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4f66:	4b0a      	ldr	r3, [pc, #40]	; (4f90 <system_gclk_gen_enable+0x38>)
    4f68:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4f6a:	4b0a      	ldr	r3, [pc, #40]	; (4f94 <system_gclk_gen_enable+0x3c>)
    4f6c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4f6e:	4a07      	ldr	r2, [pc, #28]	; (4f8c <system_gclk_gen_enable+0x34>)
    4f70:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    4f72:	b25b      	sxtb	r3, r3
    4f74:	2b00      	cmp	r3, #0
    4f76:	dbfb      	blt.n	4f70 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4f78:	4b04      	ldr	r3, [pc, #16]	; (4f8c <system_gclk_gen_enable+0x34>)
    4f7a:	6859      	ldr	r1, [r3, #4]
    4f7c:	2280      	movs	r2, #128	; 0x80
    4f7e:	0252      	lsls	r2, r2, #9
    4f80:	430a      	orrs	r2, r1
    4f82:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4f84:	4b04      	ldr	r3, [pc, #16]	; (4f98 <system_gclk_gen_enable+0x40>)
    4f86:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4f88:	bd10      	pop	{r4, pc}
    4f8a:	46c0      	nop			; (mov r8, r8)
    4f8c:	40000c00 	.word	0x40000c00
    4f90:	00005135 	.word	0x00005135
    4f94:	40000c04 	.word	0x40000c04
    4f98:	00005171 	.word	0x00005171

00004f9c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4f9c:	b570      	push	{r4, r5, r6, lr}
    4f9e:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4fa0:	4a1a      	ldr	r2, [pc, #104]	; (500c <system_gclk_gen_get_hz+0x70>)
    4fa2:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    4fa4:	b25b      	sxtb	r3, r3
    4fa6:	2b00      	cmp	r3, #0
    4fa8:	dbfb      	blt.n	4fa2 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4faa:	4b19      	ldr	r3, [pc, #100]	; (5010 <system_gclk_gen_get_hz+0x74>)
    4fac:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4fae:	4b19      	ldr	r3, [pc, #100]	; (5014 <system_gclk_gen_get_hz+0x78>)
    4fb0:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4fb2:	4a16      	ldr	r2, [pc, #88]	; (500c <system_gclk_gen_get_hz+0x70>)
    4fb4:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    4fb6:	b25b      	sxtb	r3, r3
    4fb8:	2b00      	cmp	r3, #0
    4fba:	dbfb      	blt.n	4fb4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    4fbc:	4e13      	ldr	r6, [pc, #76]	; (500c <system_gclk_gen_get_hz+0x70>)
    4fbe:	6870      	ldr	r0, [r6, #4]
    4fc0:	04c0      	lsls	r0, r0, #19
    4fc2:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4fc4:	4b14      	ldr	r3, [pc, #80]	; (5018 <system_gclk_gen_get_hz+0x7c>)
    4fc6:	4798      	blx	r3
    4fc8:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4fca:	4b12      	ldr	r3, [pc, #72]	; (5014 <system_gclk_gen_get_hz+0x78>)
    4fcc:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4fce:	6876      	ldr	r6, [r6, #4]
    4fd0:	02f6      	lsls	r6, r6, #11
    4fd2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4fd4:	4b11      	ldr	r3, [pc, #68]	; (501c <system_gclk_gen_get_hz+0x80>)
    4fd6:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4fd8:	4a0c      	ldr	r2, [pc, #48]	; (500c <system_gclk_gen_get_hz+0x70>)
    4fda:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    4fdc:	b25b      	sxtb	r3, r3
    4fde:	2b00      	cmp	r3, #0
    4fe0:	dbfb      	blt.n	4fda <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4fe2:	4b0a      	ldr	r3, [pc, #40]	; (500c <system_gclk_gen_get_hz+0x70>)
    4fe4:	689c      	ldr	r4, [r3, #8]
    4fe6:	0a24      	lsrs	r4, r4, #8
    4fe8:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4fea:	4b0d      	ldr	r3, [pc, #52]	; (5020 <system_gclk_gen_get_hz+0x84>)
    4fec:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4fee:	2e00      	cmp	r6, #0
    4ff0:	d107      	bne.n	5002 <system_gclk_gen_get_hz+0x66>
    4ff2:	2c01      	cmp	r4, #1
    4ff4:	d907      	bls.n	5006 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    4ff6:	1c28      	adds	r0, r5, #0
    4ff8:	1c21      	adds	r1, r4, #0
    4ffa:	4b0a      	ldr	r3, [pc, #40]	; (5024 <system_gclk_gen_get_hz+0x88>)
    4ffc:	4798      	blx	r3
    4ffe:	1c05      	adds	r5, r0, #0
    5000:	e001      	b.n	5006 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    5002:	3401      	adds	r4, #1
    5004:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    5006:	1c28      	adds	r0, r5, #0
    5008:	bd70      	pop	{r4, r5, r6, pc}
    500a:	46c0      	nop			; (mov r8, r8)
    500c:	40000c00 	.word	0x40000c00
    5010:	00005135 	.word	0x00005135
    5014:	40000c04 	.word	0x40000c04
    5018:	000049a5 	.word	0x000049a5
    501c:	40000c08 	.word	0x40000c08
    5020:	00005171 	.word	0x00005171
    5024:	00005279 	.word	0x00005279

00005028 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5028:	b510      	push	{r4, lr}
    502a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    502c:	4b06      	ldr	r3, [pc, #24]	; (5048 <system_gclk_chan_enable+0x20>)
    502e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5030:	4b06      	ldr	r3, [pc, #24]	; (504c <system_gclk_chan_enable+0x24>)
    5032:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    5034:	4b06      	ldr	r3, [pc, #24]	; (5050 <system_gclk_chan_enable+0x28>)
    5036:	8859      	ldrh	r1, [r3, #2]
    5038:	2280      	movs	r2, #128	; 0x80
    503a:	01d2      	lsls	r2, r2, #7
    503c:	430a      	orrs	r2, r1
    503e:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    5040:	4b04      	ldr	r3, [pc, #16]	; (5054 <system_gclk_chan_enable+0x2c>)
    5042:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5044:	bd10      	pop	{r4, pc}
    5046:	46c0      	nop			; (mov r8, r8)
    5048:	00005135 	.word	0x00005135
    504c:	40000c02 	.word	0x40000c02
    5050:	40000c00 	.word	0x40000c00
    5054:	00005171 	.word	0x00005171

00005058 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    5058:	b510      	push	{r4, lr}
    505a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    505c:	4b0f      	ldr	r3, [pc, #60]	; (509c <system_gclk_chan_disable+0x44>)
    505e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5060:	4b0f      	ldr	r3, [pc, #60]	; (50a0 <system_gclk_chan_disable+0x48>)
    5062:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    5064:	4b0f      	ldr	r3, [pc, #60]	; (50a4 <system_gclk_chan_disable+0x4c>)
    5066:	8858      	ldrh	r0, [r3, #2]
    5068:	0500      	lsls	r0, r0, #20
    506a:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    506c:	8859      	ldrh	r1, [r3, #2]
    506e:	4a0e      	ldr	r2, [pc, #56]	; (50a8 <system_gclk_chan_disable+0x50>)
    5070:	400a      	ands	r2, r1
    5072:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    5074:	8859      	ldrh	r1, [r3, #2]
    5076:	4a0d      	ldr	r2, [pc, #52]	; (50ac <system_gclk_chan_disable+0x54>)
    5078:	400a      	ands	r2, r1
    507a:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    507c:	1c19      	adds	r1, r3, #0
    507e:	2280      	movs	r2, #128	; 0x80
    5080:	01d2      	lsls	r2, r2, #7
    5082:	884b      	ldrh	r3, [r1, #2]
    5084:	4213      	tst	r3, r2
    5086:	d1fc      	bne.n	5082 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    5088:	4b06      	ldr	r3, [pc, #24]	; (50a4 <system_gclk_chan_disable+0x4c>)
    508a:	0201      	lsls	r1, r0, #8
    508c:	8858      	ldrh	r0, [r3, #2]
    508e:	4a06      	ldr	r2, [pc, #24]	; (50a8 <system_gclk_chan_disable+0x50>)
    5090:	4002      	ands	r2, r0
    5092:	430a      	orrs	r2, r1
    5094:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    5096:	4b06      	ldr	r3, [pc, #24]	; (50b0 <system_gclk_chan_disable+0x58>)
    5098:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    509a:	bd10      	pop	{r4, pc}
    509c:	00005135 	.word	0x00005135
    50a0:	40000c02 	.word	0x40000c02
    50a4:	40000c00 	.word	0x40000c00
    50a8:	fffff0ff 	.word	0xfffff0ff
    50ac:	ffffbfff 	.word	0xffffbfff
    50b0:	00005171 	.word	0x00005171

000050b4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    50b4:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    50b6:	780c      	ldrb	r4, [r1, #0]
    50b8:	0224      	lsls	r4, r4, #8
    50ba:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    50bc:	4b02      	ldr	r3, [pc, #8]	; (50c8 <system_gclk_chan_set_config+0x14>)
    50be:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    50c0:	b2a4      	uxth	r4, r4
    50c2:	4b02      	ldr	r3, [pc, #8]	; (50cc <system_gclk_chan_set_config+0x18>)
    50c4:	805c      	strh	r4, [r3, #2]
}
    50c6:	bd10      	pop	{r4, pc}
    50c8:	00005059 	.word	0x00005059
    50cc:	40000c00 	.word	0x40000c00

000050d0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    50d0:	b510      	push	{r4, lr}
    50d2:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    50d4:	4b06      	ldr	r3, [pc, #24]	; (50f0 <system_gclk_chan_get_hz+0x20>)
    50d6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    50d8:	4b06      	ldr	r3, [pc, #24]	; (50f4 <system_gclk_chan_get_hz+0x24>)
    50da:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    50dc:	4b06      	ldr	r3, [pc, #24]	; (50f8 <system_gclk_chan_get_hz+0x28>)
    50de:	885c      	ldrh	r4, [r3, #2]
    50e0:	0524      	lsls	r4, r4, #20
    50e2:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    50e4:	4b05      	ldr	r3, [pc, #20]	; (50fc <system_gclk_chan_get_hz+0x2c>)
    50e6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    50e8:	1c20      	adds	r0, r4, #0
    50ea:	4b05      	ldr	r3, [pc, #20]	; (5100 <system_gclk_chan_get_hz+0x30>)
    50ec:	4798      	blx	r3
}
    50ee:	bd10      	pop	{r4, pc}
    50f0:	00005135 	.word	0x00005135
    50f4:	40000c02 	.word	0x40000c02
    50f8:	40000c00 	.word	0x40000c00
    50fc:	00005171 	.word	0x00005171
    5100:	00004f9d 	.word	0x00004f9d

00005104 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    5104:	4770      	bx	lr
    5106:	46c0      	nop			; (mov r8, r8)

00005108 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    5108:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    510a:	4b05      	ldr	r3, [pc, #20]	; (5120 <system_init+0x18>)
    510c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    510e:	4b05      	ldr	r3, [pc, #20]	; (5124 <system_init+0x1c>)
    5110:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    5112:	4b05      	ldr	r3, [pc, #20]	; (5128 <system_init+0x20>)
    5114:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    5116:	4b05      	ldr	r3, [pc, #20]	; (512c <system_init+0x24>)
    5118:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    511a:	4b05      	ldr	r3, [pc, #20]	; (5130 <system_init+0x28>)
    511c:	4798      	blx	r3
}
    511e:	bd08      	pop	{r3, pc}
    5120:	00004d3d 	.word	0x00004d3d
    5124:	00005105 	.word	0x00005105
    5128:	00005105 	.word	0x00005105
    512c:	00005105 	.word	0x00005105
    5130:	00005105 	.word	0x00005105

00005134 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    5134:	4b0c      	ldr	r3, [pc, #48]	; (5168 <cpu_irq_enter_critical+0x34>)
    5136:	681b      	ldr	r3, [r3, #0]
    5138:	2b00      	cmp	r3, #0
    513a:	d110      	bne.n	515e <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    513c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    5140:	2b00      	cmp	r3, #0
    5142:	d109      	bne.n	5158 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    5144:	b672      	cpsid	i
    5146:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    514a:	2200      	movs	r2, #0
    514c:	4b07      	ldr	r3, [pc, #28]	; (516c <cpu_irq_enter_critical+0x38>)
    514e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    5150:	2201      	movs	r2, #1
    5152:	4b05      	ldr	r3, [pc, #20]	; (5168 <cpu_irq_enter_critical+0x34>)
    5154:	711a      	strb	r2, [r3, #4]
    5156:	e002      	b.n	515e <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    5158:	2200      	movs	r2, #0
    515a:	4b03      	ldr	r3, [pc, #12]	; (5168 <cpu_irq_enter_critical+0x34>)
    515c:	711a      	strb	r2, [r3, #4]
		}

	}

	cpu_irq_critical_section_counter++;
    515e:	4b02      	ldr	r3, [pc, #8]	; (5168 <cpu_irq_enter_critical+0x34>)
    5160:	681a      	ldr	r2, [r3, #0]
    5162:	3201      	adds	r2, #1
    5164:	601a      	str	r2, [r3, #0]
}
    5166:	4770      	bx	lr
    5168:	2000167c 	.word	0x2000167c
    516c:	20000018 	.word	0x20000018

00005170 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    5170:	4b08      	ldr	r3, [pc, #32]	; (5194 <cpu_irq_leave_critical+0x24>)
    5172:	681a      	ldr	r2, [r3, #0]
    5174:	3a01      	subs	r2, #1
    5176:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    5178:	681b      	ldr	r3, [r3, #0]
    517a:	2b00      	cmp	r3, #0
    517c:	d109      	bne.n	5192 <cpu_irq_leave_critical+0x22>
    517e:	4b05      	ldr	r3, [pc, #20]	; (5194 <cpu_irq_leave_critical+0x24>)
    5180:	791b      	ldrb	r3, [r3, #4]
    5182:	2b00      	cmp	r3, #0
    5184:	d005      	beq.n	5192 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    5186:	2201      	movs	r2, #1
    5188:	4b03      	ldr	r3, [pc, #12]	; (5198 <cpu_irq_leave_critical+0x28>)
    518a:	701a      	strb	r2, [r3, #0]
    518c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    5190:	b662      	cpsie	i
	}
}
    5192:	4770      	bx	lr
    5194:	2000167c 	.word	0x2000167c
    5198:	20000018 	.word	0x20000018

0000519c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    519c:	b500      	push	{lr}
    519e:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    51a0:	ab01      	add	r3, sp, #4
    51a2:	2280      	movs	r2, #128	; 0x80
    51a4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    51a6:	780a      	ldrb	r2, [r1, #0]
    51a8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    51aa:	784a      	ldrb	r2, [r1, #1]
    51ac:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    51ae:	788a      	ldrb	r2, [r1, #2]
    51b0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    51b2:	1c19      	adds	r1, r3, #0
    51b4:	4b01      	ldr	r3, [pc, #4]	; (51bc <port_pin_set_config+0x20>)
    51b6:	4798      	blx	r3
}
    51b8:	b003      	add	sp, #12
    51ba:	bd00      	pop	{pc}
    51bc:	0000524d 	.word	0x0000524d

000051c0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    51c0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    51c2:	78d3      	ldrb	r3, [r2, #3]
    51c4:	2b00      	cmp	r3, #0
    51c6:	d11e      	bne.n	5206 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    51c8:	7813      	ldrb	r3, [r2, #0]
    51ca:	2b80      	cmp	r3, #128	; 0x80
    51cc:	d004      	beq.n	51d8 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    51ce:	061b      	lsls	r3, r3, #24
    51d0:	2480      	movs	r4, #128	; 0x80
    51d2:	0264      	lsls	r4, r4, #9
    51d4:	4323      	orrs	r3, r4
    51d6:	e000      	b.n	51da <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    51d8:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    51da:	7854      	ldrb	r4, [r2, #1]
    51dc:	2502      	movs	r5, #2
    51de:	43ac      	bics	r4, r5
    51e0:	d10a      	bne.n	51f8 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    51e2:	7894      	ldrb	r4, [r2, #2]
    51e4:	2c00      	cmp	r4, #0
    51e6:	d103      	bne.n	51f0 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    51e8:	2480      	movs	r4, #128	; 0x80
    51ea:	02a4      	lsls	r4, r4, #10
    51ec:	4323      	orrs	r3, r4
    51ee:	e002      	b.n	51f6 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    51f0:	24c0      	movs	r4, #192	; 0xc0
    51f2:	02e4      	lsls	r4, r4, #11
    51f4:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    51f6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    51f8:	7854      	ldrb	r4, [r2, #1]
    51fa:	3c01      	subs	r4, #1
    51fc:	2c01      	cmp	r4, #1
    51fe:	d804      	bhi.n	520a <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    5200:	4c11      	ldr	r4, [pc, #68]	; (5248 <_system_pinmux_config+0x88>)
    5202:	4023      	ands	r3, r4
    5204:	e001      	b.n	520a <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    5206:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    5208:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    520a:	040d      	lsls	r5, r1, #16
    520c:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    520e:	24a0      	movs	r4, #160	; 0xa0
    5210:	05e4      	lsls	r4, r4, #23
    5212:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5214:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5216:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5218:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    521a:	24d0      	movs	r4, #208	; 0xd0
    521c:	0624      	lsls	r4, r4, #24
    521e:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5220:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5222:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    5224:	78d4      	ldrb	r4, [r2, #3]
    5226:	2c00      	cmp	r4, #0
    5228:	d10c      	bne.n	5244 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    522a:	035c      	lsls	r4, r3, #13
    522c:	d505      	bpl.n	523a <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    522e:	7893      	ldrb	r3, [r2, #2]
    5230:	2b01      	cmp	r3, #1
    5232:	d101      	bne.n	5238 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    5234:	6181      	str	r1, [r0, #24]
    5236:	e000      	b.n	523a <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    5238:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    523a:	7853      	ldrb	r3, [r2, #1]
    523c:	3b01      	subs	r3, #1
    523e:	2b01      	cmp	r3, #1
    5240:	d800      	bhi.n	5244 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    5242:	6081      	str	r1, [r0, #8]
		}
	}
}
    5244:	bd30      	pop	{r4, r5, pc}
    5246:	46c0      	nop			; (mov r8, r8)
    5248:	fffbffff 	.word	0xfffbffff

0000524c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    524c:	b508      	push	{r3, lr}
    524e:	1c03      	adds	r3, r0, #0
    5250:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    5252:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    5254:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    5256:	2900      	cmp	r1, #0
    5258:	d103      	bne.n	5262 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    525a:	0958      	lsrs	r0, r3, #5
    525c:	01c0      	lsls	r0, r0, #7
    525e:	4904      	ldr	r1, [pc, #16]	; (5270 <system_pinmux_pin_set_config+0x24>)
    5260:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    5262:	211f      	movs	r1, #31
    5264:	400b      	ands	r3, r1
    5266:	2101      	movs	r1, #1
    5268:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    526a:	4b02      	ldr	r3, [pc, #8]	; (5274 <system_pinmux_pin_set_config+0x28>)
    526c:	4798      	blx	r3
}
    526e:	bd08      	pop	{r3, pc}
    5270:	41004400 	.word	0x41004400
    5274:	000051c1 	.word	0x000051c1

00005278 <__aeabi_uidiv>:
    5278:	2900      	cmp	r1, #0
    527a:	d034      	beq.n	52e6 <.udivsi3_skip_div0_test+0x6a>

0000527c <.udivsi3_skip_div0_test>:
    527c:	2301      	movs	r3, #1
    527e:	2200      	movs	r2, #0
    5280:	b410      	push	{r4}
    5282:	4288      	cmp	r0, r1
    5284:	d32c      	bcc.n	52e0 <.udivsi3_skip_div0_test+0x64>
    5286:	2401      	movs	r4, #1
    5288:	0724      	lsls	r4, r4, #28
    528a:	42a1      	cmp	r1, r4
    528c:	d204      	bcs.n	5298 <.udivsi3_skip_div0_test+0x1c>
    528e:	4281      	cmp	r1, r0
    5290:	d202      	bcs.n	5298 <.udivsi3_skip_div0_test+0x1c>
    5292:	0109      	lsls	r1, r1, #4
    5294:	011b      	lsls	r3, r3, #4
    5296:	e7f8      	b.n	528a <.udivsi3_skip_div0_test+0xe>
    5298:	00e4      	lsls	r4, r4, #3
    529a:	42a1      	cmp	r1, r4
    529c:	d204      	bcs.n	52a8 <.udivsi3_skip_div0_test+0x2c>
    529e:	4281      	cmp	r1, r0
    52a0:	d202      	bcs.n	52a8 <.udivsi3_skip_div0_test+0x2c>
    52a2:	0049      	lsls	r1, r1, #1
    52a4:	005b      	lsls	r3, r3, #1
    52a6:	e7f8      	b.n	529a <.udivsi3_skip_div0_test+0x1e>
    52a8:	4288      	cmp	r0, r1
    52aa:	d301      	bcc.n	52b0 <.udivsi3_skip_div0_test+0x34>
    52ac:	1a40      	subs	r0, r0, r1
    52ae:	431a      	orrs	r2, r3
    52b0:	084c      	lsrs	r4, r1, #1
    52b2:	42a0      	cmp	r0, r4
    52b4:	d302      	bcc.n	52bc <.udivsi3_skip_div0_test+0x40>
    52b6:	1b00      	subs	r0, r0, r4
    52b8:	085c      	lsrs	r4, r3, #1
    52ba:	4322      	orrs	r2, r4
    52bc:	088c      	lsrs	r4, r1, #2
    52be:	42a0      	cmp	r0, r4
    52c0:	d302      	bcc.n	52c8 <.udivsi3_skip_div0_test+0x4c>
    52c2:	1b00      	subs	r0, r0, r4
    52c4:	089c      	lsrs	r4, r3, #2
    52c6:	4322      	orrs	r2, r4
    52c8:	08cc      	lsrs	r4, r1, #3
    52ca:	42a0      	cmp	r0, r4
    52cc:	d302      	bcc.n	52d4 <.udivsi3_skip_div0_test+0x58>
    52ce:	1b00      	subs	r0, r0, r4
    52d0:	08dc      	lsrs	r4, r3, #3
    52d2:	4322      	orrs	r2, r4
    52d4:	2800      	cmp	r0, #0
    52d6:	d003      	beq.n	52e0 <.udivsi3_skip_div0_test+0x64>
    52d8:	091b      	lsrs	r3, r3, #4
    52da:	d001      	beq.n	52e0 <.udivsi3_skip_div0_test+0x64>
    52dc:	0909      	lsrs	r1, r1, #4
    52de:	e7e3      	b.n	52a8 <.udivsi3_skip_div0_test+0x2c>
    52e0:	1c10      	adds	r0, r2, #0
    52e2:	bc10      	pop	{r4}
    52e4:	4770      	bx	lr
    52e6:	2800      	cmp	r0, #0
    52e8:	d001      	beq.n	52ee <.udivsi3_skip_div0_test+0x72>
    52ea:	2000      	movs	r0, #0
    52ec:	43c0      	mvns	r0, r0
    52ee:	b407      	push	{r0, r1, r2}
    52f0:	4802      	ldr	r0, [pc, #8]	; (52fc <.udivsi3_skip_div0_test+0x80>)
    52f2:	a102      	add	r1, pc, #8	; (adr r1, 52fc <.udivsi3_skip_div0_test+0x80>)
    52f4:	1840      	adds	r0, r0, r1
    52f6:	9002      	str	r0, [sp, #8]
    52f8:	bd03      	pop	{r0, r1, pc}
    52fa:	46c0      	nop			; (mov r8, r8)
    52fc:	00000019 	.word	0x00000019

00005300 <__aeabi_uidivmod>:
    5300:	2900      	cmp	r1, #0
    5302:	d0f0      	beq.n	52e6 <.udivsi3_skip_div0_test+0x6a>
    5304:	b503      	push	{r0, r1, lr}
    5306:	f7ff ffb9 	bl	527c <.udivsi3_skip_div0_test>
    530a:	bc0e      	pop	{r1, r2, r3}
    530c:	4342      	muls	r2, r0
    530e:	1a89      	subs	r1, r1, r2
    5310:	4718      	bx	r3
    5312:	46c0      	nop			; (mov r8, r8)

00005314 <__aeabi_idiv0>:
    5314:	4770      	bx	lr
    5316:	46c0      	nop			; (mov r8, r8)

00005318 <__aeabi_lmul>:
    5318:	469c      	mov	ip, r3
    531a:	0403      	lsls	r3, r0, #16
    531c:	b5f0      	push	{r4, r5, r6, r7, lr}
    531e:	0c1b      	lsrs	r3, r3, #16
    5320:	0417      	lsls	r7, r2, #16
    5322:	0c3f      	lsrs	r7, r7, #16
    5324:	0c15      	lsrs	r5, r2, #16
    5326:	1c1e      	adds	r6, r3, #0
    5328:	1c04      	adds	r4, r0, #0
    532a:	0c00      	lsrs	r0, r0, #16
    532c:	437e      	muls	r6, r7
    532e:	436b      	muls	r3, r5
    5330:	4347      	muls	r7, r0
    5332:	4345      	muls	r5, r0
    5334:	18fb      	adds	r3, r7, r3
    5336:	0c30      	lsrs	r0, r6, #16
    5338:	1818      	adds	r0, r3, r0
    533a:	4287      	cmp	r7, r0
    533c:	d902      	bls.n	5344 <__aeabi_lmul+0x2c>
    533e:	2380      	movs	r3, #128	; 0x80
    5340:	025b      	lsls	r3, r3, #9
    5342:	18ed      	adds	r5, r5, r3
    5344:	0c03      	lsrs	r3, r0, #16
    5346:	18ed      	adds	r5, r5, r3
    5348:	4663      	mov	r3, ip
    534a:	435c      	muls	r4, r3
    534c:	434a      	muls	r2, r1
    534e:	0436      	lsls	r6, r6, #16
    5350:	0c36      	lsrs	r6, r6, #16
    5352:	18a1      	adds	r1, r4, r2
    5354:	0400      	lsls	r0, r0, #16
    5356:	1980      	adds	r0, r0, r6
    5358:	1949      	adds	r1, r1, r5
    535a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000535c <__aeabi_d2f>:
    535c:	b5f0      	push	{r4, r5, r6, r7, lr}
    535e:	004b      	lsls	r3, r1, #1
    5360:	030d      	lsls	r5, r1, #12
    5362:	0f42      	lsrs	r2, r0, #29
    5364:	0d5b      	lsrs	r3, r3, #21
    5366:	0a6d      	lsrs	r5, r5, #9
    5368:	4315      	orrs	r5, r2
    536a:	1c5a      	adds	r2, r3, #1
    536c:	0552      	lsls	r2, r2, #21
    536e:	0fcc      	lsrs	r4, r1, #31
    5370:	00c6      	lsls	r6, r0, #3
    5372:	0d52      	lsrs	r2, r2, #21
    5374:	2a01      	cmp	r2, #1
    5376:	dd27      	ble.n	53c8 <__aeabi_d2f+0x6c>
    5378:	4f39      	ldr	r7, [pc, #228]	; (5460 <__aeabi_d2f+0x104>)
    537a:	19da      	adds	r2, r3, r7
    537c:	2afe      	cmp	r2, #254	; 0xfe
    537e:	dc1a      	bgt.n	53b6 <__aeabi_d2f+0x5a>
    5380:	2a00      	cmp	r2, #0
    5382:	dd35      	ble.n	53f0 <__aeabi_d2f+0x94>
    5384:	0180      	lsls	r0, r0, #6
    5386:	00ed      	lsls	r5, r5, #3
    5388:	1e43      	subs	r3, r0, #1
    538a:	4198      	sbcs	r0, r3
    538c:	4328      	orrs	r0, r5
    538e:	0f76      	lsrs	r6, r6, #29
    5390:	4330      	orrs	r0, r6
    5392:	0743      	lsls	r3, r0, #29
    5394:	d004      	beq.n	53a0 <__aeabi_d2f+0x44>
    5396:	230f      	movs	r3, #15
    5398:	4003      	ands	r3, r0
    539a:	2b04      	cmp	r3, #4
    539c:	d000      	beq.n	53a0 <__aeabi_d2f+0x44>
    539e:	3004      	adds	r0, #4
    53a0:	2180      	movs	r1, #128	; 0x80
    53a2:	04c9      	lsls	r1, r1, #19
    53a4:	4001      	ands	r1, r0
    53a6:	d027      	beq.n	53f8 <__aeabi_d2f+0x9c>
    53a8:	3201      	adds	r2, #1
    53aa:	2aff      	cmp	r2, #255	; 0xff
    53ac:	d01d      	beq.n	53ea <__aeabi_d2f+0x8e>
    53ae:	0183      	lsls	r3, r0, #6
    53b0:	0a5b      	lsrs	r3, r3, #9
    53b2:	b2d1      	uxtb	r1, r2
    53b4:	e001      	b.n	53ba <__aeabi_d2f+0x5e>
    53b6:	21ff      	movs	r1, #255	; 0xff
    53b8:	2300      	movs	r3, #0
    53ba:	0258      	lsls	r0, r3, #9
    53bc:	05c9      	lsls	r1, r1, #23
    53be:	0a40      	lsrs	r0, r0, #9
    53c0:	07e4      	lsls	r4, r4, #31
    53c2:	4308      	orrs	r0, r1
    53c4:	4320      	orrs	r0, r4
    53c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53c8:	2b00      	cmp	r3, #0
    53ca:	d106      	bne.n	53da <__aeabi_d2f+0x7e>
    53cc:	4335      	orrs	r5, r6
    53ce:	d111      	bne.n	53f4 <__aeabi_d2f+0x98>
    53d0:	2100      	movs	r1, #0
    53d2:	2000      	movs	r0, #0
    53d4:	0243      	lsls	r3, r0, #9
    53d6:	0a5b      	lsrs	r3, r3, #9
    53d8:	e7ef      	b.n	53ba <__aeabi_d2f+0x5e>
    53da:	432e      	orrs	r6, r5
    53dc:	d0eb      	beq.n	53b6 <__aeabi_d2f+0x5a>
    53de:	2080      	movs	r0, #128	; 0x80
    53e0:	00ed      	lsls	r5, r5, #3
    53e2:	0480      	lsls	r0, r0, #18
    53e4:	4328      	orrs	r0, r5
    53e6:	22ff      	movs	r2, #255	; 0xff
    53e8:	e7d3      	b.n	5392 <__aeabi_d2f+0x36>
    53ea:	21ff      	movs	r1, #255	; 0xff
    53ec:	2300      	movs	r3, #0
    53ee:	e7e4      	b.n	53ba <__aeabi_d2f+0x5e>
    53f0:	3217      	adds	r2, #23
    53f2:	da0d      	bge.n	5410 <__aeabi_d2f+0xb4>
    53f4:	2005      	movs	r0, #5
    53f6:	2200      	movs	r2, #0
    53f8:	08c0      	lsrs	r0, r0, #3
    53fa:	b2d1      	uxtb	r1, r2
    53fc:	2aff      	cmp	r2, #255	; 0xff
    53fe:	d1e9      	bne.n	53d4 <__aeabi_d2f+0x78>
    5400:	2800      	cmp	r0, #0
    5402:	d0d9      	beq.n	53b8 <__aeabi_d2f+0x5c>
    5404:	2380      	movs	r3, #128	; 0x80
    5406:	03db      	lsls	r3, r3, #15
    5408:	4303      	orrs	r3, r0
    540a:	025b      	lsls	r3, r3, #9
    540c:	0a5b      	lsrs	r3, r3, #9
    540e:	e7d4      	b.n	53ba <__aeabi_d2f+0x5e>
    5410:	2280      	movs	r2, #128	; 0x80
    5412:	4914      	ldr	r1, [pc, #80]	; (5464 <__aeabi_d2f+0x108>)
    5414:	0412      	lsls	r2, r2, #16
    5416:	4315      	orrs	r5, r2
    5418:	1ac9      	subs	r1, r1, r3
    541a:	291f      	cmp	r1, #31
    541c:	dc0d      	bgt.n	543a <__aeabi_d2f+0xde>
    541e:	4a12      	ldr	r2, [pc, #72]	; (5468 <__aeabi_d2f+0x10c>)
    5420:	1c37      	adds	r7, r6, #0
    5422:	189b      	adds	r3, r3, r2
    5424:	1c28      	adds	r0, r5, #0
    5426:	409f      	lsls	r7, r3
    5428:	4098      	lsls	r0, r3
    542a:	1c3b      	adds	r3, r7, #0
    542c:	1e5a      	subs	r2, r3, #1
    542e:	4193      	sbcs	r3, r2
    5430:	4318      	orrs	r0, r3
    5432:	40ce      	lsrs	r6, r1
    5434:	4330      	orrs	r0, r6
    5436:	2200      	movs	r2, #0
    5438:	e7ab      	b.n	5392 <__aeabi_d2f+0x36>
    543a:	4f0c      	ldr	r7, [pc, #48]	; (546c <__aeabi_d2f+0x110>)
    543c:	1c2a      	adds	r2, r5, #0
    543e:	1aff      	subs	r7, r7, r3
    5440:	40fa      	lsrs	r2, r7
    5442:	1c17      	adds	r7, r2, #0
    5444:	2920      	cmp	r1, #32
    5446:	d009      	beq.n	545c <__aeabi_d2f+0x100>
    5448:	4a09      	ldr	r2, [pc, #36]	; (5470 <__aeabi_d2f+0x114>)
    544a:	1898      	adds	r0, r3, r2
    544c:	4085      	lsls	r5, r0
    544e:	1c28      	adds	r0, r5, #0
    5450:	4330      	orrs	r0, r6
    5452:	1e46      	subs	r6, r0, #1
    5454:	41b0      	sbcs	r0, r6
    5456:	4338      	orrs	r0, r7
    5458:	2200      	movs	r2, #0
    545a:	e79a      	b.n	5392 <__aeabi_d2f+0x36>
    545c:	2000      	movs	r0, #0
    545e:	e7f7      	b.n	5450 <__aeabi_d2f+0xf4>
    5460:	fffffc80 	.word	0xfffffc80
    5464:	0000039e 	.word	0x0000039e
    5468:	fffffc82 	.word	0xfffffc82
    546c:	0000037e 	.word	0x0000037e
    5470:	fffffca2 	.word	0xfffffca2

00005474 <__libc_init_array>:
    5474:	b570      	push	{r4, r5, r6, lr}
    5476:	4e0d      	ldr	r6, [pc, #52]	; (54ac <__libc_init_array+0x38>)
    5478:	4d0d      	ldr	r5, [pc, #52]	; (54b0 <__libc_init_array+0x3c>)
    547a:	2400      	movs	r4, #0
    547c:	1bad      	subs	r5, r5, r6
    547e:	10ad      	asrs	r5, r5, #2
    5480:	d005      	beq.n	548e <__libc_init_array+0x1a>
    5482:	00a3      	lsls	r3, r4, #2
    5484:	58f3      	ldr	r3, [r6, r3]
    5486:	3401      	adds	r4, #1
    5488:	4798      	blx	r3
    548a:	42a5      	cmp	r5, r4
    548c:	d1f9      	bne.n	5482 <__libc_init_array+0xe>
    548e:	f001 fc01 	bl	6c94 <_init>
    5492:	4e08      	ldr	r6, [pc, #32]	; (54b4 <__libc_init_array+0x40>)
    5494:	4d08      	ldr	r5, [pc, #32]	; (54b8 <__libc_init_array+0x44>)
    5496:	2400      	movs	r4, #0
    5498:	1bad      	subs	r5, r5, r6
    549a:	10ad      	asrs	r5, r5, #2
    549c:	d005      	beq.n	54aa <__libc_init_array+0x36>
    549e:	00a3      	lsls	r3, r4, #2
    54a0:	58f3      	ldr	r3, [r6, r3]
    54a2:	3401      	adds	r4, #1
    54a4:	4798      	blx	r3
    54a6:	42a5      	cmp	r5, r4
    54a8:	d1f9      	bne.n	549e <__libc_init_array+0x2a>
    54aa:	bd70      	pop	{r4, r5, r6, pc}
    54ac:	00006ca0 	.word	0x00006ca0
    54b0:	00006ca0 	.word	0x00006ca0
    54b4:	00006ca0 	.word	0x00006ca0
    54b8:	00006ca8 	.word	0x00006ca8

000054bc <memcpy>:
    54bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    54be:	2a0f      	cmp	r2, #15
    54c0:	d935      	bls.n	552e <memcpy+0x72>
    54c2:	1c03      	adds	r3, r0, #0
    54c4:	430b      	orrs	r3, r1
    54c6:	079c      	lsls	r4, r3, #30
    54c8:	d135      	bne.n	5536 <memcpy+0x7a>
    54ca:	1c16      	adds	r6, r2, #0
    54cc:	3e10      	subs	r6, #16
    54ce:	0936      	lsrs	r6, r6, #4
    54d0:	0135      	lsls	r5, r6, #4
    54d2:	1945      	adds	r5, r0, r5
    54d4:	3510      	adds	r5, #16
    54d6:	1c0c      	adds	r4, r1, #0
    54d8:	1c03      	adds	r3, r0, #0
    54da:	6827      	ldr	r7, [r4, #0]
    54dc:	601f      	str	r7, [r3, #0]
    54de:	6867      	ldr	r7, [r4, #4]
    54e0:	605f      	str	r7, [r3, #4]
    54e2:	68a7      	ldr	r7, [r4, #8]
    54e4:	609f      	str	r7, [r3, #8]
    54e6:	68e7      	ldr	r7, [r4, #12]
    54e8:	3410      	adds	r4, #16
    54ea:	60df      	str	r7, [r3, #12]
    54ec:	3310      	adds	r3, #16
    54ee:	42ab      	cmp	r3, r5
    54f0:	d1f3      	bne.n	54da <memcpy+0x1e>
    54f2:	1c73      	adds	r3, r6, #1
    54f4:	011b      	lsls	r3, r3, #4
    54f6:	18c5      	adds	r5, r0, r3
    54f8:	18c9      	adds	r1, r1, r3
    54fa:	230f      	movs	r3, #15
    54fc:	4013      	ands	r3, r2
    54fe:	2b03      	cmp	r3, #3
    5500:	d91b      	bls.n	553a <memcpy+0x7e>
    5502:	1f1c      	subs	r4, r3, #4
    5504:	08a4      	lsrs	r4, r4, #2
    5506:	3401      	adds	r4, #1
    5508:	00a4      	lsls	r4, r4, #2
    550a:	2300      	movs	r3, #0
    550c:	58ce      	ldr	r6, [r1, r3]
    550e:	50ee      	str	r6, [r5, r3]
    5510:	3304      	adds	r3, #4
    5512:	42a3      	cmp	r3, r4
    5514:	d1fa      	bne.n	550c <memcpy+0x50>
    5516:	18ed      	adds	r5, r5, r3
    5518:	18c9      	adds	r1, r1, r3
    551a:	2303      	movs	r3, #3
    551c:	401a      	ands	r2, r3
    551e:	d005      	beq.n	552c <memcpy+0x70>
    5520:	2300      	movs	r3, #0
    5522:	5ccc      	ldrb	r4, [r1, r3]
    5524:	54ec      	strb	r4, [r5, r3]
    5526:	3301      	adds	r3, #1
    5528:	4293      	cmp	r3, r2
    552a:	d1fa      	bne.n	5522 <memcpy+0x66>
    552c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    552e:	1c05      	adds	r5, r0, #0
    5530:	2a00      	cmp	r2, #0
    5532:	d1f5      	bne.n	5520 <memcpy+0x64>
    5534:	e7fa      	b.n	552c <memcpy+0x70>
    5536:	1c05      	adds	r5, r0, #0
    5538:	e7f2      	b.n	5520 <memcpy+0x64>
    553a:	1c1a      	adds	r2, r3, #0
    553c:	e7f8      	b.n	5530 <memcpy+0x74>
    553e:	46c0      	nop			; (mov r8, r8)

00005540 <memset>:
    5540:	b5f0      	push	{r4, r5, r6, r7, lr}
    5542:	0783      	lsls	r3, r0, #30
    5544:	d046      	beq.n	55d4 <memset+0x94>
    5546:	1e54      	subs	r4, r2, #1
    5548:	2a00      	cmp	r2, #0
    554a:	d042      	beq.n	55d2 <memset+0x92>
    554c:	b2ce      	uxtb	r6, r1
    554e:	1c03      	adds	r3, r0, #0
    5550:	2503      	movs	r5, #3
    5552:	e003      	b.n	555c <memset+0x1c>
    5554:	1e62      	subs	r2, r4, #1
    5556:	2c00      	cmp	r4, #0
    5558:	d03b      	beq.n	55d2 <memset+0x92>
    555a:	1c14      	adds	r4, r2, #0
    555c:	3301      	adds	r3, #1
    555e:	1e5a      	subs	r2, r3, #1
    5560:	7016      	strb	r6, [r2, #0]
    5562:	422b      	tst	r3, r5
    5564:	d1f6      	bne.n	5554 <memset+0x14>
    5566:	2c03      	cmp	r4, #3
    5568:	d92b      	bls.n	55c2 <memset+0x82>
    556a:	25ff      	movs	r5, #255	; 0xff
    556c:	400d      	ands	r5, r1
    556e:	022a      	lsls	r2, r5, #8
    5570:	4315      	orrs	r5, r2
    5572:	042a      	lsls	r2, r5, #16
    5574:	4315      	orrs	r5, r2
    5576:	2c0f      	cmp	r4, #15
    5578:	d915      	bls.n	55a6 <memset+0x66>
    557a:	1c27      	adds	r7, r4, #0
    557c:	3f10      	subs	r7, #16
    557e:	093f      	lsrs	r7, r7, #4
    5580:	1c1e      	adds	r6, r3, #0
    5582:	013a      	lsls	r2, r7, #4
    5584:	3610      	adds	r6, #16
    5586:	18b6      	adds	r6, r6, r2
    5588:	1c1a      	adds	r2, r3, #0
    558a:	6015      	str	r5, [r2, #0]
    558c:	6055      	str	r5, [r2, #4]
    558e:	6095      	str	r5, [r2, #8]
    5590:	60d5      	str	r5, [r2, #12]
    5592:	3210      	adds	r2, #16
    5594:	42b2      	cmp	r2, r6
    5596:	d1f8      	bne.n	558a <memset+0x4a>
    5598:	3701      	adds	r7, #1
    559a:	013f      	lsls	r7, r7, #4
    559c:	220f      	movs	r2, #15
    559e:	19db      	adds	r3, r3, r7
    55a0:	4014      	ands	r4, r2
    55a2:	2c03      	cmp	r4, #3
    55a4:	d90d      	bls.n	55c2 <memset+0x82>
    55a6:	1f27      	subs	r7, r4, #4
    55a8:	08bf      	lsrs	r7, r7, #2
    55aa:	00ba      	lsls	r2, r7, #2
    55ac:	1d1e      	adds	r6, r3, #4
    55ae:	18b6      	adds	r6, r6, r2
    55b0:	1c1a      	adds	r2, r3, #0
    55b2:	c220      	stmia	r2!, {r5}
    55b4:	42b2      	cmp	r2, r6
    55b6:	d1fc      	bne.n	55b2 <memset+0x72>
    55b8:	3701      	adds	r7, #1
    55ba:	00bf      	lsls	r7, r7, #2
    55bc:	2203      	movs	r2, #3
    55be:	19db      	adds	r3, r3, r7
    55c0:	4014      	ands	r4, r2
    55c2:	2c00      	cmp	r4, #0
    55c4:	d005      	beq.n	55d2 <memset+0x92>
    55c6:	191c      	adds	r4, r3, r4
    55c8:	b2c9      	uxtb	r1, r1
    55ca:	7019      	strb	r1, [r3, #0]
    55cc:	3301      	adds	r3, #1
    55ce:	42a3      	cmp	r3, r4
    55d0:	d1fb      	bne.n	55ca <memset+0x8a>
    55d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    55d4:	1c14      	adds	r4, r2, #0
    55d6:	1c03      	adds	r3, r0, #0
    55d8:	e7c5      	b.n	5566 <memset+0x26>
    55da:	46c0      	nop			; (mov r8, r8)

000055dc <strncmp>:
    55dc:	b570      	push	{r4, r5, r6, lr}
    55de:	1c05      	adds	r5, r0, #0
    55e0:	2000      	movs	r0, #0
    55e2:	2a00      	cmp	r2, #0
    55e4:	d02c      	beq.n	5640 <strncmp+0x64>
    55e6:	1c2b      	adds	r3, r5, #0
    55e8:	430b      	orrs	r3, r1
    55ea:	079c      	lsls	r4, r3, #30
    55ec:	d129      	bne.n	5642 <strncmp+0x66>
    55ee:	2a03      	cmp	r2, #3
    55f0:	d927      	bls.n	5642 <strncmp+0x66>
    55f2:	682c      	ldr	r4, [r5, #0]
    55f4:	680e      	ldr	r6, [r1, #0]
    55f6:	42b4      	cmp	r4, r6
    55f8:	d123      	bne.n	5642 <strncmp+0x66>
    55fa:	1f13      	subs	r3, r2, #4
    55fc:	2b00      	cmp	r3, #0
    55fe:	d01f      	beq.n	5640 <strncmp+0x64>
    5600:	4e22      	ldr	r6, [pc, #136]	; (568c <strncmp+0xb0>)
    5602:	19a2      	adds	r2, r4, r6
    5604:	4e22      	ldr	r6, [pc, #136]	; (5690 <strncmp+0xb4>)
    5606:	43a2      	bics	r2, r4
    5608:	4232      	tst	r2, r6
    560a:	d00e      	beq.n	562a <strncmp+0x4e>
    560c:	e018      	b.n	5640 <strncmp+0x64>
    560e:	686a      	ldr	r2, [r5, #4]
    5610:	6849      	ldr	r1, [r1, #4]
    5612:	428a      	cmp	r2, r1
    5614:	d12e      	bne.n	5674 <strncmp+0x98>
    5616:	3b04      	subs	r3, #4
    5618:	2b00      	cmp	r3, #0
    561a:	d010      	beq.n	563e <strncmp+0x62>
    561c:	4d1b      	ldr	r5, [pc, #108]	; (568c <strncmp+0xb0>)
    561e:	1951      	adds	r1, r2, r5
    5620:	4391      	bics	r1, r2
    5622:	4231      	tst	r1, r6
    5624:	d10b      	bne.n	563e <strncmp+0x62>
    5626:	1c21      	adds	r1, r4, #0
    5628:	1c05      	adds	r5, r0, #0
    562a:	1d28      	adds	r0, r5, #4
    562c:	1d0c      	adds	r4, r1, #4
    562e:	2b03      	cmp	r3, #3
    5630:	d8ed      	bhi.n	560e <strncmp+0x32>
    5632:	1e5a      	subs	r2, r3, #1
    5634:	2b00      	cmp	r3, #0
    5636:	d021      	beq.n	567c <strncmp+0xa0>
    5638:	1c21      	adds	r1, r4, #0
    563a:	1c05      	adds	r5, r0, #0
    563c:	e002      	b.n	5644 <strncmp+0x68>
    563e:	2000      	movs	r0, #0
    5640:	bd70      	pop	{r4, r5, r6, pc}
    5642:	3a01      	subs	r2, #1
    5644:	782c      	ldrb	r4, [r5, #0]
    5646:	7808      	ldrb	r0, [r1, #0]
    5648:	4284      	cmp	r4, r0
    564a:	d11b      	bne.n	5684 <strncmp+0xa8>
    564c:	2a00      	cmp	r2, #0
    564e:	d0f6      	beq.n	563e <strncmp+0x62>
    5650:	2c00      	cmp	r4, #0
    5652:	d0f4      	beq.n	563e <strncmp+0x62>
    5654:	1c6b      	adds	r3, r5, #1
    5656:	3101      	adds	r1, #1
    5658:	18ad      	adds	r5, r5, r2
    565a:	e005      	b.n	5668 <strncmp+0x8c>
    565c:	42ab      	cmp	r3, r5
    565e:	d0ee      	beq.n	563e <strncmp+0x62>
    5660:	2c00      	cmp	r4, #0
    5662:	d0ec      	beq.n	563e <strncmp+0x62>
    5664:	3301      	adds	r3, #1
    5666:	3101      	adds	r1, #1
    5668:	781c      	ldrb	r4, [r3, #0]
    566a:	780a      	ldrb	r2, [r1, #0]
    566c:	4294      	cmp	r4, r2
    566e:	d0f5      	beq.n	565c <strncmp+0x80>
    5670:	1aa0      	subs	r0, r4, r2
    5672:	e7e5      	b.n	5640 <strncmp+0x64>
    5674:	1e5a      	subs	r2, r3, #1
    5676:	1c21      	adds	r1, r4, #0
    5678:	1c05      	adds	r5, r0, #0
    567a:	e7e3      	b.n	5644 <strncmp+0x68>
    567c:	792c      	ldrb	r4, [r5, #4]
    567e:	790a      	ldrb	r2, [r1, #4]
    5680:	1aa0      	subs	r0, r4, r2
    5682:	e7dd      	b.n	5640 <strncmp+0x64>
    5684:	1c02      	adds	r2, r0, #0
    5686:	1aa0      	subs	r0, r4, r2
    5688:	e7da      	b.n	5640 <strncmp+0x64>
    568a:	46c0      	nop			; (mov r8, r8)
    568c:	fefefeff 	.word	0xfefefeff
    5690:	80808080 	.word	0x80808080

00005694 <strncpy>:
    5694:	1c03      	adds	r3, r0, #0
    5696:	430b      	orrs	r3, r1
    5698:	b5f0      	push	{r4, r5, r6, r7, lr}
    569a:	1c04      	adds	r4, r0, #0
    569c:	079d      	lsls	r5, r3, #30
    569e:	d101      	bne.n	56a4 <strncpy+0x10>
    56a0:	2a03      	cmp	r2, #3
    56a2:	d815      	bhi.n	56d0 <strncpy+0x3c>
    56a4:	2a00      	cmp	r2, #0
    56a6:	d012      	beq.n	56ce <strncpy+0x3a>
    56a8:	780d      	ldrb	r5, [r1, #0]
    56aa:	3a01      	subs	r2, #1
    56ac:	1c63      	adds	r3, r4, #1
    56ae:	1c4e      	adds	r6, r1, #1
    56b0:	7025      	strb	r5, [r4, #0]
    56b2:	2d00      	cmp	r5, #0
    56b4:	d01b      	beq.n	56ee <strncpy+0x5a>
    56b6:	1c31      	adds	r1, r6, #0
    56b8:	e007      	b.n	56ca <strncpy+0x36>
    56ba:	780c      	ldrb	r4, [r1, #0]
    56bc:	3301      	adds	r3, #1
    56be:	1e5d      	subs	r5, r3, #1
    56c0:	3a01      	subs	r2, #1
    56c2:	702c      	strb	r4, [r5, #0]
    56c4:	3101      	adds	r1, #1
    56c6:	2c00      	cmp	r4, #0
    56c8:	d011      	beq.n	56ee <strncpy+0x5a>
    56ca:	2a00      	cmp	r2, #0
    56cc:	d1f5      	bne.n	56ba <strncpy+0x26>
    56ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56d0:	4e0b      	ldr	r6, [pc, #44]	; (5700 <strncpy+0x6c>)
    56d2:	680b      	ldr	r3, [r1, #0]
    56d4:	4f0b      	ldr	r7, [pc, #44]	; (5704 <strncpy+0x70>)
    56d6:	19dd      	adds	r5, r3, r7
    56d8:	439d      	bics	r5, r3
    56da:	4235      	tst	r5, r6
    56dc:	d1e2      	bne.n	56a4 <strncpy+0x10>
    56de:	3404      	adds	r4, #4
    56e0:	1f25      	subs	r5, r4, #4
    56e2:	3a04      	subs	r2, #4
    56e4:	3104      	adds	r1, #4
    56e6:	602b      	str	r3, [r5, #0]
    56e8:	2a03      	cmp	r2, #3
    56ea:	d8f2      	bhi.n	56d2 <strncpy+0x3e>
    56ec:	e7da      	b.n	56a4 <strncpy+0x10>
    56ee:	189c      	adds	r4, r3, r2
    56f0:	2100      	movs	r1, #0
    56f2:	2a00      	cmp	r2, #0
    56f4:	d0eb      	beq.n	56ce <strncpy+0x3a>
    56f6:	7019      	strb	r1, [r3, #0]
    56f8:	3301      	adds	r3, #1
    56fa:	42a3      	cmp	r3, r4
    56fc:	d1fb      	bne.n	56f6 <strncpy+0x62>
    56fe:	e7e6      	b.n	56ce <strncpy+0x3a>
    5700:	80808080 	.word	0x80808080
    5704:	fefefeff 	.word	0xfefefeff

00005708 <register_fini>:
    5708:	b508      	push	{r3, lr}
    570a:	4b03      	ldr	r3, [pc, #12]	; (5718 <register_fini+0x10>)
    570c:	2b00      	cmp	r3, #0
    570e:	d002      	beq.n	5716 <register_fini+0xe>
    5710:	4802      	ldr	r0, [pc, #8]	; (571c <register_fini+0x14>)
    5712:	f000 f805 	bl	5720 <atexit>
    5716:	bd08      	pop	{r3, pc}
    5718:	00000000 	.word	0x00000000
    571c:	00005731 	.word	0x00005731

00005720 <atexit>:
    5720:	b508      	push	{r3, lr}
    5722:	1c01      	adds	r1, r0, #0
    5724:	2200      	movs	r2, #0
    5726:	2000      	movs	r0, #0
    5728:	2300      	movs	r3, #0
    572a:	f000 f819 	bl	5760 <__register_exitproc>
    572e:	bd08      	pop	{r3, pc}

00005730 <__libc_fini_array>:
    5730:	b538      	push	{r3, r4, r5, lr}
    5732:	4b09      	ldr	r3, [pc, #36]	; (5758 <__libc_fini_array+0x28>)
    5734:	4d09      	ldr	r5, [pc, #36]	; (575c <__libc_fini_array+0x2c>)
    5736:	1aed      	subs	r5, r5, r3
    5738:	10ad      	asrs	r5, r5, #2
    573a:	d009      	beq.n	5750 <__libc_fini_array+0x20>
    573c:	3d01      	subs	r5, #1
    573e:	00ac      	lsls	r4, r5, #2
    5740:	18e4      	adds	r4, r4, r3
    5742:	e000      	b.n	5746 <__libc_fini_array+0x16>
    5744:	3d01      	subs	r5, #1
    5746:	6823      	ldr	r3, [r4, #0]
    5748:	4798      	blx	r3
    574a:	3c04      	subs	r4, #4
    574c:	2d00      	cmp	r5, #0
    574e:	d1f9      	bne.n	5744 <__libc_fini_array+0x14>
    5750:	f001 faaa 	bl	6ca8 <_fini>
    5754:	bd38      	pop	{r3, r4, r5, pc}
    5756:	46c0      	nop			; (mov r8, r8)
    5758:	00006cb4 	.word	0x00006cb4
    575c:	00006cb8 	.word	0x00006cb8

00005760 <__register_exitproc>:
    5760:	b5f0      	push	{r4, r5, r6, r7, lr}
    5762:	464f      	mov	r7, r9
    5764:	4646      	mov	r6, r8
    5766:	b4c0      	push	{r6, r7}
    5768:	4698      	mov	r8, r3
    576a:	4b2b      	ldr	r3, [pc, #172]	; (5818 <__register_exitproc+0xb8>)
    576c:	25a4      	movs	r5, #164	; 0xa4
    576e:	681b      	ldr	r3, [r3, #0]
    5770:	006d      	lsls	r5, r5, #1
    5772:	595c      	ldr	r4, [r3, r5]
    5774:	b083      	sub	sp, #12
    5776:	1c06      	adds	r6, r0, #0
    5778:	1c0f      	adds	r7, r1, #0
    577a:	4691      	mov	r9, r2
    577c:	9301      	str	r3, [sp, #4]
    577e:	2c00      	cmp	r4, #0
    5780:	d044      	beq.n	580c <__register_exitproc+0xac>
    5782:	6865      	ldr	r5, [r4, #4]
    5784:	2d1f      	cmp	r5, #31
    5786:	dd1a      	ble.n	57be <__register_exitproc+0x5e>
    5788:	4b24      	ldr	r3, [pc, #144]	; (581c <__register_exitproc+0xbc>)
    578a:	2b00      	cmp	r3, #0
    578c:	d102      	bne.n	5794 <__register_exitproc+0x34>
    578e:	2001      	movs	r0, #1
    5790:	4240      	negs	r0, r0
    5792:	e01c      	b.n	57ce <__register_exitproc+0x6e>
    5794:	20c8      	movs	r0, #200	; 0xc8
    5796:	0040      	lsls	r0, r0, #1
    5798:	e000      	b.n	579c <__register_exitproc+0x3c>
    579a:	bf00      	nop
    579c:	1e04      	subs	r4, r0, #0
    579e:	d0f6      	beq.n	578e <__register_exitproc+0x2e>
    57a0:	2500      	movs	r5, #0
    57a2:	6045      	str	r5, [r0, #4]
    57a4:	23a4      	movs	r3, #164	; 0xa4
    57a6:	9801      	ldr	r0, [sp, #4]
    57a8:	005b      	lsls	r3, r3, #1
    57aa:	58c0      	ldr	r0, [r0, r3]
    57ac:	9901      	ldr	r1, [sp, #4]
    57ae:	6020      	str	r0, [r4, #0]
    57b0:	50cc      	str	r4, [r1, r3]
    57b2:	23c4      	movs	r3, #196	; 0xc4
    57b4:	005b      	lsls	r3, r3, #1
    57b6:	50e5      	str	r5, [r4, r3]
    57b8:	23c6      	movs	r3, #198	; 0xc6
    57ba:	005b      	lsls	r3, r3, #1
    57bc:	50e5      	str	r5, [r4, r3]
    57be:	2e00      	cmp	r6, #0
    57c0:	d10a      	bne.n	57d8 <__register_exitproc+0x78>
    57c2:	1c6b      	adds	r3, r5, #1
    57c4:	3502      	adds	r5, #2
    57c6:	00ad      	lsls	r5, r5, #2
    57c8:	6063      	str	r3, [r4, #4]
    57ca:	2000      	movs	r0, #0
    57cc:	512f      	str	r7, [r5, r4]
    57ce:	b003      	add	sp, #12
    57d0:	bc0c      	pop	{r2, r3}
    57d2:	4690      	mov	r8, r2
    57d4:	4699      	mov	r9, r3
    57d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57d8:	00ab      	lsls	r3, r5, #2
    57da:	18e3      	adds	r3, r4, r3
    57dc:	2288      	movs	r2, #136	; 0x88
    57de:	4648      	mov	r0, r9
    57e0:	5098      	str	r0, [r3, r2]
    57e2:	20c4      	movs	r0, #196	; 0xc4
    57e4:	0040      	lsls	r0, r0, #1
    57e6:	1822      	adds	r2, r4, r0
    57e8:	6810      	ldr	r0, [r2, #0]
    57ea:	2101      	movs	r1, #1
    57ec:	40a9      	lsls	r1, r5
    57ee:	4308      	orrs	r0, r1
    57f0:	6010      	str	r0, [r2, #0]
    57f2:	2284      	movs	r2, #132	; 0x84
    57f4:	0052      	lsls	r2, r2, #1
    57f6:	4640      	mov	r0, r8
    57f8:	5098      	str	r0, [r3, r2]
    57fa:	2e02      	cmp	r6, #2
    57fc:	d1e1      	bne.n	57c2 <__register_exitproc+0x62>
    57fe:	22c6      	movs	r2, #198	; 0xc6
    5800:	0052      	lsls	r2, r2, #1
    5802:	18a3      	adds	r3, r4, r2
    5804:	6818      	ldr	r0, [r3, #0]
    5806:	4301      	orrs	r1, r0
    5808:	6019      	str	r1, [r3, #0]
    580a:	e7da      	b.n	57c2 <__register_exitproc+0x62>
    580c:	1c1c      	adds	r4, r3, #0
    580e:	344d      	adds	r4, #77	; 0x4d
    5810:	34ff      	adds	r4, #255	; 0xff
    5812:	515c      	str	r4, [r3, r5]
    5814:	e7b5      	b.n	5782 <__register_exitproc+0x22>
    5816:	46c0      	nop			; (mov r8, r8)
    5818:	00006c90 	.word	0x00006c90
    581c:	00000000 	.word	0x00000000
    5820:	676e6950 	.word	0x676e6950
    5824:	214f5420 	.word	0x214f5420
    5828:	00000000 	.word	0x00000000
    582c:	75626544 	.word	0x75626544
    5830:	00000067 	.word	0x00000067
    5834:	41447249 	.word	0x41447249
    5838:	00000000 	.word	0x00000000
    583c:	676e6950 	.word	0x676e6950
    5840:	00000000 	.word	0x00000000
    5844:	636e7953 	.word	0x636e7953
    5848:	00000000 	.word	0x00000000
    584c:	42000800 	.word	0x42000800
    5850:	42000c00 	.word	0x42000c00
    5854:	42001000 	.word	0x42001000
    5858:	42001400 	.word	0x42001400
    585c:	6c656959 	.word	0x6c656959
    5860:	53492064 	.word	0x53492064
    5864:	00002152 	.word	0x00002152
    5868:	59206f4e 	.word	0x59206f4e
    586c:	646c6569 	.word	0x646c6569
    5870:	68432021 	.word	0x68432021
    5874:	65676e61 	.word	0x65676e61
    5878:	6f742064 	.word	0x6f742064
    587c:	4e495020 	.word	0x4e495020
    5880:	00000047 	.word	0x00000047
    5884:	6e6f7257 	.word	0x6e6f7257
    5888:	61442067 	.word	0x61442067
    588c:	00216174 	.word	0x00216174
    5890:	0c0b0a09 	.word	0x0c0b0a09
    5894:	00001498 	.word	0x00001498
    5898:	000014b2 	.word	0x000014b2
    589c:	000014ce 	.word	0x000014ce
    58a0:	000014ea 	.word	0x000014ea
    58a4:	0000153e 	.word	0x0000153e
    58a8:	00001506 	.word	0x00001506
    58ac:	00001522 	.word	0x00001522
    58b0:	43415254 	.word	0x43415254
    58b4:	53415f45 	.word	0x53415f45
    58b8:	54524553 	.word	0x54524553
    58bc:	5476203a 	.word	0x5476203a
    58c0:	65636172 	.word	0x65636172
    58c4:	6f727245 	.word	0x6f727245
    58c8:	6d203a72 	.word	0x6d203a72
    58cc:	3d206773 	.word	0x3d206773
    58d0:	554e203d 	.word	0x554e203d
    58d4:	00004c4c 	.word	0x00004c4c
    58d8:	43415254 	.word	0x43415254
    58dc:	53415f45 	.word	0x53415f45
    58e0:	54524553 	.word	0x54524553
    58e4:	5476203a 	.word	0x5476203a
    58e8:	65636172 	.word	0x65636172
    58ec:	6f727245 	.word	0x6f727245
    58f0:	52203a72 	.word	0x52203a72
    58f4:	726f6365 	.word	0x726f6365
    58f8:	44726564 	.word	0x44726564
    58fc:	50617461 	.word	0x50617461
    5900:	3d207274 	.word	0x3d207274
    5904:	554e203d 	.word	0x554e203d
    5908:	00004c4c 	.word	0x00004c4c
    590c:	63617254 	.word	0x63617254
    5910:	65522065 	.word	0x65522065
    5914:	64726f63 	.word	0x64726f63
    5918:	44207265 	.word	0x44207265
    591c:	006f6d65 	.word	0x006f6d65
    5920:	63617254 	.word	0x63617254
    5924:	74732065 	.word	0x74732065
    5928:	20747261 	.word	0x20747261
    592c:	6b72616d 	.word	0x6b72616d
    5930:	20737265 	.word	0x20737265
    5934:	65726c61 	.word	0x65726c61
    5938:	20796461 	.word	0x20796461
    593c:	74696e69 	.word	0x74696e69
    5940:	696c6169 	.word	0x696c6169
    5944:	2164657a 	.word	0x2164657a
    5948:	00000000 	.word	0x00000000
    594c:	65747441 	.word	0x65747441
    5950:	2074706d 	.word	0x2074706d
    5954:	69206f74 	.word	0x69206f74
    5958:	7865646e 	.word	0x7865646e
    595c:	74756f20 	.word	0x74756f20
    5960:	65646973 	.word	0x65646973
    5964:	65766520 	.word	0x65766520
    5968:	6220746e 	.word	0x6220746e
    596c:	65666675 	.word	0x65666675
    5970:	00002172 	.word	0x00002172
    5974:	43415254 	.word	0x43415254
    5978:	53415f45 	.word	0x53415f45
    597c:	54524553 	.word	0x54524553
    5980:	6975203a 	.word	0x6975203a
    5984:	65646e49 	.word	0x65646e49
    5988:	4f664f78 	.word	0x4f664f78
    598c:	63656a62 	.word	0x63656a62
    5990:	49203a74 	.word	0x49203a74
    5994:	6c61766e 	.word	0x6c61766e
    5998:	76206469 	.word	0x76206469
    599c:	65756c61 	.word	0x65756c61
    59a0:	726f6620 	.word	0x726f6620
    59a4:	6a626f20 	.word	0x6a626f20
    59a8:	63746365 	.word	0x63746365
    59ac:	7373616c 	.word	0x7373616c
    59b0:	00000000 	.word	0x00000000
    59b4:	43415254 	.word	0x43415254
    59b8:	53415f45 	.word	0x53415f45
    59bc:	54524553 	.word	0x54524553
    59c0:	6975203a 	.word	0x6975203a
    59c4:	65646e49 	.word	0x65646e49
    59c8:	4f664f78 	.word	0x4f664f78
    59cc:	63656a62 	.word	0x63656a62
    59d0:	49203a74 	.word	0x49203a74
    59d4:	6c61766e 	.word	0x6c61766e
    59d8:	76206469 	.word	0x76206469
    59dc:	65756c61 	.word	0x65756c61
    59e0:	726f6620 	.word	0x726f6620
    59e4:	6a626f20 	.word	0x6a626f20
    59e8:	68746365 	.word	0x68746365
    59ec:	6c646e61 	.word	0x6c646e61
    59f0:	00000065 	.word	0x00000065
    59f4:	43415254 	.word	0x43415254
    59f8:	53415f45 	.word	0x53415f45
    59fc:	54524553 	.word	0x54524553
    5a00:	5478203a 	.word	0x5478203a
    5a04:	65636172 	.word	0x65636172
    5a08:	4f746547 	.word	0x4f746547
    5a0c:	63656a62 	.word	0x63656a62
    5a10:	6e614874 	.word	0x6e614874
    5a14:	3a656c64 	.word	0x3a656c64
    5a18:	766e4920 	.word	0x766e4920
    5a1c:	64696c61 	.word	0x64696c61
    5a20:	6c617620 	.word	0x6c617620
    5a24:	66206575 	.word	0x66206575
    5a28:	6f20726f 	.word	0x6f20726f
    5a2c:	63656a62 	.word	0x63656a62
    5a30:	616c6374 	.word	0x616c6374
    5a34:	00007373 	.word	0x00007373
    5a38:	43415254 	.word	0x43415254
    5a3c:	53415f45 	.word	0x53415f45
    5a40:	54524553 	.word	0x54524553
    5a44:	5476203a 	.word	0x5476203a
    5a48:	65636172 	.word	0x65636172
    5a4c:	65657246 	.word	0x65657246
    5a50:	656a624f 	.word	0x656a624f
    5a54:	61487463 	.word	0x61487463
    5a58:	656c646e 	.word	0x656c646e
    5a5c:	6e49203a 	.word	0x6e49203a
    5a60:	696c6176 	.word	0x696c6176
    5a64:	61762064 	.word	0x61762064
    5a68:	2065756c 	.word	0x2065756c
    5a6c:	20726f66 	.word	0x20726f66
    5a70:	656a626f 	.word	0x656a626f
    5a74:	6c637463 	.word	0x6c637463
    5a78:	00737361 	.word	0x00737361
    5a7c:	43415254 	.word	0x43415254
    5a80:	53415f45 	.word	0x53415f45
    5a84:	54524553 	.word	0x54524553
    5a88:	5476203a 	.word	0x5476203a
    5a8c:	65636172 	.word	0x65636172
    5a90:	65657246 	.word	0x65657246
    5a94:	656a624f 	.word	0x656a624f
    5a98:	61487463 	.word	0x61487463
    5a9c:	656c646e 	.word	0x656c646e
    5aa0:	6e49203a 	.word	0x6e49203a
    5aa4:	696c6176 	.word	0x696c6176
    5aa8:	61762064 	.word	0x61762064
    5aac:	2065756c 	.word	0x2065756c
    5ab0:	20726f66 	.word	0x20726f66
    5ab4:	646e6168 	.word	0x646e6168
    5ab8:	0000656c 	.word	0x0000656c
    5abc:	65747441 	.word	0x65747441
    5ac0:	2074706d 	.word	0x2074706d
    5ac4:	66206f74 	.word	0x66206f74
    5ac8:	20656572 	.word	0x20656572
    5acc:	65726f6d 	.word	0x65726f6d
    5ad0:	6e616820 	.word	0x6e616820
    5ad4:	73656c64 	.word	0x73656c64
    5ad8:	61687420 	.word	0x61687420
    5adc:	6c61206e 	.word	0x6c61206e
    5ae0:	61636f6c 	.word	0x61636f6c
    5ae4:	21646574 	.word	0x21646574
    5ae8:	00000000 	.word	0x00000000
    5aec:	43415254 	.word	0x43415254
    5af0:	53415f45 	.word	0x53415f45
    5af4:	54524553 	.word	0x54524553
    5af8:	5476203a 	.word	0x5476203a
    5afc:	65636172 	.word	0x65636172
    5b00:	4f746553 	.word	0x4f746553
    5b04:	63656a62 	.word	0x63656a62
    5b08:	6d614e74 	.word	0x6d614e74
    5b0c:	6e203a65 	.word	0x6e203a65
    5b10:	20656d61 	.word	0x20656d61
    5b14:	4e203d3d 	.word	0x4e203d3d
    5b18:	004c4c55 	.word	0x004c4c55
    5b1c:	656c6c49 	.word	0x656c6c49
    5b20:	206c6167 	.word	0x206c6167
    5b24:	656a626f 	.word	0x656a626f
    5b28:	63207463 	.word	0x63207463
    5b2c:	7373616c 	.word	0x7373616c
    5b30:	206e6920 	.word	0x206e6920
    5b34:	61725476 	.word	0x61725476
    5b38:	65536563 	.word	0x65536563
    5b3c:	6a624f74 	.word	0x6a624f74
    5b40:	4e746365 	.word	0x4e746365
    5b44:	00656d61 	.word	0x00656d61
    5b48:	656c6c49 	.word	0x656c6c49
    5b4c:	206c6167 	.word	0x206c6167
    5b50:	646e6168 	.word	0x646e6168
    5b54:	2820656c 	.word	0x2820656c
    5b58:	69202930 	.word	0x69202930
    5b5c:	5476206e 	.word	0x5476206e
    5b60:	65636172 	.word	0x65636172
    5b64:	4f746553 	.word	0x4f746553
    5b68:	63656a62 	.word	0x63656a62
    5b6c:	6d614e74 	.word	0x6d614e74
    5b70:	00002e65 	.word	0x00002e65
    5b74:	43415254 	.word	0x43415254
    5b78:	53415f45 	.word	0x53415f45
    5b7c:	54524553 	.word	0x54524553
    5b80:	7270203a 	.word	0x7270203a
    5b84:	65684376 	.word	0x65684376
    5b88:	61446b63 	.word	0x61446b63
    5b8c:	6f546174 	.word	0x6f546174
    5b90:	764f6542 	.word	0x764f6542
    5b94:	72777265 	.word	0x72777265
    5b98:	65747469 	.word	0x65747469
    5b9c:	726f466e 	.word	0x726f466e
    5ba0:	746c754d 	.word	0x746c754d
    5ba4:	746e4569 	.word	0x746e4569
    5ba8:	76457972 	.word	0x76457972
    5bac:	73746e65 	.word	0x73746e65
    5bb0:	6f6e203a 	.word	0x6f6e203a
    5bb4:	746e4566 	.word	0x746e4566
    5bb8:	73656972 	.word	0x73656972
    5bbc:	68436f54 	.word	0x68436f54
    5bc0:	206b6365 	.word	0x206b6365
    5bc4:	30203d3d 	.word	0x30203d3d
    5bc8:	00000000 	.word	0x00000000
    5bcc:	43415254 	.word	0x43415254
    5bd0:	53415f45 	.word	0x53415f45
    5bd4:	54524553 	.word	0x54524553
    5bd8:	7270203a 	.word	0x7270203a
    5bdc:	61725476 	.word	0x61725476
    5be0:	65476563 	.word	0x65476563
    5be4:	53544474 	.word	0x53544474
    5be8:	6e49203a 	.word	0x6e49203a
    5bec:	696c6176 	.word	0x696c6176
    5bf0:	61762064 	.word	0x61762064
    5bf4:	2065756c 	.word	0x2065756c
    5bf8:	20726f66 	.word	0x20726f66
    5bfc:	61726170 	.word	0x61726170
    5c00:	616d5f6d 	.word	0x616d5f6d
    5c04:	53544478 	.word	0x53544478
    5c08:	00000000 	.word	0x00000000
    5c0c:	20646142 	.word	0x20646142
    5c10:	61726170 	.word	0x61726170
    5c14:	616d5f6d 	.word	0x616d5f6d
    5c18:	53544478 	.word	0x53544478
    5c1c:	206e6920 	.word	0x206e6920
    5c20:	54767270 	.word	0x54767270
    5c24:	65636172 	.word	0x65636172
    5c28:	44746547 	.word	0x44746547
    5c2c:	00005354 	.word	0x00005354
    5c30:	43415254 	.word	0x43415254
    5c34:	53415f45 	.word	0x53415f45
    5c38:	54524553 	.word	0x54524553
    5c3c:	7270203a 	.word	0x7270203a
    5c40:	61725476 	.word	0x61725476
    5c44:	6f4c6563 	.word	0x6f4c6563
    5c48:	70756b6f 	.word	0x70756b6f
    5c4c:	626d7953 	.word	0x626d7953
    5c50:	61546c6f 	.word	0x61546c6f
    5c54:	45656c62 	.word	0x45656c62
    5c58:	7972746e 	.word	0x7972746e
    5c5c:	616e203a 	.word	0x616e203a
    5c60:	3d20656d 	.word	0x3d20656d
    5c64:	554e203d 	.word	0x554e203d
    5c68:	00004c4c 	.word	0x00004c4c
    5c6c:	43415254 	.word	0x43415254
    5c70:	53415f45 	.word	0x53415f45
    5c74:	54524553 	.word	0x54524553
    5c78:	7270203a 	.word	0x7270203a
    5c7c:	61725476 	.word	0x61725476
    5c80:	6f4c6563 	.word	0x6f4c6563
    5c84:	70756b6f 	.word	0x70756b6f
    5c88:	626d7953 	.word	0x626d7953
    5c8c:	61546c6f 	.word	0x61546c6f
    5c90:	45656c62 	.word	0x45656c62
    5c94:	7972746e 	.word	0x7972746e
    5c98:	656c203a 	.word	0x656c203a
    5c9c:	3d3d206e 	.word	0x3d3d206e
    5ca0:	00003020 	.word	0x00003020
    5ca4:	43415254 	.word	0x43415254
    5ca8:	53415f45 	.word	0x53415f45
    5cac:	54524553 	.word	0x54524553
    5cb0:	7270203a 	.word	0x7270203a
    5cb4:	61725476 	.word	0x61725476
    5cb8:	72436563 	.word	0x72436563
    5cbc:	65746165 	.word	0x65746165
    5cc0:	626d7953 	.word	0x626d7953
    5cc4:	61546c6f 	.word	0x61546c6f
    5cc8:	45656c62 	.word	0x45656c62
    5ccc:	7972746e 	.word	0x7972746e
    5cd0:	616e203a 	.word	0x616e203a
    5cd4:	3d20656d 	.word	0x3d20656d
    5cd8:	554e203d 	.word	0x554e203d
    5cdc:	00004c4c 	.word	0x00004c4c
    5ce0:	43415254 	.word	0x43415254
    5ce4:	53415f45 	.word	0x53415f45
    5ce8:	54524553 	.word	0x54524553
    5cec:	7270203a 	.word	0x7270203a
    5cf0:	61725476 	.word	0x61725476
    5cf4:	72436563 	.word	0x72436563
    5cf8:	65746165 	.word	0x65746165
    5cfc:	626d7953 	.word	0x626d7953
    5d00:	61546c6f 	.word	0x61546c6f
    5d04:	45656c62 	.word	0x45656c62
    5d08:	7972746e 	.word	0x7972746e
    5d0c:	656c203a 	.word	0x656c203a
    5d10:	3d3d206e 	.word	0x3d3d206e
    5d14:	00003020 	.word	0x00003020
    5d18:	626d7953 	.word	0x626d7953
    5d1c:	74206c6f 	.word	0x74206c6f
    5d20:	656c6261 	.word	0x656c6261
    5d24:	6c756620 	.word	0x6c756620
    5d28:	49202e6c 	.word	0x49202e6c
    5d2c:	6572636e 	.word	0x6572636e
    5d30:	20657361 	.word	0x20657361
    5d34:	424d5953 	.word	0x424d5953
    5d38:	545f4c4f 	.word	0x545f4c4f
    5d3c:	454c4241 	.word	0x454c4241
    5d40:	5a49535f 	.word	0x5a49535f
    5d44:	6e692045 	.word	0x6e692045
    5d48:	63727420 	.word	0x63727420
    5d4c:	666e6f43 	.word	0x666e6f43
    5d50:	682e6769 	.word	0x682e6769
    5d54:	00000000 	.word	0x00000000
    5d58:	43415254 	.word	0x43415254
    5d5c:	53415f45 	.word	0x53415f45
    5d60:	54524553 	.word	0x54524553
    5d64:	7270203a 	.word	0x7270203a
    5d68:	61725476 	.word	0x61725476
    5d6c:	65476563 	.word	0x65476563
    5d70:	65684374 	.word	0x65684374
    5d74:	75736b63 	.word	0x75736b63
    5d78:	70203a6d 	.word	0x70203a6d
    5d7c:	656d616e 	.word	0x656d616e
    5d80:	203d3d20 	.word	0x203d3d20
    5d84:	4c4c554e 	.word	0x4c4c554e
    5d88:	00000000 	.word	0x00000000
    5d8c:	43415254 	.word	0x43415254
    5d90:	53415f45 	.word	0x53415f45
    5d94:	54524553 	.word	0x54524553
    5d98:	7270203a 	.word	0x7270203a
    5d9c:	61725476 	.word	0x61725476
    5da0:	65476563 	.word	0x65476563
    5da4:	65684374 	.word	0x65684374
    5da8:	75736b63 	.word	0x75736b63
    5dac:	70203a6d 	.word	0x70203a6d
    5db0:	20637263 	.word	0x20637263
    5db4:	4e203d3d 	.word	0x4e203d3d
    5db8:	004c4c55 	.word	0x004c4c55
    5dbc:	43415254 	.word	0x43415254
    5dc0:	53415f45 	.word	0x53415f45
    5dc4:	54524553 	.word	0x54524553
    5dc8:	7270203a 	.word	0x7270203a
    5dcc:	61725476 	.word	0x61725476
    5dd0:	65476563 	.word	0x65476563
    5dd4:	65684374 	.word	0x65684374
    5dd8:	75736b63 	.word	0x75736b63
    5ddc:	70203a6d 	.word	0x70203a6d
    5de0:	676e656c 	.word	0x676e656c
    5de4:	3d206874 	.word	0x3d206874
    5de8:	554e203d 	.word	0x554e203d
    5dec:	00004c4c 	.word	0x00004c4c
    5df0:	43415254 	.word	0x43415254
    5df4:	53415f45 	.word	0x53415f45
    5df8:	54524553 	.word	0x54524553
    5dfc:	7270203a 	.word	0x7270203a
    5e00:	61725476 	.word	0x61725476
    5e04:	704f6563 	.word	0x704f6563
    5e08:	79536e65 	.word	0x79536e65
    5e0c:	6c6f626d 	.word	0x6c6f626d
    5e10:	616e203a 	.word	0x616e203a
    5e14:	3d20656d 	.word	0x3d20656d
    5e18:	554e203d 	.word	0x554e203d
    5e1c:	00004c4c 	.word	0x00004c4c
    5e20:	43415254 	.word	0x43415254
    5e24:	53415f45 	.word	0x53415f45
    5e28:	54524553 	.word	0x54524553
    5e2c:	5476203a 	.word	0x5476203a
    5e30:	65636172 	.word	0x65636172
    5e34:	726f7453 	.word	0x726f7453
    5e38:	73615465 	.word	0x73615465
    5e3c:	6165526b 	.word	0x6165526b
    5e40:	203a7964 	.word	0x203a7964
    5e44:	61766e49 	.word	0x61766e49
    5e48:	2064696c 	.word	0x2064696c
    5e4c:	756c6176 	.word	0x756c6176
    5e50:	6f662065 	.word	0x6f662065
    5e54:	61682072 	.word	0x61682072
    5e58:	656c646e 	.word	0x656c646e
    5e5c:	00000000 	.word	0x00000000
    5e60:	6f636552 	.word	0x6f636552
    5e64:	72656472 	.word	0x72656472
    5e68:	73756220 	.word	0x73756220
    5e6c:	202d2079 	.word	0x202d2079
    5e70:	68676968 	.word	0x68676968
    5e74:	69727020 	.word	0x69727020
    5e78:	7469726f 	.word	0x7469726f
    5e7c:	53492079 	.word	0x53492079
    5e80:	73752052 	.word	0x73752052
    5e84:	20676e69 	.word	0x20676e69
    5e88:	63737973 	.word	0x63737973
    5e8c:	3f6c6c61 	.word	0x3f6c6c61
    5e90:	29312820 	.word	0x29312820
    5e94:	00000000 	.word	0x00000000
    5e98:	43415254 	.word	0x43415254
    5e9c:	53415f45 	.word	0x53415f45
    5ea0:	54524553 	.word	0x54524553
    5ea4:	5476203a 	.word	0x5476203a
    5ea8:	65636172 	.word	0x65636172
    5eac:	726f7453 	.word	0x726f7453
    5eb0:	776f4c65 	.word	0x776f4c65
    5eb4:	65776f50 	.word	0x65776f50
    5eb8:	49203a72 	.word	0x49203a72
    5ebc:	6c61766e 	.word	0x6c61766e
    5ec0:	66206469 	.word	0x66206469
    5ec4:	2067616c 	.word	0x2067616c
    5ec8:	756c6176 	.word	0x756c6176
    5ecc:	00000065 	.word	0x00000065
    5ed0:	43415254 	.word	0x43415254
    5ed4:	53415f45 	.word	0x53415f45
    5ed8:	54524553 	.word	0x54524553
    5edc:	5476203a 	.word	0x5476203a
    5ee0:	65636172 	.word	0x65636172
    5ee4:	726f7453 	.word	0x726f7453
    5ee8:	72654b65 	.word	0x72654b65
    5eec:	436c656e 	.word	0x436c656e
    5ef0:	3a6c6c61 	.word	0x3a6c6c61
    5ef4:	6f636520 	.word	0x6f636520
    5ef8:	3e206564 	.word	0x3e206564
    5efc:	7830203d 	.word	0x7830203d
    5f00:	00004646 	.word	0x00004646
    5f04:	43415254 	.word	0x43415254
    5f08:	53415f45 	.word	0x53415f45
    5f0c:	54524553 	.word	0x54524553
    5f10:	5476203a 	.word	0x5476203a
    5f14:	65636172 	.word	0x65636172
    5f18:	726f7453 	.word	0x726f7453
    5f1c:	72654b65 	.word	0x72654b65
    5f20:	436c656e 	.word	0x436c656e
    5f24:	3a6c6c61 	.word	0x3a6c6c61
    5f28:	6a626f20 	.word	0x6a626f20
    5f2c:	43746365 	.word	0x43746365
    5f30:	7373616c 	.word	0x7373616c
    5f34:	203d3e20 	.word	0x203d3e20
    5f38:	43415254 	.word	0x43415254
    5f3c:	434e5f45 	.word	0x434e5f45
    5f40:	5353414c 	.word	0x5353414c
    5f44:	00005345 	.word	0x00005345
    5f48:	43415254 	.word	0x43415254
    5f4c:	53415f45 	.word	0x53415f45
    5f50:	54524553 	.word	0x54524553
    5f54:	5476203a 	.word	0x5476203a
    5f58:	65636172 	.word	0x65636172
    5f5c:	726f7453 	.word	0x726f7453
    5f60:	72654b65 	.word	0x72654b65
    5f64:	436c656e 	.word	0x436c656e
    5f68:	3a6c6c61 	.word	0x3a6c6c61
    5f6c:	766e4920 	.word	0x766e4920
    5f70:	64696c61 	.word	0x64696c61
    5f74:	6c617620 	.word	0x6c617620
    5f78:	66206575 	.word	0x66206575
    5f7c:	6f20726f 	.word	0x6f20726f
    5f80:	63656a62 	.word	0x63656a62
    5f84:	6d754e74 	.word	0x6d754e74
    5f88:	00726562 	.word	0x00726562
    5f8c:	6f636552 	.word	0x6f636552
    5f90:	72656472 	.word	0x72656472
    5f94:	73756220 	.word	0x73756220
    5f98:	202d2079 	.word	0x202d2079
    5f9c:	68676968 	.word	0x68676968
    5fa0:	69727020 	.word	0x69727020
    5fa4:	7469726f 	.word	0x7469726f
    5fa8:	53492079 	.word	0x53492079
    5fac:	73752052 	.word	0x73752052
    5fb0:	20676e69 	.word	0x20676e69
    5fb4:	63737973 	.word	0x63737973
    5fb8:	3f6c6c61 	.word	0x3f6c6c61
    5fbc:	29322820 	.word	0x29322820
    5fc0:	00000000 	.word	0x00000000
    5fc4:	43415254 	.word	0x43415254
    5fc8:	53415f45 	.word	0x53415f45
    5fcc:	54524553 	.word	0x54524553
    5fd0:	5476203a 	.word	0x5476203a
    5fd4:	65636172 	.word	0x65636172
    5fd8:	726f7453 	.word	0x726f7453
    5fdc:	72654b65 	.word	0x72654b65
    5fe0:	436c656e 	.word	0x436c656e
    5fe4:	3a6c6c61 	.word	0x3a6c6c61
    5fe8:	74766520 	.word	0x74766520
    5fec:	65646f63 	.word	0x65646f63
    5ff0:	203d3e20 	.word	0x203d3e20
    5ff4:	46467830 	.word	0x46467830
    5ff8:	00000000 	.word	0x00000000
    5ffc:	43415254 	.word	0x43415254
    6000:	53415f45 	.word	0x53415f45
    6004:	54524553 	.word	0x54524553
    6008:	5476203a 	.word	0x5476203a
    600c:	65636172 	.word	0x65636172
    6010:	726f7453 	.word	0x726f7453
    6014:	72654b65 	.word	0x72654b65
    6018:	436c656e 	.word	0x436c656e
    601c:	576c6c61 	.word	0x576c6c61
    6020:	50687469 	.word	0x50687469
    6024:	6d617261 	.word	0x6d617261
    6028:	626f203a 	.word	0x626f203a
    602c:	7463656a 	.word	0x7463656a
    6030:	73616c43 	.word	0x73616c43
    6034:	3d3e2073 	.word	0x3d3e2073
    6038:	41525420 	.word	0x41525420
    603c:	4e5f4543 	.word	0x4e5f4543
    6040:	53414c43 	.word	0x53414c43
    6044:	00534553 	.word	0x00534553
    6048:	43415254 	.word	0x43415254
    604c:	53415f45 	.word	0x53415f45
    6050:	54524553 	.word	0x54524553
    6054:	5476203a 	.word	0x5476203a
    6058:	65636172 	.word	0x65636172
    605c:	726f7453 	.word	0x726f7453
    6060:	72654b65 	.word	0x72654b65
    6064:	436c656e 	.word	0x436c656e
    6068:	576c6c61 	.word	0x576c6c61
    606c:	50687469 	.word	0x50687469
    6070:	6d617261 	.word	0x6d617261
    6074:	6e49203a 	.word	0x6e49203a
    6078:	696c6176 	.word	0x696c6176
    607c:	61762064 	.word	0x61762064
    6080:	2065756c 	.word	0x2065756c
    6084:	20726f66 	.word	0x20726f66
    6088:	656a626f 	.word	0x656a626f
    608c:	754e7463 	.word	0x754e7463
    6090:	7265626d 	.word	0x7265626d
    6094:	00000000 	.word	0x00000000
    6098:	6f636552 	.word	0x6f636552
    609c:	72656472 	.word	0x72656472
    60a0:	73756220 	.word	0x73756220
    60a4:	202d2079 	.word	0x202d2079
    60a8:	68676968 	.word	0x68676968
    60ac:	69727020 	.word	0x69727020
    60b0:	7469726f 	.word	0x7469726f
    60b4:	53492079 	.word	0x53492079
    60b8:	73752052 	.word	0x73752052
    60bc:	20676e69 	.word	0x20676e69
    60c0:	63737973 	.word	0x63737973
    60c4:	3f6c6c61 	.word	0x3f6c6c61
    60c8:	29332820 	.word	0x29332820
    60cc:	00000000 	.word	0x00000000
    60d0:	43415254 	.word	0x43415254
    60d4:	53415f45 	.word	0x53415f45
    60d8:	54524553 	.word	0x54524553
    60dc:	5476203a 	.word	0x5476203a
    60e0:	65636172 	.word	0x65636172
    60e4:	726f7453 	.word	0x726f7453
    60e8:	72654b65 	.word	0x72654b65
    60ec:	436c656e 	.word	0x436c656e
    60f0:	576c6c61 	.word	0x576c6c61
    60f4:	4e687469 	.word	0x4e687469
    60f8:	72656d75 	.word	0x72656d75
    60fc:	61506369 	.word	0x61506369
    6100:	4f6d6172 	.word	0x4f6d6172
    6104:	3a796c6e 	.word	0x3a796c6e
    6108:	766e4920 	.word	0x766e4920
    610c:	64696c61 	.word	0x64696c61
    6110:	6c617620 	.word	0x6c617620
    6114:	66206575 	.word	0x66206575
    6118:	6520726f 	.word	0x6520726f
    611c:	6f637476 	.word	0x6f637476
    6120:	00006564 	.word	0x00006564
    6124:	6f636552 	.word	0x6f636552
    6128:	72656472 	.word	0x72656472
    612c:	73756220 	.word	0x73756220
    6130:	202d2079 	.word	0x202d2079
    6134:	68676968 	.word	0x68676968
    6138:	69727020 	.word	0x69727020
    613c:	7469726f 	.word	0x7469726f
    6140:	53492079 	.word	0x53492079
    6144:	73752052 	.word	0x73752052
    6148:	20676e69 	.word	0x20676e69
    614c:	63737973 	.word	0x63737973
    6150:	3f6c6c61 	.word	0x3f6c6c61
    6154:	29342820 	.word	0x29342820
    6158:	00000000 	.word	0x00000000
    615c:	43415254 	.word	0x43415254
    6160:	53415f45 	.word	0x53415f45
    6164:	54524553 	.word	0x54524553
    6168:	5476203a 	.word	0x5476203a
    616c:	65636172 	.word	0x65636172
    6170:	726f7453 	.word	0x726f7453
    6174:	6a624f65 	.word	0x6a624f65
    6178:	4e746365 	.word	0x4e746365
    617c:	4f656d61 	.word	0x4f656d61
    6180:	6f6c436e 	.word	0x6f6c436e
    6184:	76456573 	.word	0x76456573
    6188:	3a746e65 	.word	0x3a746e65
    618c:	6a626f20 	.word	0x6a626f20
    6190:	63746365 	.word	0x63746365
    6194:	7373616c 	.word	0x7373616c
    6198:	203d3e20 	.word	0x203d3e20
    619c:	43415254 	.word	0x43415254
    61a0:	434e5f45 	.word	0x434e5f45
    61a4:	5353414c 	.word	0x5353414c
    61a8:	00005345 	.word	0x00005345
    61ac:	43415254 	.word	0x43415254
    61b0:	53415f45 	.word	0x53415f45
    61b4:	54524553 	.word	0x54524553
    61b8:	5476203a 	.word	0x5476203a
    61bc:	65636172 	.word	0x65636172
    61c0:	726f7453 	.word	0x726f7453
    61c4:	6a624f65 	.word	0x6a624f65
    61c8:	4e746365 	.word	0x4e746365
    61cc:	4f656d61 	.word	0x4f656d61
    61d0:	6f6c436e 	.word	0x6f6c436e
    61d4:	76456573 	.word	0x76456573
    61d8:	3a746e65 	.word	0x3a746e65
    61dc:	766e4920 	.word	0x766e4920
    61e0:	64696c61 	.word	0x64696c61
    61e4:	6c617620 	.word	0x6c617620
    61e8:	66206575 	.word	0x66206575
    61ec:	6820726f 	.word	0x6820726f
    61f0:	6c646e61 	.word	0x6c646e61
    61f4:	00000065 	.word	0x00000065
    61f8:	43415254 	.word	0x43415254
    61fc:	53415f45 	.word	0x53415f45
    6200:	54524553 	.word	0x54524553
    6204:	5476203a 	.word	0x5476203a
    6208:	65636172 	.word	0x65636172
    620c:	726f7453 	.word	0x726f7453
    6210:	6a624f65 	.word	0x6a624f65
    6214:	50746365 	.word	0x50746365
    6218:	65706f72 	.word	0x65706f72
    621c:	65697472 	.word	0x65697472
    6220:	436e4f73 	.word	0x436e4f73
    6224:	65736f6c 	.word	0x65736f6c
    6228:	6e657645 	.word	0x6e657645
    622c:	6f203a74 	.word	0x6f203a74
    6230:	63656a62 	.word	0x63656a62
    6234:	616c6374 	.word	0x616c6374
    6238:	3e207373 	.word	0x3e207373
    623c:	5254203d 	.word	0x5254203d
    6240:	5f454341 	.word	0x5f454341
    6244:	414c434e 	.word	0x414c434e
    6248:	53455353 	.word	0x53455353
    624c:	00000000 	.word	0x00000000
    6250:	43415254 	.word	0x43415254
    6254:	53415f45 	.word	0x53415f45
    6258:	54524553 	.word	0x54524553
    625c:	5476203a 	.word	0x5476203a
    6260:	65636172 	.word	0x65636172
    6264:	726f7453 	.word	0x726f7453
    6268:	6a624f65 	.word	0x6a624f65
    626c:	50746365 	.word	0x50746365
    6270:	65706f72 	.word	0x65706f72
    6274:	65697472 	.word	0x65697472
    6278:	436e4f73 	.word	0x436e4f73
    627c:	65736f6c 	.word	0x65736f6c
    6280:	6e657645 	.word	0x6e657645
    6284:	49203a74 	.word	0x49203a74
    6288:	6c61766e 	.word	0x6c61766e
    628c:	76206469 	.word	0x76206469
    6290:	65756c61 	.word	0x65756c61
    6294:	726f6620 	.word	0x726f6620
    6298:	6e616820 	.word	0x6e616820
    629c:	00656c64 	.word	0x00656c64
    62a0:	43415254 	.word	0x43415254
    62a4:	53415f45 	.word	0x53415f45
    62a8:	54524553 	.word	0x54524553
    62ac:	5476203a 	.word	0x5476203a
    62b0:	65636172 	.word	0x65636172
    62b4:	50746553 	.word	0x50746553
    62b8:	726f6972 	.word	0x726f6972
    62bc:	50797469 	.word	0x50797469
    62c0:	65706f72 	.word	0x65706f72
    62c4:	3a797472 	.word	0x3a797472
    62c8:	6a626f20 	.word	0x6a626f20
    62cc:	63746365 	.word	0x63746365
    62d0:	7373616c 	.word	0x7373616c
    62d4:	203d3e20 	.word	0x203d3e20
    62d8:	43415254 	.word	0x43415254
    62dc:	434e5f45 	.word	0x434e5f45
    62e0:	5353414c 	.word	0x5353414c
    62e4:	00005345 	.word	0x00005345
    62e8:	43415254 	.word	0x43415254
    62ec:	53415f45 	.word	0x53415f45
    62f0:	54524553 	.word	0x54524553
    62f4:	5476203a 	.word	0x5476203a
    62f8:	65636172 	.word	0x65636172
    62fc:	50746553 	.word	0x50746553
    6300:	726f6972 	.word	0x726f6972
    6304:	50797469 	.word	0x50797469
    6308:	65706f72 	.word	0x65706f72
    630c:	3a797472 	.word	0x3a797472
    6310:	766e4920 	.word	0x766e4920
    6314:	64696c61 	.word	0x64696c61
    6318:	6c617620 	.word	0x6c617620
    631c:	66206575 	.word	0x66206575
    6320:	6920726f 	.word	0x6920726f
    6324:	00000064 	.word	0x00000064
    6328:	43415254 	.word	0x43415254
    632c:	53415f45 	.word	0x53415f45
    6330:	54524553 	.word	0x54524553
    6334:	6975203a 	.word	0x6975203a
    6338:	63617254 	.word	0x63617254
    633c:	74654765 	.word	0x74654765
    6340:	6f697250 	.word	0x6f697250
    6344:	79746972 	.word	0x79746972
    6348:	706f7250 	.word	0x706f7250
    634c:	79747265 	.word	0x79747265
    6350:	626f203a 	.word	0x626f203a
    6354:	7463656a 	.word	0x7463656a
    6358:	73616c63 	.word	0x73616c63
    635c:	3d3e2073 	.word	0x3d3e2073
    6360:	41525420 	.word	0x41525420
    6364:	4e5f4543 	.word	0x4e5f4543
    6368:	53414c43 	.word	0x53414c43
    636c:	00534553 	.word	0x00534553
    6370:	43415254 	.word	0x43415254
    6374:	53415f45 	.word	0x53415f45
    6378:	54524553 	.word	0x54524553
    637c:	6975203a 	.word	0x6975203a
    6380:	63617254 	.word	0x63617254
    6384:	74654765 	.word	0x74654765
    6388:	6f697250 	.word	0x6f697250
    638c:	79746972 	.word	0x79746972
    6390:	706f7250 	.word	0x706f7250
    6394:	79747265 	.word	0x79747265
    6398:	6e49203a 	.word	0x6e49203a
    639c:	696c6176 	.word	0x696c6176
    63a0:	61762064 	.word	0x61762064
    63a4:	2065756c 	.word	0x2065756c
    63a8:	20726f66 	.word	0x20726f66
    63ac:	00006469 	.word	0x00006469
    63b0:	43415254 	.word	0x43415254
    63b4:	53415f45 	.word	0x53415f45
    63b8:	54524553 	.word	0x54524553
    63bc:	5476203a 	.word	0x5476203a
    63c0:	65636172 	.word	0x65636172
    63c4:	4f746553 	.word	0x4f746553
    63c8:	63656a62 	.word	0x63656a62
    63cc:	61745374 	.word	0x61745374
    63d0:	203a6574 	.word	0x203a6574
    63d4:	656a626f 	.word	0x656a626f
    63d8:	6c637463 	.word	0x6c637463
    63dc:	20737361 	.word	0x20737361
    63e0:	54203d3e 	.word	0x54203d3e
    63e4:	45434152 	.word	0x45434152
    63e8:	4c434e5f 	.word	0x4c434e5f
    63ec:	45535341 	.word	0x45535341
    63f0:	00000053 	.word	0x00000053
    63f4:	43415254 	.word	0x43415254
    63f8:	53415f45 	.word	0x53415f45
    63fc:	54524553 	.word	0x54524553
    6400:	5476203a 	.word	0x5476203a
    6404:	65636172 	.word	0x65636172
    6408:	4f746553 	.word	0x4f746553
    640c:	63656a62 	.word	0x63656a62
    6410:	61745374 	.word	0x61745374
    6414:	203a6574 	.word	0x203a6574
    6418:	61766e49 	.word	0x61766e49
    641c:	2064696c 	.word	0x2064696c
    6420:	756c6176 	.word	0x756c6176
    6424:	6f662065 	.word	0x6f662065
    6428:	64692072 	.word	0x64692072
    642c:	00000000 	.word	0x00000000
    6430:	43415254 	.word	0x43415254
    6434:	53415f45 	.word	0x53415f45
    6438:	54524553 	.word	0x54524553
    643c:	6975203a 	.word	0x6975203a
    6440:	63617254 	.word	0x63617254
    6444:	74654765 	.word	0x74654765
    6448:	656a624f 	.word	0x656a624f
    644c:	74537463 	.word	0x74537463
    6450:	3a657461 	.word	0x3a657461
    6454:	6a626f20 	.word	0x6a626f20
    6458:	63746365 	.word	0x63746365
    645c:	7373616c 	.word	0x7373616c
    6460:	203d3e20 	.word	0x203d3e20
    6464:	43415254 	.word	0x43415254
    6468:	434e5f45 	.word	0x434e5f45
    646c:	5353414c 	.word	0x5353414c
    6470:	00005345 	.word	0x00005345
    6474:	43415254 	.word	0x43415254
    6478:	53415f45 	.word	0x53415f45
    647c:	54524553 	.word	0x54524553
    6480:	6975203a 	.word	0x6975203a
    6484:	63617254 	.word	0x63617254
    6488:	74654765 	.word	0x74654765
    648c:	656a624f 	.word	0x656a624f
    6490:	74537463 	.word	0x74537463
    6494:	3a657461 	.word	0x3a657461
    6498:	766e4920 	.word	0x766e4920
    649c:	64696c61 	.word	0x64696c61
    64a0:	6c617620 	.word	0x6c617620
    64a4:	66206575 	.word	0x66206575
    64a8:	6920726f 	.word	0x6920726f
    64ac:	00000064 	.word	0x00000064
    64b0:	43415254 	.word	0x43415254
    64b4:	53415f45 	.word	0x53415f45
    64b8:	54524553 	.word	0x54524553
    64bc:	5476203a 	.word	0x5476203a
    64c0:	65636172 	.word	0x65636172
    64c4:	726f7453 	.word	0x726f7453
    64c8:	73615465 	.word	0x73615465
    64cc:	6977736b 	.word	0x6977736b
    64d0:	3a686374 	.word	0x3a686374
    64d4:	766e4920 	.word	0x766e4920
    64d8:	64696c61 	.word	0x64696c61
    64dc:	6c617620 	.word	0x6c617620
    64e0:	66206575 	.word	0x66206575
    64e4:	7420726f 	.word	0x7420726f
    64e8:	5f6b7361 	.word	0x5f6b7361
    64ec:	646e6168 	.word	0x646e6168
    64f0:	0000656c 	.word	0x0000656c
    64f4:	43415254 	.word	0x43415254
    64f8:	53415f45 	.word	0x53415f45
    64fc:	54524553 	.word	0x54524553
    6500:	5476203a 	.word	0x5476203a
    6504:	65636172 	.word	0x65636172
    6508:	54746553 	.word	0x54746553
    650c:	496b7361 	.word	0x496b7361
    6510:	6174736e 	.word	0x6174736e
    6514:	4665636e 	.word	0x4665636e
    6518:	73696e69 	.word	0x73696e69
    651c:	3a646568 	.word	0x3a646568
    6520:	766e4920 	.word	0x766e4920
    6524:	64696c61 	.word	0x64696c61
    6528:	6c617620 	.word	0x6c617620
    652c:	66206575 	.word	0x66206575
    6530:	6820726f 	.word	0x6820726f
    6534:	6c646e61 	.word	0x6c646e61
    6538:	00000065 	.word	0x00000065
    653c:	0000244c 	.word	0x0000244c
    6540:	00002444 	.word	0x00002444
    6544:	00002448 	.word	0x00002448
    6548:	00002440 	.word	0x00002440
    654c:	0000245c 	.word	0x0000245c
    6550:	00002450 	.word	0x00002450
    6554:	00002454 	.word	0x00002454
    6558:	000024fa 	.word	0x000024fa
    655c:	000024ce 	.word	0x000024ce
    6560:	000024e4 	.word	0x000024e4
    6564:	000024b8 	.word	0x000024b8
    6568:	0000253a 	.word	0x0000253a
    656c:	0000250e 	.word	0x0000250e
    6570:	00002524 	.word	0x00002524
    6574:	20746f4e 	.word	0x20746f4e
    6578:	756f6e65 	.word	0x756f6e65
    657c:	54206867 	.word	0x54206867
    6580:	204b5341 	.word	0x204b5341
    6584:	646e6168 	.word	0x646e6168
    6588:	2073656c 	.word	0x2073656c
    658c:	6e69202d 	.word	0x6e69202d
    6590:	61657263 	.word	0x61657263
    6594:	4e206573 	.word	0x4e206573
    6598:	6b736154 	.word	0x6b736154
    659c:	206e6920 	.word	0x206e6920
    65a0:	43637274 	.word	0x43637274
    65a4:	69666e6f 	.word	0x69666e6f
    65a8:	00682e67 	.word	0x00682e67
    65ac:	20746f4e 	.word	0x20746f4e
    65b0:	756f6e65 	.word	0x756f6e65
    65b4:	49206867 	.word	0x49206867
    65b8:	68205253 	.word	0x68205253
    65bc:	6c646e61 	.word	0x6c646e61
    65c0:	2d207365 	.word	0x2d207365
    65c4:	636e6920 	.word	0x636e6920
    65c8:	73616572 	.word	0x73616572
    65cc:	494e2065 	.word	0x494e2065
    65d0:	69205253 	.word	0x69205253
    65d4:	7274206e 	.word	0x7274206e
    65d8:	6e6f4363 	.word	0x6e6f4363
    65dc:	2e676966 	.word	0x2e676966
    65e0:	00000068 	.word	0x00000068
    65e4:	20746f4e 	.word	0x20746f4e
    65e8:	756f6e65 	.word	0x756f6e65
    65ec:	53206867 	.word	0x53206867
    65f0:	50414d45 	.word	0x50414d45
    65f4:	45524f48 	.word	0x45524f48
    65f8:	6e616820 	.word	0x6e616820
    65fc:	73656c64 	.word	0x73656c64
    6600:	69202d20 	.word	0x69202d20
    6604:	6572636e 	.word	0x6572636e
    6608:	20657361 	.word	0x20657361
    660c:	6d65534e 	.word	0x6d65534e
    6610:	6f687061 	.word	0x6f687061
    6614:	69206572 	.word	0x69206572
    6618:	7274206e 	.word	0x7274206e
    661c:	6e6f4363 	.word	0x6e6f4363
    6620:	2e676966 	.word	0x2e676966
    6624:	00000068 	.word	0x00000068
    6628:	20746f4e 	.word	0x20746f4e
    662c:	756f6e65 	.word	0x756f6e65
    6630:	4d206867 	.word	0x4d206867
    6634:	58455455 	.word	0x58455455
    6638:	6e616820 	.word	0x6e616820
    663c:	73656c64 	.word	0x73656c64
    6640:	69202d20 	.word	0x69202d20
    6644:	6572636e 	.word	0x6572636e
    6648:	20657361 	.word	0x20657361
    664c:	74754d4e 	.word	0x74754d4e
    6650:	69207865 	.word	0x69207865
    6654:	7274206e 	.word	0x7274206e
    6658:	6e6f4363 	.word	0x6e6f4363
    665c:	2e676966 	.word	0x2e676966
    6660:	00000068 	.word	0x00000068
    6664:	20746f4e 	.word	0x20746f4e
    6668:	756f6e65 	.word	0x756f6e65
    666c:	51206867 	.word	0x51206867
    6670:	45554555 	.word	0x45554555
    6674:	6e616820 	.word	0x6e616820
    6678:	73656c64 	.word	0x73656c64
    667c:	69202d20 	.word	0x69202d20
    6680:	6572636e 	.word	0x6572636e
    6684:	20657361 	.word	0x20657361
    6688:	6575514e 	.word	0x6575514e
    668c:	69206575 	.word	0x69206575
    6690:	7274206e 	.word	0x7274206e
    6694:	6e6f4363 	.word	0x6e6f4363
    6698:	2e676966 	.word	0x2e676966
    669c:	00000068 	.word	0x00000068
    66a0:	20746f4e 	.word	0x20746f4e
    66a4:	756f6e65 	.word	0x756f6e65
    66a8:	54206867 	.word	0x54206867
    66ac:	52454d49 	.word	0x52454d49
    66b0:	6e616820 	.word	0x6e616820
    66b4:	73656c64 	.word	0x73656c64
    66b8:	69202d20 	.word	0x69202d20
    66bc:	6572636e 	.word	0x6572636e
    66c0:	20657361 	.word	0x20657361
    66c4:	6d69544e 	.word	0x6d69544e
    66c8:	69207265 	.word	0x69207265
    66cc:	7274206e 	.word	0x7274206e
    66d0:	6e6f4363 	.word	0x6e6f4363
    66d4:	2e676966 	.word	0x2e676966
    66d8:	00000068 	.word	0x00000068
    66dc:	20746f4e 	.word	0x20746f4e
    66e0:	756f6e65 	.word	0x756f6e65
    66e4:	45206867 	.word	0x45206867
    66e8:	544e4556 	.word	0x544e4556
    66ec:	554f5247 	.word	0x554f5247
    66f0:	61682050 	.word	0x61682050
    66f4:	656c646e 	.word	0x656c646e
    66f8:	202d2073 	.word	0x202d2073
    66fc:	72636e69 	.word	0x72636e69
    6700:	65736165 	.word	0x65736165
    6704:	76454e20 	.word	0x76454e20
    6708:	47746e65 	.word	0x47746e65
    670c:	70756f72 	.word	0x70756f72
    6710:	206e6920 	.word	0x206e6920
    6714:	43637274 	.word	0x43637274
    6718:	69666e6f 	.word	0x69666e6f
    671c:	00682e67 	.word	0x00682e67
    6720:	547a7370 	.word	0x547a7370
    6724:	65636172 	.word	0x65636172
    6728:	45746547 	.word	0x45746547
    672c:	726f7272 	.word	0x726f7272
    6730:	646e6148 	.word	0x646e6148
    6734:	3a73656c 	.word	0x3a73656c
    6738:	766e4920 	.word	0x766e4920
    673c:	64696c61 	.word	0x64696c61
    6740:	6a626f20 	.word	0x6a626f20
    6744:	63746365 	.word	0x63746365
    6748:	7373616c 	.word	0x7373616c
    674c:	00000021 	.word	0x00000021
    6750:	43415254 	.word	0x43415254
    6754:	53415f45 	.word	0x53415f45
    6758:	54524553 	.word	0x54524553
    675c:	7270203a 	.word	0x7270203a
    6760:	61725476 	.word	0x61725476
    6764:	73496563 	.word	0x73496563
    6768:	656a624f 	.word	0x656a624f
    676c:	78457463 	.word	0x78457463
    6770:	64756c63 	.word	0x64756c63
    6774:	203a6465 	.word	0x203a6465
    6778:	656a626f 	.word	0x656a626f
    677c:	6c637463 	.word	0x6c637463
    6780:	20737361 	.word	0x20737361
    6784:	54203d3e 	.word	0x54203d3e
    6788:	45434152 	.word	0x45434152
    678c:	4c434e5f 	.word	0x4c434e5f
    6790:	45535341 	.word	0x45535341
    6794:	00000053 	.word	0x00000053
    6798:	43415254 	.word	0x43415254
    679c:	53415f45 	.word	0x53415f45
    67a0:	54524553 	.word	0x54524553
    67a4:	6975203a 	.word	0x6975203a
    67a8:	63617254 	.word	0x63617254
    67ac:	4f734965 	.word	0x4f734965
    67b0:	63656a62 	.word	0x63656a62
    67b4:	63784574 	.word	0x63784574
    67b8:	6564756c 	.word	0x6564756c
    67bc:	49203a64 	.word	0x49203a64
    67c0:	6c61766e 	.word	0x6c61766e
    67c4:	76206469 	.word	0x76206469
    67c8:	65756c61 	.word	0x65756c61
    67cc:	726f6620 	.word	0x726f6620
    67d0:	6e616820 	.word	0x6e616820
    67d4:	00656c64 	.word	0x00656c64
    67d8:	61766e49 	.word	0x61766e49
    67dc:	2064696c 	.word	0x2064696c
    67e0:	656a626f 	.word	0x656a626f
    67e4:	63207463 	.word	0x63207463
    67e8:	7373616c 	.word	0x7373616c
    67ec:	20444920 	.word	0x20444920
    67f0:	75206e69 	.word	0x75206e69
    67f4:	61725469 	.word	0x61725469
    67f8:	73496563 	.word	0x73496563
    67fc:	656a624f 	.word	0x656a624f
    6800:	78457463 	.word	0x78457463
    6804:	64756c63 	.word	0x64756c63
    6808:	00216465 	.word	0x00216465
    680c:	000027b4 	.word	0x000027b4
    6810:	00002954 	.word	0x00002954
    6814:	00002954 	.word	0x00002954
    6818:	00002954 	.word	0x00002954
    681c:	00002954 	.word	0x00002954
    6820:	00002954 	.word	0x00002954
    6824:	00002954 	.word	0x00002954
    6828:	00002954 	.word	0x00002954
    682c:	00002954 	.word	0x00002954
    6830:	00002954 	.word	0x00002954
    6834:	000028fe 	.word	0x000028fe
    6838:	00002954 	.word	0x00002954
    683c:	0000279c 	.word	0x0000279c
    6840:	00002954 	.word	0x00002954
    6844:	000027ea 	.word	0x000027ea
    6848:	00002954 	.word	0x00002954
    684c:	000028be 	.word	0x000028be
    6850:	00002954 	.word	0x00002954
    6854:	00002954 	.word	0x00002954
    6858:	00002954 	.word	0x00002954
    685c:	00002852 	.word	0x00002852
    6860:	00002954 	.word	0x00002954
    6864:	00002954 	.word	0x00002954
    6868:	00002954 	.word	0x00002954
    686c:	00002954 	.word	0x00002954
    6870:	00002954 	.word	0x00002954
    6874:	00002954 	.word	0x00002954
    6878:	000027cc 	.word	0x000027cc
    687c:	00002954 	.word	0x00002954
    6880:	000027b4 	.word	0x000027b4
    6884:	00002954 	.word	0x00002954
    6888:	00002954 	.word	0x00002954
    688c:	000027b4 	.word	0x000027b4
    6890:	43415254 	.word	0x43415254
    6894:	53415f45 	.word	0x53415f45
    6898:	54524553 	.word	0x54524553
    689c:	7277203a 	.word	0x7277203a
    68a0:	49657469 	.word	0x49657469
    68a4:	3233746e 	.word	0x3233746e
    68a8:	7562203a 	.word	0x7562203a
    68ac:	72656666 	.word	0x72656666
    68b0:	203d3d20 	.word	0x203d3d20
    68b4:	4c4c554e 	.word	0x4c4c554e
    68b8:	00000000 	.word	0x00000000
    68bc:	43415254 	.word	0x43415254
    68c0:	53415f45 	.word	0x53415f45
    68c4:	54524553 	.word	0x54524553
    68c8:	7277203a 	.word	0x7277203a
    68cc:	49657469 	.word	0x49657469
    68d0:	3631746e 	.word	0x3631746e
    68d4:	7562203a 	.word	0x7562203a
    68d8:	72656666 	.word	0x72656666
    68dc:	203d3d20 	.word	0x203d3d20
    68e0:	4c4c554e 	.word	0x4c4c554e
    68e4:	00000000 	.word	0x00000000
    68e8:	6f636552 	.word	0x6f636552
    68ec:	72656472 	.word	0x72656472
    68f0:	61746144 	.word	0x61746144
    68f4:	20727450 	.word	0x20727450
    68f8:	4e207369 	.word	0x4e207369
    68fc:	2e4c4c55 	.word	0x2e4c4c55
    6900:	6c614320 	.word	0x6c614320
    6904:	5476206c 	.word	0x5476206c
    6908:	65636172 	.word	0x65636172
    690c:	74696e49 	.word	0x74696e49
    6910:	63617254 	.word	0x63617254
    6914:	74614465 	.word	0x74614465
    6918:	20292861 	.word	0x20292861
    691c:	6f666562 	.word	0x6f666562
    6920:	73206572 	.word	0x73206572
    6924:	74726174 	.word	0x74726174
    6928:	20676e69 	.word	0x20676e69
    692c:	63617274 	.word	0x63617274
    6930:	00002e65 	.word	0x00002e65
    6934:	61747328 	.word	0x61747328
    6938:	70757472 	.word	0x70757472
    693c:	00000029 	.word	0x00000029
    6940:	43415254 	.word	0x43415254
    6944:	53415f45 	.word	0x53415f45
    6948:	54524553 	.word	0x54524553
    694c:	5476203a 	.word	0x5476203a
    6950:	65636172 	.word	0x65636172
    6954:	49746553 	.word	0x49746553
    6958:	72505253 	.word	0x72505253
    695c:	7265706f 	.word	0x7265706f
    6960:	73656974 	.word	0x73656974
    6964:	6e49203a 	.word	0x6e49203a
    6968:	696c6176 	.word	0x696c6176
    696c:	61762064 	.word	0x61762064
    6970:	2065756c 	.word	0x2065756c
    6974:	20726f66 	.word	0x20726f66
    6978:	646e6168 	.word	0x646e6168
    697c:	0000656c 	.word	0x0000656c
    6980:	43415254 	.word	0x43415254
    6984:	53415f45 	.word	0x53415f45
    6988:	54524553 	.word	0x54524553
    698c:	5476203a 	.word	0x5476203a
    6990:	65636172 	.word	0x65636172
    6994:	49746553 	.word	0x49746553
    6998:	72505253 	.word	0x72505253
    699c:	7265706f 	.word	0x7265706f
    69a0:	73656974 	.word	0x73656974
    69a4:	616e203a 	.word	0x616e203a
    69a8:	3d20656d 	.word	0x3d20656d
    69ac:	554e203d 	.word	0x554e203d
    69b0:	00004c4c 	.word	0x00004c4c
    69b4:	656c6c49 	.word	0x656c6c49
    69b8:	206c6167 	.word	0x206c6167
    69bc:	6c6c6163 	.word	0x6c6c6163
    69c0:	206f7420 	.word	0x206f7420
    69c4:	61725476 	.word	0x61725476
    69c8:	74536563 	.word	0x74536563
    69cc:	4965726f 	.word	0x4965726f
    69d0:	65425253 	.word	0x65425253
    69d4:	2c6e6967 	.word	0x2c6e6967
    69d8:	63657220 	.word	0x63657220
    69dc:	6564726f 	.word	0x6564726f
    69e0:	75622072 	.word	0x75622072
    69e4:	00217973 	.word	0x00217973
    69e8:	43415254 	.word	0x43415254
    69ec:	53415f45 	.word	0x53415f45
    69f0:	54524553 	.word	0x54524553
    69f4:	5476203a 	.word	0x5476203a
    69f8:	65636172 	.word	0x65636172
    69fc:	726f7453 	.word	0x726f7453
    6a00:	52534965 	.word	0x52534965
    6a04:	69676542 	.word	0x69676542
    6a08:	49203a6e 	.word	0x49203a6e
    6a0c:	6c61766e 	.word	0x6c61766e
    6a10:	76206469 	.word	0x76206469
    6a14:	65756c61 	.word	0x65756c61
    6a18:	726f6620 	.word	0x726f6620
    6a1c:	6e616820 	.word	0x6e616820
    6a20:	00656c64 	.word	0x00656c64
    6a24:	206f6f54 	.word	0x206f6f54
    6a28:	796e616d 	.word	0x796e616d
    6a2c:	73656e20 	.word	0x73656e20
    6a30:	20646574 	.word	0x20646574
    6a34:	65746e69 	.word	0x65746e69
    6a38:	70757272 	.word	0x70757272
    6a3c:	00217374 	.word	0x00217374
    6a40:	656c6c49 	.word	0x656c6c49
    6a44:	206c6167 	.word	0x206c6167
    6a48:	6c6c6163 	.word	0x6c6c6163
    6a4c:	206f7420 	.word	0x206f7420
    6a50:	61725476 	.word	0x61725476
    6a54:	74536563 	.word	0x74536563
    6a58:	4965726f 	.word	0x4965726f
    6a5c:	6e455253 	.word	0x6e455253
    6a60:	72202c64 	.word	0x72202c64
    6a64:	726f6365 	.word	0x726f6365
    6a68:	20726564 	.word	0x20726564
    6a6c:	79737562 	.word	0x79737562
    6a70:	00000021 	.word	0x00000021
    6a74:	616d6e55 	.word	0x616d6e55
    6a78:	65686374 	.word	0x65686374
    6a7c:	61632064 	.word	0x61632064
    6a80:	74206c6c 	.word	0x74206c6c
    6a84:	5476206f 	.word	0x5476206f
    6a88:	65636172 	.word	0x65636172
    6a8c:	726f7453 	.word	0x726f7453
    6a90:	52534965 	.word	0x52534965
    6a94:	20646e45 	.word	0x20646e45
    6a98:	53496e28 	.word	0x53496e28
    6a9c:	74636152 	.word	0x74636152
    6aa0:	20657669 	.word	0x20657669
    6aa4:	30203d3d 	.word	0x30203d3d
    6aa8:	7865202c 	.word	0x7865202c
    6aac:	74636570 	.word	0x74636570
    6ab0:	3e206465 	.word	0x3e206465
    6ab4:	00293020 	.word	0x00293020
    6ab8:	43415254 	.word	0x43415254
    6abc:	53415f45 	.word	0x53415f45
    6ac0:	54524553 	.word	0x54524553
    6ac4:	5476203a 	.word	0x5476203a
    6ac8:	65636172 	.word	0x65636172
    6acc:	72657355 	.word	0x72657355
    6ad0:	6e657645 	.word	0x6e657645
    6ad4:	49203a74 	.word	0x49203a74
    6ad8:	6c61766e 	.word	0x6c61766e
    6adc:	76206469 	.word	0x76206469
    6ae0:	65756c61 	.word	0x65756c61
    6ae4:	726f6620 	.word	0x726f6620
    6ae8:	65766520 	.word	0x65766520
    6aec:	614c746e 	.word	0x614c746e
    6af0:	006c6562 	.word	0x006c6562
    6af4:	43415254 	.word	0x43415254
    6af8:	53415f45 	.word	0x53415f45
    6afc:	54524553 	.word	0x54524553
    6b00:	5478203a 	.word	0x5478203a
    6b04:	65636172 	.word	0x65636172
    6b08:	6e65704f 	.word	0x6e65704f
    6b0c:	6562614c 	.word	0x6562614c
    6b10:	6c203a6c 	.word	0x6c203a6c
    6b14:	6c656261 	.word	0x6c656261
    6b18:	203d3d20 	.word	0x203d3d20
    6b1c:	4c4c554e 	.word	0x4c4c554e
    6b20:	00000000 	.word	0x00000000
    6b24:	43415254 	.word	0x43415254
    6b28:	53415f45 	.word	0x53415f45
    6b2c:	54524553 	.word	0x54524553
    6b30:	5476203a 	.word	0x5476203a
    6b34:	65636172 	.word	0x65636172
    6b38:	6e697250 	.word	0x6e697250
    6b3c:	203a4674 	.word	0x203a4674
    6b40:	6d726f66 	.word	0x6d726f66
    6b44:	74537461 	.word	0x74537461
    6b48:	3d3d2072 	.word	0x3d3d2072
    6b4c:	4c554e20 	.word	0x4c554e20
    6b50:	0000004c 	.word	0x0000004c
    6b54:	61725476 	.word	0x61725476
    6b58:	72506563 	.word	0x72506563
    6b5c:	46746e69 	.word	0x46746e69
    6b60:	54202d20 	.word	0x54202d20
    6b64:	6d206f6f 	.word	0x6d206f6f
    6b68:	20796e61 	.word	0x20796e61
    6b6c:	75677261 	.word	0x75677261
    6b70:	746e656d 	.word	0x746e656d
    6b74:	6d202c73 	.word	0x6d202c73
    6b78:	31207861 	.word	0x31207861
    6b7c:	6c612035 	.word	0x6c612035
    6b80:	65776f6c 	.word	0x65776f6c
    6b84:	00002164 	.word	0x00002164
    6b88:	61725476 	.word	0x61725476
    6b8c:	72506563 	.word	0x72506563
    6b90:	46746e69 	.word	0x46746e69
    6b94:	54202d20 	.word	0x54202d20
    6b98:	6c206f6f 	.word	0x6c206f6f
    6b9c:	65677261 	.word	0x65677261
    6ba0:	67726120 	.word	0x67726120
    6ba4:	6e656d75 	.word	0x6e656d75
    6ba8:	202c7374 	.word	0x202c7374
    6bac:	2078616d 	.word	0x2078616d
    6bb0:	62203233 	.word	0x62203233
    6bb4:	20657479 	.word	0x20657479
    6bb8:	6f6c6c61 	.word	0x6f6c6c61
    6bbc:	21646577 	.word	0x21646577
    6bc0:	00000000 	.word	0x00000000
    6bc4:	454c4449 	.word	0x454c4449
    6bc8:	00000000 	.word	0x00000000
    6bcc:	00004806 	.word	0x00004806
    6bd0:	00004806 	.word	0x00004806
    6bd4:	00004806 	.word	0x00004806
    6bd8:	0000485e 	.word	0x0000485e
    6bdc:	00004840 	.word	0x00004840
    6be0:	00004858 	.word	0x00004858
    6be4:	00004806 	.word	0x00004806
    6be8:	00004806 	.word	0x00004806
    6bec:	0000485e 	.word	0x0000485e
    6bf0:	00004840 	.word	0x00004840
    6bf4:	20726d54 	.word	0x20726d54
    6bf8:	00637653 	.word	0x00637653
    6bfc:	000049b8 	.word	0x000049b8
    6c00:	00004a14 	.word	0x00004a14
    6c04:	00004a14 	.word	0x00004a14
    6c08:	000049b2 	.word	0x000049b2
    6c0c:	000049b2 	.word	0x000049b2
    6c10:	000049ce 	.word	0x000049ce
    6c14:	000049be 	.word	0x000049be
    6c18:	000049d4 	.word	0x000049d4
    6c1c:	00004a02 	.word	0x00004a02
    6c20:	00004bf0 	.word	0x00004bf0
    6c24:	00004c5c 	.word	0x00004c5c
    6c28:	00004c5c 	.word	0x00004c5c
    6c2c:	00004bd0 	.word	0x00004bd0
    6c30:	00004be2 	.word	0x00004be2
    6c34:	00004bfe 	.word	0x00004bfe
    6c38:	00004bd4 	.word	0x00004bd4
    6c3c:	00004c0c 	.word	0x00004c0c
    6c40:	00004c4c 	.word	0x00004c4c
    6c44:	00004c94 	.word	0x00004c94
    6c48:	00004cd6 	.word	0x00004cd6
    6c4c:	00004cd6 	.word	0x00004cd6
    6c50:	00004cd6 	.word	0x00004cd6
    6c54:	00004c86 	.word	0x00004c86
    6c58:	00004ca2 	.word	0x00004ca2
    6c5c:	00004c78 	.word	0x00004c78
    6c60:	00004cb0 	.word	0x00004cb0
    6c64:	00004cc6 	.word	0x00004cc6
    6c68:	00004cf8 	.word	0x00004cf8
    6c6c:	00004d2e 	.word	0x00004d2e
    6c70:	00004d2e 	.word	0x00004d2e
    6c74:	00004cf4 	.word	0x00004cf4
    6c78:	00004d1c 	.word	0x00004d1c
    6c7c:	00004cfc 	.word	0x00004cfc
    6c80:	00004d18 	.word	0x00004d18
    6c84:	00004d00 	.word	0x00004d00
    6c88:	00004d04 	.word	0x00004d04
    6c8c:	00000043 	.word	0x00000043

00006c90 <_global_impure_ptr>:
    6c90:	20000020                                 .. 

00006c94 <_init>:
    6c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c96:	46c0      	nop			; (mov r8, r8)
    6c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6c9a:	bc08      	pop	{r3}
    6c9c:	469e      	mov	lr, r3
    6c9e:	4770      	bx	lr

00006ca0 <__init_array_start>:
    6ca0:	00005709 	.word	0x00005709

00006ca4 <__frame_dummy_init_array_entry>:
    6ca4:	000000d9                                ....

00006ca8 <_fini>:
    6ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6caa:	46c0      	nop			; (mov r8, r8)
    6cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6cae:	bc08      	pop	{r3}
    6cb0:	469e      	mov	lr, r3
    6cb2:	4770      	bx	lr

00006cb4 <__fini_array_start>:
    6cb4:	000000b1 	.word	0x000000b1
