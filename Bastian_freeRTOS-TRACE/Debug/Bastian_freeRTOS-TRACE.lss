
Bastian_freeRTOS-TRACE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007d28  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .got          000002cc  00007d28  00007d28  0000fd28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .got.plt      0000000c  00007ff4  00007ff4  0000fff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .relocate     00000448  20000000  00008000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00002ab4  20000448  00008448  00010448  2**2
                  ALLOC
  5 .stack        00002004  20002efc  0000aefc  00010448  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00010448  2**0
                  CONTENTS, READONLY
  7 .comment      0000005b  00000000  00000000  00010470  2**0
                  CONTENTS, READONLY
  8 .debug_info   00025376  00000000  00000000  000104cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003afd  00000000  00000000  00035841  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000b40d  00000000  00000000  0003933e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000009d0  00000000  00000000  0004474b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a98  00000000  00000000  0004511b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00019c7a  00000000  00000000  00045bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001005f  00000000  00000000  0005f82d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00090938  00000000  00000000  0006f88c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001de8  00000000  00000000  001001c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20004f00 	.word	0x20004f00
       4:	00005961 	.word	0x00005961
       8:	0000595d 	.word	0x0000595d
       c:	0000595d 	.word	0x0000595d
	...
      2c:	000033e5 	.word	0x000033e5
	...
      38:	00003459 	.word	0x00003459
      3c:	0000349d 	.word	0x0000349d
      40:	0000595d 	.word	0x0000595d
      44:	0000595d 	.word	0x0000595d
      48:	0000595d 	.word	0x0000595d
      4c:	0000595d 	.word	0x0000595d
      50:	0000595d 	.word	0x0000595d
      54:	0000595d 	.word	0x0000595d
      58:	0000595d 	.word	0x0000595d
      5c:	0000595d 	.word	0x0000595d
      60:	0000595d 	.word	0x0000595d
      64:	00000dd1 	.word	0x00000dd1
      68:	00000de5 	.word	0x00000de5
      6c:	00000df9 	.word	0x00000df9
      70:	00000e0d 	.word	0x00000e0d
	...
      7c:	0000595d 	.word	0x0000595d
      80:	0000595d 	.word	0x0000595d
      84:	0000595d 	.word	0x0000595d
      88:	0000595d 	.word	0x0000595d
      8c:	0000595d 	.word	0x0000595d
      90:	0000595d 	.word	0x0000595d
	...
      9c:	0000595d 	.word	0x0000595d
      a0:	0000595d 	.word	0x0000595d
      a4:	0000595d 	.word	0x0000595d
      a8:	0000595d 	.word	0x0000595d
      ac:	0000595d 	.word	0x0000595d

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000448 	.word	0x20000448
      d0:	00000000 	.word	0x00000000
      d4:	00007d28 	.word	0x00007d28

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	00007d28 	.word	0x00007d28
     104:	2000044c 	.word	0x2000044c
     108:	00007d28 	.word	0x00007d28
     10c:	00000000 	.word	0x00000000

00000110 <timer_irda_sync_callback>:
	system_interrupt_disable_global();
}

void timer_irda_sync_callback(TimerHandle_t pxTimer) 
{
	configASSERT( pxTimer );
     110:	2800      	cmp	r0, #0
     112:	d101      	bne.n	118 <timer_irda_sync_callback+0x8>
     114:	b672      	cpsid	i
     116:	e7fe      	b.n	116 <timer_irda_sync_callback+0x6>
	
	
     118:	4770      	bx	lr
     11a:	46c0      	nop			; (mov r8, r8)

0000011c <irda_communication_task>:

//#define IRDA_BEACON_PING	(( uint8_t ) 0x01 )		// This is the 
uint8_t irda_comm_state;
uint8_t irda_tx_array[6] = { 0 };
uint8_t irda_rx_array[6] = { 0 };
void irda_communication_task(void) {
     11c:	b5f0      	push	{r4, r5, r6, r7, lr}
     11e:	4657      	mov	r7, sl
     120:	464e      	mov	r6, r9
     122:	4645      	mov	r5, r8
     124:	b4e0      	push	{r5, r6, r7}
     126:	b084      	sub	sp, #16
     128:	4c54      	ldr	r4, [pc, #336]	; (27c <irda_communication_task+0x160>)
     12a:	447c      	add	r4, pc
	
	// Start this task by pinging out
	irda_comm_state = IRDA_SLAT_PING;
     12c:	4b54      	ldr	r3, [pc, #336]	; (280 <irda_communication_task+0x164>)
     12e:	58e3      	ldr	r3, [r4, r3]
     130:	9302      	str	r3, [sp, #8]
     132:	2301      	movs	r3, #1
     134:	9902      	ldr	r1, [sp, #8]
     136:	700b      	strb	r3, [r1, #0]
	
	while (1) {
		//port_pin_toggle_output_level(LED_BUSY);
		//vTracePrintF(event_channel, "IRDA: %d", irda_comm_state);
		switch( irda_comm_state )
     138:	4b51      	ldr	r3, [pc, #324]	; (280 <irda_communication_task+0x164>)
     13a:	58e2      	ldr	r2, [r4, r3]
     13c:	4690      	mov	r8, r2
				usart_read_buffer_job( &irda_master, irda_rx_array, 3 );	// Try to get the 3-Byte ping
			break;
			case IRDA_SLAT_FIRST:  // Send the response back and reset
				
				// Send out the ping and wait
				irda_tx_array[0] = 0xBB;
     13e:	23bb      	movs	r3, #187	; 0xbb
     140:	469a      	mov	sl, r3
				crc_generate(&irda_tx_array, 4);	// Generate the CRC byte for this packet
				
				//vTracePrintF(event_channel, "Send Resp.");
				
				// Send this data now
				xTimerReset( timer_IrDA_Ping, 0 );
     142:	2500      	movs	r5, #0
	irda_comm_state = IRDA_SLAT_PING;
	
	while (1) {
		//port_pin_toggle_output_level(LED_BUSY);
		//vTracePrintF(event_channel, "IRDA: %d", irda_comm_state);
		switch( irda_comm_state )
     144:	4646      	mov	r6, r8
     146:	7833      	ldrb	r3, [r6, #0]
     148:	2b02      	cmp	r3, #2
     14a:	d03d      	beq.n	1c8 <irda_communication_task+0xac>
     14c:	2b05      	cmp	r3, #5
     14e:	d060      	beq.n	212 <irda_communication_task+0xf6>
     150:	2b01      	cmp	r3, #1
     152:	d000      	beq.n	156 <irda_communication_task+0x3a>
     154:	e081      	b.n	25a <irda_communication_task+0x13e>
		{
			case IRDA_SLAT_PING:
				irda_timed_out = pdFALSE;
     156:	4b4b      	ldr	r3, [pc, #300]	; (284 <irda_communication_task+0x168>)
     158:	58e3      	ldr	r3, [r4, r3]
     15a:	601d      	str	r5, [r3, #0]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     15c:	4b4a      	ldr	r3, [pc, #296]	; (288 <irda_communication_task+0x16c>)
     15e:	2280      	movs	r2, #128	; 0x80
     160:	0492      	lsls	r2, r2, #18
     162:	615a      	str	r2, [r3, #20]
     164:	2280      	movs	r2, #128	; 0x80
     166:	0512      	lsls	r2, r2, #20
     168:	615a      	str	r2, [r3, #20]
				port_pin_set_output_level(LED_ERROR, pdFALSE);
				port_pin_set_output_level(LED_BUSY, pdFALSE);
				
				// Start the necessary timers 
				//vTracePrintF(event_channel, "Rx Request.");
				xTimerReset( timer_IrDA_Ping, 0 );
     16a:	4b48      	ldr	r3, [pc, #288]	; (28c <irda_communication_task+0x170>)
     16c:	58e3      	ldr	r3, [r4, r3]
     16e:	681e      	ldr	r6, [r3, #0]
     170:	4b47      	ldr	r3, [pc, #284]	; (290 <irda_communication_task+0x174>)
     172:	58e3      	ldr	r3, [r4, r3]
     174:	4798      	blx	r3
     176:	1c02      	adds	r2, r0, #0
     178:	9500      	str	r5, [sp, #0]
     17a:	1c30      	adds	r0, r6, #0
     17c:	2102      	movs	r1, #2
     17e:	1c2b      	adds	r3, r5, #0
     180:	4e44      	ldr	r6, [pc, #272]	; (294 <irda_communication_task+0x178>)
     182:	59a6      	ldr	r6, [r4, r6]
     184:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     186:	4b44      	ldr	r3, [pc, #272]	; (298 <irda_communication_task+0x17c>)
     188:	58e3      	ldr	r3, [r4, r3]
     18a:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     18c:	69d1      	ldr	r1, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     18e:	2900      	cmp	r1, #0
     190:	d1fc      	bne.n	18c <irda_communication_task+0x70>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
     192:	6851      	ldr	r1, [r2, #4]
     194:	2380      	movs	r3, #128	; 0x80
     196:	029b      	lsls	r3, r3, #10
     198:	430b      	orrs	r3, r1
     19a:	6053      	str	r3, [r2, #4]
			module->receiver_enabled = true;
     19c:	4b3e      	ldr	r3, [pc, #248]	; (298 <irda_communication_task+0x17c>)
     19e:	58e3      	ldr	r3, [r4, r3]
     1a0:	9302      	str	r3, [sp, #8]
     1a2:	2301      	movs	r3, #1
     1a4:	9f02      	ldr	r7, [sp, #8]
     1a6:	71bb      	strb	r3, [r7, #6]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     1a8:	69d1      	ldr	r1, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     1aa:	2900      	cmp	r1, #0
     1ac:	d1fc      	bne.n	1a8 <irda_communication_task+0x8c>
				//xTimerReset( timer_IrDA_Sync, 0 );	// Reset, immediately, the syncing timers
				
				usart_enable_transceiver( &irda_master, USART_TRANSCEIVER_RX );	// Enable Receiving Transceiver
				usart_read_buffer_job( &irda_master, irda_rx_array, 3 );	// Try to get the 3-Byte ping
     1ae:	4b3a      	ldr	r3, [pc, #232]	; (298 <irda_communication_task+0x17c>)
     1b0:	58e3      	ldr	r3, [r4, r3]
     1b2:	9302      	str	r3, [sp, #8]
     1b4:	4b39      	ldr	r3, [pc, #228]	; (29c <irda_communication_task+0x180>)
     1b6:	58e3      	ldr	r3, [r4, r3]
     1b8:	9303      	str	r3, [sp, #12]
     1ba:	9802      	ldr	r0, [sp, #8]
     1bc:	1c19      	adds	r1, r3, #0
     1be:	2203      	movs	r2, #3
     1c0:	4b37      	ldr	r3, [pc, #220]	; (2a0 <irda_communication_task+0x184>)
     1c2:	58e3      	ldr	r3, [r4, r3]
     1c4:	4798      	blx	r3
			break;
     1c6:	e048      	b.n	25a <irda_communication_task+0x13e>
			case IRDA_SLAT_FIRST:  // Send the response back and reset
				
				// Send out the ping and wait
				irda_tx_array[0] = 0xBB;
     1c8:	4b36      	ldr	r3, [pc, #216]	; (2a4 <irda_communication_task+0x188>)
     1ca:	58e6      	ldr	r6, [r4, r3]
     1cc:	4651      	mov	r1, sl
     1ce:	7031      	strb	r1, [r6, #0]
				irda_tx_array[1] = 0xBB;
     1d0:	7071      	strb	r1, [r6, #1]
				irda_tx_array[2] = 0xBB;
     1d2:	70b1      	strb	r1, [r6, #2]
				irda_tx_array[3] = 0xBB;
     1d4:	70f1      	strb	r1, [r6, #3]
				//irda_tx_array[4] = 0xBB;
				
				crc_generate(&irda_tx_array, 4);	// Generate the CRC byte for this packet
     1d6:	1c30      	adds	r0, r6, #0
     1d8:	2104      	movs	r1, #4
     1da:	4b33      	ldr	r3, [pc, #204]	; (2a8 <irda_communication_task+0x18c>)
     1dc:	58e3      	ldr	r3, [r4, r3]
     1de:	4798      	blx	r3
				
				//vTracePrintF(event_channel, "Send Resp.");
				
				// Send this data now
				xTimerReset( timer_IrDA_Ping, 0 );
     1e0:	4b2a      	ldr	r3, [pc, #168]	; (28c <irda_communication_task+0x170>)
     1e2:	58e3      	ldr	r3, [r4, r3]
     1e4:	681a      	ldr	r2, [r3, #0]
     1e6:	4691      	mov	r9, r2
     1e8:	4b29      	ldr	r3, [pc, #164]	; (290 <irda_communication_task+0x174>)
     1ea:	58e3      	ldr	r3, [r4, r3]
     1ec:	4798      	blx	r3
     1ee:	1c02      	adds	r2, r0, #0
     1f0:	9500      	str	r5, [sp, #0]
     1f2:	4648      	mov	r0, r9
     1f4:	2102      	movs	r1, #2
     1f6:	1c2b      	adds	r3, r5, #0
     1f8:	4f26      	ldr	r7, [pc, #152]	; (294 <irda_communication_task+0x178>)
     1fa:	59e7      	ldr	r7, [r4, r7]
     1fc:	47b8      	blx	r7
				usart_write_buffer_job(&irda_master, irda_tx_array, 5);
     1fe:	4b26      	ldr	r3, [pc, #152]	; (298 <irda_communication_task+0x17c>)
     200:	58e3      	ldr	r3, [r4, r3]
     202:	9302      	str	r3, [sp, #8]
     204:	1c18      	adds	r0, r3, #0
     206:	1c31      	adds	r1, r6, #0
     208:	2205      	movs	r2, #5
     20a:	4b28      	ldr	r3, [pc, #160]	; (2ac <irda_communication_task+0x190>)
     20c:	58e3      	ldr	r3, [r4, r3]
     20e:	4798      	blx	r3
			break;
     210:	e023      	b.n	25a <irda_communication_task+0x13e>
			case IRDA_SLAT_STAGE_7A:
				// Post r010716-1818:: This stage sends the next message 0xDD
				// Send out the ping and wait
				irda_tx_array[0] = 0xDD;
     212:	4b24      	ldr	r3, [pc, #144]	; (2a4 <irda_communication_task+0x188>)
     214:	58e6      	ldr	r6, [r4, r3]
     216:	23dd      	movs	r3, #221	; 0xdd
     218:	7033      	strb	r3, [r6, #0]
				irda_tx_array[1] = 0xDD;
     21a:	7073      	strb	r3, [r6, #1]
				irda_tx_array[2] = 0xDD;
     21c:	70b3      	strb	r3, [r6, #2]
				irda_tx_array[3] = 0xDD;
     21e:	70f3      	strb	r3, [r6, #3]
				//irda_tx_array[4] = 0xDD;
				
				crc_generate(&irda_tx_array, 4);	// Generate the CRC byte for this packet
     220:	1c30      	adds	r0, r6, #0
     222:	2104      	movs	r1, #4
     224:	4b20      	ldr	r3, [pc, #128]	; (2a8 <irda_communication_task+0x18c>)
     226:	58e3      	ldr	r3, [r4, r3]
     228:	4798      	blx	r3
				
				//vTracePrintF(event_channel, "Send Resp.");
				
				// Send this data now
				xTimerReset( timer_IrDA_Ping, 0 );
     22a:	4b18      	ldr	r3, [pc, #96]	; (28c <irda_communication_task+0x170>)
     22c:	58e3      	ldr	r3, [r4, r3]
     22e:	6819      	ldr	r1, [r3, #0]
     230:	4689      	mov	r9, r1
     232:	4b17      	ldr	r3, [pc, #92]	; (290 <irda_communication_task+0x174>)
     234:	58e3      	ldr	r3, [r4, r3]
     236:	4798      	blx	r3
     238:	1c02      	adds	r2, r0, #0
     23a:	9500      	str	r5, [sp, #0]
     23c:	4648      	mov	r0, r9
     23e:	2102      	movs	r1, #2
     240:	1c2b      	adds	r3, r5, #0
     242:	4f14      	ldr	r7, [pc, #80]	; (294 <irda_communication_task+0x178>)
     244:	59e7      	ldr	r7, [r4, r7]
     246:	47b8      	blx	r7
				usart_write_buffer_job(&irda_master, irda_tx_array, 5);
     248:	4b13      	ldr	r3, [pc, #76]	; (298 <irda_communication_task+0x17c>)
     24a:	58e3      	ldr	r3, [r4, r3]
     24c:	9302      	str	r3, [sp, #8]
     24e:	1c18      	adds	r0, r3, #0
     250:	1c31      	adds	r1, r6, #0
     252:	2205      	movs	r2, #5
     254:	4b15      	ldr	r3, [pc, #84]	; (2ac <irda_communication_task+0x190>)
     256:	58e3      	ldr	r3, [r4, r3]
     258:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     25a:	4b15      	ldr	r3, [pc, #84]	; (2b0 <irda_communication_task+0x194>)
     25c:	58e6      	ldr	r6, [r4, r3]
     25e:	2301      	movs	r3, #1
     260:	7033      	strb	r3, [r6, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     262:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     266:	b662      	cpsie	i
			break;
		}
		
		system_interrupt_enable_global();
		vTaskSuspend( NULL );
     268:	1c28      	adds	r0, r5, #0
     26a:	4b12      	ldr	r3, [pc, #72]	; (2b4 <irda_communication_task+0x198>)
     26c:	58e3      	ldr	r3, [r4, r3]
     26e:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     270:	b672      	cpsid	i
     272:	f3bf 8f5f 	dmb	sy
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
	cpu_irq_disable();
     276:	7035      	strb	r5, [r6, #0]
     278:	e764      	b.n	144 <irda_communication_task+0x28>
     27a:	46c0      	nop			; (mov r8, r8)
     27c:	00007bfa 	.word	0x00007bfa
     280:	0000010c 	.word	0x0000010c
     284:	000001b0 	.word	0x000001b0
     288:	41004400 	.word	0x41004400
     28c:	00000198 	.word	0x00000198
     290:	00000100 	.word	0x00000100
     294:	00000184 	.word	0x00000184
     298:	00000188 	.word	0x00000188
     29c:	0000003c 	.word	0x0000003c
     2a0:	00000218 	.word	0x00000218
     2a4:	000000c8 	.word	0x000000c8
     2a8:	000001d0 	.word	0x000001d0
     2ac:	00000290 	.word	0x00000290
     2b0:	000000b8 	.word	0x000000b8
     2b4:	0000018c 	.word	0x0000018c

000002b8 <timer_irda_ping_callback>:
}


// vTracePrintF(event_channel, "IrDA Reset!");
void timer_irda_ping_callback(TimerHandle_t pxTimer) 
{
     2b8:	b510      	push	{r4, lr}
     2ba:	b082      	sub	sp, #8
     2bc:	4c25      	ldr	r4, [pc, #148]	; (354 <timer_irda_ping_callback+0x9c>)
     2be:	447c      	add	r4, pc
     2c0:	b672      	cpsid	i
     2c2:	f3bf 8f5f 	dmb	sy
     2c6:	4b24      	ldr	r3, [pc, #144]	; (358 <timer_irda_ping_callback+0xa0>)
     2c8:	58e3      	ldr	r3, [r4, r3]
     2ca:	9301      	str	r3, [sp, #4]
     2cc:	2300      	movs	r3, #0
     2ce:	9a01      	ldr	r2, [sp, #4]
     2d0:	7013      	strb	r3, [r2, #0]
	system_interrupt_disable_global();
	
	configASSERT( pxTimer );
     2d2:	2800      	cmp	r0, #0
     2d4:	d101      	bne.n	2da <timer_irda_ping_callback+0x22>
     2d6:	b672      	cpsid	i
     2d8:	e7fe      	b.n	2d8 <timer_irda_ping_callback+0x20>
	
	switch ( irda_comm_state ) {
     2da:	4b20      	ldr	r3, [pc, #128]	; (35c <timer_irda_ping_callback+0xa4>)
     2dc:	58e3      	ldr	r3, [r4, r3]
     2de:	7818      	ldrb	r0, [r3, #0]
     2e0:	3801      	subs	r0, #1
     2e2:	2805      	cmp	r0, #5
     2e4:	d82b      	bhi.n	33e <timer_irda_ping_callback+0x86>
     2e6:	f006 f8b3 	bl	6450 <__gnu_thumb1_case_uqi>
     2ea:	2a09      	.short	0x2a09
     2ec:	03032a03 	.word	0x03032a03
			// r010716-1608: IRDA_SLAT_FIRST_RESPONSE T.O. code
		case IRDA_SLAT_FIRST_RESPONSE:
		case IRDA_SLAT_STAGE_7A:
		case IRDA_SLAT_STAGE_7B:
			irda_comm_state = IRDA_SLAT_PING;	// Go back to the Ping Mode
     2f0:	4b1a      	ldr	r3, [pc, #104]	; (35c <timer_irda_ping_callback+0xa4>)
     2f2:	58e3      	ldr	r3, [r4, r3]
     2f4:	9301      	str	r3, [sp, #4]
     2f6:	2301      	movs	r3, #1
     2f8:	9a01      	ldr	r2, [sp, #4]
     2fa:	7013      	strb	r3, [r2, #0]
		case IRDA_SLAT_PING:
			irda_timed_out = pdTRUE;
     2fc:	4b18      	ldr	r3, [pc, #96]	; (360 <timer_irda_ping_callback+0xa8>)
     2fe:	58e3      	ldr	r3, [r4, r3]
     300:	2201      	movs	r2, #1
     302:	601a      	str	r2, [r3, #0]
			
			vTracePrintF(event_channel, "Ping TO!");
     304:	4b17      	ldr	r3, [pc, #92]	; (364 <timer_irda_ping_callback+0xac>)
     306:	58e3      	ldr	r3, [r4, r3]
     308:	8818      	ldrh	r0, [r3, #0]
     30a:	4917      	ldr	r1, [pc, #92]	; (368 <timer_irda_ping_callback+0xb0>)
     30c:	4479      	add	r1, pc
     30e:	4b17      	ldr	r3, [pc, #92]	; (36c <timer_irda_ping_callback+0xb4>)
     310:	58e3      	ldr	r3, [r4, r3]
     312:	4798      	blx	r3
     314:	4b16      	ldr	r3, [pc, #88]	; (370 <timer_irda_ping_callback+0xb8>)
     316:	2280      	movs	r2, #128	; 0x80
     318:	0492      	lsls	r2, r2, #18
     31a:	615a      	str	r2, [r3, #20]
     31c:	2280      	movs	r2, #128	; 0x80
     31e:	0512      	lsls	r2, r2, #20
     320:	615a      	str	r2, [r3, #20]
			port_pin_set_output_level(LED_ERROR, pdFALSE);
			
			port_pin_set_output_level(LED_BUSY, pdFALSE);
			// There was no significant response to the ping,
			// Reset accordingly
			usart_abort_job( &irda_master, USART_TRANSCEIVER_RX );
     322:	4b14      	ldr	r3, [pc, #80]	; (374 <timer_irda_ping_callback+0xbc>)
     324:	58e3      	ldr	r3, [r4, r3]
     326:	9301      	str	r3, [sp, #4]
     328:	1c18      	adds	r0, r3, #0
     32a:	2100      	movs	r1, #0
     32c:	4b12      	ldr	r3, [pc, #72]	; (378 <timer_irda_ping_callback+0xc0>)
     32e:	58e3      	ldr	r3, [r4, r3]
     330:	4798      	blx	r3
			
			// The IrDA task is now to reset and ping again
			vTaskResume( irda_task_handler );
     332:	4b12      	ldr	r3, [pc, #72]	; (37c <timer_irda_ping_callback+0xc4>)
     334:	58e3      	ldr	r3, [r4, r3]
     336:	6818      	ldr	r0, [r3, #0]
     338:	4b11      	ldr	r3, [pc, #68]	; (380 <timer_irda_ping_callback+0xc8>)
     33a:	58e3      	ldr	r3, [r4, r3]
     33c:	4798      	blx	r3
     33e:	b672      	cpsid	i
     340:	f3bf 8f5f 	dmb	sy
     344:	4b04      	ldr	r3, [pc, #16]	; (358 <timer_irda_ping_callback+0xa0>)
     346:	58e3      	ldr	r3, [r4, r3]
     348:	9301      	str	r3, [sp, #4]
     34a:	2300      	movs	r3, #0
     34c:	9a01      	ldr	r2, [sp, #4]
     34e:	7013      	strb	r3, [r2, #0]
		break;
	}	
	
	system_interrupt_disable_global();
}
     350:	b002      	add	sp, #8
     352:	bd10      	pop	{r4, pc}
     354:	00007a66 	.word	0x00007a66
     358:	000000b8 	.word	0x000000b8
     35c:	0000010c 	.word	0x0000010c
     360:	000001b0 	.word	0x000001b0
     364:	000000ec 	.word	0x000000ec
     368:	00006710 	.word	0x00006710
     36c:	000002c0 	.word	0x000002c0
     370:	41004400 	.word	0x41004400
     374:	00000188 	.word	0x00000188
     378:	00000044 	.word	0x00000044
     37c:	000001d8 	.word	0x000001d8
     380:	00000168 	.word	0x00000168

00000384 <main>:
traceLabel event_channel;

//struct tc_module tc_instance;

int main(void)
{
     384:	b5f0      	push	{r4, r5, r6, r7, lr}
     386:	b089      	sub	sp, #36	; 0x24
     388:	4c32      	ldr	r4, [pc, #200]	; (454 <main+0xd0>)
     38a:	447c      	add	r4, pc
    /* Initialize the SAM system */
	system_init();
     38c:	4b32      	ldr	r3, [pc, #200]	; (458 <main+0xd4>)
     38e:	58e3      	ldr	r3, [r4, r3]
     390:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     392:	2701      	movs	r7, #1
     394:	ad07      	add	r5, sp, #28
     396:	706f      	strb	r7, [r5, #1]
	config->powersave  = false;
     398:	2600      	movs	r6, #0
     39a:	70ae      	strb	r6, [r5, #2]
	//////////////////////////////////////////////////////////////////////////
	// Set the LED outputs for this board.
	struct port_config led_out;
	port_get_config_defaults(&led_out);
	
	led_out.direction = PORT_PIN_DIR_OUTPUT;
     39c:	702f      	strb	r7, [r5, #0]
	port_pin_set_config(LED_BUSY, &led_out);
     39e:	201b      	movs	r0, #27
     3a0:	1c29      	adds	r1, r5, #0
     3a2:	4b2e      	ldr	r3, [pc, #184]	; (45c <main+0xd8>)
     3a4:	58e3      	ldr	r3, [r4, r3]
     3a6:	9304      	str	r3, [sp, #16]
     3a8:	4798      	blx	r3
	port_pin_set_config(LED_ERROR, &led_out);
     3aa:	2019      	movs	r0, #25
     3ac:	1c29      	adds	r1, r5, #0
     3ae:	9d04      	ldr	r5, [sp, #16]
     3b0:	47a8      	blx	r5
	//////////////////////////////////////////////////////////////////////////
	
	//////////////////////////////////////////////////////////////////////////
	// Start the IrDA communication port
	bastian_IrDA_configuration();
     3b2:	4b2b      	ldr	r3, [pc, #172]	; (460 <main+0xdc>)
     3b4:	58e3      	ldr	r3, [r4, r3]
     3b6:	4798      	blx	r3
	
	// Start the trace logger
	vTraceInitTraceData();
     3b8:	4b2a      	ldr	r3, [pc, #168]	; (464 <main+0xe0>)
     3ba:	58e3      	ldr	r3, [r4, r3]
     3bc:	4798      	blx	r3
	
	
	
	/* Initialization code - create the channel label for a VTracePrintF*/
	event_channel = xTraceOpenLabel("Debug");
     3be:	482a      	ldr	r0, [pc, #168]	; (468 <main+0xe4>)
     3c0:	4478      	add	r0, pc
     3c2:	4b2a      	ldr	r3, [pc, #168]	; (46c <main+0xe8>)
     3c4:	58e3      	ldr	r3, [r4, r3]
     3c6:	4798      	blx	r3
     3c8:	4b29      	ldr	r3, [pc, #164]	; (470 <main+0xec>)
     3ca:	58e3      	ldr	r3, [r4, r3]
     3cc:	8018      	strh	r0, [r3, #0]

	
	
	// Create the task
	xTaskCreate(irda_communication_task,
     3ce:	4b29      	ldr	r3, [pc, #164]	; (474 <main+0xf0>)
     3d0:	58e3      	ldr	r3, [r4, r3]
     3d2:	9304      	str	r3, [sp, #16]
     3d4:	2302      	movs	r3, #2
     3d6:	9300      	str	r3, [sp, #0]
     3d8:	4b27      	ldr	r3, [pc, #156]	; (478 <main+0xf4>)
     3da:	58e3      	ldr	r3, [r4, r3]
     3dc:	9301      	str	r3, [sp, #4]
     3de:	9602      	str	r6, [sp, #8]
     3e0:	9603      	str	r6, [sp, #12]
     3e2:	9804      	ldr	r0, [sp, #16]
     3e4:	4925      	ldr	r1, [pc, #148]	; (47c <main+0xf8>)
     3e6:	4479      	add	r1, pc
     3e8:	22d2      	movs	r2, #210	; 0xd2
     3ea:	0052      	lsls	r2, r2, #1
     3ec:	2300      	movs	r3, #0
     3ee:	4d24      	ldr	r5, [pc, #144]	; (480 <main+0xfc>)
     3f0:	5965      	ldr	r5, [r4, r5]
     3f2:	47a8      	blx	r5
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     3f4:	4b23      	ldr	r3, [pc, #140]	; (484 <main+0x100>)
     3f6:	58e3      	ldr	r3, [r4, r3]
     3f8:	701f      	strb	r7, [r3, #0]
     3fa:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     3fe:	b662      	cpsie	i
	
	// Enable global interrupts
	system_interrupt_enable_global();
	
	// Create the necessary timer
	timer_IrDA_Ping = xTimerCreate("Ping", 2, pdFALSE, 0, timer_irda_ping_callback);
     400:	4b21      	ldr	r3, [pc, #132]	; (488 <main+0x104>)
     402:	58e3      	ldr	r3, [r4, r3]
     404:	9300      	str	r3, [sp, #0]
     406:	4821      	ldr	r0, [pc, #132]	; (48c <main+0x108>)
     408:	4478      	add	r0, pc
     40a:	2102      	movs	r1, #2
     40c:	2200      	movs	r2, #0
     40e:	2300      	movs	r3, #0
     410:	4d1f      	ldr	r5, [pc, #124]	; (490 <main+0x10c>)
     412:	5965      	ldr	r5, [r4, r5]
     414:	47a8      	blx	r5
     416:	4b1f      	ldr	r3, [pc, #124]	; (494 <main+0x110>)
     418:	58e7      	ldr	r7, [r4, r3]
     41a:	6038      	str	r0, [r7, #0]
	timer_IrDA_Sync = xTimerCreate("Sync", 1, pdFALSE, 1, timer_irda_sync_callback );
     41c:	4b1e      	ldr	r3, [pc, #120]	; (498 <main+0x114>)
     41e:	58e3      	ldr	r3, [r4, r3]
     420:	9300      	str	r3, [sp, #0]
     422:	481e      	ldr	r0, [pc, #120]	; (49c <main+0x118>)
     424:	4478      	add	r0, pc
     426:	2101      	movs	r1, #1
     428:	2200      	movs	r2, #0
     42a:	2301      	movs	r3, #1
     42c:	47a8      	blx	r5
     42e:	4b1c      	ldr	r3, [pc, #112]	; (4a0 <main+0x11c>)
     430:	58e3      	ldr	r3, [r4, r3]
     432:	6018      	str	r0, [r3, #0]
	xTimerStart(timer_IrDA_Ping, 0);	// Start timer that keeps track of Linking
     434:	683d      	ldr	r5, [r7, #0]
     436:	4b1b      	ldr	r3, [pc, #108]	; (4a4 <main+0x120>)
     438:	58e3      	ldr	r3, [r4, r3]
     43a:	4798      	blx	r3
     43c:	1c02      	adds	r2, r0, #0
     43e:	9600      	str	r6, [sp, #0]
     440:	1c28      	adds	r0, r5, #0
     442:	2101      	movs	r1, #1
     444:	2300      	movs	r3, #0
     446:	4d18      	ldr	r5, [pc, #96]	; (4a8 <main+0x124>)
     448:	5965      	ldr	r5, [r4, r5]
     44a:	47a8      	blx	r5
	//xTimerStart(timer_IrDA_Sync, 0);	// Start ping timer
	
	// ..and let FreeRTOS run tasks!
	vTaskStartScheduler();
     44c:	4b17      	ldr	r3, [pc, #92]	; (4ac <main+0x128>)
     44e:	58e3      	ldr	r3, [r4, r3]
     450:	4798      	blx	r3
     452:	e7fe      	b.n	452 <main+0xce>
     454:	0000799a 	.word	0x0000799a
     458:	00000038 	.word	0x00000038
     45c:	000001f8 	.word	0x000001f8
     460:	000001b8 	.word	0x000001b8
     464:	00000278 	.word	0x00000278
     468:	00006668 	.word	0x00006668
     46c:	00000144 	.word	0x00000144
     470:	000000ec 	.word	0x000000ec
     474:	00000210 	.word	0x00000210
     478:	000001d8 	.word	0x000001d8
     47c:	0000664a 	.word	0x0000664a
     480:	00000070 	.word	0x00000070
     484:	000000b8 	.word	0x000000b8
     488:	000001f0 	.word	0x000001f0
     48c:	00006630 	.word	0x00006630
     490:	00000018 	.word	0x00000018
     494:	00000198 	.word	0x00000198
     498:	00000234 	.word	0x00000234
     49c:	0000661c 	.word	0x0000661c
     4a0:	00000108 	.word	0x00000108
     4a4:	00000100 	.word	0x00000100
     4a8:	00000184 	.word	0x00000184
     4ac:	0000020c 	.word	0x0000020c

000004b0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     4b0:	b510      	push	{r4, lr}
     4b2:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     4b4:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4b6:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     4b8:	4299      	cmp	r1, r3
     4ba:	d30c      	bcc.n	4d6 <_sercom_get_sync_baud_val+0x26>
     4bc:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     4be:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     4c0:	1c60      	adds	r0, r4, #1
     4c2:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     4c4:	428b      	cmp	r3, r1
     4c6:	d801      	bhi.n	4cc <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     4c8:	1c04      	adds	r4, r0, #0
     4ca:	e7f8      	b.n	4be <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4cc:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     4ce:	2cff      	cmp	r4, #255	; 0xff
     4d0:	d801      	bhi.n	4d6 <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     4d2:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     4d4:	2000      	movs	r0, #0
	}
}
     4d6:	bd10      	pop	{r4, pc}

000004d8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     4da:	465f      	mov	r7, fp
     4dc:	4656      	mov	r6, sl
     4de:	464d      	mov	r5, r9
     4e0:	4644      	mov	r4, r8
     4e2:	b4f0      	push	{r4, r5, r6, r7}
     4e4:	b087      	sub	sp, #28
     4e6:	1c06      	adds	r6, r0, #0
     4e8:	1c0d      	adds	r5, r1, #0
     4ea:	9204      	str	r2, [sp, #16]
     4ec:	aa10      	add	r2, sp, #64	; 0x40
     4ee:	7810      	ldrb	r0, [r2, #0]
     4f0:	4a67      	ldr	r2, [pc, #412]	; (690 <_sercom_get_async_baud_val+0x1b8>)
     4f2:	447a      	add	r2, pc
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     4f4:	1c31      	adds	r1, r6, #0
     4f6:	4341      	muls	r1, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4f8:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     4fa:	42a9      	cmp	r1, r5
     4fc:	d900      	bls.n	500 <_sercom_get_async_baud_val+0x28>
     4fe:	e0ba      	b.n	676 <_sercom_get_async_baud_val+0x19e>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     500:	2b00      	cmp	r3, #0
     502:	d14f      	bne.n	5a4 <_sercom_get_async_baud_val+0xcc>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     504:	4b63      	ldr	r3, [pc, #396]	; (694 <_sercom_get_async_baud_val+0x1bc>)
     506:	58d3      	ldr	r3, [r2, r3]
     508:	9302      	str	r3, [sp, #8]
     50a:	2100      	movs	r1, #0
     50c:	1c32      	adds	r2, r6, #0
     50e:	2300      	movs	r3, #0
     510:	9c02      	ldr	r4, [sp, #8]
     512:	47a0      	blx	r4
     514:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     516:	1c2e      	adds	r6, r5, #0
     518:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     51a:	2000      	movs	r0, #0
     51c:	2100      	movs	r1, #0
     51e:	2200      	movs	r2, #0
     520:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     522:	253f      	movs	r5, #63	; 0x3f
     524:	46ac      	mov	ip, r5
		bit_shift = (uint64_t)1 << i;
     526:	2401      	movs	r4, #1
     528:	46a0      	mov	r8, r4
     52a:	9002      	str	r0, [sp, #8]
     52c:	9103      	str	r1, [sp, #12]
     52e:	4661      	mov	r1, ip
     530:	3920      	subs	r1, #32
     532:	d403      	bmi.n	53c <_sercom_get_async_baud_val+0x64>
     534:	4645      	mov	r5, r8
     536:	408d      	lsls	r5, r1
     538:	46a9      	mov	r9, r5
     53a:	e005      	b.n	548 <_sercom_get_async_baud_val+0x70>
     53c:	2020      	movs	r0, #32
     53e:	4661      	mov	r1, ip
     540:	1a44      	subs	r4, r0, r1
     542:	4645      	mov	r5, r8
     544:	40e5      	lsrs	r5, r4
     546:	46a9      	mov	r9, r5
     548:	4640      	mov	r0, r8
     54a:	4661      	mov	r1, ip
     54c:	4088      	lsls	r0, r1
     54e:	4682      	mov	sl, r0

		r = r << 1;
     550:	1c10      	adds	r0, r2, #0
     552:	1c19      	adds	r1, r3, #0
     554:	1880      	adds	r0, r0, r2
     556:	4159      	adcs	r1, r3
     558:	1c02      	adds	r2, r0, #0
     55a:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     55c:	465c      	mov	r4, fp
     55e:	464d      	mov	r5, r9
     560:	422c      	tst	r4, r5
     562:	d002      	beq.n	56a <_sercom_get_async_baud_val+0x92>
			r |= 0x01;
     564:	4642      	mov	r2, r8
     566:	4302      	orrs	r2, r0
     568:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     56a:	429f      	cmp	r7, r3
     56c:	d80c      	bhi.n	588 <_sercom_get_async_baud_val+0xb0>
     56e:	d101      	bne.n	574 <_sercom_get_async_baud_val+0x9c>
     570:	4296      	cmp	r6, r2
     572:	d809      	bhi.n	588 <_sercom_get_async_baud_val+0xb0>
			r = r - d;
     574:	1b92      	subs	r2, r2, r6
     576:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     578:	4650      	mov	r0, sl
     57a:	9902      	ldr	r1, [sp, #8]
     57c:	4308      	orrs	r0, r1
     57e:	4649      	mov	r1, r9
     580:	9c03      	ldr	r4, [sp, #12]
     582:	4321      	orrs	r1, r4
     584:	9002      	str	r0, [sp, #8]
     586:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     588:	4665      	mov	r5, ip
     58a:	3d01      	subs	r5, #1
     58c:	46ac      	mov	ip, r5
     58e:	d2ce      	bcs.n	52e <_sercom_get_async_baud_val+0x56>
     590:	9802      	ldr	r0, [sp, #8]
     592:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     594:	4b3d      	ldr	r3, [pc, #244]	; (68c <_sercom_get_async_baud_val+0x1b4>)
     596:	4a3c      	ldr	r2, [pc, #240]	; (688 <_sercom_get_async_baud_val+0x1b0>)
     598:	1a12      	subs	r2, r2, r0
     59a:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     59c:	0c11      	lsrs	r1, r2, #16
     59e:	041b      	lsls	r3, r3, #16
     5a0:	4319      	orrs	r1, r3
     5a2:	e065      	b.n	670 <_sercom_get_async_baud_val+0x198>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     5a4:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     5a6:	2b01      	cmp	r3, #1
     5a8:	d162      	bne.n	670 <_sercom_get_async_baud_val+0x198>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     5aa:	0f6c      	lsrs	r4, r5, #29
     5ac:	00ed      	lsls	r5, r5, #3
     5ae:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     5b0:	4b38      	ldr	r3, [pc, #224]	; (694 <_sercom_get_async_baud_val+0x1bc>)
     5b2:	58d3      	ldr	r3, [r2, r3]
     5b4:	9302      	str	r3, [sp, #8]
     5b6:	1c32      	adds	r2, r6, #0
     5b8:	2300      	movs	r3, #0
     5ba:	9e02      	ldr	r6, [sp, #8]
     5bc:	47b0      	blx	r6
     5be:	1c06      	adds	r6, r0, #0
     5c0:	1c0f      	adds	r7, r1, #0
     5c2:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     5c4:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     5c6:	9602      	str	r6, [sp, #8]
     5c8:	9703      	str	r7, [sp, #12]
     5ca:	469a      	mov	sl, r3
     5cc:	46a1      	mov	r9, r4
     5ce:	4657      	mov	r7, sl
     5d0:	b2ff      	uxtb	r7, r7
     5d2:	9705      	str	r7, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     5d4:	2000      	movs	r0, #0
     5d6:	4680      	mov	r8, r0
     5d8:	2200      	movs	r2, #0
     5da:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     5dc:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     5de:	1c27      	adds	r7, r4, #0
     5e0:	3f20      	subs	r7, #32
     5e2:	d403      	bmi.n	5ec <_sercom_get_async_baud_val+0x114>
     5e4:	1c29      	adds	r1, r5, #0
     5e6:	40b9      	lsls	r1, r7
     5e8:	9101      	str	r1, [sp, #4]
     5ea:	e004      	b.n	5f6 <_sercom_get_async_baud_val+0x11e>
     5ec:	2620      	movs	r6, #32
     5ee:	1b37      	subs	r7, r6, r4
     5f0:	1c28      	adds	r0, r5, #0
     5f2:	40f8      	lsrs	r0, r7
     5f4:	9001      	str	r0, [sp, #4]
     5f6:	1c29      	adds	r1, r5, #0
     5f8:	40a1      	lsls	r1, r4
     5fa:	9100      	str	r1, [sp, #0]

		r = r << 1;
     5fc:	1c10      	adds	r0, r2, #0
     5fe:	1c19      	adds	r1, r3, #0
     600:	1880      	adds	r0, r0, r2
     602:	4159      	adcs	r1, r3
     604:	1c02      	adds	r2, r0, #0
     606:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     608:	465e      	mov	r6, fp
     60a:	9f00      	ldr	r7, [sp, #0]
     60c:	403e      	ands	r6, r7
     60e:	46b4      	mov	ip, r6
     610:	9e01      	ldr	r6, [sp, #4]
     612:	464f      	mov	r7, r9
     614:	403e      	ands	r6, r7
     616:	4667      	mov	r7, ip
     618:	433e      	orrs	r6, r7
     61a:	d002      	beq.n	622 <_sercom_get_async_baud_val+0x14a>
			r |= 0x01;
     61c:	1c2a      	adds	r2, r5, #0
     61e:	4302      	orrs	r2, r0
     620:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     622:	9803      	ldr	r0, [sp, #12]
     624:	4298      	cmp	r0, r3
     626:	d80b      	bhi.n	640 <_sercom_get_async_baud_val+0x168>
     628:	d102      	bne.n	630 <_sercom_get_async_baud_val+0x158>
     62a:	9902      	ldr	r1, [sp, #8]
     62c:	4291      	cmp	r1, r2
     62e:	d807      	bhi.n	640 <_sercom_get_async_baud_val+0x168>
			r = r - d;
     630:	9e02      	ldr	r6, [sp, #8]
     632:	9f03      	ldr	r7, [sp, #12]
     634:	1b92      	subs	r2, r2, r6
     636:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     638:	4647      	mov	r7, r8
     63a:	9800      	ldr	r0, [sp, #0]
     63c:	4307      	orrs	r7, r0
     63e:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     640:	3c01      	subs	r4, #1
     642:	d2cc      	bcs.n	5de <_sercom_get_async_baud_val+0x106>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     644:	4641      	mov	r1, r8
     646:	4652      	mov	r2, sl
     648:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     64a:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     64c:	4c12      	ldr	r4, [pc, #72]	; (698 <_sercom_get_async_baud_val+0x1c0>)
     64e:	42a3      	cmp	r3, r4
     650:	d908      	bls.n	664 <_sercom_get_async_baud_val+0x18c>
     652:	9a05      	ldr	r2, [sp, #20]
     654:	3201      	adds	r2, #1
     656:	b2d2      	uxtb	r2, r2
     658:	9205      	str	r2, [sp, #20]
     65a:	2601      	movs	r6, #1
     65c:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     65e:	4657      	mov	r7, sl
     660:	2f08      	cmp	r7, #8
     662:	d1b4      	bne.n	5ce <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     664:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     666:	9805      	ldr	r0, [sp, #20]
     668:	2808      	cmp	r0, #8
     66a:	d004      	beq.n	676 <_sercom_get_async_baud_val+0x19e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     66c:	0341      	lsls	r1, r0, #13
     66e:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
     670:	9c04      	ldr	r4, [sp, #16]
     672:	8021      	strh	r1, [r4, #0]
	return STATUS_OK;
     674:	2400      	movs	r4, #0
}
     676:	1c20      	adds	r0, r4, #0
     678:	b007      	add	sp, #28
     67a:	bc3c      	pop	{r2, r3, r4, r5}
     67c:	4690      	mov	r8, r2
     67e:	4699      	mov	r9, r3
     680:	46a2      	mov	sl, r4
     682:	46ab      	mov	fp, r5
     684:	bdf0      	pop	{r4, r5, r6, r7, pc}
     686:	46c0      	nop			; (mov r8, r8)
     688:	00000000 	.word	0x00000000
     68c:	00000001 	.word	0x00000001
     690:	00007832 	.word	0x00007832
     694:	000000cc 	.word	0x000000cc
     698:	00001fff 	.word	0x00001fff
     69c:	46c0      	nop			; (mov r8, r8)
     69e:	46c0      	nop			; (mov r8, r8)

000006a0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     6a0:	b530      	push	{r4, r5, lr}
     6a2:	b085      	sub	sp, #20
     6a4:	1c05      	adds	r5, r0, #0
     6a6:	4c12      	ldr	r4, [pc, #72]	; (6f0 <sercom_set_gclk_generator+0x50>)
     6a8:	447c      	add	r4, pc
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     6aa:	4b12      	ldr	r3, [pc, #72]	; (6f4 <sercom_set_gclk_generator+0x54>)
     6ac:	447b      	add	r3, pc
     6ae:	781b      	ldrb	r3, [r3, #0]
     6b0:	2b00      	cmp	r3, #0
     6b2:	d001      	beq.n	6b8 <sercom_set_gclk_generator+0x18>
     6b4:	2900      	cmp	r1, #0
     6b6:	d010      	beq.n	6da <sercom_set_gclk_generator+0x3a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     6b8:	a903      	add	r1, sp, #12
     6ba:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     6bc:	2013      	movs	r0, #19
     6be:	4b0e      	ldr	r3, [pc, #56]	; (6f8 <sercom_set_gclk_generator+0x58>)
     6c0:	58e3      	ldr	r3, [r4, r3]
     6c2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     6c4:	2013      	movs	r0, #19
     6c6:	4b0d      	ldr	r3, [pc, #52]	; (6fc <sercom_set_gclk_generator+0x5c>)
     6c8:	58e3      	ldr	r3, [r4, r3]
     6ca:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     6cc:	4b0c      	ldr	r3, [pc, #48]	; (700 <sercom_set_gclk_generator+0x60>)
     6ce:	447b      	add	r3, pc
     6d0:	705d      	strb	r5, [r3, #1]
		_sercom_config.generator_is_set = true;
     6d2:	2201      	movs	r2, #1
     6d4:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     6d6:	2000      	movs	r0, #0
     6d8:	e008      	b.n	6ec <sercom_set_gclk_generator+0x4c>
	} else if (generator_source == _sercom_config.generator_source) {
     6da:	4b0a      	ldr	r3, [pc, #40]	; (704 <sercom_set_gclk_generator+0x64>)
     6dc:	447b      	add	r3, pc
     6de:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     6e0:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     6e2:	1b55      	subs	r5, r2, r5
     6e4:	1e6a      	subs	r2, r5, #1
     6e6:	4195      	sbcs	r5, r2
     6e8:	426d      	negs	r5, r5
     6ea:	4028      	ands	r0, r5
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     6ec:	b005      	add	sp, #20
     6ee:	bd30      	pop	{r4, r5, pc}
     6f0:	0000767c 	.word	0x0000767c
     6f4:	1ffffdc8 	.word	0x1ffffdc8
     6f8:	00000090 	.word	0x00000090
     6fc:	000001ec 	.word	0x000001ec
     700:	1ffffda6 	.word	0x1ffffda6
     704:	1ffffd98 	.word	0x1ffffd98

00000708 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     708:	b500      	push	{lr}
	switch ((uintptr_t)sercom_module) {
     70a:	4b28      	ldr	r3, [pc, #160]	; (7ac <_sercom_get_default_pad+0xa4>)
     70c:	4298      	cmp	r0, r3
     70e:	d019      	beq.n	744 <_sercom_get_default_pad+0x3c>
     710:	d803      	bhi.n	71a <_sercom_get_default_pad+0x12>
     712:	4b27      	ldr	r3, [pc, #156]	; (7b0 <_sercom_get_default_pad+0xa8>)
     714:	4298      	cmp	r0, r3
     716:	d007      	beq.n	728 <_sercom_get_default_pad+0x20>
     718:	e03e      	b.n	798 <_sercom_get_default_pad+0x90>
     71a:	4b26      	ldr	r3, [pc, #152]	; (7b4 <_sercom_get_default_pad+0xac>)
     71c:	4298      	cmp	r0, r3
     71e:	d01f      	beq.n	760 <_sercom_get_default_pad+0x58>
     720:	4b25      	ldr	r3, [pc, #148]	; (7b8 <_sercom_get_default_pad+0xb0>)
     722:	4298      	cmp	r0, r3
     724:	d02a      	beq.n	77c <_sercom_get_default_pad+0x74>
     726:	e037      	b.n	798 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     728:	2000      	movs	r0, #0
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     72a:	2903      	cmp	r1, #3
     72c:	d83d      	bhi.n	7aa <_sercom_get_default_pad+0xa2>
     72e:	1c08      	adds	r0, r1, #0
     730:	f005 fe8e 	bl	6450 <__gnu_thumb1_case_uqi>
     734:	06043402 	.word	0x06043402
     738:	4820      	ldr	r0, [pc, #128]	; (7bc <_sercom_get_default_pad+0xb4>)
     73a:	e036      	b.n	7aa <_sercom_get_default_pad+0xa2>
     73c:	4820      	ldr	r0, [pc, #128]	; (7c0 <_sercom_get_default_pad+0xb8>)
     73e:	e034      	b.n	7aa <_sercom_get_default_pad+0xa2>
     740:	4820      	ldr	r0, [pc, #128]	; (7c4 <_sercom_get_default_pad+0xbc>)
     742:	e032      	b.n	7aa <_sercom_get_default_pad+0xa2>
	}

	Assert(false);
	return 0;
     744:	2000      	movs	r0, #0
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     746:	2903      	cmp	r1, #3
     748:	d82f      	bhi.n	7aa <_sercom_get_default_pad+0xa2>
     74a:	1c08      	adds	r0, r1, #0
     74c:	f005 fe80 	bl	6450 <__gnu_thumb1_case_uqi>
     750:	06042802 	.word	0x06042802
     754:	2003      	movs	r0, #3
     756:	e028      	b.n	7aa <_sercom_get_default_pad+0xa2>
     758:	481b      	ldr	r0, [pc, #108]	; (7c8 <_sercom_get_default_pad+0xc0>)
     75a:	e026      	b.n	7aa <_sercom_get_default_pad+0xa2>
     75c:	481b      	ldr	r0, [pc, #108]	; (7cc <_sercom_get_default_pad+0xc4>)
     75e:	e024      	b.n	7aa <_sercom_get_default_pad+0xa2>
	}

	Assert(false);
	return 0;
     760:	2000      	movs	r0, #0
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     762:	2903      	cmp	r1, #3
     764:	d821      	bhi.n	7aa <_sercom_get_default_pad+0xa2>
     766:	1c08      	adds	r0, r1, #0
     768:	f005 fe72 	bl	6450 <__gnu_thumb1_case_uqi>
     76c:	06041c02 	.word	0x06041c02
     770:	4817      	ldr	r0, [pc, #92]	; (7d0 <_sercom_get_default_pad+0xc8>)
     772:	e01a      	b.n	7aa <_sercom_get_default_pad+0xa2>
     774:	4817      	ldr	r0, [pc, #92]	; (7d4 <_sercom_get_default_pad+0xcc>)
     776:	e018      	b.n	7aa <_sercom_get_default_pad+0xa2>
     778:	4817      	ldr	r0, [pc, #92]	; (7d8 <_sercom_get_default_pad+0xd0>)
     77a:	e016      	b.n	7aa <_sercom_get_default_pad+0xa2>
	}

	Assert(false);
	return 0;
     77c:	2000      	movs	r0, #0
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     77e:	2903      	cmp	r1, #3
     780:	d813      	bhi.n	7aa <_sercom_get_default_pad+0xa2>
     782:	1c08      	adds	r0, r1, #0
     784:	f005 fe64 	bl	6450 <__gnu_thumb1_case_uqi>
     788:	06041002 	.word	0x06041002
     78c:	4813      	ldr	r0, [pc, #76]	; (7dc <_sercom_get_default_pad+0xd4>)
     78e:	e00c      	b.n	7aa <_sercom_get_default_pad+0xa2>
     790:	4813      	ldr	r0, [pc, #76]	; (7e0 <_sercom_get_default_pad+0xd8>)
     792:	e00a      	b.n	7aa <_sercom_get_default_pad+0xa2>
     794:	4813      	ldr	r0, [pc, #76]	; (7e4 <_sercom_get_default_pad+0xdc>)
     796:	e008      	b.n	7aa <_sercom_get_default_pad+0xa2>
	}

	Assert(false);
	return 0;
     798:	2000      	movs	r0, #0
     79a:	e006      	b.n	7aa <_sercom_get_default_pad+0xa2>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     79c:	4812      	ldr	r0, [pc, #72]	; (7e8 <_sercom_get_default_pad+0xe0>)
     79e:	e004      	b.n	7aa <_sercom_get_default_pad+0xa2>
     7a0:	4812      	ldr	r0, [pc, #72]	; (7ec <_sercom_get_default_pad+0xe4>)
     7a2:	e002      	b.n	7aa <_sercom_get_default_pad+0xa2>
     7a4:	4812      	ldr	r0, [pc, #72]	; (7f0 <_sercom_get_default_pad+0xe8>)
     7a6:	e000      	b.n	7aa <_sercom_get_default_pad+0xa2>
     7a8:	4812      	ldr	r0, [pc, #72]	; (7f4 <_sercom_get_default_pad+0xec>)
	}

	Assert(false);
	return 0;
}
     7aa:	bd00      	pop	{pc}
     7ac:	42000c00 	.word	0x42000c00
     7b0:	42000800 	.word	0x42000800
     7b4:	42001000 	.word	0x42001000
     7b8:	42001400 	.word	0x42001400
     7bc:	00040003 	.word	0x00040003
     7c0:	00060003 	.word	0x00060003
     7c4:	00070003 	.word	0x00070003
     7c8:	001e0003 	.word	0x001e0003
     7cc:	001f0003 	.word	0x001f0003
     7d0:	00080003 	.word	0x00080003
     7d4:	000a0003 	.word	0x000a0003
     7d8:	000b0003 	.word	0x000b0003
     7dc:	00100003 	.word	0x00100003
     7e0:	00120003 	.word	0x00120003
     7e4:	00130003 	.word	0x00130003
     7e8:	00050003 	.word	0x00050003
     7ec:	00010003 	.word	0x00010003
     7f0:	00090003 	.word	0x00090003
     7f4:	00110003 	.word	0x00110003

000007f8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     7f8:	b570      	push	{r4, r5, r6, lr}
     7fa:	b084      	sub	sp, #16
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     7fc:	4a0f      	ldr	r2, [pc, #60]	; (83c <_sercom_get_sercom_inst_index+0x44>)
     7fe:	447a      	add	r2, pc
     800:	4669      	mov	r1, sp
     802:	ca70      	ldmia	r2!, {r4, r5, r6}
     804:	c170      	stmia	r1!, {r4, r5, r6}
     806:	6812      	ldr	r2, [r2, #0]
     808:	600a      	str	r2, [r1, #0]

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     80a:	1c03      	adds	r3, r0, #0
     80c:	9a00      	ldr	r2, [sp, #0]
     80e:	4282      	cmp	r2, r0
     810:	d00f      	beq.n	832 <_sercom_get_sercom_inst_index+0x3a>
     812:	9c01      	ldr	r4, [sp, #4]
     814:	4284      	cmp	r4, r0
     816:	d008      	beq.n	82a <_sercom_get_sercom_inst_index+0x32>
     818:	9d02      	ldr	r5, [sp, #8]
     81a:	4285      	cmp	r5, r0
     81c:	d007      	beq.n	82e <_sercom_get_sercom_inst_index+0x36>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     81e:	2000      	movs	r0, #0
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     820:	9e03      	ldr	r6, [sp, #12]
     822:	429e      	cmp	r6, r3
     824:	d107      	bne.n	836 <_sercom_get_sercom_inst_index+0x3e>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     826:	2003      	movs	r0, #3
     828:	e004      	b.n	834 <_sercom_get_sercom_inst_index+0x3c>
     82a:	2001      	movs	r0, #1
     82c:	e002      	b.n	834 <_sercom_get_sercom_inst_index+0x3c>
     82e:	2002      	movs	r0, #2
     830:	e000      	b.n	834 <_sercom_get_sercom_inst_index+0x3c>
     832:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     834:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
     836:	b004      	add	sp, #16
     838:	bd70      	pop	{r4, r5, r6, pc}
     83a:	46c0      	nop			; (mov r8, r8)
     83c:	0000624a 	.word	0x0000624a

00000840 <irda_master_callback_received>:
BaseType_t lock_allow_main_discovery = pdTRUE;
TickType_t lock_main_discovery_count;
BaseType_t lock_trace = pdFALSE;
TickType_t unlock_count;
BaseType_t irda_timed_out = pdFALSE;
static void irda_master_callback_received(const struct usart_module *const module) {
     840:	b530      	push	{r4, r5, lr}
     842:	b085      	sub	sp, #20
     844:	4c88      	ldr	r4, [pc, #544]	; (a68 <irda_master_callback_received+0x228>)
     846:	447c      	add	r4, pc
	
	BaseType_t xYieldRequired; 
	
	if ( !irda_timed_out ) {
     848:	4b88      	ldr	r3, [pc, #544]	; (a6c <irda_master_callback_received+0x22c>)
     84a:	58e3      	ldr	r3, [r4, r3]
     84c:	681b      	ldr	r3, [r3, #0]
     84e:	2b00      	cmp	r3, #0
     850:	d000      	beq.n	854 <irda_master_callback_received+0x14>
     852:	e106      	b.n	a62 <irda_master_callback_received+0x222>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     854:	4b86      	ldr	r3, [pc, #536]	; (a70 <irda_master_callback_received+0x230>)
     856:	58e3      	ldr	r3, [r4, r3]
     858:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     85a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     85c:	2b00      	cmp	r3, #0
     85e:	d1fc      	bne.n	85a <irda_master_callback_received+0x1a>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Disable RX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
     860:	6851      	ldr	r1, [r2, #4]
     862:	4b84      	ldr	r3, [pc, #528]	; (a74 <irda_master_callback_received+0x234>)
     864:	400b      	ands	r3, r1
     866:	6053      	str	r3, [r2, #4]
			module->receiver_enabled = false;
     868:	4b81      	ldr	r3, [pc, #516]	; (a70 <irda_master_callback_received+0x230>)
     86a:	58e3      	ldr	r3, [r4, r3]
     86c:	9303      	str	r3, [sp, #12]
     86e:	2300      	movs	r3, #0
     870:	9903      	ldr	r1, [sp, #12]
     872:	718b      	strb	r3, [r1, #6]
		usart_disable_transceiver(&irda_master, USART_TRANSCEIVER_RX);
	
		switch ( irda_comm_state )
     874:	4b80      	ldr	r3, [pc, #512]	; (a78 <irda_master_callback_received+0x238>)
     876:	58e3      	ldr	r3, [r4, r3]
     878:	9303      	str	r3, [sp, #12]
     87a:	781b      	ldrb	r3, [r3, #0]
     87c:	2b03      	cmp	r3, #3
     87e:	d100      	bne.n	882 <irda_master_callback_received+0x42>
     880:	e073      	b.n	96a <irda_master_callback_received+0x12a>
     882:	2b06      	cmp	r3, #6
     884:	d100      	bne.n	888 <irda_master_callback_received+0x48>
     886:	e0bb      	b.n	a00 <irda_master_callback_received+0x1c0>
     888:	2b01      	cmp	r3, #1
     88a:	d000      	beq.n	88e <irda_master_callback_received+0x4e>
     88c:	e0e9      	b.n	a62 <irda_master_callback_received+0x222>
		{
			case IRDA_SLAT_PING:
						// Check if main discovery is allowed
				if ( lock_allow_main_discovery == pdFALSE ) {
     88e:	4b7b      	ldr	r3, [pc, #492]	; (a7c <irda_master_callback_received+0x23c>)
     890:	58e3      	ldr	r3, [r4, r3]
     892:	681b      	ldr	r3, [r3, #0]
     894:	2b00      	cmp	r3, #0
     896:	d10e      	bne.n	8b6 <irda_master_callback_received+0x76>
					unlock_count = xTaskGetTickCountFromISR();
     898:	4b79      	ldr	r3, [pc, #484]	; (a80 <irda_master_callback_received+0x240>)
     89a:	58e3      	ldr	r3, [r4, r3]
     89c:	4798      	blx	r3
     89e:	4b79      	ldr	r3, [pc, #484]	; (a84 <irda_master_callback_received+0x244>)
     8a0:	58e3      	ldr	r3, [r4, r3]
     8a2:	6018      	str	r0, [r3, #0]
				
					if ( unlock_count >= lock_main_discovery_count ) {
     8a4:	4b78      	ldr	r3, [pc, #480]	; (a88 <irda_master_callback_received+0x248>)
     8a6:	58e3      	ldr	r3, [r4, r3]
     8a8:	681b      	ldr	r3, [r3, #0]
     8aa:	4298      	cmp	r0, r3
     8ac:	d303      	bcc.n	8b6 <irda_master_callback_received+0x76>
						lock_allow_main_discovery = pdTRUE;
     8ae:	4b73      	ldr	r3, [pc, #460]	; (a7c <irda_master_callback_received+0x23c>)
     8b0:	58e3      	ldr	r3, [r4, r3]
     8b2:	2201      	movs	r2, #1
     8b4:	601a      	str	r2, [r3, #0]
					}
				}
	
				if ( irda_rx_array[0] == irda_rx_array[1] && irda_rx_array[1] == irda_rx_array[2] && 
     8b6:	4b75      	ldr	r3, [pc, #468]	; (a8c <irda_master_callback_received+0x24c>)
     8b8:	58e3      	ldr	r3, [r4, r3]
     8ba:	781a      	ldrb	r2, [r3, #0]
     8bc:	785b      	ldrb	r3, [r3, #1]
     8be:	4293      	cmp	r3, r2
     8c0:	d140      	bne.n	944 <irda_master_callback_received+0x104>
     8c2:	4b72      	ldr	r3, [pc, #456]	; (a8c <irda_master_callback_received+0x24c>)
     8c4:	58e3      	ldr	r3, [r4, r3]
     8c6:	9303      	str	r3, [sp, #12]
     8c8:	789b      	ldrb	r3, [r3, #2]
     8ca:	4293      	cmp	r3, r2
     8cc:	d13a      	bne.n	944 <irda_master_callback_received+0x104>
     8ce:	2aaa      	cmp	r2, #170	; 0xaa
     8d0:	d138      	bne.n	944 <irda_master_callback_received+0x104>
						irda_rx_array[0] == 0xAA )
				{	
					if ( lock_allow_main_discovery ) {
     8d2:	4b6a      	ldr	r3, [pc, #424]	; (a7c <irda_master_callback_received+0x23c>)
     8d4:	58e3      	ldr	r3, [r4, r3]
     8d6:	681b      	ldr	r3, [r3, #0]
     8d8:	2b00      	cmp	r3, #0
     8da:	d100      	bne.n	8de <irda_master_callback_received+0x9e>
     8dc:	e0c1      	b.n	a62 <irda_master_callback_received+0x222>
						if ( lock_trace == pdFALSE ) {
     8de:	4b6c      	ldr	r3, [pc, #432]	; (a90 <irda_master_callback_received+0x250>)
     8e0:	58e3      	ldr	r3, [r4, r3]
     8e2:	681b      	ldr	r3, [r3, #0]
     8e4:	2b00      	cmp	r3, #0
     8e6:	d103      	bne.n	8f0 <irda_master_callback_received+0xb0>
							lock_trace = pdTRUE;
     8e8:	4b69      	ldr	r3, [pc, #420]	; (a90 <irda_master_callback_received+0x250>)
     8ea:	58e3      	ldr	r3, [r4, r3]
     8ec:	2201      	movs	r2, #1
     8ee:	601a      	str	r2, [r3, #0]
 						//port_pin_set_output_level(LED_ERROR, pdFALSE);

 						//vTracePrintF(event_channel, "Rxd Header!"); 					

							//port_pin_toggle_output_level(LED_BUSY);
 						irda_comm_state = IRDA_SLAT_FIRST;	// Change state to send first response
     8f0:	4b61      	ldr	r3, [pc, #388]	; (a78 <irda_master_callback_received+0x238>)
     8f2:	58e3      	ldr	r3, [r4, r3]
     8f4:	9303      	str	r3, [sp, #12]
     8f6:	2302      	movs	r3, #2
     8f8:	9a03      	ldr	r2, [sp, #12]
     8fa:	7013      	strb	r3, [r2, #0]

 						// The board has been discovered, note so that 0xAA is ignored next pass
 						//lock_allow_main_discovery = pdFALSE;
 						//lock_main_discovery_count = xTaskGetTickCountFromISR();
 						//lock_main_discovery_count += 16;	// Wait half-a-second
						xYieldRequired = xTaskResumeFromISR( irda_task_handler );
     8fc:	4b65      	ldr	r3, [pc, #404]	; (a94 <irda_master_callback_received+0x254>)
     8fe:	58e3      	ldr	r3, [r4, r3]
     900:	6818      	ldr	r0, [r3, #0]
     902:	4b65      	ldr	r3, [pc, #404]	; (a98 <irda_master_callback_received+0x258>)
     904:	58e3      	ldr	r3, [r4, r3]
     906:	4798      	blx	r3
					
						if( xYieldRequired == pdTRUE )
     908:	2801      	cmp	r0, #1
     90a:	d10c      	bne.n	926 <irda_master_callback_received+0xe6>
						{
							// We should switch context so the ISR returns to a different task.
							// NOTE:  How this is done depends on the port you are using.  Check
							// the documentation and examples for your port.
							vTracePrintF(event_channel, "Yield ISR!");
     90c:	4b63      	ldr	r3, [pc, #396]	; (a9c <irda_master_callback_received+0x25c>)
     90e:	58e3      	ldr	r3, [r4, r3]
     910:	8818      	ldrh	r0, [r3, #0]
     912:	4963      	ldr	r1, [pc, #396]	; (aa0 <irda_master_callback_received+0x260>)
     914:	4479      	add	r1, pc
     916:	4b63      	ldr	r3, [pc, #396]	; (aa4 <irda_master_callback_received+0x264>)
     918:	58e3      	ldr	r3, [r4, r3]
     91a:	4798      	blx	r3
							portYIELD_FROM_ISR(xYieldRequired);
     91c:	2280      	movs	r2, #128	; 0x80
     91e:	0552      	lsls	r2, r2, #21
     920:	4b61      	ldr	r3, [pc, #388]	; (aa8 <irda_master_callback_received+0x268>)
     922:	601a      	str	r2, [r3, #0]
     924:	e09d      	b.n	a62 <irda_master_callback_received+0x222>
						} else {
							irda_comm_state = IRDA_SLAT_PING;
     926:	4b54      	ldr	r3, [pc, #336]	; (a78 <irda_master_callback_received+0x238>)
     928:	58e3      	ldr	r3, [r4, r3]
     92a:	9303      	str	r3, [sp, #12]
     92c:	2301      	movs	r3, #1
     92e:	9d03      	ldr	r5, [sp, #12]
     930:	702b      	strb	r3, [r5, #0]
							vTracePrintF(event_channel, "No Yield! Changed to PING");
     932:	4b5a      	ldr	r3, [pc, #360]	; (a9c <irda_master_callback_received+0x25c>)
     934:	58e3      	ldr	r3, [r4, r3]
     936:	8818      	ldrh	r0, [r3, #0]
     938:	495c      	ldr	r1, [pc, #368]	; (aac <irda_master_callback_received+0x26c>)
     93a:	4479      	add	r1, pc
     93c:	4b59      	ldr	r3, [pc, #356]	; (aa4 <irda_master_callback_received+0x264>)
     93e:	58e3      	ldr	r3, [r4, r3]
     940:	4798      	blx	r3
     942:	e08e      	b.n	a62 <irda_master_callback_received+0x222>
						}
					}
				} else {
					irda_comm_state = IRDA_SLAT_PING;
     944:	4b4c      	ldr	r3, [pc, #304]	; (a78 <irda_master_callback_received+0x238>)
     946:	58e3      	ldr	r3, [r4, r3]
     948:	9303      	str	r3, [sp, #12]
     94a:	2301      	movs	r3, #1
     94c:	9903      	ldr	r1, [sp, #12]
     94e:	700b      	strb	r3, [r1, #0]
					vTracePrintF(event_channel, "Wrong Data!");
     950:	4b52      	ldr	r3, [pc, #328]	; (a9c <irda_master_callback_received+0x25c>)
     952:	58e3      	ldr	r3, [r4, r3]
     954:	8818      	ldrh	r0, [r3, #0]
     956:	4956      	ldr	r1, [pc, #344]	; (ab0 <irda_master_callback_received+0x270>)
     958:	4479      	add	r1, pc
     95a:	4b52      	ldr	r3, [pc, #328]	; (aa4 <irda_master_callback_received+0x264>)
     95c:	58e3      	ldr	r3, [r4, r3]
     95e:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     960:	2280      	movs	r2, #128	; 0x80
     962:	0492      	lsls	r2, r2, #18
     964:	4b53      	ldr	r3, [pc, #332]	; (ab4 <irda_master_callback_received+0x274>)
     966:	619a      	str	r2, [r3, #24]
     968:	e07b      	b.n	a62 <irda_master_callback_received+0x222>
					//irda_comm_state = IRDA_SLAT_PING;
				}
			break;
			case IRDA_SLAT_FIRST_RESPONSE:	// r010716-1608: This the code to execute when we get 0xCC. Stage 6
						// If this is correct, this board can be safely assumed to be synchronized
				if ( crc_check(&irda_rx_array, 4) )
     96a:	4b48      	ldr	r3, [pc, #288]	; (a8c <irda_master_callback_received+0x24c>)
     96c:	58e3      	ldr	r3, [r4, r3]
     96e:	9303      	str	r3, [sp, #12]
     970:	1c18      	adds	r0, r3, #0
     972:	2104      	movs	r1, #4
     974:	4b50      	ldr	r3, [pc, #320]	; (ab8 <irda_master_callback_received+0x278>)
     976:	58e3      	ldr	r3, [r4, r3]
     978:	4798      	blx	r3
     97a:	2800      	cmp	r0, #0
     97c:	d035      	beq.n	9ea <irda_master_callback_received+0x1aa>
					

					//vTracePrintF(event_channel, "Rxd Header!");

					//port_pin_toggle_output_level(LED_BUSY);
					irda_comm_state = IRDA_SLAT_STAGE_7A;	// Change state to send first response
     97e:	4b3e      	ldr	r3, [pc, #248]	; (a78 <irda_master_callback_received+0x238>)
     980:	58e3      	ldr	r3, [r4, r3]
     982:	9303      	str	r3, [sp, #12]
     984:	2305      	movs	r3, #5
     986:	9a03      	ldr	r2, [sp, #12]
     988:	7013      	strb	r3, [r2, #0]
     98a:	2280      	movs	r2, #128	; 0x80
     98c:	0512      	lsls	r2, r2, #20
     98e:	4b49      	ldr	r3, [pc, #292]	; (ab4 <irda_master_callback_received+0x274>)
     990:	619a      	str	r2, [r3, #24]
						// The slat card has been synched at this point.
					port_pin_set_output_level(LED_BUSY, pdTRUE);
					
					// Resetting the timer
					xTimerResetFromISR ( timer_IrDA_Ping, 0 );
     992:	4b4a      	ldr	r3, [pc, #296]	; (abc <irda_master_callback_received+0x27c>)
     994:	58e3      	ldr	r3, [r4, r3]
     996:	681d      	ldr	r5, [r3, #0]
     998:	4b39      	ldr	r3, [pc, #228]	; (a80 <irda_master_callback_received+0x240>)
     99a:	58e3      	ldr	r3, [r4, r3]
     99c:	4798      	blx	r3
     99e:	1c02      	adds	r2, r0, #0
     9a0:	2300      	movs	r3, #0
     9a2:	9300      	str	r3, [sp, #0]
     9a4:	1c28      	adds	r0, r5, #0
     9a6:	2107      	movs	r1, #7
     9a8:	4d45      	ldr	r5, [pc, #276]	; (ac0 <irda_master_callback_received+0x280>)
     9aa:	5965      	ldr	r5, [r4, r5]
     9ac:	47a8      	blx	r5
					
					xYieldRequired = xTaskResumeFromISR( irda_task_handler );
     9ae:	4b39      	ldr	r3, [pc, #228]	; (a94 <irda_master_callback_received+0x254>)
     9b0:	58e3      	ldr	r3, [r4, r3]
     9b2:	6818      	ldr	r0, [r3, #0]
     9b4:	4b38      	ldr	r3, [pc, #224]	; (a98 <irda_master_callback_received+0x258>)
     9b6:	58e3      	ldr	r3, [r4, r3]
     9b8:	4798      	blx	r3
					
					if( xYieldRequired == pdTRUE )
     9ba:	2801      	cmp	r0, #1
     9bc:	d10c      	bne.n	9d8 <irda_master_callback_received+0x198>
					{
						// We should switch context so the ISR returns to a different task.
						// NOTE:  How this is done depends on the port you are using.  Check
						// the documentation and examples for your port.
						vTracePrintF(event_channel, "Yield ISR!");
     9be:	4b37      	ldr	r3, [pc, #220]	; (a9c <irda_master_callback_received+0x25c>)
     9c0:	58e3      	ldr	r3, [r4, r3]
     9c2:	8818      	ldrh	r0, [r3, #0]
     9c4:	493f      	ldr	r1, [pc, #252]	; (ac4 <irda_master_callback_received+0x284>)
     9c6:	4479      	add	r1, pc
     9c8:	4b36      	ldr	r3, [pc, #216]	; (aa4 <irda_master_callback_received+0x264>)
     9ca:	58e3      	ldr	r3, [r4, r3]
     9cc:	4798      	blx	r3
						portYIELD_FROM_ISR(xYieldRequired);
     9ce:	2280      	movs	r2, #128	; 0x80
     9d0:	0552      	lsls	r2, r2, #21
     9d2:	4b35      	ldr	r3, [pc, #212]	; (aa8 <irda_master_callback_received+0x268>)
     9d4:	601a      	str	r2, [r3, #0]
     9d6:	e044      	b.n	a62 <irda_master_callback_received+0x222>
					} else {
						vTracePrintF(event_channel, "No Yield! Changed to PING");
     9d8:	4b30      	ldr	r3, [pc, #192]	; (a9c <irda_master_callback_received+0x25c>)
     9da:	58e3      	ldr	r3, [r4, r3]
     9dc:	8818      	ldrh	r0, [r3, #0]
     9de:	493a      	ldr	r1, [pc, #232]	; (ac8 <irda_master_callback_received+0x288>)
     9e0:	4479      	add	r1, pc
     9e2:	4b30      	ldr	r3, [pc, #192]	; (aa4 <irda_master_callback_received+0x264>)
     9e4:	58e3      	ldr	r3, [r4, r3]
     9e6:	4798      	blx	r3
     9e8:	e03b      	b.n	a62 <irda_master_callback_received+0x222>
     9ea:	2280      	movs	r2, #128	; 0x80
     9ec:	0492      	lsls	r2, r2, #18
     9ee:	4b31      	ldr	r3, [pc, #196]	; (ab4 <irda_master_callback_received+0x274>)
     9f0:	619a      	str	r2, [r3, #24]
					}
				} else {
					//vTracePrintF(event_channel, "Wrong Data!");
					port_pin_set_output_level(LED_ERROR, pdTRUE);
					irda_comm_state = IRDA_SLAT_PING;
     9f2:	4b21      	ldr	r3, [pc, #132]	; (a78 <irda_master_callback_received+0x238>)
     9f4:	58e3      	ldr	r3, [r4, r3]
     9f6:	9303      	str	r3, [sp, #12]
     9f8:	2301      	movs	r3, #1
     9fa:	9c03      	ldr	r4, [sp, #12]
     9fc:	7023      	strb	r3, [r4, #0]
     9fe:	e030      	b.n	a62 <irda_master_callback_received+0x222>
				}
			break;
			case IRDA_SLAT_STAGE_7B:	// r010716-1608: This the code to execute when we get 0xCC. Stage 6
				// If this is correct, this board can be safely assumed to be synchronized
				if ( crc_check(&irda_rx_array, 4) )
     a00:	4b22      	ldr	r3, [pc, #136]	; (a8c <irda_master_callback_received+0x24c>)
     a02:	58e3      	ldr	r3, [r4, r3]
     a04:	9303      	str	r3, [sp, #12]
     a06:	1c18      	adds	r0, r3, #0
     a08:	2104      	movs	r1, #4
     a0a:	4b2b      	ldr	r3, [pc, #172]	; (ab8 <irda_master_callback_received+0x278>)
     a0c:	58e3      	ldr	r3, [r4, r3]
     a0e:	4798      	blx	r3
     a10:	2800      	cmp	r0, #0
     a12:	d014      	beq.n	a3e <irda_master_callback_received+0x1fe>
				{
					irda_comm_state = IRDA_SLAT_PING;	// Change state to send first response
     a14:	4b18      	ldr	r3, [pc, #96]	; (a78 <irda_master_callback_received+0x238>)
     a16:	58e3      	ldr	r3, [r4, r3]
     a18:	9303      	str	r3, [sp, #12]
     a1a:	2301      	movs	r3, #1
     a1c:	9d03      	ldr	r5, [sp, #12]
     a1e:	702b      	strb	r3, [r5, #0]
					// The slat card has been synched at this point.
					//port_pin_set_output_level(LED_BUSY, pdTRUE);
				
					// Resetting the timer
					xTimerResetFromISR ( timer_IrDA_Ping, 0 );
     a20:	4b26      	ldr	r3, [pc, #152]	; (abc <irda_master_callback_received+0x27c>)
     a22:	58e3      	ldr	r3, [r4, r3]
     a24:	681d      	ldr	r5, [r3, #0]
     a26:	4b16      	ldr	r3, [pc, #88]	; (a80 <irda_master_callback_received+0x240>)
     a28:	58e3      	ldr	r3, [r4, r3]
     a2a:	4798      	blx	r3
     a2c:	1c02      	adds	r2, r0, #0
     a2e:	2300      	movs	r3, #0
     a30:	9300      	str	r3, [sp, #0]
     a32:	1c28      	adds	r0, r5, #0
     a34:	2107      	movs	r1, #7
     a36:	4d22      	ldr	r5, [pc, #136]	; (ac0 <irda_master_callback_received+0x280>)
     a38:	5965      	ldr	r5, [r4, r5]
     a3a:	47a8      	blx	r5
     a3c:	e011      	b.n	a62 <irda_master_callback_received+0x222>
				} else {
					vTracePrintF(event_channel, "Wrong Data!");
     a3e:	4b17      	ldr	r3, [pc, #92]	; (a9c <irda_master_callback_received+0x25c>)
     a40:	58e3      	ldr	r3, [r4, r3]
     a42:	8818      	ldrh	r0, [r3, #0]
     a44:	4921      	ldr	r1, [pc, #132]	; (acc <irda_master_callback_received+0x28c>)
     a46:	4479      	add	r1, pc
     a48:	4b16      	ldr	r3, [pc, #88]	; (aa4 <irda_master_callback_received+0x264>)
     a4a:	58e3      	ldr	r3, [r4, r3]
     a4c:	4798      	blx	r3
     a4e:	2280      	movs	r2, #128	; 0x80
     a50:	0492      	lsls	r2, r2, #18
     a52:	4b18      	ldr	r3, [pc, #96]	; (ab4 <irda_master_callback_received+0x274>)
     a54:	619a      	str	r2, [r3, #24]
					port_pin_set_output_level(LED_ERROR, pdTRUE);
					irda_comm_state = IRDA_SLAT_PING;
     a56:	4b08      	ldr	r3, [pc, #32]	; (a78 <irda_master_callback_received+0x238>)
     a58:	58e3      	ldr	r3, [r4, r3]
     a5a:	9303      	str	r3, [sp, #12]
     a5c:	2301      	movs	r3, #1
     a5e:	9903      	ldr	r1, [sp, #12]
     a60:	700b      	strb	r3, [r1, #0]
				}
			break;
		}	
	}
}
     a62:	b005      	add	sp, #20
     a64:	bd30      	pop	{r4, r5, pc}
     a66:	46c0      	nop			; (mov r8, r8)
     a68:	000074de 	.word	0x000074de
     a6c:	000001b0 	.word	0x000001b0
     a70:	00000188 	.word	0x00000188
     a74:	fffdffff 	.word	0xfffdffff
     a78:	0000010c 	.word	0x0000010c
     a7c:	00000000 	.word	0x00000000
     a80:	00000140 	.word	0x00000140
     a84:	00000048 	.word	0x00000048
     a88:	0000013c 	.word	0x0000013c
     a8c:	0000003c 	.word	0x0000003c
     a90:	00000114 	.word	0x00000114
     a94:	000001d8 	.word	0x000001d8
     a98:	000000b0 	.word	0x000000b0
     a9c:	000000ec 	.word	0x000000ec
     aa0:	00006144 	.word	0x00006144
     aa4:	000002c0 	.word	0x000002c0
     aa8:	e000ed04 	.word	0xe000ed04
     aac:	0000612a 	.word	0x0000612a
     ab0:	00006128 	.word	0x00006128
     ab4:	41004400 	.word	0x41004400
     ab8:	00000268 	.word	0x00000268
     abc:	00000198 	.word	0x00000198
     ac0:	00000184 	.word	0x00000184
     ac4:	00006092 	.word	0x00006092
     ac8:	00006084 	.word	0x00006084
     acc:	0000603a 	.word	0x0000603a

00000ad0 <irda_master_callback_transmitted>:
// IrDA Tx Callback Function
static void irda_master_callback_transmitted(const struct usart_module *const module) {
     ad0:	b530      	push	{r4, r5, lr}
     ad2:	b085      	sub	sp, #20
     ad4:	4c3a      	ldr	r4, [pc, #232]	; (bc0 <irda_master_callback_transmitted+0xf0>)
     ad6:	447c      	add	r4, pc
	// Update post r010716-1608
		// ** In this update, the machine state is changed so that we can continue receiving data
		// Change::: IRDA_SLAT_PING to IRDA_SLAT_FIRST_RESPONSE
		// ** In this update, we also queue the Rx job for 0xCC
	
	switch ( irda_comm_state ) {
     ad8:	4b3a      	ldr	r3, [pc, #232]	; (bc4 <irda_master_callback_transmitted+0xf4>)
     ada:	58e3      	ldr	r3, [r4, r3]
     adc:	9302      	str	r3, [sp, #8]
     ade:	781b      	ldrb	r3, [r3, #0]
     ae0:	2b02      	cmp	r3, #2
     ae2:	d002      	beq.n	aea <irda_master_callback_transmitted+0x1a>
     ae4:	2b05      	cmp	r3, #5
     ae6:	d035      	beq.n	b54 <irda_master_callback_transmitted+0x84>
     ae8:	e068      	b.n	bbc <irda_master_callback_transmitted+0xec>
		case IRDA_SLAT_FIRST:	// This is the case where the first Response has been sent
			// r010716-1608: Change the machine state accordingly
			irda_comm_state = IRDA_SLAT_FIRST_RESPONSE;	// Go back to the First Response mode
     aea:	4b36      	ldr	r3, [pc, #216]	; (bc4 <irda_master_callback_transmitted+0xf4>)
     aec:	58e3      	ldr	r3, [r4, r3]
     aee:	9302      	str	r3, [sp, #8]
     af0:	2303      	movs	r3, #3
     af2:	9902      	ldr	r1, [sp, #8]
     af4:	700b      	strb	r3, [r1, #0]
			
			
			
				// Make sure to reset the timer
			xTimerResetFromISR ( timer_IrDA_Ping, 0 );
     af6:	4b34      	ldr	r3, [pc, #208]	; (bc8 <irda_master_callback_transmitted+0xf8>)
     af8:	58e3      	ldr	r3, [r4, r3]
     afa:	681d      	ldr	r5, [r3, #0]
     afc:	4b33      	ldr	r3, [pc, #204]	; (bcc <irda_master_callback_transmitted+0xfc>)
     afe:	58e3      	ldr	r3, [r4, r3]
     b00:	4798      	blx	r3
     b02:	1c02      	adds	r2, r0, #0
     b04:	2300      	movs	r3, #0
     b06:	9300      	str	r3, [sp, #0]
     b08:	1c28      	adds	r0, r5, #0
     b0a:	2107      	movs	r1, #7
     b0c:	4d30      	ldr	r5, [pc, #192]	; (bd0 <irda_master_callback_transmitted+0x100>)
     b0e:	5965      	ldr	r5, [r4, r5]
     b10:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b12:	4b30      	ldr	r3, [pc, #192]	; (bd4 <irda_master_callback_transmitted+0x104>)
     b14:	58e3      	ldr	r3, [r4, r3]
     b16:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     b18:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     b1a:	2a00      	cmp	r2, #0
     b1c:	d1fc      	bne.n	b18 <irda_master_callback_transmitted+0x48>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
     b1e:	6859      	ldr	r1, [r3, #4]
     b20:	2280      	movs	r2, #128	; 0x80
     b22:	0292      	lsls	r2, r2, #10
     b24:	430a      	orrs	r2, r1
     b26:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
     b28:	4a2a      	ldr	r2, [pc, #168]	; (bd4 <irda_master_callback_transmitted+0x104>)
     b2a:	58a2      	ldr	r2, [r4, r2]
     b2c:	9202      	str	r2, [sp, #8]
     b2e:	2201      	movs	r2, #1
     b30:	9d02      	ldr	r5, [sp, #8]
     b32:	71aa      	strb	r2, [r5, #6]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     b34:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     b36:	2a00      	cmp	r2, #0
     b38:	d1fc      	bne.n	b34 <irda_master_callback_transmitted+0x64>
			
			// r010716-1608: Request the 0xCC data reception right away
			usart_enable_transceiver( &irda_master, USART_TRANSCEIVER_RX );	// Enable Receiving Transceiver
			
			
			usart_read_buffer_job( &irda_master, irda_rx_array, 5 );	// Try to get the 3-Byte ping
     b3a:	4b26      	ldr	r3, [pc, #152]	; (bd4 <irda_master_callback_transmitted+0x104>)
     b3c:	58e3      	ldr	r3, [r4, r3]
     b3e:	9302      	str	r3, [sp, #8]
     b40:	4b25      	ldr	r3, [pc, #148]	; (bd8 <irda_master_callback_transmitted+0x108>)
     b42:	58e3      	ldr	r3, [r4, r3]
     b44:	9303      	str	r3, [sp, #12]
     b46:	9802      	ldr	r0, [sp, #8]
     b48:	1c19      	adds	r1, r3, #0
     b4a:	2205      	movs	r2, #5
     b4c:	4b23      	ldr	r3, [pc, #140]	; (bdc <irda_master_callback_transmitted+0x10c>)
     b4e:	58e3      	ldr	r3, [r4, r3]
     b50:	4798      	blx	r3
				// We should switch context so the ISR returns to a different task.
				// NOTE:  How this is done depends on the port you are using.  Check
				// the documentation and examples for your port.
			//	portYIELD_FROM_ISR(xYieldRequired);
			//}
		break;
     b52:	e033      	b.n	bbc <irda_master_callback_transmitted+0xec>
		case IRDA_SLAT_STAGE_7A:
			// Post: r010716-1818: Change the machine state accordingly
			irda_comm_state = IRDA_SLAT_STAGE_7B;	// Go back to the First Response mode
     b54:	4b1b      	ldr	r3, [pc, #108]	; (bc4 <irda_master_callback_transmitted+0xf4>)
     b56:	58e3      	ldr	r3, [r4, r3]
     b58:	9302      	str	r3, [sp, #8]
     b5a:	2306      	movs	r3, #6
     b5c:	9902      	ldr	r1, [sp, #8]
     b5e:	700b      	strb	r3, [r1, #0]
			
			
			
			// Make sure to reset the timer
			xTimerResetFromISR ( timer_IrDA_Ping, 0 );
     b60:	4b19      	ldr	r3, [pc, #100]	; (bc8 <irda_master_callback_transmitted+0xf8>)
     b62:	58e3      	ldr	r3, [r4, r3]
     b64:	681d      	ldr	r5, [r3, #0]
     b66:	4b19      	ldr	r3, [pc, #100]	; (bcc <irda_master_callback_transmitted+0xfc>)
     b68:	58e3      	ldr	r3, [r4, r3]
     b6a:	4798      	blx	r3
     b6c:	1c02      	adds	r2, r0, #0
     b6e:	2300      	movs	r3, #0
     b70:	9300      	str	r3, [sp, #0]
     b72:	1c28      	adds	r0, r5, #0
     b74:	2107      	movs	r1, #7
     b76:	4d16      	ldr	r5, [pc, #88]	; (bd0 <irda_master_callback_transmitted+0x100>)
     b78:	5965      	ldr	r5, [r4, r5]
     b7a:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b7c:	4b15      	ldr	r3, [pc, #84]	; (bd4 <irda_master_callback_transmitted+0x104>)
     b7e:	58e3      	ldr	r3, [r4, r3]
     b80:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     b82:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     b84:	2a00      	cmp	r2, #0
     b86:	d1fc      	bne.n	b82 <irda_master_callback_transmitted+0xb2>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
     b88:	6859      	ldr	r1, [r3, #4]
     b8a:	2280      	movs	r2, #128	; 0x80
     b8c:	0292      	lsls	r2, r2, #10
     b8e:	430a      	orrs	r2, r1
     b90:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
     b92:	4a10      	ldr	r2, [pc, #64]	; (bd4 <irda_master_callback_transmitted+0x104>)
     b94:	58a2      	ldr	r2, [r4, r2]
     b96:	9202      	str	r2, [sp, #8]
     b98:	2201      	movs	r2, #1
     b9a:	9d02      	ldr	r5, [sp, #8]
     b9c:	71aa      	strb	r2, [r5, #6]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     b9e:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     ba0:	2a00      	cmp	r2, #0
     ba2:	d1fc      	bne.n	b9e <irda_master_callback_transmitted+0xce>
			
			
			// Post: r010716-1818: Request the 0xCC data reception right away
			usart_enable_transceiver( &irda_master, USART_TRANSCEIVER_RX );	// Enable Receiving Transceiver
			usart_read_buffer_job( &irda_master, irda_rx_array, 5 );	// Try to get the 3-Byte ping
     ba4:	4b0b      	ldr	r3, [pc, #44]	; (bd4 <irda_master_callback_transmitted+0x104>)
     ba6:	58e3      	ldr	r3, [r4, r3]
     ba8:	9302      	str	r3, [sp, #8]
     baa:	4b0b      	ldr	r3, [pc, #44]	; (bd8 <irda_master_callback_transmitted+0x108>)
     bac:	58e3      	ldr	r3, [r4, r3]
     bae:	9303      	str	r3, [sp, #12]
     bb0:	9802      	ldr	r0, [sp, #8]
     bb2:	1c19      	adds	r1, r3, #0
     bb4:	2205      	movs	r2, #5
     bb6:	4b09      	ldr	r3, [pc, #36]	; (bdc <irda_master_callback_transmitted+0x10c>)
     bb8:	58e3      	ldr	r3, [r4, r3]
     bba:	4798      	blx	r3
		break;
	}
}
     bbc:	b005      	add	sp, #20
     bbe:	bd30      	pop	{r4, r5, pc}
     bc0:	0000724e 	.word	0x0000724e
     bc4:	0000010c 	.word	0x0000010c
     bc8:	00000198 	.word	0x00000198
     bcc:	00000140 	.word	0x00000140
     bd0:	00000184 	.word	0x00000184
     bd4:	00000188 	.word	0x00000188
     bd8:	0000003c 	.word	0x0000003c
     bdc:	00000218 	.word	0x00000218

00000be0 <bastian_IrDA_configuration>:
static void irda_master_callback_received(const struct usart_module *const module);
static void irda_master_callback_transmitted(const struct usart_module *const module);

//////////////////////////////////////////////////////////////////////////
// IrDA Port COnfiguration
void bastian_IrDA_configuration (void){
     be0:	b5f0      	push	{r4, r5, r6, r7, lr}
     be2:	b093      	sub	sp, #76	; 0x4c
     be4:	4d31      	ldr	r5, [pc, #196]	; (cac <bastian_IrDA_configuration+0xcc>)
     be6:	447d      	add	r5, pc
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     be8:	2380      	movs	r3, #128	; 0x80
     bea:	05db      	lsls	r3, r3, #23
     bec:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     bee:	2300      	movs	r3, #0
     bf0:	aa02      	add	r2, sp, #8
     bf2:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
	config->stopbits         = USART_STOPBITS_1;
     bf4:	2100      	movs	r1, #0
     bf6:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     bf8:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     bfa:	2401      	movs	r4, #1
     bfc:	2024      	movs	r0, #36	; 0x24
     bfe:	5414      	strb	r4, [r2, r0]
	config->transmitter_enable = true;
     c00:	2025      	movs	r0, #37	; 0x25
     c02:	5414      	strb	r4, [r2, r0]
	config->clock_polarity_inverted = false;
     c04:	2026      	movs	r0, #38	; 0x26
     c06:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
     c08:	2027      	movs	r0, #39	; 0x27
     c0a:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
     c0c:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     c0e:	202c      	movs	r0, #44	; 0x2c
     c10:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
     c12:	202d      	movs	r0, #45	; 0x2d
     c14:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     c16:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     c18:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     c1a:	2000      	movs	r0, #0
     c1c:	76d0      	strb	r0, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     c1e:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     c20:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
     c22:	2013      	movs	r0, #19
     c24:	7690      	strb	r0, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     c26:	7751      	strb	r1, [r2, #29]
	usart_get_config_defaults(&irda_conf);
	
	// Port Configuration
	irda_conf.transfer_mode = USART_TRANSFER_ASYNCHRONOUSLY;	// Asynchronous Communication Mode
	irda_conf.generator_source = GCLK_GENERATOR_0;				// Use the Generic Clock 0 as source
	irda_conf.baudrate = 115200;								// IrDA Baudrate
     c28:	21e1      	movs	r1, #225	; 0xe1
     c2a:	0249      	lsls	r1, r1, #9
     c2c:	6211      	str	r1, [r2, #32]
	irda_conf.character_size = USART_CHARACTER_SIZE_8BIT;
	irda_conf.stopbits = USART_STOPBITS_1;
	irda_conf.parity = USART_PARITY_EVEN;
     c2e:	8113      	strh	r3, [r2, #8]
	irda_conf.encoding_format_enable = true;	// Enable IrDA Encoding
     c30:	7654      	strb	r4, [r2, #25]
	
	// Pin Multiplexer Settings
	irda_conf.mux_setting = USART_RX_1_TX_0_XCK_1;
     c32:	2380      	movs	r3, #128	; 0x80
     c34:	035b      	lsls	r3, r3, #13
     c36:	60d3      	str	r3, [r2, #12]
	irda_conf.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
     c38:	4b1d      	ldr	r3, [pc, #116]	; (cb0 <bastian_IrDA_configuration+0xd0>)
     c3a:	6313      	str	r3, [r2, #48]	; 0x30
	irda_conf.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
     c3c:	4b1d      	ldr	r3, [pc, #116]	; (cb4 <bastian_IrDA_configuration+0xd4>)
     c3e:	6353      	str	r3, [r2, #52]	; 0x34
	irda_conf.pinmux_pad2 = PINMUX_UNUSED;
     c40:	2301      	movs	r3, #1
     c42:	425b      	negs	r3, r3
     c44:	6393      	str	r3, [r2, #56]	; 0x38
	irda_conf.pinmux_pad3 = PINMUX_UNUSED;
     c46:	63d3      	str	r3, [r2, #60]	; 0x3c

	// Initialize the previous settings
	usart_init((struct usart_module*) &irda_master, SERCOM3, &irda_conf);
     c48:	4b1b      	ldr	r3, [pc, #108]	; (cb8 <bastian_IrDA_configuration+0xd8>)
     c4a:	58ef      	ldr	r7, [r5, r3]
     c4c:	1c38      	adds	r0, r7, #0
     c4e:	491b      	ldr	r1, [pc, #108]	; (cbc <bastian_IrDA_configuration+0xdc>)
     c50:	4b1b      	ldr	r3, [pc, #108]	; (cc0 <bastian_IrDA_configuration+0xe0>)
     c52:	58eb      	ldr	r3, [r5, r3]
     c54:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     c56:	683e      	ldr	r6, [r7, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     c58:	1c30      	adds	r0, r6, #0
     c5a:	4b1a      	ldr	r3, [pc, #104]	; (cc4 <bastian_IrDA_configuration+0xe4>)
     c5c:	58eb      	ldr	r3, [r5, r3]
     c5e:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     c60:	231f      	movs	r3, #31
     c62:	4018      	ands	r0, r3
     c64:	4084      	lsls	r4, r0
     c66:	4b18      	ldr	r3, [pc, #96]	; (cc8 <bastian_IrDA_configuration+0xe8>)
     c68:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     c6a:	683a      	ldr	r2, [r7, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     c6c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     c6e:	2b00      	cmp	r3, #0
     c70:	d1fc      	bne.n	c6c <bastian_IrDA_configuration+0x8c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     c72:	6832      	ldr	r2, [r6, #0]
     c74:	2302      	movs	r3, #2
     c76:	4313      	orrs	r3, r2
     c78:	6033      	str	r3, [r6, #0]

	// Enable the module
	usart_enable((struct usart_module*) &irda_master);

	// ******** Callback setup
	usart_register_callback((struct usart_module*) &irda_master, (usart_callback_t)irda_master_callback_received, USART_CALLBACK_BUFFER_RECEIVED);
     c7a:	4b0f      	ldr	r3, [pc, #60]	; (cb8 <bastian_IrDA_configuration+0xd8>)
     c7c:	58ec      	ldr	r4, [r5, r3]
     c7e:	1c20      	adds	r0, r4, #0
     c80:	4912      	ldr	r1, [pc, #72]	; (ccc <bastian_IrDA_configuration+0xec>)
     c82:	4479      	add	r1, pc
     c84:	2201      	movs	r2, #1
     c86:	4b12      	ldr	r3, [pc, #72]	; (cd0 <bastian_IrDA_configuration+0xf0>)
     c88:	58ee      	ldr	r6, [r5, r3]
     c8a:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     c8c:	2531      	movs	r5, #49	; 0x31
     c8e:	5d62      	ldrb	r2, [r4, r5]
     c90:	2302      	movs	r3, #2
     c92:	4313      	orrs	r3, r2
     c94:	5563      	strb	r3, [r4, r5]
	usart_enable_callback((struct usart_module*) &irda_master, USART_CALLBACK_BUFFER_RECEIVED);

	usart_register_callback((struct usart_module*) &irda_master, (usart_callback_t)irda_master_callback_transmitted, USART_CALLBACK_BUFFER_TRANSMITTED);
     c96:	1c20      	adds	r0, r4, #0
     c98:	490e      	ldr	r1, [pc, #56]	; (cd4 <bastian_IrDA_configuration+0xf4>)
     c9a:	4479      	add	r1, pc
     c9c:	2200      	movs	r2, #0
     c9e:	47b0      	blx	r6
     ca0:	5d62      	ldrb	r2, [r4, r5]
     ca2:	2301      	movs	r3, #1
     ca4:	4313      	orrs	r3, r2
     ca6:	5563      	strb	r3, [r4, r5]
	usart_enable_callback((struct usart_module*) &irda_master, USART_CALLBACK_BUFFER_TRANSMITTED);
}
     ca8:	b013      	add	sp, #76	; 0x4c
     caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cac:	0000713e 	.word	0x0000713e
     cb0:	00160002 	.word	0x00160002
     cb4:	00170002 	.word	0x00170002
     cb8:	00000188 	.word	0x00000188
     cbc:	42001400 	.word	0x42001400
     cc0:	000001a0 	.word	0x000001a0
     cc4:	00000084 	.word	0x00000084
     cc8:	e000e100 	.word	0xe000e100
     ccc:	fffffbbb 	.word	0xfffffbbb
     cd0:	00000010 	.word	0x00000010
     cd4:	fffffe33 	.word	0xfffffe33

00000cd8 <crc_check>:
#include "asf.h"
#include "bastian_sercom.h"

// This is the function that will check the validity of the crc byte as received
BaseType_t crc_check( uint8_t* data, uint8_t size ) {
     cd8:	b530      	push	{r4, r5, lr}
	uint8_t i;
	uint8_t crc_result = 0;
	
	// Add all the contents of the packet
	for( i=0; i<size; i++) crc_result += *( data + i );
     cda:	2900      	cmp	r1, #0
     cdc:	d00c      	beq.n	cf8 <crc_check+0x20>
     cde:	1c03      	adds	r3, r0, #0
     ce0:	1c42      	adds	r2, r0, #1
     ce2:	1e4c      	subs	r4, r1, #1
     ce4:	b2e4      	uxtb	r4, r4
     ce6:	1915      	adds	r5, r2, r4
#include "bastian_sercom.h"

// This is the function that will check the validity of the crc byte as received
BaseType_t crc_check( uint8_t* data, uint8_t size ) {
	uint8_t i;
	uint8_t crc_result = 0;
     ce8:	2200      	movs	r2, #0
	
	// Add all the contents of the packet
	for( i=0; i<size; i++) crc_result += *( data + i );
     cea:	781c      	ldrb	r4, [r3, #0]
     cec:	1912      	adds	r2, r2, r4
     cee:	b2d2      	uxtb	r2, r2
     cf0:	3301      	adds	r3, #1
     cf2:	42ab      	cmp	r3, r5
     cf4:	d1f9      	bne.n	cea <crc_check+0x12>
     cf6:	e000      	b.n	cfa <crc_check+0x22>
#include "bastian_sercom.h"

// This is the function that will check the validity of the crc byte as received
BaseType_t crc_check( uint8_t* data, uint8_t size ) {
	uint8_t i;
	uint8_t crc_result = 0;
     cf8:	2200      	movs	r2, #0
	
	// Add all the contents of the packet
	for( i=0; i<size; i++) crc_result += *( data + i );
	crc_result |= 0x55;	// OR the result and get our crc
     cfa:	2355      	movs	r3, #85	; 0x55
     cfc:	431a      	orrs	r2, r3
	
	// Return result as boolean
	// pdTRUE  -> CRC Checks Out
	// pdFALSE -> CRC does NOT check out
	*( data + 5 ) = crc_result;
     cfe:	7142      	strb	r2, [r0, #5]
	if ( crc_result == *(data + size) ) return pdTRUE;
     d00:	5c40      	ldrb	r0, [r0, r1]
     d02:	1a82      	subs	r2, r0, r2
     d04:	4250      	negs	r0, r2
     d06:	4150      	adcs	r0, r2
	else return pdFALSE;
}
     d08:	bd30      	pop	{r4, r5, pc}
     d0a:	46c0      	nop			; (mov r8, r8)

00000d0c <crc_generate>:

// This is the function that generates the CRC byte
// The size does not include the spot for the CRC byte
void crc_generate( uint8_t* data, uint8_t size ) {
     d0c:	b510      	push	{r4, lr}
	uint8_t i;
	*( data + size ) = 0;
     d0e:	1842      	adds	r2, r0, r1
     d10:	2300      	movs	r3, #0
     d12:	7013      	strb	r3, [r2, #0]
	
	// Add all the contents of the packet
	for( i=0; i<size; i++) *( data + size ) += *( data + i );
     d14:	2900      	cmp	r1, #0
     d16:	d00b      	beq.n	d30 <crc_generate+0x24>
     d18:	1c03      	adds	r3, r0, #0
     d1a:	3001      	adds	r0, #1
     d1c:	3901      	subs	r1, #1
     d1e:	b2c9      	uxtb	r1, r1
     d20:	1840      	adds	r0, r0, r1
     d22:	781c      	ldrb	r4, [r3, #0]
     d24:	7811      	ldrb	r1, [r2, #0]
     d26:	1861      	adds	r1, r4, r1
     d28:	7011      	strb	r1, [r2, #0]
     d2a:	3301      	adds	r3, #1
     d2c:	4283      	cmp	r3, r0
     d2e:	d1f8      	bne.n	d22 <crc_generate+0x16>
	
	*( data + size ) |= 0x55;	// OR the CRC byte
     d30:	7811      	ldrb	r1, [r2, #0]
     d32:	2355      	movs	r3, #85	; 0x55
     d34:	430b      	orrs	r3, r1
     d36:	7013      	strb	r3, [r2, #0]
}
     d38:	bd10      	pop	{r4, pc}
     d3a:	46c0      	nop			; (mov r8, r8)

00000d3c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     d3c:	4770      	bx	lr
     d3e:	46c0      	nop			; (mov r8, r8)

00000d40 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     d40:	b530      	push	{r4, r5, lr}
     d42:	4a0f      	ldr	r2, [pc, #60]	; (d80 <_sercom_set_handler+0x40>)
     d44:	447a      	add	r2, pc
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     d46:	4b0f      	ldr	r3, [pc, #60]	; (d84 <_sercom_set_handler+0x44>)
     d48:	447b      	add	r3, pc
     d4a:	781b      	ldrb	r3, [r3, #0]
     d4c:	2b00      	cmp	r3, #0
     d4e:	d110      	bne.n	d72 <_sercom_set_handler+0x32>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     d50:	4b0d      	ldr	r3, [pc, #52]	; (d88 <_sercom_set_handler+0x48>)
     d52:	447b      	add	r3, pc
     d54:	4d0d      	ldr	r5, [pc, #52]	; (d8c <_sercom_set_handler+0x4c>)
     d56:	447d      	add	r5, pc
     d58:	605d      	str	r5, [r3, #4]
			_sercom_instances[i] = NULL;
     d5a:	4c0d      	ldr	r4, [pc, #52]	; (d90 <_sercom_set_handler+0x50>)
     d5c:	5912      	ldr	r2, [r2, r4]
     d5e:	2400      	movs	r4, #0
     d60:	6014      	str	r4, [r2, #0]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     d62:	609d      	str	r5, [r3, #8]
			_sercom_instances[i] = NULL;
     d64:	6054      	str	r4, [r2, #4]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     d66:	60dd      	str	r5, [r3, #12]
			_sercom_instances[i] = NULL;
     d68:	6094      	str	r4, [r2, #8]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     d6a:	611d      	str	r5, [r3, #16]
			_sercom_instances[i] = NULL;
     d6c:	60d4      	str	r4, [r2, #12]
		}

		_handler_table_initialized = true;
     d6e:	2201      	movs	r2, #1
     d70:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     d72:	0080      	lsls	r0, r0, #2
     d74:	4b07      	ldr	r3, [pc, #28]	; (d94 <_sercom_set_handler+0x54>)
     d76:	447b      	add	r3, pc
     d78:	1818      	adds	r0, r3, r0
     d7a:	6041      	str	r1, [r0, #4]
}
     d7c:	bd30      	pop	{r4, r5, pc}
     d7e:	46c0      	nop			; (mov r8, r8)
     d80:	00006fe0 	.word	0x00006fe0
     d84:	1ffff744 	.word	0x1ffff744
     d88:	1ffff73a 	.word	0x1ffff73a
     d8c:	ffffffe3 	.word	0xffffffe3
     d90:	00000118 	.word	0x00000118
     d94:	1ffff716 	.word	0x1ffff716

00000d98 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     d98:	b570      	push	{r4, r5, r6, lr}
     d9a:	b084      	sub	sp, #16
     d9c:	1c06      	adds	r6, r0, #0
     d9e:	4c08      	ldr	r4, [pc, #32]	; (dc0 <_sercom_get_interrupt_vector+0x28>)
     da0:	447c      	add	r4, pc
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     da2:	ad03      	add	r5, sp, #12
     da4:	1c28      	adds	r0, r5, #0
     da6:	4907      	ldr	r1, [pc, #28]	; (dc4 <_sercom_get_interrupt_vector+0x2c>)
     da8:	4479      	add	r1, pc
     daa:	2204      	movs	r2, #4
     dac:	4b06      	ldr	r3, [pc, #24]	; (dc8 <_sercom_get_interrupt_vector+0x30>)
     dae:	58e3      	ldr	r3, [r4, r3]
     db0:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     db2:	1c30      	adds	r0, r6, #0
     db4:	4b05      	ldr	r3, [pc, #20]	; (dcc <_sercom_get_interrupt_vector+0x34>)
     db6:	58e3      	ldr	r3, [r4, r3]
     db8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     dba:	5628      	ldrsb	r0, [r5, r0]
}
     dbc:	b004      	add	sp, #16
     dbe:	bd70      	pop	{r4, r5, r6, pc}
     dc0:	00006f84 	.word	0x00006f84
     dc4:	00005ce4 	.word	0x00005ce4
     dc8:	00000064 	.word	0x00000064
     dcc:	00000288 	.word	0x00000288

00000dd0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     dd0:	b508      	push	{r3, lr}
     dd2:	4b03      	ldr	r3, [pc, #12]	; (de0 <SERCOM0_Handler+0x10>)
     dd4:	447b      	add	r3, pc
     dd6:	685b      	ldr	r3, [r3, #4]
     dd8:	2000      	movs	r0, #0
     dda:	4798      	blx	r3
     ddc:	bd08      	pop	{r3, pc}
     dde:	46c0      	nop			; (mov r8, r8)
     de0:	1ffff6b8 	.word	0x1ffff6b8

00000de4 <SERCOM1_Handler>:
     de4:	b508      	push	{r3, lr}
     de6:	4b03      	ldr	r3, [pc, #12]	; (df4 <SERCOM1_Handler+0x10>)
     de8:	447b      	add	r3, pc
     dea:	689b      	ldr	r3, [r3, #8]
     dec:	2001      	movs	r0, #1
     dee:	4798      	blx	r3
     df0:	bd08      	pop	{r3, pc}
     df2:	46c0      	nop			; (mov r8, r8)
     df4:	1ffff6a4 	.word	0x1ffff6a4

00000df8 <SERCOM2_Handler>:
     df8:	b508      	push	{r3, lr}
     dfa:	4b03      	ldr	r3, [pc, #12]	; (e08 <SERCOM2_Handler+0x10>)
     dfc:	447b      	add	r3, pc
     dfe:	68db      	ldr	r3, [r3, #12]
     e00:	2002      	movs	r0, #2
     e02:	4798      	blx	r3
     e04:	bd08      	pop	{r3, pc}
     e06:	46c0      	nop			; (mov r8, r8)
     e08:	1ffff690 	.word	0x1ffff690

00000e0c <SERCOM3_Handler>:
     e0c:	b508      	push	{r3, lr}
     e0e:	4b03      	ldr	r3, [pc, #12]	; (e1c <SERCOM3_Handler+0x10>)
     e10:	447b      	add	r3, pc
     e12:	691b      	ldr	r3, [r3, #16]
     e14:	2003      	movs	r0, #3
     e16:	4798      	blx	r3
     e18:	bd08      	pop	{r3, pc}
     e1a:	46c0      	nop			; (mov r8, r8)
     e1c:	1ffff67c 	.word	0x1ffff67c

00000e20 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     e20:	b5f0      	push	{r4, r5, r6, r7, lr}
     e22:	465f      	mov	r7, fp
     e24:	4656      	mov	r6, sl
     e26:	464d      	mov	r5, r9
     e28:	4644      	mov	r4, r8
     e2a:	b4f0      	push	{r4, r5, r6, r7}
     e2c:	b09b      	sub	sp, #108	; 0x6c
     e2e:	1c06      	adds	r6, r0, #0
     e30:	1c0c      	adds	r4, r1, #0
     e32:	9208      	str	r2, [sp, #32]
     e34:	4dc6      	ldr	r5, [pc, #792]	; (1150 <usart_init+0x330>)
     e36:	447d      	add	r5, pc
     e38:	9509      	str	r5, [sp, #36]	; 0x24
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     e3a:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     e3c:	1c08      	adds	r0, r1, #0
     e3e:	4bc5      	ldr	r3, [pc, #788]	; (1154 <usart_init+0x334>)
     e40:	58eb      	ldr	r3, [r5, r3]
     e42:	4798      	blx	r3
     e44:	1c02      	adds	r2, r0, #0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     e46:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     e48:	2005      	movs	r0, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     e4a:	07df      	lsls	r7, r3, #31
     e4c:	d500      	bpl.n	e50 <usart_init+0x30>
     e4e:	e177      	b.n	1140 <usart_init+0x320>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     e50:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     e52:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     e54:	0799      	lsls	r1, r3, #30
     e56:	d500      	bpl.n	e5a <usart_init+0x3a>
     e58:	e172      	b.n	1140 <usart_init+0x320>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     e5a:	4bbf      	ldr	r3, [pc, #764]	; (1158 <usart_init+0x338>)
     e5c:	6a18      	ldr	r0, [r3, #32]
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     e5e:	1c95      	adds	r5, r2, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     e60:	2701      	movs	r7, #1
     e62:	1c39      	adds	r1, r7, #0
     e64:	40a9      	lsls	r1, r5
     e66:	4301      	orrs	r1, r0
     e68:	6219      	str	r1, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     e6a:	232d      	movs	r3, #45	; 0x2d
     e6c:	9d08      	ldr	r5, [sp, #32]
     e6e:	1c1f      	adds	r7, r3, #0
     e70:	5ceb      	ldrb	r3, [r5, r3]
     e72:	a919      	add	r1, sp, #100	; 0x64
     e74:	700b      	strb	r3, [r1, #0]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     e76:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     e78:	b2d2      	uxtb	r2, r2
     e7a:	4691      	mov	r9, r2
     e7c:	1c10      	adds	r0, r2, #0
     e7e:	4bb7      	ldr	r3, [pc, #732]	; (115c <usart_init+0x33c>)
     e80:	9d09      	ldr	r5, [sp, #36]	; 0x24
     e82:	58eb      	ldr	r3, [r5, r3]
     e84:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     e86:	4648      	mov	r0, r9
     e88:	4bb5      	ldr	r3, [pc, #724]	; (1160 <usart_init+0x340>)
     e8a:	58eb      	ldr	r3, [r5, r3]
     e8c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     e8e:	9d08      	ldr	r5, [sp, #32]
     e90:	5de8      	ldrb	r0, [r5, r7]
     e92:	2100      	movs	r1, #0
     e94:	4bb3      	ldr	r3, [pc, #716]	; (1164 <usart_init+0x344>)
     e96:	9d09      	ldr	r5, [sp, #36]	; 0x24
     e98:	58eb      	ldr	r3, [r5, r3]
     e9a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     e9c:	9d08      	ldr	r5, [sp, #32]
     e9e:	7aeb      	ldrb	r3, [r5, #11]
     ea0:	7173      	strb	r3, [r6, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     ea2:	2324      	movs	r3, #36	; 0x24
     ea4:	5ceb      	ldrb	r3, [r5, r3]
     ea6:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
     ea8:	2325      	movs	r3, #37	; 0x25
     eaa:	5ceb      	ldrb	r3, [r5, r3]
     eac:	71f3      	strb	r3, [r6, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     eae:	7eeb      	ldrb	r3, [r5, #27]
     eb0:	7233      	strb	r3, [r6, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     eb2:	7f2b      	ldrb	r3, [r5, #28]
     eb4:	7273      	strb	r3, [r6, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     eb6:	6837      	ldr	r7, [r6, #0]
     eb8:	46b9      	mov	r9, r7

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     eba:	1c38      	adds	r0, r7, #0
     ebc:	4ba5      	ldr	r3, [pc, #660]	; (1154 <usart_init+0x334>)
     ebe:	9d09      	ldr	r5, [sp, #36]	; 0x24
     ec0:	58eb      	ldr	r3, [r5, r3]
     ec2:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     ec4:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     ec6:	2200      	movs	r2, #0
     ec8:	466b      	mov	r3, sp
     eca:	334e      	adds	r3, #78	; 0x4e
     ecc:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     ece:	9d08      	ldr	r5, [sp, #32]
     ed0:	8a2d      	ldrh	r5, [r5, #16]
     ed2:	46a8      	mov	r8, r5
     ed4:	2380      	movs	r3, #128	; 0x80
     ed6:	01db      	lsls	r3, r3, #7
     ed8:	429d      	cmp	r5, r3
     eda:	d01c      	beq.n	f16 <usart_init+0xf6>
     edc:	2380      	movs	r3, #128	; 0x80
     ede:	01db      	lsls	r3, r3, #7
     ee0:	429d      	cmp	r5, r3
     ee2:	d804      	bhi.n	eee <usart_init+0xce>
     ee4:	2380      	movs	r3, #128	; 0x80
     ee6:	019b      	lsls	r3, r3, #6
     ee8:	429d      	cmp	r5, r3
     eea:	d00e      	beq.n	f0a <usart_init+0xea>
     eec:	e007      	b.n	efe <usart_init+0xde>
     eee:	23c0      	movs	r3, #192	; 0xc0
     ef0:	01db      	lsls	r3, r3, #7
     ef2:	429d      	cmp	r5, r3
     ef4:	d00c      	beq.n	f10 <usart_init+0xf0>
     ef6:	2380      	movs	r3, #128	; 0x80
     ef8:	021b      	lsls	r3, r3, #8
     efa:	429d      	cmp	r5, r3
     efc:	d002      	beq.n	f04 <usart_init+0xe4>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     efe:	2710      	movs	r7, #16
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f00:	2500      	movs	r5, #0
     f02:	e00a      	b.n	f1a <usart_init+0xfa>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     f04:	2703      	movs	r7, #3
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f06:	2500      	movs	r5, #0
     f08:	e007      	b.n	f1a <usart_init+0xfa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     f0a:	2710      	movs	r7, #16
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     f0c:	2501      	movs	r5, #1
     f0e:	e004      	b.n	f1a <usart_init+0xfa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     f10:	2708      	movs	r7, #8
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     f12:	2501      	movs	r5, #1
     f14:	e001      	b.n	f1a <usart_init+0xfa>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     f16:	2708      	movs	r7, #8
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f18:	2500      	movs	r5, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     f1a:	9908      	ldr	r1, [sp, #32]
     f1c:	6809      	ldr	r1, [r1, #0]
     f1e:	910a      	str	r1, [sp, #40]	; 0x28
		(uint32_t)config->mux_setting |
     f20:	9a08      	ldr	r2, [sp, #32]
     f22:	68d2      	ldr	r2, [r2, #12]
     f24:	920c      	str	r2, [sp, #48]	; 0x30
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     f26:	9b08      	ldr	r3, [sp, #32]
     f28:	695b      	ldr	r3, [r3, #20]
     f2a:	930d      	str	r3, [sp, #52]	; 0x34
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     f2c:	9908      	ldr	r1, [sp, #32]
     f2e:	7e09      	ldrb	r1, [r1, #24]
     f30:	910e      	str	r1, [sp, #56]	; 0x38
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     f32:	2326      	movs	r3, #38	; 0x26
     f34:	9a08      	ldr	r2, [sp, #32]
     f36:	5cd3      	ldrb	r3, [r2, r3]
     f38:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     f3a:	6853      	ldr	r3, [r2, #4]
     f3c:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     f3e:	2b00      	cmp	r3, #0
     f40:	d017      	beq.n	f72 <usart_init+0x152>
     f42:	2380      	movs	r3, #128	; 0x80
     f44:	055b      	lsls	r3, r3, #21
     f46:	459a      	cmp	sl, r3
     f48:	d13c      	bne.n	fc4 <usart_init+0x1a4>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     f4a:	2327      	movs	r3, #39	; 0x27
     f4c:	5cd3      	ldrb	r3, [r2, r3]
     f4e:	2b00      	cmp	r3, #0
     f50:	d13c      	bne.n	fcc <usart_init+0x1ac>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     f52:	6a15      	ldr	r5, [r2, #32]
     f54:	b2c0      	uxtb	r0, r0
     f56:	4b84      	ldr	r3, [pc, #528]	; (1168 <usart_init+0x348>)
     f58:	9a09      	ldr	r2, [sp, #36]	; 0x24
     f5a:	58d3      	ldr	r3, [r2, r3]
     f5c:	4798      	blx	r3
     f5e:	1c01      	adds	r1, r0, #0
     f60:	1c28      	adds	r0, r5, #0
     f62:	466a      	mov	r2, sp
     f64:	324e      	adds	r2, #78	; 0x4e
     f66:	4b81      	ldr	r3, [pc, #516]	; (116c <usart_init+0x34c>)
     f68:	9d09      	ldr	r5, [sp, #36]	; 0x24
     f6a:	58eb      	ldr	r3, [r5, r3]
     f6c:	4798      	blx	r3
     f6e:	1c03      	adds	r3, r0, #0
     f70:	e029      	b.n	fc6 <usart_init+0x1a6>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     f72:	2327      	movs	r3, #39	; 0x27
     f74:	9908      	ldr	r1, [sp, #32]
     f76:	5ccb      	ldrb	r3, [r1, r3]
     f78:	2b00      	cmp	r3, #0
     f7a:	d00f      	beq.n	f9c <usart_init+0x17c>
				status_code =
     f7c:	6a0a      	ldr	r2, [r1, #32]
     f7e:	9207      	str	r2, [sp, #28]
     f80:	6a8b      	ldr	r3, [r1, #40]	; 0x28
     f82:	9306      	str	r3, [sp, #24]
     f84:	9700      	str	r7, [sp, #0]
     f86:	1c10      	adds	r0, r2, #0
     f88:	1c19      	adds	r1, r3, #0
     f8a:	466a      	mov	r2, sp
     f8c:	324e      	adds	r2, #78	; 0x4e
     f8e:	1c2b      	adds	r3, r5, #0
     f90:	4d77      	ldr	r5, [pc, #476]	; (1170 <usart_init+0x350>)
     f92:	9f09      	ldr	r7, [sp, #36]	; 0x24
     f94:	597f      	ldr	r7, [r7, r5]
     f96:	47b8      	blx	r7
     f98:	1c03      	adds	r3, r0, #0
     f9a:	e014      	b.n	fc6 <usart_init+0x1a6>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     f9c:	9908      	ldr	r1, [sp, #32]
     f9e:	6a09      	ldr	r1, [r1, #32]
     fa0:	9110      	str	r1, [sp, #64]	; 0x40
     fa2:	b2c0      	uxtb	r0, r0
     fa4:	4b70      	ldr	r3, [pc, #448]	; (1168 <usart_init+0x348>)
     fa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
     fa8:	58d3      	ldr	r3, [r2, r3]
     faa:	4798      	blx	r3
     fac:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     fae:	9700      	str	r7, [sp, #0]
     fb0:	9810      	ldr	r0, [sp, #64]	; 0x40
     fb2:	466a      	mov	r2, sp
     fb4:	324e      	adds	r2, #78	; 0x4e
     fb6:	1c2b      	adds	r3, r5, #0
     fb8:	4d6d      	ldr	r5, [pc, #436]	; (1170 <usart_init+0x350>)
     fba:	9f09      	ldr	r7, [sp, #36]	; 0x24
     fbc:	597f      	ldr	r7, [r7, r5]
     fbe:	47b8      	blx	r7
     fc0:	1c03      	adds	r3, r0, #0
     fc2:	e000      	b.n	fc6 <usart_init+0x1a6>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     fc4:	2300      	movs	r3, #0
     fc6:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     fc8:	d000      	beq.n	fcc <usart_init+0x1ac>
     fca:	e0b9      	b.n	1140 <usart_init+0x320>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     fcc:	9d08      	ldr	r5, [sp, #32]
     fce:	7e6b      	ldrb	r3, [r5, #25]
     fd0:	2b00      	cmp	r3, #0
     fd2:	d002      	beq.n	fda <usart_init+0x1ba>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     fd4:	7eab      	ldrb	r3, [r5, #26]
     fd6:	464f      	mov	r7, r9
     fd8:	73bb      	strb	r3, [r7, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     fda:	6832      	ldr	r2, [r6, #0]
     fdc:	9f08      	ldr	r7, [sp, #32]
     fde:	9d09      	ldr	r5, [sp, #36]	; 0x24

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     fe0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     fe2:	2b00      	cmp	r3, #0
     fe4:	d1fc      	bne.n	fe0 <usart_init+0x1c0>
     fe6:	9708      	str	r7, [sp, #32]
     fe8:	9509      	str	r5, [sp, #36]	; 0x24

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     fea:	466b      	mov	r3, sp
     fec:	334e      	adds	r3, #78	; 0x4e
     fee:	881b      	ldrh	r3, [r3, #0]
     ff0:	4648      	mov	r0, r9
     ff2:	8183      	strh	r3, [r0, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     ff4:	990c      	ldr	r1, [sp, #48]	; 0x30
     ff6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
     ff8:	4329      	orrs	r1, r5
		(uint32_t)config->mux_setting |
     ffa:	9f0d      	ldr	r7, [sp, #52]	; 0x34
     ffc:	4339      	orrs	r1, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     ffe:	4650      	mov	r0, sl
    1000:	4301      	orrs	r1, r0
		config->sample_rate |
    1002:	4642      	mov	r2, r8
    1004:	4311      	orrs	r1, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1006:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    1008:	022b      	lsls	r3, r5, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    100a:	4319      	orrs	r1, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    100c:	465f      	mov	r7, fp
    100e:	077b      	lsls	r3, r7, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
    1010:	4319      	orrs	r1, r3

	if (config->use_external_clock == false) {
    1012:	2327      	movs	r3, #39	; 0x27
    1014:	9d08      	ldr	r5, [sp, #32]
    1016:	5ceb      	ldrb	r3, [r5, r3]
    1018:	2b00      	cmp	r3, #0
    101a:	d101      	bne.n	1020 <usart_init+0x200>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    101c:	2304      	movs	r3, #4
    101e:	4319      	orrs	r1, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1020:	9d08      	ldr	r5, [sp, #32]
    1022:	7f28      	ldrb	r0, [r5, #28]
    1024:	0240      	lsls	r0, r0, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1026:	7e6b      	ldrb	r3, [r5, #25]
    1028:	029b      	lsls	r3, r3, #10
    102a:	4318      	orrs	r0, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    102c:	7f6b      	ldrb	r3, [r5, #29]
    102e:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1030:	4318      	orrs	r0, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1032:	2324      	movs	r3, #36	; 0x24
    1034:	5ceb      	ldrb	r3, [r5, r3]
    1036:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1038:	4318      	orrs	r0, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    103a:	2325      	movs	r3, #37	; 0x25
    103c:	5ceb      	ldrb	r3, [r5, r3]
    103e:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1040:	4318      	orrs	r0, r3
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    1042:	7aeb      	ldrb	r3, [r5, #11]
    1044:	4318      	orrs	r0, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1046:	892b      	ldrh	r3, [r5, #8]
    1048:	2bff      	cmp	r3, #255	; 0xff
    104a:	d004      	beq.n	1056 <usart_init+0x236>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    104c:	2280      	movs	r2, #128	; 0x80
    104e:	0452      	lsls	r2, r2, #17
    1050:	4311      	orrs	r1, r2
		ctrlb |= config->parity;
    1052:	4318      	orrs	r0, r3
    1054:	e006      	b.n	1064 <usart_init+0x244>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1056:	9d08      	ldr	r5, [sp, #32]
    1058:	7eeb      	ldrb	r3, [r5, #27]
    105a:	2b00      	cmp	r3, #0
    105c:	d002      	beq.n	1064 <usart_init+0x244>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    105e:	2380      	movs	r3, #128	; 0x80
    1060:	04db      	lsls	r3, r3, #19
    1062:	4319      	orrs	r1, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1064:	232c      	movs	r3, #44	; 0x2c
    1066:	9d08      	ldr	r5, [sp, #32]
    1068:	5ceb      	ldrb	r3, [r5, r3]
    106a:	2b00      	cmp	r3, #0
    106c:	d103      	bne.n	1076 <usart_init+0x256>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    106e:	4b41      	ldr	r3, [pc, #260]	; (1174 <usart_init+0x354>)
    1070:	789b      	ldrb	r3, [r3, #2]
    1072:	079f      	lsls	r7, r3, #30
    1074:	d501      	bpl.n	107a <usart_init+0x25a>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1076:	2380      	movs	r3, #128	; 0x80
    1078:	4319      	orrs	r1, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    107a:	6832      	ldr	r2, [r6, #0]
    107c:	9f08      	ldr	r7, [sp, #32]
    107e:	9d09      	ldr	r5, [sp, #36]	; 0x24

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1080:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1082:	2b00      	cmp	r3, #0
    1084:	d1fc      	bne.n	1080 <usart_init+0x260>
    1086:	9708      	str	r7, [sp, #32]
    1088:	9509      	str	r5, [sp, #36]	; 0x24

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    108a:	464a      	mov	r2, r9
    108c:	6050      	str	r0, [r2, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    108e:	6832      	ldr	r2, [r6, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1090:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1092:	2b00      	cmp	r3, #0
    1094:	d1fc      	bne.n	1090 <usart_init+0x270>
    1096:	9708      	str	r7, [sp, #32]
    1098:	9509      	str	r5, [sp, #36]	; 0x24

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    109a:	464b      	mov	r3, r9
    109c:	6019      	str	r1, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    109e:	2280      	movs	r2, #128	; 0x80
    10a0:	ab18      	add	r3, sp, #96	; 0x60
    10a2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    10a4:	2200      	movs	r2, #0
    10a6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    10a8:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    10aa:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    10ac:	6b3d      	ldr	r5, [r7, #48]	; 0x30
    10ae:	9514      	str	r5, [sp, #80]	; 0x50
    10b0:	6b7f      	ldr	r7, [r7, #52]	; 0x34
    10b2:	9715      	str	r7, [sp, #84]	; 0x54
    10b4:	9808      	ldr	r0, [sp, #32]
    10b6:	6b80      	ldr	r0, [r0, #56]	; 0x38
    10b8:	9016      	str	r0, [sp, #88]	; 0x58
    10ba:	9908      	ldr	r1, [sp, #32]
    10bc:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    10be:	9117      	str	r1, [sp, #92]	; 0x5c
    10c0:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    10c2:	aa18      	add	r2, sp, #96	; 0x60
    10c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
    10c6:	46a0      	mov	r8, r4
    10c8:	1c14      	adds	r4, r2, #0
    10ca:	b2f9      	uxtb	r1, r7
    10cc:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    10ce:	aa14      	add	r2, sp, #80	; 0x50
    10d0:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    10d2:	2800      	cmp	r0, #0
    10d4:	d103      	bne.n	10de <usart_init+0x2be>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    10d6:	4640      	mov	r0, r8
    10d8:	4b27      	ldr	r3, [pc, #156]	; (1178 <usart_init+0x358>)
    10da:	58eb      	ldr	r3, [r5, r3]
    10dc:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    10de:	1c43      	adds	r3, r0, #1
    10e0:	d006      	beq.n	10f0 <usart_init+0x2d0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    10e2:	7020      	strb	r0, [r4, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    10e4:	0c00      	lsrs	r0, r0, #16
    10e6:	b2c0      	uxtb	r0, r0
    10e8:	1c21      	adds	r1, r4, #0
    10ea:	4b24      	ldr	r3, [pc, #144]	; (117c <usart_init+0x35c>)
    10ec:	58eb      	ldr	r3, [r5, r3]
    10ee:	4798      	blx	r3
    10f0:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    10f2:	2f04      	cmp	r7, #4
    10f4:	d1e9      	bne.n	10ca <usart_init+0x2aa>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    10f6:	2300      	movs	r3, #0
    10f8:	60f3      	str	r3, [r6, #12]
    10fa:	6133      	str	r3, [r6, #16]
    10fc:	6173      	str	r3, [r6, #20]
    10fe:	61b3      	str	r3, [r6, #24]
    1100:	61f3      	str	r3, [r6, #28]
    1102:	6233      	str	r3, [r6, #32]
	}

	module->tx_buffer_ptr              = NULL;
    1104:	62b3      	str	r3, [r6, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1106:	6273      	str	r3, [r6, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1108:	2200      	movs	r2, #0
    110a:	85f3      	strh	r3, [r6, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    110c:	85b3      	strh	r3, [r6, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    110e:	2330      	movs	r3, #48	; 0x30
    1110:	54f2      	strb	r2, [r6, r3]
	module->callback_enable_mask       = 0x00;
    1112:	2331      	movs	r3, #49	; 0x31
    1114:	54f2      	strb	r2, [r6, r3]
	module->rx_status                  = STATUS_OK;
    1116:	2332      	movs	r3, #50	; 0x32
    1118:	54f2      	strb	r2, [r6, r3]
	module->tx_status                  = STATUS_OK;
    111a:	2333      	movs	r3, #51	; 0x33
    111c:	54f2      	strb	r2, [r6, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    111e:	6830      	ldr	r0, [r6, #0]
    1120:	4b0c      	ldr	r3, [pc, #48]	; (1154 <usart_init+0x334>)
    1122:	58eb      	ldr	r3, [r5, r3]
    1124:	4798      	blx	r3
    1126:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1128:	4b15      	ldr	r3, [pc, #84]	; (1180 <usart_init+0x360>)
    112a:	58eb      	ldr	r3, [r5, r3]
    112c:	930a      	str	r3, [sp, #40]	; 0x28
    112e:	1c19      	adds	r1, r3, #0
    1130:	4b14      	ldr	r3, [pc, #80]	; (1184 <usart_init+0x364>)
    1132:	58eb      	ldr	r3, [r5, r3]
    1134:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1136:	4b14      	ldr	r3, [pc, #80]	; (1188 <usart_init+0x368>)
    1138:	58eb      	ldr	r3, [r5, r3]
    113a:	00a4      	lsls	r4, r4, #2
    113c:	50e6      	str	r6, [r4, r3]
#endif

	return status_code;
    113e:	2000      	movs	r0, #0
}
    1140:	b01b      	add	sp, #108	; 0x6c
    1142:	bc3c      	pop	{r2, r3, r4, r5}
    1144:	4690      	mov	r8, r2
    1146:	4699      	mov	r9, r3
    1148:	46a2      	mov	sl, r4
    114a:	46ab      	mov	fp, r5
    114c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    114e:	46c0      	nop			; (mov r8, r8)
    1150:	00006eee 	.word	0x00006eee
    1154:	00000288 	.word	0x00000288
    1158:	40000400 	.word	0x40000400
    115c:	00000090 	.word	0x00000090
    1160:	000001ec 	.word	0x000001ec
    1164:	000001e8 	.word	0x000001e8
    1168:	00000154 	.word	0x00000154
    116c:	000000e0 	.word	0x000000e0
    1170:	00000024 	.word	0x00000024
    1174:	41002000 	.word	0x41002000
    1178:	000002ac 	.word	0x000002ac
    117c:	00000294 	.word	0x00000294
    1180:	000001fc 	.word	0x000001fc
    1184:	00000128 	.word	0x00000128
    1188:	00000118 	.word	0x00000118

0000118c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    118c:	b5f0      	push	{r4, r5, r6, r7, lr}
    118e:	4647      	mov	r7, r8
    1190:	b480      	push	{r7}
    1192:	b082      	sub	sp, #8
    1194:	1c05      	adds	r5, r0, #0
    1196:	1c0f      	adds	r7, r1, #0
    1198:	4690      	mov	r8, r2
    119a:	4c0f      	ldr	r4, [pc, #60]	; (11d8 <_usart_write_buffer+0x4c>)
    119c:	447c      	add	r4, pc
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    119e:	6806      	ldr	r6, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    11a0:	4b0e      	ldr	r3, [pc, #56]	; (11dc <_usart_write_buffer+0x50>)
    11a2:	58e3      	ldr	r3, [r4, r3]
    11a4:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    11a6:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    11a8:	b29b      	uxth	r3, r3
    11aa:	2b00      	cmp	r3, #0
    11ac:	d004      	beq.n	11b8 <_usart_write_buffer+0x2c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    11ae:	4b0c      	ldr	r3, [pc, #48]	; (11e0 <_usart_write_buffer+0x54>)
    11b0:	58e3      	ldr	r3, [r4, r3]
    11b2:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    11b4:	2005      	movs	r0, #5
    11b6:	e00b      	b.n	11d0 <_usart_write_buffer+0x44>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    11b8:	4643      	mov	r3, r8
    11ba:	85eb      	strh	r3, [r5, #46]	; 0x2e
    11bc:	4b08      	ldr	r3, [pc, #32]	; (11e0 <_usart_write_buffer+0x54>)
    11be:	58e3      	ldr	r3, [r4, r3]
    11c0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->tx_buffer_ptr              = tx_data;
    11c2:	62af      	str	r7, [r5, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    11c4:	2205      	movs	r2, #5
    11c6:	2333      	movs	r3, #51	; 0x33
    11c8:	54ea      	strb	r2, [r5, r3]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    11ca:	2301      	movs	r3, #1
    11cc:	75b3      	strb	r3, [r6, #22]

	return STATUS_OK;
    11ce:	2000      	movs	r0, #0
}
    11d0:	b002      	add	sp, #8
    11d2:	bc04      	pop	{r2}
    11d4:	4690      	mov	r8, r2
    11d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11d8:	00006b88 	.word	0x00006b88
    11dc:	000000a8 	.word	0x000000a8
    11e0:	0000000c 	.word	0x0000000c

000011e4 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    11e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11e6:	4647      	mov	r7, r8
    11e8:	b480      	push	{r7}
    11ea:	b082      	sub	sp, #8
    11ec:	1c04      	adds	r4, r0, #0
    11ee:	1c0f      	adds	r7, r1, #0
    11f0:	4690      	mov	r8, r2
    11f2:	4d14      	ldr	r5, [pc, #80]	; (1244 <_usart_read_buffer+0x60>)
    11f4:	447d      	add	r5, pc
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    11f6:	6806      	ldr	r6, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    11f8:	4b13      	ldr	r3, [pc, #76]	; (1248 <_usart_read_buffer+0x64>)
    11fa:	58eb      	ldr	r3, [r5, r3]
    11fc:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    11fe:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1200:	b29b      	uxth	r3, r3
    1202:	2b00      	cmp	r3, #0
    1204:	d004      	beq.n	1210 <_usart_read_buffer+0x2c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1206:	4b11      	ldr	r3, [pc, #68]	; (124c <_usart_read_buffer+0x68>)
    1208:	58eb      	ldr	r3, [r5, r3]
    120a:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    120c:	2005      	movs	r0, #5
    120e:	e015      	b.n	123c <_usart_read_buffer+0x58>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    1210:	4643      	mov	r3, r8
    1212:	85a3      	strh	r3, [r4, #44]	; 0x2c
    1214:	4b0d      	ldr	r3, [pc, #52]	; (124c <_usart_read_buffer+0x68>)
    1216:	58eb      	ldr	r3, [r5, r3]
    1218:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->rx_buffer_ptr              = rx_data;
    121a:	6267      	str	r7, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    121c:	2205      	movs	r2, #5
    121e:	2332      	movs	r3, #50	; 0x32
    1220:	54e2      	strb	r2, [r4, r3]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1222:	2304      	movs	r3, #4
    1224:	75b3      	strb	r3, [r6, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    1226:	7a23      	ldrb	r3, [r4, #8]
    1228:	2b00      	cmp	r3, #0
    122a:	d001      	beq.n	1230 <_usart_read_buffer+0x4c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    122c:	2320      	movs	r3, #32
    122e:	75b3      	strb	r3, [r6, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    1230:	7a63      	ldrb	r3, [r4, #9]
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
    1232:	2000      	movs	r0, #0
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    1234:	2b00      	cmp	r3, #0
    1236:	d001      	beq.n	123c <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    1238:	2308      	movs	r3, #8
    123a:	75b3      	strb	r3, [r6, #22]
	}
#endif

	return STATUS_OK;
}
    123c:	b002      	add	sp, #8
    123e:	bc04      	pop	{r2}
    1240:	4690      	mov	r8, r2
    1242:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1244:	00006b30 	.word	0x00006b30
    1248:	000000a8 	.word	0x000000a8
    124c:	0000000c 	.word	0x0000000c

00001250 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1250:	1c93      	adds	r3, r2, #2
    1252:	009b      	lsls	r3, r3, #2
    1254:	18c3      	adds	r3, r0, r3
    1256:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    1258:	2301      	movs	r3, #1
    125a:	4093      	lsls	r3, r2
    125c:	1c1a      	adds	r2, r3, #0
    125e:	2330      	movs	r3, #48	; 0x30
    1260:	5cc1      	ldrb	r1, [r0, r3]
    1262:	430a      	orrs	r2, r1
    1264:	54c2      	strb	r2, [r0, r3]
}
    1266:	4770      	bx	lr

00001268 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1268:	b530      	push	{r4, r5, lr}
    126a:	b083      	sub	sp, #12
    126c:	4c07      	ldr	r4, [pc, #28]	; (128c <usart_write_buffer_job+0x24>)
    126e:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1270:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    1272:	2a00      	cmp	r2, #0
    1274:	d007      	beq.n	1286 <usart_write_buffer_job+0x1e>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    1276:	79c5      	ldrb	r5, [r0, #7]
		return STATUS_ERR_DENIED;
    1278:	231c      	movs	r3, #28
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    127a:	2d00      	cmp	r5, #0
    127c:	d003      	beq.n	1286 <usart_write_buffer_job+0x1e>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    127e:	4b04      	ldr	r3, [pc, #16]	; (1290 <usart_write_buffer_job+0x28>)
    1280:	58e3      	ldr	r3, [r4, r3]
    1282:	4798      	blx	r3
    1284:	1c03      	adds	r3, r0, #0
}
    1286:	1c18      	adds	r0, r3, #0
    1288:	b003      	add	sp, #12
    128a:	bd30      	pop	{r4, r5, pc}
    128c:	00006ab6 	.word	0x00006ab6
    1290:	000000c0 	.word	0x000000c0

00001294 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1294:	b530      	push	{r4, r5, lr}
    1296:	b083      	sub	sp, #12
    1298:	4c07      	ldr	r4, [pc, #28]	; (12b8 <usart_read_buffer_job+0x24>)
    129a:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    129c:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    129e:	2a00      	cmp	r2, #0
    12a0:	d007      	beq.n	12b2 <usart_read_buffer_job+0x1e>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    12a2:	7985      	ldrb	r5, [r0, #6]
		return STATUS_ERR_DENIED;
    12a4:	231c      	movs	r3, #28
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    12a6:	2d00      	cmp	r5, #0
    12a8:	d003      	beq.n	12b2 <usart_read_buffer_job+0x1e>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    12aa:	4b04      	ldr	r3, [pc, #16]	; (12bc <usart_read_buffer_job+0x28>)
    12ac:	58e3      	ldr	r3, [r4, r3]
    12ae:	4798      	blx	r3
    12b0:	1c03      	adds	r3, r0, #0
}
    12b2:	1c18      	adds	r0, r3, #0
    12b4:	b003      	add	sp, #12
    12b6:	bd30      	pop	{r4, r5, pc}
    12b8:	00006a8a 	.word	0x00006a8a
    12bc:	000000d8 	.word	0x000000d8

000012c0 <usart_abort_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    12c0:	6803      	ldr	r3, [r0, #0]

	switch(transceiver_type) {
    12c2:	2900      	cmp	r1, #0
    12c4:	d002      	beq.n	12cc <usart_abort_job+0xc>
    12c6:	2901      	cmp	r1, #1
    12c8:	d005      	beq.n	12d6 <usart_abort_job+0x16>
    12ca:	e008      	b.n	12de <usart_abort_job+0x1e>
		case USART_TRANSCEIVER_RX:
			/* Clear the interrupt flag in order to prevent the receive
			 * complete callback to fire */
			usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
    12cc:	2204      	movs	r2, #4
    12ce:	761a      	strb	r2, [r3, #24]

			/* Clear the software reception buffer */
			module->remaining_rx_buffer_length = 0;
    12d0:	2300      	movs	r3, #0
    12d2:	8583      	strh	r3, [r0, #44]	; 0x2c

			break;
    12d4:	e003      	b.n	12de <usart_abort_job+0x1e>

		case USART_TRANSCEIVER_TX:
			/* Clear the interrupt flag in order to prevent the receive
			 * complete callback to fire */
			usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
    12d6:	2202      	movs	r2, #2
    12d8:	761a      	strb	r2, [r3, #24]

			/* Clear the software reception buffer */
			module->remaining_tx_buffer_length = 0;
    12da:	2300      	movs	r3, #0
    12dc:	85c3      	strh	r3, [r0, #46]	; 0x2e

			break;
	}
}
    12de:	4770      	bx	lr

000012e0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    12e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    12e2:	b083      	sub	sp, #12
    12e4:	4b66      	ldr	r3, [pc, #408]	; (1480 <_usart_interrupt_handler+0x1a0>)
    12e6:	447b      	add	r3, pc
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    12e8:	4a66      	ldr	r2, [pc, #408]	; (1484 <_usart_interrupt_handler+0x1a4>)
    12ea:	589a      	ldr	r2, [r3, r2]
    12ec:	0080      	lsls	r0, r0, #2
    12ee:	5885      	ldr	r5, [r0, r2]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    12f0:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    12f2:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    12f4:	2b00      	cmp	r3, #0
    12f6:	d1fc      	bne.n	12f2 <_usart_interrupt_handler+0x12>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    12f8:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    12fa:	7da6      	ldrb	r6, [r4, #22]
    12fc:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    12fe:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    1300:	5ceb      	ldrb	r3, [r5, r3]
    1302:	2230      	movs	r2, #48	; 0x30
    1304:	5caf      	ldrb	r7, [r5, r2]
    1306:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1308:	07f1      	lsls	r1, r6, #31
    130a:	d520      	bpl.n	134e <_usart_interrupt_handler+0x6e>
		if (module->remaining_tx_buffer_length) {
    130c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    130e:	b29b      	uxth	r3, r3
    1310:	2b00      	cmp	r3, #0
    1312:	d01a      	beq.n	134a <_usart_interrupt_handler+0x6a>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1314:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1316:	781a      	ldrb	r2, [r3, #0]
    1318:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    131a:	1c59      	adds	r1, r3, #1
    131c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    131e:	7969      	ldrb	r1, [r5, #5]
    1320:	2901      	cmp	r1, #1
    1322:	d104      	bne.n	132e <_usart_interrupt_handler+0x4e>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1324:	7859      	ldrb	r1, [r3, #1]
    1326:	0209      	lsls	r1, r1, #8
    1328:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    132a:	3302      	adds	r3, #2
    132c:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    132e:	05d3      	lsls	r3, r2, #23
    1330:	0ddb      	lsrs	r3, r3, #23
    1332:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1334:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1336:	3b01      	subs	r3, #1
    1338:	b29b      	uxth	r3, r3
    133a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    133c:	2b00      	cmp	r3, #0
    133e:	d106      	bne.n	134e <_usart_interrupt_handler+0x6e>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1340:	2301      	movs	r3, #1
    1342:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1344:	2302      	movs	r3, #2
    1346:	75a3      	strb	r3, [r4, #22]
    1348:	e001      	b.n	134e <_usart_interrupt_handler+0x6e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    134a:	2301      	movs	r3, #1
    134c:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    134e:	07b2      	lsls	r2, r6, #30
    1350:	d509      	bpl.n	1366 <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1352:	2302      	movs	r3, #2
    1354:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1356:	2200      	movs	r2, #0
    1358:	2333      	movs	r3, #51	; 0x33
    135a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    135c:	07fb      	lsls	r3, r7, #31
    135e:	d502      	bpl.n	1366 <_usart_interrupt_handler+0x86>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1360:	1c28      	adds	r0, r5, #0
    1362:	68e9      	ldr	r1, [r5, #12]
    1364:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1366:	0772      	lsls	r2, r6, #29
    1368:	d56a      	bpl.n	1440 <_usart_interrupt_handler+0x160>

		if (module->remaining_rx_buffer_length) {
    136a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    136c:	b29b      	uxth	r3, r3
    136e:	2b00      	cmp	r3, #0
    1370:	d064      	beq.n	143c <_usart_interrupt_handler+0x15c>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1372:	8b63      	ldrh	r3, [r4, #26]
    1374:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1376:	0719      	lsls	r1, r3, #28
    1378:	d402      	bmi.n	1380 <_usart_interrupt_handler+0xa0>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    137a:	223f      	movs	r2, #63	; 0x3f
    137c:	4013      	ands	r3, r2
    137e:	e001      	b.n	1384 <_usart_interrupt_handler+0xa4>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1380:	2237      	movs	r2, #55	; 0x37
    1382:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1384:	2b00      	cmp	r3, #0
    1386:	d037      	beq.n	13f8 <_usart_interrupt_handler+0x118>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1388:	079a      	lsls	r2, r3, #30
    138a:	d507      	bpl.n	139c <_usart_interrupt_handler+0xbc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    138c:	221a      	movs	r2, #26
    138e:	2332      	movs	r3, #50	; 0x32
    1390:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    1392:	8b62      	ldrh	r2, [r4, #26]
    1394:	2302      	movs	r3, #2
    1396:	4313      	orrs	r3, r2
    1398:	8363      	strh	r3, [r4, #26]
    139a:	e027      	b.n	13ec <_usart_interrupt_handler+0x10c>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    139c:	0759      	lsls	r1, r3, #29
    139e:	d507      	bpl.n	13b0 <_usart_interrupt_handler+0xd0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    13a0:	221e      	movs	r2, #30
    13a2:	2332      	movs	r3, #50	; 0x32
    13a4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    13a6:	8b62      	ldrh	r2, [r4, #26]
    13a8:	2304      	movs	r3, #4
    13aa:	4313      	orrs	r3, r2
    13ac:	8363      	strh	r3, [r4, #26]
    13ae:	e01d      	b.n	13ec <_usart_interrupt_handler+0x10c>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    13b0:	07da      	lsls	r2, r3, #31
    13b2:	d507      	bpl.n	13c4 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    13b4:	2213      	movs	r2, #19
    13b6:	2332      	movs	r3, #50	; 0x32
    13b8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    13ba:	8b62      	ldrh	r2, [r4, #26]
    13bc:	2301      	movs	r3, #1
    13be:	4313      	orrs	r3, r2
    13c0:	8363      	strh	r3, [r4, #26]
    13c2:	e013      	b.n	13ec <_usart_interrupt_handler+0x10c>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    13c4:	06d9      	lsls	r1, r3, #27
    13c6:	d507      	bpl.n	13d8 <_usart_interrupt_handler+0xf8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    13c8:	2242      	movs	r2, #66	; 0x42
    13ca:	2332      	movs	r3, #50	; 0x32
    13cc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    13ce:	8b62      	ldrh	r2, [r4, #26]
    13d0:	2310      	movs	r3, #16
    13d2:	4313      	orrs	r3, r2
    13d4:	8363      	strh	r3, [r4, #26]
    13d6:	e009      	b.n	13ec <_usart_interrupt_handler+0x10c>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    13d8:	2220      	movs	r2, #32
    13da:	421a      	tst	r2, r3
    13dc:	d006      	beq.n	13ec <_usart_interrupt_handler+0x10c>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    13de:	2241      	movs	r2, #65	; 0x41
    13e0:	2332      	movs	r3, #50	; 0x32
    13e2:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    13e4:	8b62      	ldrh	r2, [r4, #26]
    13e6:	2320      	movs	r3, #32
    13e8:	4313      	orrs	r3, r2
    13ea:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    13ec:	077a      	lsls	r2, r7, #29
    13ee:	d527      	bpl.n	1440 <_usart_interrupt_handler+0x160>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    13f0:	1c28      	adds	r0, r5, #0
    13f2:	696b      	ldr	r3, [r5, #20]
    13f4:	4798      	blx	r3
    13f6:	e023      	b.n	1440 <_usart_interrupt_handler+0x160>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    13f8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    13fa:	05d2      	lsls	r2, r2, #23
    13fc:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    13fe:	b2d3      	uxtb	r3, r2
    1400:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1402:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1404:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1406:	1c59      	adds	r1, r3, #1
    1408:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    140a:	7969      	ldrb	r1, [r5, #5]
    140c:	2901      	cmp	r1, #1
    140e:	d104      	bne.n	141a <_usart_interrupt_handler+0x13a>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1410:	0a12      	lsrs	r2, r2, #8
    1412:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1414:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1416:	3301      	adds	r3, #1
    1418:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    141a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    141c:	3b01      	subs	r3, #1
    141e:	b29b      	uxth	r3, r3
    1420:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1422:	2b00      	cmp	r3, #0
    1424:	d10c      	bne.n	1440 <_usart_interrupt_handler+0x160>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1426:	2304      	movs	r3, #4
    1428:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    142a:	2200      	movs	r2, #0
    142c:	2332      	movs	r3, #50	; 0x32
    142e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1430:	07ba      	lsls	r2, r7, #30
    1432:	d505      	bpl.n	1440 <_usart_interrupt_handler+0x160>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1434:	1c28      	adds	r0, r5, #0
    1436:	692b      	ldr	r3, [r5, #16]
    1438:	4798      	blx	r3
    143a:	e001      	b.n	1440 <_usart_interrupt_handler+0x160>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    143c:	2304      	movs	r3, #4
    143e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1440:	06f1      	lsls	r1, r6, #27
    1442:	d507      	bpl.n	1454 <_usart_interrupt_handler+0x174>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1444:	2310      	movs	r3, #16
    1446:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1448:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    144a:	06fa      	lsls	r2, r7, #27
    144c:	d502      	bpl.n	1454 <_usart_interrupt_handler+0x174>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    144e:	1c28      	adds	r0, r5, #0
    1450:	69eb      	ldr	r3, [r5, #28]
    1452:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1454:	06b1      	lsls	r1, r6, #26
    1456:	d507      	bpl.n	1468 <_usart_interrupt_handler+0x188>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1458:	2320      	movs	r3, #32
    145a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    145c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    145e:	073a      	lsls	r2, r7, #28
    1460:	d502      	bpl.n	1468 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1462:	1c28      	adds	r0, r5, #0
    1464:	69ab      	ldr	r3, [r5, #24]
    1466:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1468:	0731      	lsls	r1, r6, #28
    146a:	d507      	bpl.n	147c <_usart_interrupt_handler+0x19c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    146c:	2308      	movs	r3, #8
    146e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1470:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1472:	06ba      	lsls	r2, r7, #26
    1474:	d502      	bpl.n	147c <_usart_interrupt_handler+0x19c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1476:	6a2b      	ldr	r3, [r5, #32]
    1478:	1c28      	adds	r0, r5, #0
    147a:	4798      	blx	r3
		}
	}
#endif
}
    147c:	b003      	add	sp, #12
    147e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1480:	00006a3e 	.word	0x00006a3e
    1484:	00000118 	.word	0x00000118

00001488 <vTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., NTask) in trcConfig.h is too small.
 ******************************************************************************/
void vTraceError(const char* msg)
{
    1488:	b510      	push	{r4, lr}
    148a:	b082      	sub	sp, #8
    148c:	1c01      	adds	r1, r0, #0
    148e:	4c16      	ldr	r4, [pc, #88]	; (14e8 <vTraceError+0x60>)
    1490:	447c      	add	r4, pc
	TRACE_ASSERT(msg != NULL, "vTraceError: msg == NULL", );
    1492:	2800      	cmp	r0, #0
    1494:	d105      	bne.n	14a2 <vTraceError+0x1a>
    1496:	4815      	ldr	r0, [pc, #84]	; (14ec <vTraceError+0x64>)
    1498:	4478      	add	r0, pc
    149a:	4b15      	ldr	r3, [pc, #84]	; (14f0 <vTraceError+0x68>)
    149c:	58e3      	ldr	r3, [r4, r3]
    149e:	4798      	blx	r3
    14a0:	e020      	b.n	14e4 <vTraceError+0x5c>
	TRACE_ASSERT(RecorderDataPtr != NULL, "vTraceError: RecorderDataPtr == NULL", );
    14a2:	4b14      	ldr	r3, [pc, #80]	; (14f4 <vTraceError+0x6c>)
    14a4:	58e3      	ldr	r3, [r4, r3]
    14a6:	681b      	ldr	r3, [r3, #0]
    14a8:	2b00      	cmp	r3, #0
    14aa:	d105      	bne.n	14b8 <vTraceError+0x30>
    14ac:	4812      	ldr	r0, [pc, #72]	; (14f8 <vTraceError+0x70>)
    14ae:	4478      	add	r0, pc
    14b0:	4b0f      	ldr	r3, [pc, #60]	; (14f0 <vTraceError+0x68>)
    14b2:	58e3      	ldr	r3, [r4, r3]
    14b4:	4798      	blx	r3
    14b6:	e015      	b.n	14e4 <vTraceError+0x5c>

	/* Stop the recorder. Note: We do not call vTraceStop, since that adds a weird
	and unnecessary dependency to trcUser.c */

	RecorderDataPtr->recorderActive = 0;
    14b8:	2200      	movs	r2, #0
    14ba:	631a      	str	r2, [r3, #48]	; 0x30

	if (traceErrorMessage == NULL)
    14bc:	4a0f      	ldr	r2, [pc, #60]	; (14fc <vTraceError+0x74>)
    14be:	58a2      	ldr	r2, [r4, r2]
    14c0:	6812      	ldr	r2, [r2, #0]
    14c2:	2a00      	cmp	r2, #0
    14c4:	d10e      	bne.n	14e4 <vTraceError+0x5c>
	{
		traceErrorMessage = (char*)msg;
    14c6:	4a0d      	ldr	r2, [pc, #52]	; (14fc <vTraceError+0x74>)
    14c8:	58a2      	ldr	r2, [r4, r2]
    14ca:	6010      	str	r0, [r2, #0]
		(void)strncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    14cc:	4a0c      	ldr	r2, [pc, #48]	; (1500 <vTraceError+0x78>)
    14ce:	1898      	adds	r0, r3, r2
    14d0:	2250      	movs	r2, #80	; 0x50
    14d2:	4b0c      	ldr	r3, [pc, #48]	; (1504 <vTraceError+0x7c>)
    14d4:	58e3      	ldr	r3, [r4, r3]
    14d6:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;	 	 
    14d8:	4b06      	ldr	r3, [pc, #24]	; (14f4 <vTraceError+0x6c>)
    14da:	58e3      	ldr	r3, [r4, r3]
    14dc:	681a      	ldr	r2, [r3, #0]
    14de:	2101      	movs	r1, #1
    14e0:	4b09      	ldr	r3, [pc, #36]	; (1508 <vTraceError+0x80>)
    14e2:	50d1      	str	r1, [r2, r3]
	}
	
}
    14e4:	b002      	add	sp, #8
    14e6:	bd10      	pop	{r4, pc}
    14e8:	00006894 	.word	0x00006894
    14ec:	000055f8 	.word	0x000055f8
    14f0:	00000120 	.word	0x00000120
    14f4:	00000028 	.word	0x00000028
    14f8:	0000560a 	.word	0x0000560a
    14fc:	00000280 	.word	0x00000280
    1500:	000007dc 	.word	0x000007dc
    1504:	00000164 	.word	0x00000164
    1508:	000007d4 	.word	0x000007d4

0000150c <prvTraceInitTraceData>:

RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{		
    150c:	b5f0      	push	{r4, r5, r6, r7, lr}
    150e:	465f      	mov	r7, fp
    1510:	4656      	mov	r6, sl
    1512:	464d      	mov	r5, r9
    1514:	4644      	mov	r4, r8
    1516:	b4f0      	push	{r4, r5, r6, r7}
    1518:	b083      	sub	sp, #12
    151a:	4d51      	ldr	r5, [pc, #324]	; (1660 <prvTraceInitTraceData+0x154>)
    151c:	447d      	add	r5, pc
	init_hwtc_count = HWTC_COUNT;
    151e:	4b51      	ldr	r3, [pc, #324]	; (1664 <prvTraceInitTraceData+0x158>)
    1520:	681a      	ldr	r2, [r3, #0]
    1522:	4b51      	ldr	r3, [pc, #324]	; (1668 <prvTraceInitTraceData+0x15c>)
    1524:	58eb      	ldr	r3, [r5, r3]
    1526:	601a      	str	r2, [r3, #0]
	
#if TRACE_DATA_ALLOCATION == TRACE_DATA_ALLOCATION_STATIC
	RecorderDataPtr = &RecorderData;
    1528:	4b50      	ldr	r3, [pc, #320]	; (166c <prvTraceInitTraceData+0x160>)
    152a:	58ee      	ldr	r6, [r5, r3]
    152c:	4b50      	ldr	r3, [pc, #320]	; (1670 <prvTraceInitTraceData+0x164>)
    152e:	58ec      	ldr	r4, [r5, r3]
    1530:	6034      	str	r4, [r6, #0]
	{
		vTraceError("No recorder data structure allocated!");
		return;
	}
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
    1532:	23bf      	movs	r3, #191	; 0xbf
    1534:	015b      	lsls	r3, r3, #5
    1536:	469b      	mov	fp, r3
    1538:	1c20      	adds	r0, r4, #0
    153a:	2100      	movs	r1, #0
    153c:	1c1a      	adds	r2, r3, #0
    153e:	4b4d      	ldr	r3, [pc, #308]	; (1674 <prvTraceInitTraceData+0x168>)
    1540:	58eb      	ldr	r3, [r5, r3]
    1542:	4798      	blx	r3

	RecorderDataPtr->startmarker0 = 0x00;
	RecorderDataPtr->startmarker1 = 0x01;
    1544:	2101      	movs	r1, #1
    1546:	468a      	mov	sl, r1
    1548:	7061      	strb	r1, [r4, #1]
	RecorderDataPtr->startmarker2 = 0x02;
    154a:	2302      	movs	r3, #2
    154c:	70a3      	strb	r3, [r4, #2]
	RecorderDataPtr->startmarker3 = 0x03;
    154e:	2303      	movs	r3, #3
    1550:	70e3      	strb	r3, [r4, #3]
	RecorderDataPtr->startmarker4 = 0x70;
    1552:	2370      	movs	r3, #112	; 0x70
    1554:	7123      	strb	r3, [r4, #4]
	RecorderDataPtr->startmarker5 = 0x71;
    1556:	2371      	movs	r3, #113	; 0x71
    1558:	4699      	mov	r9, r3
    155a:	7163      	strb	r3, [r4, #5]
	RecorderDataPtr->startmarker6 = 0x72;
    155c:	2272      	movs	r2, #114	; 0x72
    155e:	4690      	mov	r8, r2
    1560:	71a2      	strb	r2, [r4, #6]
	RecorderDataPtr->startmarker7 = 0x73;
    1562:	2773      	movs	r7, #115	; 0x73
    1564:	71e7      	strb	r7, [r4, #7]
	RecorderDataPtr->startmarker8 = 0xF0;
    1566:	23f0      	movs	r3, #240	; 0xf0
    1568:	7223      	strb	r3, [r4, #8]
	RecorderDataPtr->startmarker9 = 0xF1;
    156a:	210f      	movs	r1, #15
    156c:	4249      	negs	r1, r1
    156e:	7261      	strb	r1, [r4, #9]
	RecorderDataPtr->startmarker10 = 0xF2;
    1570:	220e      	movs	r2, #14
    1572:	4252      	negs	r2, r2
    1574:	72a2      	strb	r2, [r4, #10]
	RecorderDataPtr->startmarker11 = 0xF3;
    1576:	230d      	movs	r3, #13
    1578:	425b      	negs	r3, r3
    157a:	72e3      	strb	r3, [r4, #11]

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
    157c:	4b3e      	ldr	r3, [pc, #248]	; (1678 <prvTraceInitTraceData+0x16c>)
    157e:	81a3      	strh	r3, [r4, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
    1580:	2304      	movs	r3, #4
    1582:	73a3      	strb	r3, [r4, #14]
	RecorderDataPtr->irq_priority_order = IRQ_PRIORITY_ORDER;
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
    1584:	4659      	mov	r1, fp
    1586:	6121      	str	r1, [r4, #16]

	RecorderDataPtr->maxEvents = EVENT_BUFFER_SIZE;
    1588:	23fa      	movs	r3, #250	; 0xfa
    158a:	009b      	lsls	r3, r3, #2
    158c:	61a3      	str	r3, [r4, #24]

	RecorderDataPtr->debugMarker0 = 0xF0F0F0F0;
    158e:	4b3b      	ldr	r3, [pc, #236]	; (167c <prvTraceInitTraceData+0x170>)
    1590:	6563      	str	r3, [r4, #84]	; 0x54

	RecorderDataPtr->isUsing16bitHandles = USE_16BIT_OBJECT_HANDLES;

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
    1592:	4b3b      	ldr	r3, [pc, #236]	; (1680 <prvTraceInitTraceData+0x174>)
    1594:	58eb      	ldr	r3, [r5, r3]
    1596:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = 0xF1F1F1F1;
    1598:	6830      	ldr	r0, [r6, #0]
    159a:	4a3a      	ldr	r2, [pc, #232]	; (1684 <prvTraceInitTraceData+0x178>)
    159c:	4b3a      	ldr	r3, [pc, #232]	; (1688 <prvTraceInitTraceData+0x17c>)
    159e:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.symTableSize = SYMBOL_TABLE_SIZE;
    15a0:	22c8      	movs	r2, #200	; 0xc8
    15a2:	0092      	lsls	r2, r2, #2
    15a4:	2385      	movs	r3, #133	; 0x85
    15a6:	00db      	lsls	r3, r3, #3
    15a8:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
    15aa:	4b38      	ldr	r3, [pc, #224]	; (168c <prvTraceInitTraceData+0x180>)
    15ac:	4652      	mov	r2, sl
    15ae:	50c2      	str	r2, [r0, r3]
#if (INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
    15b0:	22fe      	movs	r2, #254	; 0xfe
    15b2:	0592      	lsls	r2, r2, #22
    15b4:	23fa      	movs	r3, #250	; 0xfa
    15b6:	00db      	lsls	r3, r3, #3
    15b8:	50c2      	str	r2, [r0, r3]
#endif
	RecorderDataPtr->debugMarker2 = 0xF2F2F2F2;
    15ba:	4a35      	ldr	r2, [pc, #212]	; (1690 <prvTraceInitTraceData+0x184>)
    15bc:	23fb      	movs	r3, #251	; 0xfb
    15be:	00db      	lsls	r3, r3, #3
    15c0:	50c2      	str	r2, [r0, r3]
	(void)strncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
    15c2:	4b34      	ldr	r3, [pc, #208]	; (1694 <prvTraceInitTraceData+0x188>)
    15c4:	18c0      	adds	r0, r0, r3
    15c6:	4934      	ldr	r1, [pc, #208]	; (1698 <prvTraceInitTraceData+0x18c>)
    15c8:	4479      	add	r1, pc
    15ca:	2250      	movs	r2, #80	; 0x50
    15cc:	4b33      	ldr	r3, [pc, #204]	; (169c <prvTraceInitTraceData+0x190>)
    15ce:	58eb      	ldr	r3, [r5, r3]
    15d0:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = 0xF3F3F3F3;
    15d2:	6833      	ldr	r3, [r6, #0]
    15d4:	4932      	ldr	r1, [pc, #200]	; (16a0 <prvTraceInitTraceData+0x194>)
    15d6:	4a33      	ldr	r2, [pc, #204]	; (16a4 <prvTraceInitTraceData+0x198>)
    15d8:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
    15da:	210a      	movs	r1, #10
    15dc:	4a32      	ldr	r2, [pc, #200]	; (16a8 <prvTraceInitTraceData+0x19c>)
    15de:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
    15e0:	210b      	movs	r1, #11
    15e2:	4a32      	ldr	r2, [pc, #200]	; (16ac <prvTraceInitTraceData+0x1a0>)
    15e4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
    15e6:	210c      	movs	r1, #12
    15e8:	4a31      	ldr	r2, [pc, #196]	; (16b0 <prvTraceInitTraceData+0x1a4>)
    15ea:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
    15ec:	210d      	movs	r1, #13
    15ee:	4a31      	ldr	r2, [pc, #196]	; (16b4 <prvTraceInitTraceData+0x1a8>)
    15f0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
    15f2:	4a31      	ldr	r2, [pc, #196]	; (16b8 <prvTraceInitTraceData+0x1ac>)
    15f4:	4649      	mov	r1, r9
    15f6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
    15f8:	4a30      	ldr	r2, [pc, #192]	; (16bc <prvTraceInitTraceData+0x1b0>)
    15fa:	4641      	mov	r1, r8
    15fc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
    15fe:	4a30      	ldr	r2, [pc, #192]	; (16c0 <prvTraceInitTraceData+0x1b4>)
    1600:	549f      	strb	r7, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
    1602:	2174      	movs	r1, #116	; 0x74
    1604:	4a2f      	ldr	r2, [pc, #188]	; (16c4 <prvTraceInitTraceData+0x1b8>)
    1606:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
    1608:	4a2f      	ldr	r2, [pc, #188]	; (16c8 <prvTraceInitTraceData+0x1bc>)
    160a:	210f      	movs	r1, #15
    160c:	4249      	negs	r1, r1
    160e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
    1610:	4a2e      	ldr	r2, [pc, #184]	; (16cc <prvTraceInitTraceData+0x1c0>)
    1612:	210e      	movs	r1, #14
    1614:	4249      	negs	r1, r1
    1616:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
    1618:	4a2d      	ldr	r2, [pc, #180]	; (16d0 <prvTraceInitTraceData+0x1c4>)
    161a:	210d      	movs	r1, #13
    161c:	4249      	negs	r1, r1
    161e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
    1620:	21f4      	movs	r1, #244	; 0xf4
    1622:	4a2c      	ldr	r2, [pc, #176]	; (16d4 <prvTraceInitTraceData+0x1c8>)
    1624:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = USER_EVENT_BUFFER_SIZE;
	RecorderDataPtr->userEventBuffer.numberOfChannels = CHANNEL_FORMAT_PAIRS + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
    1626:	4b2c      	ldr	r3, [pc, #176]	; (16d8 <prvTraceInitTraceData+0x1cc>)
    1628:	58eb      	ldr	r3, [r5, r3]
    162a:	4798      	blx	r3
}

static void vInitStartMarkers()
{
	uint32_t i;
	uint8_t *ptr = (uint8_t*)&(RecorderDataPtr->startmarker0);
    162c:	6831      	ldr	r1, [r6, #0]
	if ((*ptr) == 0)
    162e:	780b      	ldrb	r3, [r1, #0]
    1630:	2b00      	cmp	r3, #0
    1632:	d108      	bne.n	1646 <prvTraceInitTraceData+0x13a>
    1634:	1c0b      	adds	r3, r1, #0
    1636:	310c      	adds	r1, #12
	{
		for (i = 0; i < 12; i++)
		{
			ptr[i] += 1;
    1638:	781a      	ldrb	r2, [r3, #0]
    163a:	3201      	adds	r2, #1
    163c:	701a      	strb	r2, [r3, #0]
    163e:	3301      	adds	r3, #1
{
	uint32_t i;
	uint8_t *ptr = (uint8_t*)&(RecorderDataPtr->startmarker0);
	if ((*ptr) == 0)
	{
		for (i = 0; i < 12; i++)
    1640:	428b      	cmp	r3, r1
    1642:	d1f9      	bne.n	1638 <prvTraceInitTraceData+0x12c>
    1644:	e004      	b.n	1650 <prvTraceInitTraceData+0x144>
			ptr[i] += 1;
		}
	}
	else
	{
		vTraceError("Trace start markers already initialized!");
    1646:	4825      	ldr	r0, [pc, #148]	; (16dc <prvTraceInitTraceData+0x1d0>)
    1648:	4478      	add	r0, pc
    164a:	4b25      	ldr	r3, [pc, #148]	; (16e0 <prvTraceInitTraceData+0x1d4>)
    164c:	58eb      	ldr	r3, [r5, r3]
    164e:	4798      	blx	r3
	vInitStartMarkers();
	
	#ifdef PORT_SPECIFIC_INIT
	PORT_SPECIFIC_INIT();
	#endif
}
    1650:	b003      	add	sp, #12
    1652:	bc3c      	pop	{r2, r3, r4, r5}
    1654:	4690      	mov	r8, r2
    1656:	4699      	mov	r9, r3
    1658:	46a2      	mov	sl, r4
    165a:	46ab      	mov	fp, r5
    165c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    165e:	46c0      	nop			; (mov r8, r8)
    1660:	00006808 	.word	0x00006808
    1664:	e000e018 	.word	0xe000e018
    1668:	00000284 	.word	0x00000284
    166c:	00000028 	.word	0x00000028
    1670:	000000bc 	.word	0x000000bc
    1674:	000001ac 	.word	0x000001ac
    1678:	00001aa1 	.word	0x00001aa1
    167c:	f0f0f0f0 	.word	0xf0f0f0f0
    1680:	0000028c 	.word	0x0000028c
    1684:	f1f1f1f1 	.word	0xf1f1f1f1
    1688:	00000424 	.word	0x00000424
    168c:	0000042c 	.word	0x0000042c
    1690:	f2f2f2f2 	.word	0xf2f2f2f2
    1694:	000007dc 	.word	0x000007dc
    1698:	00005524 	.word	0x00005524
    169c:	00000164 	.word	0x00000164
    16a0:	f3f3f3f3 	.word	0xf3f3f3f3
    16a4:	0000082c 	.word	0x0000082c
    16a8:	000017d4 	.word	0x000017d4
    16ac:	000017d5 	.word	0x000017d5
    16b0:	000017d6 	.word	0x000017d6
    16b4:	000017d7 	.word	0x000017d7
    16b8:	000017d8 	.word	0x000017d8
    16bc:	000017d9 	.word	0x000017d9
    16c0:	000017da 	.word	0x000017da
    16c4:	000017db 	.word	0x000017db
    16c8:	000017dc 	.word	0x000017dc
    16cc:	000017dd 	.word	0x000017dd
    16d0:	000017de 	.word	0x000017de
    16d4:	000017df 	.word	0x000017df
    16d8:	00000208 	.word	0x00000208
    16dc:	000054b8 	.word	0x000054b8
    16e0:	00000120 	.word	0x00000120

000016e4 <xTraceNextFreeEventBufferSlot>:

/* Gives the last error message of the recorder. NULL if no error message. */
char* traceErrorMessage = NULL;

void* xTraceNextFreeEventBufferSlot(void)
{
    16e4:	b500      	push	{lr}
    16e6:	b083      	sub	sp, #12
    16e8:	4a0d      	ldr	r2, [pc, #52]	; (1720 <xTraceNextFreeEventBufferSlot+0x3c>)
    16ea:	447a      	add	r2, pc
	if (! RecorderDataPtr->recorderActive)
    16ec:	4b0d      	ldr	r3, [pc, #52]	; (1724 <xTraceNextFreeEventBufferSlot+0x40>)
    16ee:	58d3      	ldr	r3, [r2, r3]
    16f0:	681b      	ldr	r3, [r3, #0]
    16f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
    16f4:	2900      	cmp	r1, #0
    16f6:	d010      	beq.n	171a <xTraceNextFreeEventBufferSlot+0x36>
	{
		// If the associated XTS or XPS event prio to the main event has filled the buffer and store mode "stop when full".
		return NULL;
	}

	if (RecorderDataPtr->nextFreeIndex >= EVENT_BUFFER_SIZE)
    16f8:	69d9      	ldr	r1, [r3, #28]
    16fa:	480b      	ldr	r0, [pc, #44]	; (1728 <xTraceNextFreeEventBufferSlot+0x44>)
    16fc:	4281      	cmp	r1, r0
    16fe:	d906      	bls.n	170e <xTraceNextFreeEventBufferSlot+0x2a>
	{
		vTraceError("Attempt to index outside event buffer!");
    1700:	480a      	ldr	r0, [pc, #40]	; (172c <xTraceNextFreeEventBufferSlot+0x48>)
    1702:	4478      	add	r0, pc
    1704:	4b0a      	ldr	r3, [pc, #40]	; (1730 <xTraceNextFreeEventBufferSlot+0x4c>)
    1706:	58d3      	ldr	r3, [r2, r3]
    1708:	4798      	blx	r3
		return NULL;
    170a:	2000      	movs	r0, #0
    170c:	e006      	b.n	171c <xTraceNextFreeEventBufferSlot+0x38>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
    170e:	0088      	lsls	r0, r1, #2
    1710:	2283      	movs	r2, #131	; 0x83
    1712:	0112      	lsls	r2, r2, #4
    1714:	1880      	adds	r0, r0, r2
    1716:	1818      	adds	r0, r3, r0
    1718:	e000      	b.n	171c <xTraceNextFreeEventBufferSlot+0x38>
void* xTraceNextFreeEventBufferSlot(void)
{
	if (! RecorderDataPtr->recorderActive)
	{
		// If the associated XTS or XPS event prio to the main event has filled the buffer and store mode "stop when full".
		return NULL;
    171a:	2000      	movs	r0, #0
	{
		vTraceError("Attempt to index outside event buffer!");
		return NULL;
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
}
    171c:	b003      	add	sp, #12
    171e:	bd00      	pop	{pc}
    1720:	0000663a 	.word	0x0000663a
    1724:	00000028 	.word	0x00000028
    1728:	000003e7 	.word	0x000003e7
    172c:	0000542a 	.word	0x0000542a
    1730:	00000120 	.word	0x00000120

00001734 <uiIndexOfObject>:

uint16_t uiIndexOfObject(objectHandleType objecthandle, uint8_t objectclass)
{
    1734:	b510      	push	{r4, lr}
    1736:	b082      	sub	sp, #8
    1738:	4b15      	ldr	r3, [pc, #84]	; (1790 <uiIndexOfObject+0x5c>)
    173a:	447b      	add	r3, pc
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    173c:	2906      	cmp	r1, #6
    173e:	d907      	bls.n	1750 <uiIndexOfObject+0x1c>
    1740:	4814      	ldr	r0, [pc, #80]	; (1794 <uiIndexOfObject+0x60>)
    1742:	4478      	add	r0, pc
    1744:	4a14      	ldr	r2, [pc, #80]	; (1798 <uiIndexOfObject+0x64>)
    1746:	589a      	ldr	r2, [r3, r2]
    1748:	9201      	str	r2, [sp, #4]
    174a:	4790      	blx	r2
    174c:	2000      	movs	r0, #0
    174e:	e01c      	b.n	178a <uiIndexOfObject+0x56>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    1750:	2800      	cmp	r0, #0
    1752:	d007      	beq.n	1764 <uiIndexOfObject+0x30>
    1754:	4a11      	ldr	r2, [pc, #68]	; (179c <uiIndexOfObject+0x68>)
    1756:	589a      	ldr	r2, [r3, r2]
    1758:	6812      	ldr	r2, [r2, #0]
    175a:	1854      	adds	r4, r2, r1
    175c:	3460      	adds	r4, #96	; 0x60
    175e:	7924      	ldrb	r4, [r4, #4]
    1760:	4284      	cmp	r4, r0
    1762:	d207      	bcs.n	1774 <uiIndexOfObject+0x40>
    1764:	480e      	ldr	r0, [pc, #56]	; (17a0 <uiIndexOfObject+0x6c>)
    1766:	4478      	add	r0, pc
    1768:	4a0b      	ldr	r2, [pc, #44]	; (1798 <uiIndexOfObject+0x64>)
    176a:	589a      	ldr	r2, [r3, r2]
    176c:	9201      	str	r2, [sp, #4]
    176e:	4790      	blx	r2
    1770:	2000      	movs	r0, #0
    1772:	e00a      	b.n	178a <uiIndexOfObject+0x56>

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    1774:	1853      	adds	r3, r2, r1
    1776:	3370      	adds	r3, #112	; 0x70
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    1778:	791b      	ldrb	r3, [r3, #4]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    177a:	3801      	subs	r0, #1
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    177c:	4358      	muls	r0, r3
    177e:	313c      	adds	r1, #60	; 0x3c
    1780:	0049      	lsls	r1, r1, #1
    1782:	1852      	adds	r2, r2, r1
    1784:	8893      	ldrh	r3, [r2, #4]
    1786:	18c0      	adds	r0, r0, r3
    1788:	b280      	uxth	r0, r0
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
	}

	vTraceError("Object table lookup with invalid object handle or object class!");
	return 0;
}
    178a:	b002      	add	sp, #8
    178c:	bd10      	pop	{r4, pc}
    178e:	46c0      	nop			; (mov r8, r8)
    1790:	000065ea 	.word	0x000065ea
    1794:	00005412 	.word	0x00005412
    1798:	00000120 	.word	0x00000120
    179c:	00000028 	.word	0x00000028
    17a0:	0000542e 	.word	0x0000542e

000017a4 <xTraceGetObjectHandle>:
 * contains the mapping between object handle and object name which was valid up
 * to this point in time. The object name is stored as a symbol table entry.
 ******************************************************************************/

objectHandleType xTraceGetObjectHandle(traceObjectClass objectclass)
{
    17a4:	b570      	push	{r4, r5, r6, lr}
    17a6:	b082      	sub	sp, #8
    17a8:	4c56      	ldr	r4, [pc, #344]	; (1904 <xTraceGetObjectHandle+0x160>)
    17aa:	447c      	add	r4, pc
	objectHandleType handle;
	static int indexOfHandle;

	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    17ac:	2806      	cmp	r0, #6
    17ae:	d906      	bls.n	17be <xTraceGetObjectHandle+0x1a>
    17b0:	4855      	ldr	r0, [pc, #340]	; (1908 <xTraceGetObjectHandle+0x164>)
    17b2:	4478      	add	r0, pc
    17b4:	4b55      	ldr	r3, [pc, #340]	; (190c <xTraceGetObjectHandle+0x168>)
    17b6:	58e3      	ldr	r3, [r4, r3]
    17b8:	4798      	blx	r3
    17ba:	2000      	movs	r0, #0
    17bc:	e0a0      	b.n	1900 <xTraceGetObjectHandle+0x15c>
		"xTraceGetObjectHandle: Invalid value for objectclass", (objectHandleType)0);

	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
    17be:	4b54      	ldr	r3, [pc, #336]	; (1910 <xTraceGetObjectHandle+0x16c>)
    17c0:	58e2      	ldr	r2, [r4, r3]
    17c2:	0043      	lsls	r3, r0, #1
    17c4:	5a9b      	ldrh	r3, [r3, r2]
    17c6:	4953      	ldr	r1, [pc, #332]	; (1914 <xTraceGetObjectHandle+0x170>)
    17c8:	4479      	add	r1, pc
    17ca:	600b      	str	r3, [r1, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
    17cc:	18d2      	adds	r2, r2, r3
    17ce:	3238      	adds	r2, #56	; 0x38
    17d0:	7812      	ldrb	r2, [r2, #0]
    17d2:	2a00      	cmp	r2, #0
    17d4:	d10a      	bne.n	17ec <xTraceGetObjectHandle+0x48>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
    17d6:	4a4e      	ldr	r2, [pc, #312]	; (1910 <xTraceGetObjectHandle+0x16c>)
    17d8:	58a2      	ldr	r2, [r4, r2]
    17da:	18d5      	adds	r5, r2, r3
    17dc:	3538      	adds	r5, #56	; 0x38
			(objectHandleType)(1 + indexOfHandle -
    17de:	1c59      	adds	r1, r3, #1
			objectHandleStacks.lowestIndexOfClass[objectclass]);
    17e0:	1d06      	adds	r6, r0, #4
    17e2:	0076      	lsls	r6, r6, #1
    17e4:	1992      	adds	r2, r2, r6
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
    17e6:	88d2      	ldrh	r2, [r2, #6]
    17e8:	1a89      	subs	r1, r1, r2
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
    17ea:	7029      	strb	r1, [r5, #0]
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    17ec:	4a48      	ldr	r2, [pc, #288]	; (1910 <xTraceGetObjectHandle+0x16c>)
    17ee:	58a2      	ldr	r2, [r4, r2]
    17f0:	18d1      	adds	r1, r2, r3
    17f2:	3138      	adds	r1, #56	; 0x38
    17f4:	7809      	ldrb	r1, [r1, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
		> objectHandleStacks.highestIndexOfClass[objectclass])
    17f6:	1c05      	adds	r5, r0, #0
    17f8:	350c      	adds	r5, #12
    17fa:	006d      	lsls	r5, r5, #1
    17fc:	1952      	adds	r2, r2, r5
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
    17fe:	8892      	ldrh	r2, [r2, #4]
    1800:	429a      	cmp	r2, r3
    1802:	d207      	bcs.n	1814 <xTraceGetObjectHandle+0x70>
		> objectHandleStacks.highestIndexOfClass[objectclass])
	{
		/* ERROR */
		vTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    1804:	4b44      	ldr	r3, [pc, #272]	; (1918 <xTraceGetObjectHandle+0x174>)
    1806:	58e3      	ldr	r3, [r4, r3]
    1808:	4798      	blx	r3
    180a:	4b40      	ldr	r3, [pc, #256]	; (190c <xTraceGetObjectHandle+0x168>)
    180c:	58e3      	ldr	r3, [r4, r3]
    180e:	4798      	blx	r3

		handle = 0; /* an invalid/anonymous handle - but the recorder is stopped now... */
    1810:	2000      	movs	r0, #0
    1812:	e075      	b.n	1900 <xTraceGetObjectHandle+0x15c>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
    1814:	3301      	adds	r3, #1
    1816:	b29b      	uxth	r3, r3
    1818:	4a3d      	ldr	r2, [pc, #244]	; (1910 <xTraceGetObjectHandle+0x16c>)
    181a:	58a2      	ldr	r2, [r4, r2]
    181c:	0045      	lsls	r5, r0, #1
    181e:	52ab      	strh	r3, [r5, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
			objectHandleStacks.lowestIndexOfClass[objectclass];
    1820:	1d05      	adds	r5, r0, #4
    1822:	006d      	lsls	r5, r5, #1
    1824:	1955      	adds	r5, r2, r5
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
    1826:	88ed      	ldrh	r5, [r5, #6]
    1828:	1b5b      	subs	r3, r3, r5
			objectHandleStacks.lowestIndexOfClass[objectclass];

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
    182a:	1c05      	adds	r5, r0, #0
    182c:	3514      	adds	r5, #20
    182e:	006d      	lsls	r5, r5, #1
    1830:	1952      	adds	r2, r2, r5
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
			objectHandleStacks.lowestIndexOfClass[objectclass];

		if (hndCount >
    1832:	8852      	ldrh	r2, [r2, #2]
    1834:	4293      	cmp	r3, r2
    1836:	dd07      	ble.n	1848 <xTraceGetObjectHandle+0xa4>
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    1838:	4a35      	ldr	r2, [pc, #212]	; (1910 <xTraceGetObjectHandle+0x16c>)
    183a:	58a2      	ldr	r2, [r4, r2]
    183c:	9201      	str	r2, [sp, #4]
    183e:	1c2a      	adds	r2, r5, #0
    1840:	b2db      	uxtb	r3, r3
    1842:	9d01      	ldr	r5, [sp, #4]
    1844:	18aa      	adds	r2, r5, r2
    1846:	8053      	strh	r3, [r2, #2]
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    1848:	2806      	cmp	r0, #6
    184a:	d858      	bhi.n	18fe <xTraceGetObjectHandle+0x15a>
    184c:	f004 fe00 	bl	6450 <__gnu_thumb1_case_uqi>
    1850:	2d1f1104 	.word	0x2d1f1104
    1854:	3b57      	.short	0x3b57
    1856:	49          	.byte	0x49
    1857:	00          	.byte	0x00
    1858:	08ca      	lsrs	r2, r1, #3
    185a:	4b30      	ldr	r3, [pc, #192]	; (191c <xTraceGetObjectHandle+0x178>)
    185c:	58e3      	ldr	r3, [r4, r3]
    185e:	2407      	movs	r4, #7
    1860:	400c      	ands	r4, r1
    1862:	2001      	movs	r0, #1
    1864:	40a0      	lsls	r0, r4
    1866:	1c04      	adds	r4, r0, #0
    1868:	5c98      	ldrb	r0, [r3, r2]
    186a:	43a0      	bics	r0, r4
    186c:	5498      	strb	r0, [r3, r2]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    186e:	1c08      	adds	r0, r1, #0
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    1870:	e046      	b.n	1900 <xTraceGetObjectHandle+0x15c>
    1872:	1c08      	adds	r0, r1, #0
    1874:	300b      	adds	r0, #11
    1876:	10c2      	asrs	r2, r0, #3
    1878:	4b28      	ldr	r3, [pc, #160]	; (191c <xTraceGetObjectHandle+0x178>)
    187a:	58e3      	ldr	r3, [r4, r3]
    187c:	2407      	movs	r4, #7
    187e:	4020      	ands	r0, r4
    1880:	2401      	movs	r4, #1
    1882:	4084      	lsls	r4, r0
    1884:	5c98      	ldrb	r0, [r3, r2]
    1886:	43a0      	bics	r0, r4
    1888:	5498      	strb	r0, [r3, r2]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    188a:	1c08      	adds	r0, r1, #0
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    188c:	e038      	b.n	1900 <xTraceGetObjectHandle+0x15c>
    188e:	1c08      	adds	r0, r1, #0
    1890:	3016      	adds	r0, #22
    1892:	10c2      	asrs	r2, r0, #3
    1894:	4b21      	ldr	r3, [pc, #132]	; (191c <xTraceGetObjectHandle+0x178>)
    1896:	58e3      	ldr	r3, [r4, r3]
    1898:	2407      	movs	r4, #7
    189a:	4020      	ands	r0, r4
    189c:	2401      	movs	r4, #1
    189e:	4084      	lsls	r4, r0
    18a0:	5c98      	ldrb	r0, [r3, r2]
    18a2:	43a0      	bics	r0, r4
    18a4:	5498      	strb	r0, [r3, r2]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    18a6:	1c08      	adds	r0, r1, #0
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    18a8:	e02a      	b.n	1900 <xTraceGetObjectHandle+0x15c>
    18aa:	1c08      	adds	r0, r1, #0
    18ac:	3021      	adds	r0, #33	; 0x21
    18ae:	10c2      	asrs	r2, r0, #3
    18b0:	4b1a      	ldr	r3, [pc, #104]	; (191c <xTraceGetObjectHandle+0x178>)
    18b2:	58e3      	ldr	r3, [r4, r3]
    18b4:	2407      	movs	r4, #7
    18b6:	4020      	ands	r0, r4
    18b8:	2401      	movs	r4, #1
    18ba:	4084      	lsls	r4, r0
    18bc:	5c98      	ldrb	r0, [r3, r2]
    18be:	43a0      	bics	r0, r4
    18c0:	5498      	strb	r0, [r3, r2]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    18c2:	1c08      	adds	r0, r1, #0
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    18c4:	e01c      	b.n	1900 <xTraceGetObjectHandle+0x15c>
    18c6:	1c08      	adds	r0, r1, #0
    18c8:	3031      	adds	r0, #49	; 0x31
    18ca:	10c2      	asrs	r2, r0, #3
    18cc:	4b13      	ldr	r3, [pc, #76]	; (191c <xTraceGetObjectHandle+0x178>)
    18ce:	58e3      	ldr	r3, [r4, r3]
    18d0:	2407      	movs	r4, #7
    18d2:	4020      	ands	r0, r4
    18d4:	2401      	movs	r4, #1
    18d6:	4084      	lsls	r4, r0
    18d8:	5c98      	ldrb	r0, [r3, r2]
    18da:	43a0      	bics	r0, r4
    18dc:	5498      	strb	r0, [r3, r2]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    18de:	1c08      	adds	r0, r1, #0
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    18e0:	e00e      	b.n	1900 <xTraceGetObjectHandle+0x15c>
    18e2:	1c08      	adds	r0, r1, #0
    18e4:	3034      	adds	r0, #52	; 0x34
    18e6:	10c2      	asrs	r2, r0, #3
    18e8:	4b0c      	ldr	r3, [pc, #48]	; (191c <xTraceGetObjectHandle+0x178>)
    18ea:	58e3      	ldr	r3, [r4, r3]
    18ec:	2407      	movs	r4, #7
    18ee:	4020      	ands	r0, r4
    18f0:	2401      	movs	r4, #1
    18f2:	4084      	lsls	r4, r0
    18f4:	5c98      	ldrb	r0, [r3, r2]
    18f6:	43a0      	bics	r0, r4
    18f8:	5498      	strb	r0, [r3, r2]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    18fa:	1c08      	adds	r0, r1, #0
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    18fc:	e000      	b.n	1900 <xTraceGetObjectHandle+0x15c>
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    18fe:	1c08      	adds	r0, r1, #0

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
	}

	return handle;
}
    1900:	b002      	add	sp, #8
    1902:	bd70      	pop	{r4, r5, r6, pc}
    1904:	0000657a 	.word	0x0000657a
    1908:	00005422 	.word	0x00005422
    190c:	00000120 	.word	0x00000120
    1910:	000002b8 	.word	0x000002b8
    1914:	1fffece0 	.word	0x1fffece0
    1918:	00000030 	.word	0x00000030
    191c:	00000124 	.word	0x00000124

00001920 <vTraceFreeObjectHandle>:

void vTraceFreeObjectHandle(traceObjectClass objectclass, objectHandleType handle)
{
    1920:	b570      	push	{r4, r5, r6, lr}
    1922:	b082      	sub	sp, #8
    1924:	4b1c      	ldr	r3, [pc, #112]	; (1998 <vTraceFreeObjectHandle+0x78>)
    1926:	447b      	add	r3, pc
	int indexOfHandle;

	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    1928:	2806      	cmp	r0, #6
    192a:	d906      	bls.n	193a <vTraceFreeObjectHandle+0x1a>
    192c:	481b      	ldr	r0, [pc, #108]	; (199c <vTraceFreeObjectHandle+0x7c>)
    192e:	4478      	add	r0, pc
    1930:	4a1b      	ldr	r2, [pc, #108]	; (19a0 <vTraceFreeObjectHandle+0x80>)
    1932:	589a      	ldr	r2, [r3, r2]
    1934:	9201      	str	r2, [sp, #4]
    1936:	4790      	blx	r2
    1938:	e02b      	b.n	1992 <vTraceFreeObjectHandle+0x72>
		"vTraceFreeObjectHandle: Invalid value for objectclass", );
	TRACE_ASSERT(handle > 0 && handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    193a:	2900      	cmp	r1, #0
    193c:	d007      	beq.n	194e <vTraceFreeObjectHandle+0x2e>
    193e:	4a19      	ldr	r2, [pc, #100]	; (19a4 <vTraceFreeObjectHandle+0x84>)
    1940:	589a      	ldr	r2, [r3, r2]
    1942:	6812      	ldr	r2, [r2, #0]
    1944:	1812      	adds	r2, r2, r0
    1946:	3260      	adds	r2, #96	; 0x60
    1948:	7912      	ldrb	r2, [r2, #4]
    194a:	428a      	cmp	r2, r1
    194c:	d206      	bcs.n	195c <vTraceFreeObjectHandle+0x3c>
    194e:	4816      	ldr	r0, [pc, #88]	; (19a8 <vTraceFreeObjectHandle+0x88>)
    1950:	4478      	add	r0, pc
    1952:	4a13      	ldr	r2, [pc, #76]	; (19a0 <vTraceFreeObjectHandle+0x80>)
    1954:	589a      	ldr	r2, [r3, r2]
    1956:	9201      	str	r2, [sp, #4]
    1958:	4790      	blx	r2
    195a:	e01a      	b.n	1992 <vTraceFreeObjectHandle+0x72>
		"vTraceFreeObjectHandle: Invalid value for handle", );

	/* Check that there is room to push the handle on the stack */
	if ((objectHandleStacks.indexOfNextAvailableHandle[objectclass] - 1) <
    195c:	4a13      	ldr	r2, [pc, #76]	; (19ac <vTraceFreeObjectHandle+0x8c>)
    195e:	589a      	ldr	r2, [r3, r2]
    1960:	0044      	lsls	r4, r0, #1
    1962:	5aa4      	ldrh	r4, [r4, r2]
    1964:	1e65      	subs	r5, r4, #1
		objectHandleStacks.lowestIndexOfClass[objectclass])
    1966:	1d06      	adds	r6, r0, #4
    1968:	0076      	lsls	r6, r6, #1
    196a:	1992      	adds	r2, r2, r6
		"vTraceFreeObjectHandle: Invalid value for objectclass", );
	TRACE_ASSERT(handle > 0 && handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
		"vTraceFreeObjectHandle: Invalid value for handle", );

	/* Check that there is room to push the handle on the stack */
	if ((objectHandleStacks.indexOfNextAvailableHandle[objectclass] - 1) <
    196c:	88d2      	ldrh	r2, [r2, #6]
    196e:	4295      	cmp	r5, r2
    1970:	da06      	bge.n	1980 <vTraceFreeObjectHandle+0x60>
		objectHandleStacks.lowestIndexOfClass[objectclass])
	{
		/* Error */
		vTraceError("Attempt to free more handles than allocated!");
    1972:	480f      	ldr	r0, [pc, #60]	; (19b0 <vTraceFreeObjectHandle+0x90>)
    1974:	4478      	add	r0, pc
    1976:	4a0a      	ldr	r2, [pc, #40]	; (19a0 <vTraceFreeObjectHandle+0x80>)
    1978:	589a      	ldr	r2, [r3, r2]
    197a:	9201      	str	r2, [sp, #4]
    197c:	4790      	blx	r2
    197e:	e008      	b.n	1992 <vTraceFreeObjectHandle+0x72>
	}
	else
	{
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]--;
    1980:	3c01      	subs	r4, #1
    1982:	b2a4      	uxth	r4, r4
    1984:	4a09      	ldr	r2, [pc, #36]	; (19ac <vTraceFreeObjectHandle+0x8c>)
    1986:	589b      	ldr	r3, [r3, r2]
    1988:	0040      	lsls	r0, r0, #1
    198a:	52c4      	strh	r4, [r0, r3]
		indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
		objectHandleStacks.objectHandles[indexOfHandle] = handle;
    198c:	191c      	adds	r4, r3, r4
    198e:	3438      	adds	r4, #56	; 0x38
    1990:	7021      	strb	r1, [r4, #0]
	}

}
    1992:	b002      	add	sp, #8
    1994:	bd70      	pop	{r4, r5, r6, pc}
    1996:	46c0      	nop			; (mov r8, r8)
    1998:	000063fe 	.word	0x000063fe
    199c:	000052ea 	.word	0x000052ea
    19a0:	00000120 	.word	0x00000120
    19a4:	00000028 	.word	0x00000028
    19a8:	0000530c 	.word	0x0000530c
    19ac:	000002b8 	.word	0x000002b8
    19b0:	00005328 	.word	0x00005328

000019b4 <vTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void vTraceSetObjectName(traceObjectClass objectclass,
						 objectHandleType handle,
						 const char* name)
{
    19b4:	b570      	push	{r4, r5, r6, lr}
    19b6:	b082      	sub	sp, #8
    19b8:	1c05      	adds	r5, r0, #0
    19ba:	1c16      	adds	r6, r2, #0
    19bc:	4c21      	ldr	r4, [pc, #132]	; (1a44 <vTraceSetObjectName+0x90>)
    19be:	447c      	add	r4, pc
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "vTraceSetObjectName: name == NULL", );
    19c0:	2a00      	cmp	r2, #0
    19c2:	d105      	bne.n	19d0 <vTraceSetObjectName+0x1c>
    19c4:	4820      	ldr	r0, [pc, #128]	; (1a48 <vTraceSetObjectName+0x94>)
    19c6:	4478      	add	r0, pc
    19c8:	4b20      	ldr	r3, [pc, #128]	; (1a4c <vTraceSetObjectName+0x98>)
    19ca:	58e3      	ldr	r3, [r4, r3]
    19cc:	4798      	blx	r3
    19ce:	e037      	b.n	1a40 <vTraceSetObjectName+0x8c>

	if (objectclass >= TRACE_NCLASSES)
    19d0:	2806      	cmp	r0, #6
    19d2:	d905      	bls.n	19e0 <vTraceSetObjectName+0x2c>
	{
		vTraceError("Illegal object class in vTraceSetObjectName");
    19d4:	481e      	ldr	r0, [pc, #120]	; (1a50 <vTraceSetObjectName+0x9c>)
    19d6:	4478      	add	r0, pc
    19d8:	4b1c      	ldr	r3, [pc, #112]	; (1a4c <vTraceSetObjectName+0x98>)
    19da:	58e3      	ldr	r3, [r4, r3]
    19dc:	4798      	blx	r3
		return;
    19de:	e02f      	b.n	1a40 <vTraceSetObjectName+0x8c>
	}

	if (handle == 0)
    19e0:	2900      	cmp	r1, #0
    19e2:	d105      	bne.n	19f0 <vTraceSetObjectName+0x3c>
	{
		vTraceError("Illegal handle (0) in vTraceSetObjectName.");
    19e4:	481b      	ldr	r0, [pc, #108]	; (1a54 <vTraceSetObjectName+0xa0>)
    19e6:	4478      	add	r0, pc
    19e8:	4b18      	ldr	r3, [pc, #96]	; (1a4c <vTraceSetObjectName+0x98>)
    19ea:	58e3      	ldr	r3, [r4, r3]
    19ec:	4798      	blx	r3
		return;
    19ee:	e027      	b.n	1a40 <vTraceSetObjectName+0x8c>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
    19f0:	4b19      	ldr	r3, [pc, #100]	; (1a58 <vTraceSetObjectName+0xa4>)
    19f2:	58e3      	ldr	r3, [r4, r3]
    19f4:	681b      	ldr	r3, [r3, #0]
    19f6:	181b      	adds	r3, r3, r0
    19f8:	3360      	adds	r3, #96	; 0x60
    19fa:	791b      	ldrb	r3, [r3, #4]
    19fc:	428b      	cmp	r3, r1
    19fe:	d206      	bcs.n	1a0e <vTraceSetObjectName+0x5a>
	{
		/* ERROR */
		vTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    1a00:	4b16      	ldr	r3, [pc, #88]	; (1a5c <vTraceSetObjectName+0xa8>)
    1a02:	58e3      	ldr	r3, [r4, r3]
    1a04:	4798      	blx	r3
    1a06:	4b11      	ldr	r3, [pc, #68]	; (1a4c <vTraceSetObjectName+0x98>)
    1a08:	58e3      	ldr	r3, [r4, r3]
    1a0a:	4798      	blx	r3
    1a0c:	e018      	b.n	1a40 <vTraceSetObjectName+0x8c>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
    1a0e:	1c08      	adds	r0, r1, #0
    1a10:	1c29      	adds	r1, r5, #0
    1a12:	4b13      	ldr	r3, [pc, #76]	; (1a60 <vTraceSetObjectName+0xac>)
    1a14:	58e3      	ldr	r3, [r4, r3]
    1a16:	4798      	blx	r3
    1a18:	4b12      	ldr	r3, [pc, #72]	; (1a64 <vTraceSetObjectName+0xb0>)
    1a1a:	447b      	add	r3, pc
    1a1c:	8098      	strh	r0, [r3, #4]

		if (traceErrorMessage == NULL)
    1a1e:	4b12      	ldr	r3, [pc, #72]	; (1a68 <vTraceSetObjectName+0xb4>)
    1a20:	58e3      	ldr	r3, [r4, r3]
    1a22:	681b      	ldr	r3, [r3, #0]
    1a24:	2b00      	cmp	r3, #0
    1a26:	d10b      	bne.n	1a40 <vTraceSetObjectName+0x8c>
		{
			(void)strncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    1a28:	4b0b      	ldr	r3, [pc, #44]	; (1a58 <vTraceSetObjectName+0xa4>)
    1a2a:	58e3      	ldr	r3, [r4, r3]
    1a2c:	681b      	ldr	r3, [r3, #0]
    1a2e:	1818      	adds	r0, r3, r0
    1a30:	308c      	adds	r0, #140	; 0x8c
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
    1a32:	195b      	adds	r3, r3, r5
    1a34:	3368      	adds	r3, #104	; 0x68
	{
		idx = uiIndexOfObject(handle, objectclass);

		if (traceErrorMessage == NULL)
		{
			(void)strncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    1a36:	791a      	ldrb	r2, [r3, #4]
    1a38:	1c31      	adds	r1, r6, #0
    1a3a:	4b0c      	ldr	r3, [pc, #48]	; (1a6c <vTraceSetObjectName+0xb8>)
    1a3c:	58e3      	ldr	r3, [r4, r3]
    1a3e:	4798      	blx	r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
		}
	}
}
    1a40:	b002      	add	sp, #8
    1a42:	bd70      	pop	{r4, r5, r6, pc}
    1a44:	00006366 	.word	0x00006366
    1a48:	00005306 	.word	0x00005306
    1a4c:	00000120 	.word	0x00000120
    1a50:	00005326 	.word	0x00005326
    1a54:	00005342 	.word	0x00005342
    1a58:	00000028 	.word	0x00000028
    1a5c:	00000030 	.word	0x00000030
    1a60:	00000264 	.word	0x00000264
    1a64:	1fffea8e 	.word	0x1fffea8e
    1a68:	00000280 	.word	0x00000280
    1a6c:	00000164 	.word	0x00000164

00001a70 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 *
 * This is assumed to execute within a critical section...
 *****************************************************************************/

void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
    1a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a72:	4647      	mov	r7, r8
    1a74:	b480      	push	{r7}
    1a76:	b082      	sub	sp, #8
    1a78:	4930      	ldr	r1, [pc, #192]	; (1b3c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xcc>)
    1a7a:	4479      	add	r1, pc
    1a7c:	4688      	mov	r8, r1
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
    1a7e:	2800      	cmp	r0, #0
    1a80:	d004      	beq.n	1a8c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1c>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", );

	while (i < nofEntriesToCheck)
    1a82:	1c06      	adds	r6, r0, #0
    1a84:	2400      	movs	r4, #0
    1a86:	2800      	cmp	r0, #0
    1a88:	d106      	bne.n	1a98 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
    1a8a:	e052      	b.n	1b32 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xc2>
{
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
    1a8c:	482c      	ldr	r0, [pc, #176]	; (1b40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xd0>)
    1a8e:	4478      	add	r0, pc
    1a90:	4b2c      	ldr	r3, [pc, #176]	; (1b44 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xd4>)
    1a92:	58cb      	ldr	r3, [r1, r3]
    1a94:	4798      	blx	r3
    1a96:	e04c      	b.n	1b32 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xc2>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", );

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
    1a98:	4b2b      	ldr	r3, [pc, #172]	; (1b48 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xd8>)
    1a9a:	58cf      	ldr	r7, [r1, r3]
    1a9c:	683b      	ldr	r3, [r7, #0]
    1a9e:	69d8      	ldr	r0, [r3, #28]
    1aa0:	1821      	adds	r1, r4, r0
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
    1aa2:	008d      	lsls	r5, r1, #2
    1aa4:	195a      	adds	r2, r3, r5
    1aa6:	2083      	movs	r0, #131	; 0x83
    1aa8:	0100      	lsls	r0, r0, #4
    1aaa:	1812      	adds	r2, r2, r0
    1aac:	7812      	ldrb	r2, [r2, #0]
    1aae:	1c10      	adds	r0, r2, #0
    1ab0:	3067      	adds	r0, #103	; 0x67
    1ab2:	b2c0      	uxtb	r0, r0
    1ab4:	280e      	cmp	r0, #14
    1ab6:	d811      	bhi.n	1adc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x6c>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
    1ab8:	3268      	adds	r2, #104	; 0x68
    1aba:	b2d2      	uxtb	r2, r2
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
    1abc:	1851      	adds	r1, r2, r1
    1abe:	6998      	ldr	r0, [r3, #24]
    1ac0:	4281      	cmp	r1, r0
    1ac2:	d233      	bcs.n	1b2c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xbc>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4 * nDataEvents);
    1ac4:	3201      	adds	r2, #1
    1ac6:	0092      	lsls	r2, r2, #2
    1ac8:	2183      	movs	r1, #131	; 0x83
    1aca:	0109      	lsls	r1, r1, #4
    1acc:	186d      	adds	r5, r5, r1
    1ace:	1958      	adds	r0, r3, r5
    1ad0:	2100      	movs	r1, #0
    1ad2:	4b1e      	ldr	r3, [pc, #120]	; (1b4c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xdc>)
    1ad4:	4645      	mov	r5, r8
    1ad6:	58eb      	ldr	r3, [r5, r3]
    1ad8:	4798      	blx	r3
    1ada:	e027      	b.n	1b2c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xbc>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
    1adc:	2a01      	cmp	r2, #1
    1ade:	d125      	bne.n	1b2c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xbc>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
    1ae0:	3101      	adds	r1, #1
    1ae2:	6998      	ldr	r0, [r3, #24]
    1ae4:	4281      	cmp	r1, r0
    1ae6:	d20d      	bcs.n	1b04 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x94>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
    1ae8:	2183      	movs	r1, #131	; 0x83
    1aea:	0109      	lsls	r1, r1, #4
    1aec:	186d      	adds	r5, r5, r1
    1aee:	195b      	adds	r3, r3, r5
    1af0:	2200      	movs	r2, #0
    1af2:	701a      	strb	r2, [r3, #0]
    1af4:	705a      	strb	r2, [r3, #1]
    1af6:	709a      	strb	r2, [r3, #2]
    1af8:	70da      	strb	r2, [r3, #3]
    1afa:	711a      	strb	r2, [r3, #4]
    1afc:	715a      	strb	r2, [r3, #5]
    1afe:	719a      	strb	r2, [r3, #6]
    1b00:	71da      	strb	r2, [r3, #7]
    1b02:	e013      	b.n	1b2c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xbc>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
    1b04:	2283      	movs	r2, #131	; 0x83
    1b06:	0112      	lsls	r2, r2, #4
    1b08:	189b      	adds	r3, r3, r2
    1b0a:	2200      	movs	r2, #0
    1b0c:	701a      	strb	r2, [r3, #0]
    1b0e:	705a      	strb	r2, [r3, #1]
    1b10:	709a      	strb	r2, [r3, #2]
    1b12:	70da      	strb	r2, [r3, #3]
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
    1b14:	4b0c      	ldr	r3, [pc, #48]	; (1b48 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xd8>)
    1b16:	4640      	mov	r0, r8
    1b18:	58c3      	ldr	r3, [r0, r3]
    1b1a:	2183      	movs	r1, #131	; 0x83
    1b1c:	0109      	lsls	r1, r1, #4
    1b1e:	186d      	adds	r5, r5, r1
    1b20:	681b      	ldr	r3, [r3, #0]
    1b22:	195d      	adds	r5, r3, r5
    1b24:	702a      	strb	r2, [r5, #0]
    1b26:	706a      	strb	r2, [r5, #1]
    1b28:	70aa      	strb	r2, [r5, #2]
    1b2a:	70ea      	strb	r2, [r5, #3]
			}
		}
		i++;
    1b2c:	3401      	adds	r4, #1
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", );

	while (i < nofEntriesToCheck)
    1b2e:	42b4      	cmp	r4, r6
    1b30:	d3b4      	bcc.n	1a9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x2c>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
			}
		}
		i++;
	}
}
    1b32:	b002      	add	sp, #8
    1b34:	bc04      	pop	{r2}
    1b36:	4690      	mov	r8, r2
    1b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b3a:	46c0      	nop			; (mov r8, r8)
    1b3c:	000062aa 	.word	0x000062aa
    1b40:	000052c6 	.word	0x000052c6
    1b44:	00000120 	.word	0x00000120
    1b48:	00000028 	.word	0x00000028
    1b4c:	000001ac 	.word	0x000001ac

00001b50 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
    1b50:	b500      	push	{lr}
    1b52:	b083      	sub	sp, #12
    1b54:	4a0d      	ldr	r2, [pc, #52]	; (1b8c <prvTraceUpdateCounters+0x3c>)
    1b56:	447a      	add	r2, pc
	if (RecorderDataPtr->recorderActive == 0)
    1b58:	4b0d      	ldr	r3, [pc, #52]	; (1b90 <prvTraceUpdateCounters+0x40>)
    1b5a:	58d3      	ldr	r3, [r2, r3]
    1b5c:	681b      	ldr	r3, [r3, #0]
    1b5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
    1b60:	2900      	cmp	r1, #0
    1b62:	d010      	beq.n	1b86 <prvTraceUpdateCounters+0x36>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
    1b64:	6959      	ldr	r1, [r3, #20]
    1b66:	3101      	adds	r1, #1
    1b68:	6159      	str	r1, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
    1b6a:	69d9      	ldr	r1, [r3, #28]
    1b6c:	3101      	adds	r1, #1
    1b6e:	61d9      	str	r1, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= EVENT_BUFFER_SIZE)
    1b70:	4808      	ldr	r0, [pc, #32]	; (1b94 <prvTraceUpdateCounters+0x44>)
    1b72:	4281      	cmp	r1, r0
    1b74:	d903      	bls.n	1b7e <prvTraceUpdateCounters+0x2e>
	{
#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
    1b76:	2101      	movs	r1, #1
    1b78:	6219      	str	r1, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
    1b7a:	2100      	movs	r1, #0
    1b7c:	61d9      	str	r1, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
    1b7e:	2001      	movs	r0, #1
    1b80:	4b05      	ldr	r3, [pc, #20]	; (1b98 <prvTraceUpdateCounters+0x48>)
    1b82:	58d3      	ldr	r3, [r2, r3]
    1b84:	4798      	blx	r3
#endif
}
    1b86:	b003      	add	sp, #12
    1b88:	bd00      	pop	{pc}
    1b8a:	46c0      	nop			; (mov r8, r8)
    1b8c:	000061ce 	.word	0x000061ce
    1b90:	00000028 	.word	0x00000028
    1b94:	000003e7 	.word	0x000003e7
    1b98:	0000021c 	.word	0x0000021c

00001b9c <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
    1b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b9e:	4647      	mov	r7, r8
    1ba0:	b480      	push	{r7}
    1ba2:	b084      	sub	sp, #16
    1ba4:	1c05      	adds	r5, r0, #0
    1ba6:	4c41      	ldr	r4, [pc, #260]	; (1cac <prvTraceGetDTS+0x110>)
    1ba8:	447c      	add	r4, pc
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
	uint32_t dts = 0;
	uint32_t timestamp = 0;
    1baa:	2300      	movs	r3, #0
    1bac:	9303      	str	r3, [sp, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
    1bae:	28ff      	cmp	r0, #255	; 0xff
    1bb0:	d009      	beq.n	1bc6 <prvTraceGetDTS+0x2a>
    1bb2:	4b3f      	ldr	r3, [pc, #252]	; (1cb0 <prvTraceGetDTS+0x114>)
    1bb4:	4298      	cmp	r0, r3
    1bb6:	d006      	beq.n	1bc6 <prvTraceGetDTS+0x2a>
    1bb8:	483e      	ldr	r0, [pc, #248]	; (1cb4 <prvTraceGetDTS+0x118>)
    1bba:	4478      	add	r0, pc
    1bbc:	4b3e      	ldr	r3, [pc, #248]	; (1cb8 <prvTraceGetDTS+0x11c>)
    1bbe:	58e3      	ldr	r3, [r4, r3]
    1bc0:	4798      	blx	r3
    1bc2:	2000      	movs	r0, #0
    1bc4:	e06d      	b.n	1ca2 <prvTraceGetDTS+0x106>

#if (SELECTED_PORT != PORT_ARM_CortexM)

	if (RecorderDataPtr->frequency == 0 && init_hwtc_count != HWTC_COUNT)
    1bc6:	4b3d      	ldr	r3, [pc, #244]	; (1cbc <prvTraceGetDTS+0x120>)
    1bc8:	58e3      	ldr	r3, [r4, r3]
    1bca:	681b      	ldr	r3, [r3, #0]
    1bcc:	6a58      	ldr	r0, [r3, #36]	; 0x24
    1bce:	2800      	cmp	r0, #0
    1bd0:	d10e      	bne.n	1bf0 <prvTraceGetDTS+0x54>
    1bd2:	4a3b      	ldr	r2, [pc, #236]	; (1cc0 <prvTraceGetDTS+0x124>)
    1bd4:	58a2      	ldr	r2, [r4, r2]
    1bd6:	493b      	ldr	r1, [pc, #236]	; (1cc4 <prvTraceGetDTS+0x128>)
    1bd8:	6809      	ldr	r1, [r1, #0]
    1bda:	6812      	ldr	r2, [r2, #0]
    1bdc:	4291      	cmp	r1, r2
    1bde:	d007      	beq.n	1bf0 <prvTraceGetDTS+0x54>
#if (SELECTED_PORT == PORT_Win32)
		RecorderDataPtr->frequency = 100000;
#elif (SELECTED_PORT == PORT_HWIndependent)
		RecorderDataPtr->frequency = TRACE_TICK_RATE_HZ;
#else
		RecorderDataPtr->frequency = (HWTC_PERIOD * TRACE_TICK_RATE_HZ) / (uint32_t)HWTC_DIVISOR;
    1be0:	4a39      	ldr	r2, [pc, #228]	; (1cc8 <prvTraceGetDTS+0x12c>)
    1be2:	6811      	ldr	r1, [r2, #0]
    1be4:	3101      	adds	r1, #1
    1be6:	22fa      	movs	r2, #250	; 0xfa
    1be8:	0092      	lsls	r2, r2, #2
    1bea:	434a      	muls	r2, r1
    1bec:	0852      	lsrs	r2, r2, #1
    1bee:	625a      	str	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	vTracePortGetTimeStamp(&timestamp);	
    1bf0:	a803      	add	r0, sp, #12
    1bf2:	4b36      	ldr	r3, [pc, #216]	; (1ccc <prvTraceGetDTS+0x130>)
    1bf4:	58e3      	ldr	r3, [r4, r3]
    1bf6:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
    1bf8:	9b03      	ldr	r3, [sp, #12]
    1bfa:	4a35      	ldr	r2, [pc, #212]	; (1cd0 <prvTraceGetDTS+0x134>)
    1bfc:	447a      	add	r2, pc
    1bfe:	6891      	ldr	r1, [r2, #8]
    1c00:	1a5e      	subs	r6, r3, r1
	old_timestamp = timestamp;
    1c02:	6093      	str	r3, [r2, #8]

	if (RecorderDataPtr->frequency > 0)
    1c04:	4a2d      	ldr	r2, [pc, #180]	; (1cbc <prvTraceGetDTS+0x120>)
    1c06:	58a2      	ldr	r2, [r4, r2]
    1c08:	6817      	ldr	r7, [r2, #0]
    1c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1c0c:	4690      	mov	r8, r2
    1c0e:	2a00      	cmp	r2, #0
    1c10:	d022      	beq.n	1c58 <prvTraceGetDTS+0xbc>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
    1c12:	4296      	cmp	r6, r2
    1c14:	d910      	bls.n	1c38 <prvTraceGetDTS+0x9c>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
    1c16:	4b2f      	ldr	r3, [pc, #188]	; (1cd4 <prvTraceGetDTS+0x138>)
    1c18:	58e3      	ldr	r3, [r4, r3]
    1c1a:	1c30      	adds	r0, r6, #0
    1c1c:	1c11      	adds	r1, r2, #0
    1c1e:	4798      	blx	r3
    1c20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    1c22:	1808      	adds	r0, r1, r0
    1c24:	62f8      	str	r0, [r7, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
    1c26:	4b2c      	ldr	r3, [pc, #176]	; (1cd8 <prvTraceGetDTS+0x13c>)
    1c28:	58e3      	ldr	r3, [r4, r3]
    1c2a:	1c30      	adds	r0, r6, #0
    1c2c:	4641      	mov	r1, r8
    1c2e:	4798      	blx	r3
    1c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1c32:	1851      	adds	r1, r2, r1
    1c34:	62b9      	str	r1, [r7, #40]	; 0x28
    1c36:	e002      	b.n	1c3e <prvTraceGetDTS+0xa2>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
    1c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1c3a:	1983      	adds	r3, r0, r6
    1c3c:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
    1c3e:	4b1f      	ldr	r3, [pc, #124]	; (1cbc <prvTraceGetDTS+0x120>)
    1c40:	58e3      	ldr	r3, [r4, r3]
    1c42:	681b      	ldr	r3, [r3, #0]
    1c44:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1c48:	4291      	cmp	r1, r2
    1c4a:	d306      	bcc.n	1c5a <prvTraceGetDTS+0xbe>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
    1c4c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1c4e:	3001      	adds	r0, #1
    1c50:	62d8      	str	r0, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
    1c52:	1a8a      	subs	r2, r1, r2
    1c54:	629a      	str	r2, [r3, #40]	; 0x28
    1c56:	e000      	b.n	1c5a <prvTraceGetDTS+0xbe>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
    1c58:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
    1c5a:	42ae      	cmp	r6, r5
    1c5c:	d91f      	bls.n	1c9e <prvTraceGetDTS+0x102>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) xTraceNextFreeEventBufferSlot();
    1c5e:	4b1f      	ldr	r3, [pc, #124]	; (1cdc <prvTraceGetDTS+0x140>)
    1c60:	58e3      	ldr	r3, [r4, r3]
    1c62:	4798      	blx	r3

		if (xts != NULL)
    1c64:	2800      	cmp	r0, #0
    1c66:	d01a      	beq.n	1c9e <prvTraceGetDTS+0x102>
		{
			if (param_maxDTS == 0xFFFF)
    1c68:	4b11      	ldr	r3, [pc, #68]	; (1cb0 <prvTraceGetDTS+0x114>)
    1c6a:	429d      	cmp	r5, r3
    1c6c:	d106      	bne.n	1c7c <prvTraceGetDTS+0xe0>
			{
				xts->type = XTS16;
    1c6e:	23a9      	movs	r3, #169	; 0xa9
    1c70:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
    1c72:	0c33      	lsrs	r3, r6, #16
    1c74:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = 0;
    1c76:	2300      	movs	r3, #0
    1c78:	7043      	strb	r3, [r0, #1]
    1c7a:	e00d      	b.n	1c98 <prvTraceGetDTS+0xfc>
			}
			else if (param_maxDTS == 0xFF)
    1c7c:	2dff      	cmp	r5, #255	; 0xff
    1c7e:	d106      	bne.n	1c8e <prvTraceGetDTS+0xf2>
			{
				xts->type = XTS8;
    1c80:	23a8      	movs	r3, #168	; 0xa8
    1c82:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
    1c84:	0a33      	lsrs	r3, r6, #8
    1c86:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
    1c88:	0e33      	lsrs	r3, r6, #24
    1c8a:	7043      	strb	r3, [r0, #1]
    1c8c:	e004      	b.n	1c98 <prvTraceGetDTS+0xfc>
			}
			else
			{
				vTraceError("Bad param_maxDTS in prvTraceGetDTS");
    1c8e:	4814      	ldr	r0, [pc, #80]	; (1ce0 <prvTraceGetDTS+0x144>)
    1c90:	4478      	add	r0, pc
    1c92:	4b09      	ldr	r3, [pc, #36]	; (1cb8 <prvTraceGetDTS+0x11c>)
    1c94:	58e3      	ldr	r3, [r4, r3]
    1c96:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
    1c98:	4b12      	ldr	r3, [pc, #72]	; (1ce4 <prvTraceGetDTS+0x148>)
    1c9a:	58e3      	ldr	r3, [r4, r3]
    1c9c:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
    1c9e:	1c30      	adds	r0, r6, #0
    1ca0:	4028      	ands	r0, r5
}
    1ca2:	b004      	add	sp, #16
    1ca4:	bc04      	pop	{r2}
    1ca6:	4690      	mov	r8, r2
    1ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1caa:	46c0      	nop			; (mov r8, r8)
    1cac:	0000617c 	.word	0x0000617c
    1cb0:	0000ffff 	.word	0x0000ffff
    1cb4:	000051f2 	.word	0x000051f2
    1cb8:	00000120 	.word	0x00000120
    1cbc:	00000028 	.word	0x00000028
    1cc0:	00000284 	.word	0x00000284
    1cc4:	e000e018 	.word	0xe000e018
    1cc8:	e000e014 	.word	0xe000e014
    1ccc:	00000054 	.word	0x00000054
    1cd0:	1fffe8ac 	.word	0x1fffe8ac
    1cd4:	000001c0 	.word	0x000001c0
    1cd8:	00000254 	.word	0x00000254
    1cdc:	000000e4 	.word	0x000000e4
    1ce0:	0000515c 	.word	0x0000515c
    1ce4:	00000244 	.word	0x00000244

00001ce8 <prvTraceLookupSymbolTableEntry>:
 ******************************************************************************/
traceLabel prvTraceLookupSymbolTableEntry(const char* name,
										 uint8_t crc6,
										 uint8_t len,
										 traceLabel chn)
{
    1ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cea:	465f      	mov	r7, fp
    1cec:	4656      	mov	r6, sl
    1cee:	464d      	mov	r5, r9
    1cf0:	4644      	mov	r4, r8
    1cf2:	b4f0      	push	{r4, r5, r6, r7}
    1cf4:	b083      	sub	sp, #12
    1cf6:	4683      	mov	fp, r0
    1cf8:	4692      	mov	sl, r2
    1cfa:	4831      	ldr	r0, [pc, #196]	; (1dc0 <prvTraceLookupSymbolTableEntry+0xd8>)
    1cfc:	4478      	add	r0, pc
    1cfe:	4681      	mov	r9, r0
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];
    1d00:	4a30      	ldr	r2, [pc, #192]	; (1dc4 <prvTraceLookupSymbolTableEntry+0xdc>)
    1d02:	5882      	ldr	r2, [r0, r2]
    1d04:	6816      	ldr	r6, [r2, #0]
    1d06:	22ea      	movs	r2, #234	; 0xea
    1d08:	0092      	lsls	r2, r2, #2
    1d0a:	1889      	adds	r1, r1, r2
    1d0c:	0049      	lsls	r1, r1, #1
    1d0e:	5b8c      	ldrh	r4, [r1, r6]

	TRACE_ASSERT(name != NULL, "prvTraceLookupSymbolTableEntry: name == NULL", (traceLabel)0);
    1d10:	4658      	mov	r0, fp
    1d12:	2800      	cmp	r0, #0
    1d14:	d107      	bne.n	1d26 <prvTraceLookupSymbolTableEntry+0x3e>
    1d16:	482c      	ldr	r0, [pc, #176]	; (1dc8 <prvTraceLookupSymbolTableEntry+0xe0>)
    1d18:	4478      	add	r0, pc
    1d1a:	4b2c      	ldr	r3, [pc, #176]	; (1dcc <prvTraceLookupSymbolTableEntry+0xe4>)
    1d1c:	464a      	mov	r2, r9
    1d1e:	58d3      	ldr	r3, [r2, r3]
    1d20:	4798      	blx	r3
    1d22:	2000      	movs	r0, #0
    1d24:	e044      	b.n	1db0 <prvTraceLookupSymbolTableEntry+0xc8>
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceLabel)0);
    1d26:	4650      	mov	r0, sl
    1d28:	2800      	cmp	r0, #0
    1d2a:	d002      	beq.n	1d32 <prvTraceLookupSymbolTableEntry+0x4a>

	while (i != 0)
    1d2c:	1e20      	subs	r0, r4, #0
    1d2e:	d03f      	beq.n	1db0 <prvTraceLookupSymbolTableEntry+0xc8>
    1d30:	e007      	b.n	1d42 <prvTraceLookupSymbolTableEntry+0x5a>
										 traceLabel chn)
{
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];

	TRACE_ASSERT(name != NULL, "prvTraceLookupSymbolTableEntry: name == NULL", (traceLabel)0);
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceLabel)0);
    1d32:	4827      	ldr	r0, [pc, #156]	; (1dd0 <prvTraceLookupSymbolTableEntry+0xe8>)
    1d34:	4478      	add	r0, pc
    1d36:	4b25      	ldr	r3, [pc, #148]	; (1dcc <prvTraceLookupSymbolTableEntry+0xe4>)
    1d38:	464a      	mov	r2, r9
    1d3a:	58d3      	ldr	r3, [r2, r3]
    1d3c:	4798      	blx	r3
    1d3e:	2000      	movs	r0, #0
    1d40:	e036      	b.n	1db0 <prvTraceLookupSymbolTableEntry+0xc8>

	while (i != 0)
	{
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
		{
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
    1d42:	0a18      	lsrs	r0, r3, #8
    1d44:	4680      	mov	r8, r0
	TRACE_ASSERT(name != NULL, "prvTraceLookupSymbolTableEntry: name == NULL", (traceLabel)0);
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceLabel)0);

	while (i != 0)
	{
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
    1d46:	27ff      	movs	r7, #255	; 0xff
    1d48:	401f      	ands	r7, r3
    1d4a:	1c25      	adds	r5, r4, #0
    1d4c:	1933      	adds	r3, r6, r4
    1d4e:	4a21      	ldr	r2, [pc, #132]	; (1dd4 <prvTraceLookupSymbolTableEntry+0xec>)
    1d50:	189b      	adds	r3, r3, r2
    1d52:	781b      	ldrb	r3, [r3, #0]
    1d54:	42bb      	cmp	r3, r7
    1d56:	d11a      	bne.n	1d8e <prvTraceLookupSymbolTableEntry+0xa6>
		{
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
    1d58:	1933      	adds	r3, r6, r4
    1d5a:	481f      	ldr	r0, [pc, #124]	; (1dd8 <prvTraceLookupSymbolTableEntry+0xf0>)
    1d5c:	181b      	adds	r3, r3, r0
    1d5e:	781b      	ldrb	r3, [r3, #0]
    1d60:	4543      	cmp	r3, r8
    1d62:	d114      	bne.n	1d8e <prvTraceLookupSymbolTableEntry+0xa6>
			{
				if (RecorderDataPtr->SymbolTable.symbytes[i + 4 + len] == '\0')
    1d64:	1d20      	adds	r0, r4, #4
    1d66:	1833      	adds	r3, r6, r0
    1d68:	4453      	add	r3, sl
    1d6a:	2286      	movs	r2, #134	; 0x86
    1d6c:	00d2      	lsls	r2, r2, #3
    1d6e:	189b      	adds	r3, r3, r2
    1d70:	781b      	ldrb	r3, [r3, #0]
    1d72:	2b00      	cmp	r3, #0
    1d74:	d10b      	bne.n	1d8e <prvTraceLookupSymbolTableEntry+0xa6>
				{
					if (strncmp((char*)(& RecorderDataPtr->SymbolTable.symbytes[i + 4]), name, len) == 0)
    1d76:	1880      	adds	r0, r0, r2
    1d78:	1830      	adds	r0, r6, r0
    1d7a:	4659      	mov	r1, fp
    1d7c:	4652      	mov	r2, sl
    1d7e:	4b17      	ldr	r3, [pc, #92]	; (1ddc <prvTraceLookupSymbolTableEntry+0xf4>)
    1d80:	469c      	mov	ip, r3
    1d82:	464b      	mov	r3, r9
    1d84:	4463      	add	r3, ip
    1d86:	681b      	ldr	r3, [r3, #0]
    1d88:	4798      	blx	r3
    1d8a:	2800      	cmp	r0, #0
    1d8c:	d00d      	beq.n	1daa <prvTraceLookupSymbolTableEntry+0xc2>
						break; /* found */
					}
				}
			}
		}
		i = (uint16_t)(RecorderDataPtr->SymbolTable.symbytes[i] + (RecorderDataPtr->SymbolTable.symbytes[i + 1] * 0x100));
    1d8e:	1975      	adds	r5, r6, r5
    1d90:	4813      	ldr	r0, [pc, #76]	; (1de0 <prvTraceLookupSymbolTableEntry+0xf8>)
    1d92:	182b      	adds	r3, r5, r0
    1d94:	781c      	ldrb	r4, [r3, #0]
    1d96:	0224      	lsls	r4, r4, #8
    1d98:	2286      	movs	r2, #134	; 0x86
    1d9a:	00d2      	lsls	r2, r2, #3
    1d9c:	18ad      	adds	r5, r5, r2
    1d9e:	782b      	ldrb	r3, [r5, #0]
    1da0:	191c      	adds	r4, r3, r4
    1da2:	b2a4      	uxth	r4, r4
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];

	TRACE_ASSERT(name != NULL, "prvTraceLookupSymbolTableEntry: name == NULL", (traceLabel)0);
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceLabel)0);

	while (i != 0)
    1da4:	2c00      	cmp	r4, #0
    1da6:	d1d0      	bne.n	1d4a <prvTraceLookupSymbolTableEntry+0x62>
    1da8:	e001      	b.n	1dae <prvTraceLookupSymbolTableEntry+0xc6>
    1daa:	1c20      	adds	r0, r4, #0
    1dac:	e000      	b.n	1db0 <prvTraceLookupSymbolTableEntry+0xc8>
						break; /* found */
					}
				}
			}
		}
		i = (uint16_t)(RecorderDataPtr->SymbolTable.symbytes[i] + (RecorderDataPtr->SymbolTable.symbytes[i + 1] * 0x100));
    1dae:	1c20      	adds	r0, r4, #0
	}
	return i;
}
    1db0:	b003      	add	sp, #12
    1db2:	bc3c      	pop	{r2, r3, r4, r5}
    1db4:	4690      	mov	r8, r2
    1db6:	4699      	mov	r9, r3
    1db8:	46a2      	mov	sl, r4
    1dba:	46ab      	mov	fp, r5
    1dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1dbe:	46c0      	nop			; (mov r8, r8)
    1dc0:	00006028 	.word	0x00006028
    1dc4:	00000028 	.word	0x00000028
    1dc8:	000050f8 	.word	0x000050f8
    1dcc:	00000120 	.word	0x00000120
    1dd0:	00005118 	.word	0x00005118
    1dd4:	00000432 	.word	0x00000432
    1dd8:	00000433 	.word	0x00000433
    1ddc:	00000158 	.word	0x00000158
    1de0:	00000431 	.word	0x00000431

00001de4 <prvTraceCreateSymbolTableEntry>:
 ******************************************************************************/
uint16_t prvTraceCreateSymbolTableEntry(const char* name,
										uint8_t crc6,
										uint8_t len,
										traceLabel channel)
{
    1de4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1de6:	465f      	mov	r7, fp
    1de8:	4656      	mov	r6, sl
    1dea:	464d      	mov	r5, r9
    1dec:	4644      	mov	r4, r8
    1dee:	b4f0      	push	{r4, r5, r6, r7}
    1df0:	b083      	sub	sp, #12
    1df2:	1c06      	adds	r6, r0, #0
    1df4:	1c15      	adds	r5, r2, #0
    1df6:	4c31      	ldr	r4, [pc, #196]	; (1ebc <prvTraceCreateSymbolTableEntry+0xd8>)
    1df8:	447c      	add	r4, pc
	uint16_t ret = 0;

	TRACE_ASSERT(name != NULL, "prvTraceCreateSymbolTableEntry: name == NULL", 0);
    1dfa:	2800      	cmp	r0, #0
    1dfc:	d106      	bne.n	1e0c <prvTraceCreateSymbolTableEntry+0x28>
    1dfe:	4830      	ldr	r0, [pc, #192]	; (1ec0 <prvTraceCreateSymbolTableEntry+0xdc>)
    1e00:	4478      	add	r0, pc
    1e02:	4b30      	ldr	r3, [pc, #192]	; (1ec4 <prvTraceCreateSymbolTableEntry+0xe0>)
    1e04:	58e3      	ldr	r3, [r4, r3]
    1e06:	4798      	blx	r3
    1e08:	2000      	movs	r0, #0
    1e0a:	e050      	b.n	1eae <prvTraceCreateSymbolTableEntry+0xca>
	TRACE_ASSERT(len != 0, "prvTraceCreateSymbolTableEntry: len == 0", 0);
    1e0c:	2a00      	cmp	r2, #0
    1e0e:	d106      	bne.n	1e1e <prvTraceCreateSymbolTableEntry+0x3a>
    1e10:	482d      	ldr	r0, [pc, #180]	; (1ec8 <prvTraceCreateSymbolTableEntry+0xe4>)
    1e12:	4478      	add	r0, pc
    1e14:	4b2b      	ldr	r3, [pc, #172]	; (1ec4 <prvTraceCreateSymbolTableEntry+0xe0>)
    1e16:	58e3      	ldr	r3, [r4, r3]
    1e18:	4798      	blx	r3
    1e1a:	2000      	movs	r0, #0
    1e1c:	e047      	b.n	1eae <prvTraceCreateSymbolTableEntry+0xca>

	if (RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + len + 4 >= SYMBOL_TABLE_SIZE)
    1e1e:	4a2b      	ldr	r2, [pc, #172]	; (1ecc <prvTraceCreateSymbolTableEntry+0xe8>)
    1e20:	58a2      	ldr	r2, [r4, r2]
    1e22:	6812      	ldr	r2, [r2, #0]
    1e24:	482a      	ldr	r0, [pc, #168]	; (1ed0 <prvTraceCreateSymbolTableEntry+0xec>)
    1e26:	5817      	ldr	r7, [r2, r0]
    1e28:	46ba      	mov	sl, r7
    1e2a:	2004      	movs	r0, #4
    1e2c:	4683      	mov	fp, r0
    1e2e:	44d3      	add	fp, sl
    1e30:	46a9      	mov	r9, r5
    1e32:	44d9      	add	r9, fp
    1e34:	4827      	ldr	r0, [pc, #156]	; (1ed4 <prvTraceCreateSymbolTableEntry+0xf0>)
    1e36:	4581      	cmp	r9, r0
    1e38:	d906      	bls.n	1e48 <prvTraceCreateSymbolTableEntry+0x64>
	{
		vTraceError("Symbol table full. Increase SYMBOL_TABLE_SIZE in trcConfig.h");
    1e3a:	4827      	ldr	r0, [pc, #156]	; (1ed8 <prvTraceCreateSymbolTableEntry+0xf4>)
    1e3c:	4478      	add	r0, pc
    1e3e:	4b21      	ldr	r3, [pc, #132]	; (1ec4 <prvTraceCreateSymbolTableEntry+0xe0>)
    1e40:	58e3      	ldr	r3, [r4, r3]
    1e42:	4798      	blx	r3
		ret = 0;
    1e44:	2000      	movs	r0, #0
    1e46:	e032      	b.n	1eae <prvTraceCreateSymbolTableEntry+0xca>
	else
	{

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
    1e48:	27ea      	movs	r7, #234	; 0xea
    1e4a:	00bf      	lsls	r7, r7, #2
    1e4c:	19c9      	adds	r1, r1, r7
    1e4e:	0049      	lsls	r1, r1, #1
    1e50:	4688      	mov	r8, r1
    1e52:	5a88      	ldrh	r0, [r1, r2]
    1e54:	4681      	mov	r9, r0
	}
	else
	{

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
    1e56:	4651      	mov	r1, sl
    1e58:	1850      	adds	r0, r2, r1
    1e5a:	2786      	movs	r7, #134	; 0x86
    1e5c:	00ff      	lsls	r7, r7, #3
    1e5e:	4649      	mov	r1, r9
    1e60:	5439      	strb	r1, [r7, r0]
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
    1e62:	4f1e      	ldr	r7, [pc, #120]	; (1edc <prvTraceCreateSymbolTableEntry+0xf8>)
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
    1e64:	4649      	mov	r1, r9
    1e66:	0a09      	lsrs	r1, r1, #8
		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
    1e68:	5439      	strb	r1, [r7, r0]
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
    1e6a:	4f1d      	ldr	r7, [pc, #116]	; (1ee0 <prvTraceCreateSymbolTableEntry+0xfc>)
    1e6c:	543b      	strb	r3, [r7, r0]
			(uint8_t)(channel & 0x00FF);

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
    1e6e:	491d      	ldr	r1, [pc, #116]	; (1ee4 <prvTraceCreateSymbolTableEntry+0x100>)
    1e70:	1840      	adds	r0, r0, r1
			(uint8_t)(channel / 0x100);
    1e72:	0a1b      	lsrs	r3, r3, #8
		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
			(uint8_t)(channel & 0x00FF);

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
    1e74:	7003      	strb	r3, [r0, #0]
			(uint8_t)(channel / 0x100);

		/* set name (bytes 4...4+len-1) */
		(void)strncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
    1e76:	2386      	movs	r3, #134	; 0x86
    1e78:	00db      	lsls	r3, r3, #3
    1e7a:	1c1f      	adds	r7, r3, #0
    1e7c:	445f      	add	r7, fp
    1e7e:	19d0      	adds	r0, r2, r7
    1e80:	1c31      	adds	r1, r6, #0
    1e82:	1c2a      	adds	r2, r5, #0
    1e84:	4b18      	ldr	r3, [pc, #96]	; (1ee8 <prvTraceCreateSymbolTableEntry+0x104>)
    1e86:	58e3      	ldr	r3, [r4, r3]
    1e88:	4798      	blx	r3
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4]), name, len);

		/* Set zero termination (at offset 4+len) */
		RecorderDataPtr->SymbolTable.symbytes
			[RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4 + len] = '\0';
    1e8a:	4b10      	ldr	r3, [pc, #64]	; (1ecc <prvTraceCreateSymbolTableEntry+0xe8>)
    1e8c:	58e3      	ldr	r3, [r4, r3]
    1e8e:	681b      	ldr	r3, [r3, #0]
    1e90:	4a0f      	ldr	r2, [pc, #60]	; (1ed0 <prvTraceCreateSymbolTableEntry+0xec>)
    1e92:	5899      	ldr	r1, [r3, r2]
    1e94:	1868      	adds	r0, r5, r1
    1e96:	181c      	adds	r4, r3, r0
    1e98:	4e14      	ldr	r6, [pc, #80]	; (1eec <prvTraceCreateSymbolTableEntry+0x108>)
    1e9a:	19a4      	adds	r4, r4, r6
    1e9c:	2600      	movs	r6, #0
    1e9e:	7026      	strb	r6, [r4, #0]

		/* store index of entry (for return value, and as head of LL[crc6]) */
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
    1ea0:	4647      	mov	r7, r8
    1ea2:	52f9      	strh	r1, [r7, r3]

		RecorderDataPtr->SymbolTable.nextFreeSymbolIndex += (len + 5);
    1ea4:	3005      	adds	r0, #5
    1ea6:	5098      	str	r0, [r3, r2]

		ret = (uint16_t)(RecorderDataPtr->SymbolTable.nextFreeSymbolIndex -
    1ea8:	1b40      	subs	r0, r0, r5
    1eaa:	3805      	subs	r0, #5
    1eac:	b280      	uxth	r0, r0
			(len + 5));
	}

	return ret;
}
    1eae:	b003      	add	sp, #12
    1eb0:	bc3c      	pop	{r2, r3, r4, r5}
    1eb2:	4690      	mov	r8, r2
    1eb4:	4699      	mov	r9, r3
    1eb6:	46a2      	mov	sl, r4
    1eb8:	46ab      	mov	fp, r5
    1eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ebc:	00005f2c 	.word	0x00005f2c
    1ec0:	00005084 	.word	0x00005084
    1ec4:	00000120 	.word	0x00000120
    1ec8:	000050ae 	.word	0x000050ae
    1ecc:	00000028 	.word	0x00000028
    1ed0:	0000042c 	.word	0x0000042c
    1ed4:	0000031f 	.word	0x0000031f
    1ed8:	000050bc 	.word	0x000050bc
    1edc:	00000431 	.word	0x00000431
    1ee0:	00000432 	.word	0x00000432
    1ee4:	00000433 	.word	0x00000433
    1ee8:	00000164 	.word	0x00000164
    1eec:	00000434 	.word	0x00000434

00001ef0 <prvTraceGetChecksum>:
 *
 * Calculates a simple 6-bit checksum from a string, used to index the string
 * for fast symbol table lookup.
 ******************************************************************************/
void prvTraceGetChecksum(const char *pname, uint8_t* pcrc, uint8_t* plength)
{
    1ef0:	b530      	push	{r4, r5, lr}
    1ef2:	b083      	sub	sp, #12
    1ef4:	4b18      	ldr	r3, [pc, #96]	; (1f58 <prvTraceGetChecksum+0x68>)
    1ef6:	447b      	add	r3, pc
	unsigned char c;
	int length = 1;		/* Should be 1 to account for '\0' */
	int crc = 0;

	TRACE_ASSERT(pname != NULL, "prvTraceGetChecksum: pname == NULL", );
    1ef8:	2800      	cmp	r0, #0
    1efa:	d106      	bne.n	1f0a <prvTraceGetChecksum+0x1a>
    1efc:	4817      	ldr	r0, [pc, #92]	; (1f5c <prvTraceGetChecksum+0x6c>)
    1efe:	4478      	add	r0, pc
    1f00:	4a17      	ldr	r2, [pc, #92]	; (1f60 <prvTraceGetChecksum+0x70>)
    1f02:	589a      	ldr	r2, [r3, r2]
    1f04:	9201      	str	r2, [sp, #4]
    1f06:	4790      	blx	r2
    1f08:	e024      	b.n	1f54 <prvTraceGetChecksum+0x64>
	TRACE_ASSERT(pcrc != NULL, "prvTraceGetChecksum: pcrc == NULL", );
    1f0a:	2900      	cmp	r1, #0
    1f0c:	d106      	bne.n	1f1c <prvTraceGetChecksum+0x2c>
    1f0e:	4815      	ldr	r0, [pc, #84]	; (1f64 <prvTraceGetChecksum+0x74>)
    1f10:	4478      	add	r0, pc
    1f12:	4a13      	ldr	r2, [pc, #76]	; (1f60 <prvTraceGetChecksum+0x70>)
    1f14:	589a      	ldr	r2, [r3, r2]
    1f16:	9201      	str	r2, [sp, #4]
    1f18:	4790      	blx	r2
    1f1a:	e01b      	b.n	1f54 <prvTraceGetChecksum+0x64>
	TRACE_ASSERT(plength != NULL, "prvTraceGetChecksum: plength == NULL", );
    1f1c:	2a00      	cmp	r2, #0
    1f1e:	d106      	bne.n	1f2e <prvTraceGetChecksum+0x3e>
    1f20:	4811      	ldr	r0, [pc, #68]	; (1f68 <prvTraceGetChecksum+0x78>)
    1f22:	4478      	add	r0, pc
    1f24:	4a0e      	ldr	r2, [pc, #56]	; (1f60 <prvTraceGetChecksum+0x70>)
    1f26:	589a      	ldr	r2, [r3, r2]
    1f28:	9201      	str	r2, [sp, #4]
    1f2a:	4790      	blx	r2
    1f2c:	e012      	b.n	1f54 <prvTraceGetChecksum+0x64>

	if (pname != (const char *) 0)
	{
		for (; (c = *pname++) != '\0';)
    1f2e:	7804      	ldrb	r4, [r0, #0]
    1f30:	2c00      	cmp	r4, #0
    1f32:	d009      	beq.n	1f48 <prvTraceGetChecksum+0x58>
    1f34:	2500      	movs	r5, #0
    1f36:	2301      	movs	r3, #1
		{
			crc += c;
    1f38:	192d      	adds	r5, r5, r4
			length++;
    1f3a:	3301      	adds	r3, #1
    1f3c:	18c4      	adds	r4, r0, r3
    1f3e:	3c01      	subs	r4, #1
	TRACE_ASSERT(pcrc != NULL, "prvTraceGetChecksum: pcrc == NULL", );
	TRACE_ASSERT(plength != NULL, "prvTraceGetChecksum: plength == NULL", );

	if (pname != (const char *) 0)
	{
		for (; (c = *pname++) != '\0';)
    1f40:	7824      	ldrb	r4, [r4, #0]
    1f42:	2c00      	cmp	r4, #0
    1f44:	d1f8      	bne.n	1f38 <prvTraceGetChecksum+0x48>
    1f46:	e001      	b.n	1f4c <prvTraceGetChecksum+0x5c>
    1f48:	2500      	movs	r5, #0
    1f4a:	2301      	movs	r3, #1
		{
			crc += c;
			length++;
		}
	}
	*pcrc = (uint8_t)(crc & 0x3F);
    1f4c:	203f      	movs	r0, #63	; 0x3f
    1f4e:	4005      	ands	r5, r0
    1f50:	700d      	strb	r5, [r1, #0]
	*plength = (uint8_t)length;
    1f52:	7013      	strb	r3, [r2, #0]
}
    1f54:	b003      	add	sp, #12
    1f56:	bd30      	pop	{r4, r5, pc}
    1f58:	00005e2e 	.word	0x00005e2e
    1f5c:	0000503a 	.word	0x0000503a
    1f60:	00000120 	.word	0x00000120
    1f64:	0000505c 	.word	0x0000505c
    1f68:	0000507a 	.word	0x0000507a

00001f6c <prvTraceOpenSymbol>:
		}
	}
}

traceLabel prvTraceOpenSymbol(const char* name, traceLabel userEventChannel)
{
    1f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f6e:	464f      	mov	r7, r9
    1f70:	4646      	mov	r6, r8
    1f72:	b4c0      	push	{r6, r7}
    1f74:	b085      	sub	sp, #20
    1f76:	1c05      	adds	r5, r0, #0
    1f78:	4688      	mov	r8, r1
    1f7a:	4c22      	ldr	r4, [pc, #136]	; (2004 <STACK_SIZE+0x4>)
    1f7c:	447c      	add	r4, pc
	uint16_t result;
	uint8_t len;
	uint8_t crc;
	TRACE_SR_ALLOC_CRITICAL_SECTION();
	
	len = 0;
    1f7e:	2200      	movs	r2, #0
    1f80:	466b      	mov	r3, sp
    1f82:	73da      	strb	r2, [r3, #15]
	crc = 0;
    1f84:	466b      	mov	r3, sp
    1f86:	739a      	strb	r2, [r3, #14]
	
	TRACE_ASSERT(name != NULL, "prvTraceOpenSymbol: name == NULL", (traceLabel)0);
    1f88:	2800      	cmp	r0, #0
    1f8a:	d106      	bne.n	1f9a <prvTraceOpenSymbol+0x2e>
    1f8c:	481e      	ldr	r0, [pc, #120]	; (2008 <STACK_SIZE+0x8>)
    1f8e:	4478      	add	r0, pc
    1f90:	4b1e      	ldr	r3, [pc, #120]	; (200c <STACK_SIZE+0xc>)
    1f92:	58e3      	ldr	r3, [r4, r3]
    1f94:	4798      	blx	r3
    1f96:	2000      	movs	r0, #0
    1f98:	e02e      	b.n	1ff8 <prvTraceOpenSymbol+0x8c>

	prvTraceGetChecksum(name, &crc, &len);
    1f9a:	466f      	mov	r7, sp
    1f9c:	370e      	adds	r7, #14
    1f9e:	1c39      	adds	r1, r7, #0
    1fa0:	466e      	mov	r6, sp
    1fa2:	360f      	adds	r6, #15
    1fa4:	1c32      	adds	r2, r6, #0
    1fa6:	4b1a      	ldr	r3, [pc, #104]	; (2010 <STACK_SIZE+0x10>)
    1fa8:	58e3      	ldr	r3, [r4, r3]
    1faa:	4798      	blx	r3

	trcCRITICAL_SECTION_BEGIN();
    1fac:	4b19      	ldr	r3, [pc, #100]	; (2014 <STACK_SIZE+0x14>)
    1fae:	58e3      	ldr	r3, [r4, r3]
    1fb0:	4798      	blx	r3
    1fb2:	4681      	mov	r9, r0
    1fb4:	4b18      	ldr	r3, [pc, #96]	; (2018 <STACK_SIZE+0x18>)
    1fb6:	58e3      	ldr	r3, [r4, r3]
    1fb8:	681a      	ldr	r2, [r3, #0]
    1fba:	3201      	adds	r2, #1
    1fbc:	601a      	str	r2, [r3, #0]
	result = prvTraceLookupSymbolTableEntry(name, crc, len, userEventChannel);
    1fbe:	7839      	ldrb	r1, [r7, #0]
    1fc0:	7832      	ldrb	r2, [r6, #0]
    1fc2:	1c28      	adds	r0, r5, #0
    1fc4:	4643      	mov	r3, r8
    1fc6:	4e15      	ldr	r6, [pc, #84]	; (201c <STACK_SIZE+0x1c>)
    1fc8:	59a6      	ldr	r6, [r4, r6]
    1fca:	47b0      	blx	r6
    1fcc:	1e06      	subs	r6, r0, #0
	if (!result)
    1fce:	d109      	bne.n	1fe4 <prvTraceOpenSymbol+0x78>
	{
		result = prvTraceCreateSymbolTableEntry(name, crc, len, userEventChannel);
    1fd0:	466b      	mov	r3, sp
    1fd2:	7b99      	ldrb	r1, [r3, #14]
    1fd4:	466b      	mov	r3, sp
    1fd6:	7bda      	ldrb	r2, [r3, #15]
    1fd8:	1c28      	adds	r0, r5, #0
    1fda:	4643      	mov	r3, r8
    1fdc:	4d10      	ldr	r5, [pc, #64]	; (2020 <STACK_SIZE+0x20>)
    1fde:	5965      	ldr	r5, [r4, r5]
    1fe0:	47a8      	blx	r5
    1fe2:	1c06      	adds	r6, r0, #0
	}
	trcCRITICAL_SECTION_END();
    1fe4:	4b0c      	ldr	r3, [pc, #48]	; (2018 <STACK_SIZE+0x18>)
    1fe6:	58e3      	ldr	r3, [r4, r3]
    1fe8:	681a      	ldr	r2, [r3, #0]
    1fea:	3a01      	subs	r2, #1
    1fec:	601a      	str	r2, [r3, #0]
    1fee:	4648      	mov	r0, r9
    1ff0:	4b0c      	ldr	r3, [pc, #48]	; (2024 <STACK_SIZE+0x24>)
    1ff2:	58e3      	ldr	r3, [r4, r3]
    1ff4:	4798      	blx	r3

	return result;
    1ff6:	1c30      	adds	r0, r6, #0
}
    1ff8:	b005      	add	sp, #20
    1ffa:	bc0c      	pop	{r2, r3}
    1ffc:	4690      	mov	r8, r2
    1ffe:	4699      	mov	r9, r3
    2000:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2002:	46c0      	nop			; (mov r8, r8)
    2004:	00005da8 	.word	0x00005da8
    2008:	00005042 	.word	0x00005042
    200c:	00000120 	.word	0x00000120
    2010:	00000178 	.word	0x00000178
    2014:	00000274 	.word	0x00000274
    2018:	000002c4 	.word	0x000002c4
    201c:	00000204 	.word	0x00000204
    2020:	00000214 	.word	0x00000214
    2024:	00000134 	.word	0x00000134

00002028 <vTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of vTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void vTracePortGetTimeStamp(uint32_t *pTimestamp)
{
    2028:	b570      	push	{r4, r5, r6, lr}
    202a:	4b1f      	ldr	r3, [pc, #124]	; (20a8 <vTracePortGetTimeStamp+0x80>)
    202c:	447b      	add	r3, pc
	static uint32_t last_traceTickCount = 0;
	static uint32_t last_hwtc_count = 0;
	uint32_t traceTickCount = 0;
	uint32_t hwtc_count = 0;

	if (trace_disable_timestamp == 1)
    202e:	4a1f      	ldr	r2, [pc, #124]	; (20ac <vTracePortGetTimeStamp+0x84>)
    2030:	589a      	ldr	r2, [r3, r2]
    2032:	6812      	ldr	r2, [r2, #0]
    2034:	2a01      	cmp	r2, #1
    2036:	d106      	bne.n	2046 <vTracePortGetTimeStamp+0x1e>
	{
		if (pTimestamp)
    2038:	2800      	cmp	r0, #0
    203a:	d034      	beq.n	20a6 <vTracePortGetTimeStamp+0x7e>
			*pTimestamp = last_timestamp;
    203c:	4a1c      	ldr	r2, [pc, #112]	; (20b0 <vTracePortGetTimeStamp+0x88>)
    203e:	589b      	ldr	r3, [r3, r2]
    2040:	681b      	ldr	r3, [r3, #0]
    2042:	6003      	str	r3, [r0, #0]
    2044:	e02f      	b.n	20a6 <vTracePortGetTimeStamp+0x7e>

	/* Retrieve HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (HWTC_COUNT_DIRECTION == DIRECTION_INCREMENTING)
	hwtc_count = HWTC_COUNT;
#elif (HWTC_COUNT_DIRECTION == DIRECTION_DECREMENTING)
	hwtc_count = HWTC_PERIOD - HWTC_COUNT;
    2046:	4a1b      	ldr	r2, [pc, #108]	; (20b4 <vTracePortGetTimeStamp+0x8c>)
    2048:	6814      	ldr	r4, [r2, #0]
    204a:	3401      	adds	r4, #1
    204c:	4a1a      	ldr	r2, [pc, #104]	; (20b8 <vTracePortGetTimeStamp+0x90>)
    204e:	6811      	ldr	r1, [r2, #0]
    2050:	1a61      	subs	r1, r4, r1
	{
		hwtc_count = last_hwtc_count;
	}
#endif

	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
    2052:	4a1a      	ldr	r2, [pc, #104]	; (20bc <vTracePortGetTimeStamp+0x94>)
    2054:	447a      	add	r2, pc
    2056:	6815      	ldr	r5, [r2, #0]
    2058:	4a19      	ldr	r2, [pc, #100]	; (20c0 <vTracePortGetTimeStamp+0x98>)
    205a:	589a      	ldr	r2, [r3, r2]
    205c:	6812      	ldr	r2, [r2, #0]
    205e:	43d6      	mvns	r6, r2
    2060:	42ee      	cmn	r6, r5
    2062:	d502      	bpl.n	206a <vTracePortGetTimeStamp+0x42>
		traceTickCount = uiTraceTickCount;
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    2064:	4295      	cmp	r5, r2
    2066:	d107      	bne.n	2078 <vTracePortGetTimeStamp+0x50>
		traceTickCount = last_traceTickCount;
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
    2068:	1c15      	adds	r5, r2, #0
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    206a:	4a16      	ldr	r2, [pc, #88]	; (20c4 <vTracePortGetTimeStamp+0x9c>)
    206c:	447a      	add	r2, pc
    206e:	6852      	ldr	r2, [r2, #4]
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
    2070:	4291      	cmp	r1, r2
    2072:	4192      	sbcs	r2, r2
    2074:	4252      	negs	r2, r2
    2076:	18aa      	adds	r2, r5, r2
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
    2078:	2800      	cmp	r0, #0
    207a:	d010      	beq.n	209e <vTracePortGetTimeStamp+0x76>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		*pTimestamp = traceTickCount * (HWTC_PERIOD / HWTC_DIVISOR);
    207c:	0864      	lsrs	r4, r4, #1
    207e:	1c25      	adds	r5, r4, #0
    2080:	4355      	muls	r5, r2
    2082:	6005      	str	r5, [r0, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / HWTC_DIVISOR. */
		*pTimestamp += (hwtc_count + traceTickCount * (HWTC_PERIOD % HWTC_DIVISOR)) / HWTC_DIVISOR;
    2084:	4c0b      	ldr	r4, [pc, #44]	; (20b4 <vTracePortGetTimeStamp+0x8c>)
    2086:	6824      	ldr	r4, [r4, #0]
    2088:	3401      	adds	r4, #1
    208a:	2601      	movs	r6, #1
    208c:	4034      	ands	r4, r6
    208e:	4354      	muls	r4, r2
    2090:	1864      	adds	r4, r4, r1
    2092:	0864      	lsrs	r4, r4, #1
    2094:	1964      	adds	r4, r4, r5
    2096:	6004      	str	r4, [r0, #0]

		last_timestamp = *pTimestamp;
    2098:	4805      	ldr	r0, [pc, #20]	; (20b0 <vTracePortGetTimeStamp+0x88>)
    209a:	581b      	ldr	r3, [r3, r0]
    209c:	601c      	str	r4, [r3, #0]
	}

	/* Store the previous values. */
	last_traceTickCount = traceTickCount;
    209e:	4b0a      	ldr	r3, [pc, #40]	; (20c8 <vTracePortGetTimeStamp+0xa0>)
    20a0:	447b      	add	r3, pc
    20a2:	601a      	str	r2, [r3, #0]
	last_hwtc_count = hwtc_count;
    20a4:	6059      	str	r1, [r3, #4]
}
    20a6:	bd70      	pop	{r4, r5, r6, pc}
    20a8:	00005cf8 	.word	0x00005cf8
    20ac:	000000e8 	.word	0x000000e8
    20b0:	00000098 	.word	0x00000098
    20b4:	e000e014 	.word	0xe000e014
    20b8:	e000e018 	.word	0xe000e018
    20bc:	1fffe508 	.word	0x1fffe508
    20c0:	00000228 	.word	0x00000228
    20c4:	1fffe4f0 	.word	0x1fffe4f0
    20c8:	1fffe4bc 	.word	0x1fffe4bc

000020cc <vTraceStoreTaskReady>:
 * vTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void vTraceStoreTaskReady(objectHandleType handle)
{
    20cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    20ce:	b083      	sub	sp, #12
    20d0:	1c05      	adds	r5, r0, #0
    20d2:	4c2a      	ldr	r4, [pc, #168]	; (217c <vTraceStoreTaskReady+0xb0>)
    20d4:	447c      	add	r4, pc
	TREvent* tr;
	uint8_t hnd8;

	TRACE_SR_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
    20d6:	2800      	cmp	r0, #0
    20d8:	d04e      	beq.n	2178 <vTraceStoreTaskReady+0xac>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
    20da:	4b29      	ldr	r3, [pc, #164]	; (2180 <vTraceStoreTaskReady+0xb4>)
    20dc:	447b      	add	r3, pc
    20de:	681b      	ldr	r3, [r3, #0]
    20e0:	2b00      	cmp	r3, #0
    20e2:	d049      	beq.n	2178 <vTraceStoreTaskReady+0xac>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= NTask, "vTraceStoreTaskReady: Invalid value for handle", );
    20e4:	280f      	cmp	r0, #15
    20e6:	d905      	bls.n	20f4 <vTraceStoreTaskReady+0x28>
    20e8:	4826      	ldr	r0, [pc, #152]	; (2184 <vTraceStoreTaskReady+0xb8>)
    20ea:	4478      	add	r0, pc
    20ec:	4b26      	ldr	r3, [pc, #152]	; (2188 <vTraceStoreTaskReady+0xbc>)
    20ee:	58e3      	ldr	r3, [r4, r3]
    20f0:	4798      	blx	r3
    20f2:	e041      	b.n	2178 <vTraceStoreTaskReady+0xac>

	if (recorder_busy)
    20f4:	4b25      	ldr	r3, [pc, #148]	; (218c <vTraceStoreTaskReady+0xc0>)
    20f6:	58e3      	ldr	r3, [r4, r3]
    20f8:	681b      	ldr	r3, [r3, #0]
    20fa:	2b00      	cmp	r3, #0
    20fc:	d005      	beq.n	210a <vTraceStoreTaskReady+0x3e>
	 * This should never occur, as the tick- and kernel call ISR is on lowest
	 * interrupt priority and always are disabled during the critical sections
	 * of the recorder.
	 ***********************************************************************/

	 vTraceError("Recorder busy - high priority ISR using syscall? (1)");
    20fe:	4824      	ldr	r0, [pc, #144]	; (2190 <vTraceStoreTaskReady+0xc4>)
    2100:	4478      	add	r0, pc
    2102:	4b21      	ldr	r3, [pc, #132]	; (2188 <vTraceStoreTaskReady+0xbc>)
    2104:	58e3      	ldr	r3, [r4, r3]
    2106:	4798      	blx	r3
	 return;
    2108:	e036      	b.n	2178 <vTraceStoreTaskReady+0xac>
	}

	trcCRITICAL_SECTION_BEGIN();
    210a:	4b22      	ldr	r3, [pc, #136]	; (2194 <vTraceStoreTaskReady+0xc8>)
    210c:	58e3      	ldr	r3, [r4, r3]
    210e:	4798      	blx	r3
    2110:	1c06      	adds	r6, r0, #0
    2112:	4b1e      	ldr	r3, [pc, #120]	; (218c <vTraceStoreTaskReady+0xc0>)
    2114:	58e3      	ldr	r3, [r4, r3]
    2116:	681a      	ldr	r2, [r3, #0]
    2118:	3201      	adds	r2, #1
    211a:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
    211c:	4b1e      	ldr	r3, [pc, #120]	; (2198 <vTraceStoreTaskReady+0xcc>)
    211e:	58e3      	ldr	r3, [r4, r3]
    2120:	681b      	ldr	r3, [r3, #0]
    2122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2124:	2b00      	cmp	r3, #0
    2126:	d01e      	beq.n	2166 <vTraceStoreTaskReady+0x9a>
	{
		if (!TRACE_GET_TASK_FLAG_ISEXCLUDED(handle))
    2128:	1c2b      	adds	r3, r5, #0
    212a:	3321      	adds	r3, #33	; 0x21
    212c:	4a1b      	ldr	r2, [pc, #108]	; (219c <vTraceStoreTaskReady+0xd0>)
    212e:	58a2      	ldr	r2, [r4, r2]
    2130:	9201      	str	r2, [sp, #4]
    2132:	10da      	asrs	r2, r3, #3
    2134:	9901      	ldr	r1, [sp, #4]
    2136:	5c8a      	ldrb	r2, [r1, r2]
    2138:	2107      	movs	r1, #7
    213a:	400b      	ands	r3, r1
    213c:	411a      	asrs	r2, r3
    213e:	1c13      	adds	r3, r2, #0
    2140:	07da      	lsls	r2, r3, #31
    2142:	d410      	bmi.n	2166 <vTraceStoreTaskReady+0x9a>
		{
			dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    2144:	4816      	ldr	r0, [pc, #88]	; (21a0 <vTraceStoreTaskReady+0xd4>)
    2146:	4b17      	ldr	r3, [pc, #92]	; (21a4 <vTraceStoreTaskReady+0xd8>)
    2148:	58e3      	ldr	r3, [r4, r3]
    214a:	4798      	blx	r3
    214c:	1c07      	adds	r7, r0, #0
			hnd8 = prvTraceGet8BitHandle(handle);
			tr = (TREvent*)xTraceNextFreeEventBufferSlot();
    214e:	4b16      	ldr	r3, [pc, #88]	; (21a8 <vTraceStoreTaskReady+0xdc>)
    2150:	58e3      	ldr	r3, [r4, r3]
    2152:	4798      	blx	r3
			if (tr != NULL)
    2154:	2800      	cmp	r0, #0
    2156:	d006      	beq.n	2166 <vTraceStoreTaskReady+0x9a>
			{
				tr->type = DIV_TASK_READY;
    2158:	2202      	movs	r2, #2
    215a:	7002      	strb	r2, [r0, #0]
				tr->dts = dts3;
    215c:	8047      	strh	r7, [r0, #2]
				tr->objHandle = hnd8;
    215e:	7045      	strb	r5, [r0, #1]
				prvTraceUpdateCounters();
    2160:	4b12      	ldr	r3, [pc, #72]	; (21ac <vTraceStoreTaskReady+0xe0>)
    2162:	58e3      	ldr	r3, [r4, r3]
    2164:	4798      	blx	r3
			}
		}
	}
	trcCRITICAL_SECTION_END();
    2166:	4b09      	ldr	r3, [pc, #36]	; (218c <vTraceStoreTaskReady+0xc0>)
    2168:	58e3      	ldr	r3, [r4, r3]
    216a:	681a      	ldr	r2, [r3, #0]
    216c:	3a01      	subs	r2, #1
    216e:	601a      	str	r2, [r3, #0]
    2170:	1c30      	adds	r0, r6, #0
    2172:	4b0f      	ldr	r3, [pc, #60]	; (21b0 <vTraceStoreTaskReady+0xe4>)
    2174:	58e3      	ldr	r3, [r4, r3]
    2176:	4798      	blx	r3
}
    2178:	b003      	add	sp, #12
    217a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    217c:	00005c50 	.word	0x00005c50
    2180:	1fffdf24 	.word	0x1fffdf24
    2184:	00004f16 	.word	0x00004f16
    2188:	00000120 	.word	0x00000120
    218c:	000002c4 	.word	0x000002c4
    2190:	00004f40 	.word	0x00004f40
    2194:	00000274 	.word	0x00000274
    2198:	00000028 	.word	0x00000028
    219c:	00000124 	.word	0x00000124
    21a0:	0000ffff 	.word	0x0000ffff
    21a4:	00000180 	.word	0x00000180
    21a8:	000000e4 	.word	0x000000e4
    21ac:	00000244 	.word	0x00000244
    21b0:	00000134 	.word	0x00000134

000021b4 <vTraceStoreKernelCall>:
 *
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
void vTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
    21b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    21b6:	4647      	mov	r7, r8
    21b8:	b480      	push	{r7}
    21ba:	b082      	sub	sp, #8
    21bc:	1c06      	adds	r6, r0, #0
    21be:	1c0d      	adds	r5, r1, #0
    21c0:	1c17      	adds	r7, r2, #0
    21c2:	4c3f      	ldr	r4, [pc, #252]	; (22c0 <vTraceStoreKernelCall+0x10c>)
    21c4:	447c      	add	r4, pc
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "vTraceStoreKernelCall: ecode >= 0xFF", );
    21c6:	28fe      	cmp	r0, #254	; 0xfe
    21c8:	d905      	bls.n	21d6 <vTraceStoreKernelCall+0x22>
    21ca:	483e      	ldr	r0, [pc, #248]	; (22c4 <vTraceStoreKernelCall+0x110>)
    21cc:	4478      	add	r0, pc
    21ce:	4b3e      	ldr	r3, [pc, #248]	; (22c8 <vTraceStoreKernelCall+0x114>)
    21d0:	58e3      	ldr	r3, [r4, r3]
    21d2:	4798      	blx	r3
    21d4:	e06f      	b.n	22b6 <vTraceStoreKernelCall+0x102>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "vTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", );
    21d6:	2906      	cmp	r1, #6
    21d8:	d905      	bls.n	21e6 <vTraceStoreKernelCall+0x32>
    21da:	483c      	ldr	r0, [pc, #240]	; (22cc <vTraceStoreKernelCall+0x118>)
    21dc:	4478      	add	r0, pc
    21de:	4b3a      	ldr	r3, [pc, #232]	; (22c8 <vTraceStoreKernelCall+0x114>)
    21e0:	58e3      	ldr	r3, [r4, r3]
    21e2:	4798      	blx	r3
    21e4:	e067      	b.n	22b6 <vTraceStoreKernelCall+0x102>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "vTraceStoreKernelCall: Invalid value for objectNumber", );
    21e6:	4b3a      	ldr	r3, [pc, #232]	; (22d0 <vTraceStoreKernelCall+0x11c>)
    21e8:	58e3      	ldr	r3, [r4, r3]
    21ea:	681b      	ldr	r3, [r3, #0]
    21ec:	185b      	adds	r3, r3, r1
    21ee:	3360      	adds	r3, #96	; 0x60
    21f0:	791b      	ldrb	r3, [r3, #4]
    21f2:	4293      	cmp	r3, r2
    21f4:	d205      	bcs.n	2202 <vTraceStoreKernelCall+0x4e>
    21f6:	4837      	ldr	r0, [pc, #220]	; (22d4 <vTraceStoreKernelCall+0x120>)
    21f8:	4478      	add	r0, pc
    21fa:	4b33      	ldr	r3, [pc, #204]	; (22c8 <vTraceStoreKernelCall+0x114>)
    21fc:	58e3      	ldr	r3, [r4, r3]
    21fe:	4798      	blx	r3
    2200:	e059      	b.n	22b6 <vTraceStoreKernelCall+0x102>

	if (recorder_busy)
    2202:	4b35      	ldr	r3, [pc, #212]	; (22d8 <vTraceStoreKernelCall+0x124>)
    2204:	58e3      	ldr	r3, [r4, r3]
    2206:	681b      	ldr	r3, [r3, #0]
    2208:	2b00      	cmp	r3, #0
    220a:	d005      	beq.n	2218 <vTraceStoreKernelCall+0x64>
		* or creates a user event.
		* Only ISRs that are disabled by TRACE_ENTER_CRITICAL_SECTION may use system calls
		* or user events (see TRACE_MAX_SYSCALL_INTERRUPT_PRIORITY).
		*************************************************************************/

		vTraceError("Recorder busy - high priority ISR using syscall? (2)");
    220c:	4833      	ldr	r0, [pc, #204]	; (22dc <vTraceStoreKernelCall+0x128>)
    220e:	4478      	add	r0, pc
    2210:	4b2d      	ldr	r3, [pc, #180]	; (22c8 <vTraceStoreKernelCall+0x114>)
    2212:	58e3      	ldr	r3, [r4, r3]
    2214:	4798      	blx	r3
		return;
    2216:	e04e      	b.n	22b6 <vTraceStoreKernelCall+0x102>
	}

	if (handle_of_last_logged_task == 0)
    2218:	4b31      	ldr	r3, [pc, #196]	; (22e0 <vTraceStoreKernelCall+0x12c>)
    221a:	58e3      	ldr	r3, [r4, r3]
    221c:	9301      	str	r3, [sp, #4]
    221e:	781b      	ldrb	r3, [r3, #0]
    2220:	2b00      	cmp	r3, #0
    2222:	d048      	beq.n	22b6 <vTraceStoreKernelCall+0x102>
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
    2224:	4b2f      	ldr	r3, [pc, #188]	; (22e4 <vTraceStoreKernelCall+0x130>)
    2226:	58e3      	ldr	r3, [r4, r3]
    2228:	4798      	blx	r3
    222a:	4680      	mov	r8, r0
    222c:	4b2a      	ldr	r3, [pc, #168]	; (22d8 <vTraceStoreKernelCall+0x124>)
    222e:	58e3      	ldr	r3, [r4, r3]
    2230:	681a      	ldr	r2, [r3, #0]
    2232:	3201      	adds	r2, #1
    2234:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
    2236:	4b26      	ldr	r3, [pc, #152]	; (22d0 <vTraceStoreKernelCall+0x11c>)
    2238:	58e3      	ldr	r3, [r4, r3]
    223a:	681b      	ldr	r3, [r3, #0]
    223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    223e:	2b00      	cmp	r3, #0
    2240:	d030      	beq.n	22a4 <vTraceStoreKernelCall+0xf0>
	{
		/* If it is an ISR or NOT an excluded task, this kernel call will be stored in the trace */
		if (nISRactive || !inExcludedTask)
    2242:	4b29      	ldr	r3, [pc, #164]	; (22e8 <vTraceStoreKernelCall+0x134>)
    2244:	58e3      	ldr	r3, [r4, r3]
    2246:	9301      	str	r3, [sp, #4]
    2248:	781b      	ldrb	r3, [r3, #0]
    224a:	b25b      	sxtb	r3, r3
    224c:	2b00      	cmp	r3, #0
    224e:	d105      	bne.n	225c <vTraceStoreKernelCall+0xa8>
    2250:	4b26      	ldr	r3, [pc, #152]	; (22ec <vTraceStoreKernelCall+0x138>)
    2252:	58e3      	ldr	r3, [r4, r3]
    2254:	9301      	str	r3, [sp, #4]
    2256:	781b      	ldrb	r3, [r3, #0]
    2258:	2b00      	cmp	r3, #0
    225a:	d123      	bne.n	22a4 <vTraceStoreKernelCall+0xf0>
		{
			/* Check if the referenced object or the event code is excluded */
			if (!uiTraceIsObjectExcluded(objectClass, (objectHandleType)objectNumber) && !TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(ecode))
    225c:	b2ff      	uxtb	r7, r7
    225e:	1c28      	adds	r0, r5, #0
    2260:	1c39      	adds	r1, r7, #0
    2262:	4b23      	ldr	r3, [pc, #140]	; (22f0 <vTraceStoreKernelCall+0x13c>)
    2264:	58e3      	ldr	r3, [r4, r3]
    2266:	4798      	blx	r3
    2268:	2800      	cmp	r0, #0
    226a:	d11b      	bne.n	22a4 <vTraceStoreKernelCall+0xf0>
    226c:	4b21      	ldr	r3, [pc, #132]	; (22f4 <vTraceStoreKernelCall+0x140>)
    226e:	58e3      	ldr	r3, [r4, r3]
    2270:	9301      	str	r3, [sp, #4]
    2272:	08f3      	lsrs	r3, r6, #3
    2274:	9901      	ldr	r1, [sp, #4]
    2276:	5cca      	ldrb	r2, [r1, r3]
    2278:	2307      	movs	r3, #7
    227a:	4033      	ands	r3, r6
    227c:	411a      	asrs	r2, r3
    227e:	1c13      	adds	r3, r2, #0
    2280:	07da      	lsls	r2, r3, #31
    2282:	d40f      	bmi.n	22a4 <vTraceStoreKernelCall+0xf0>
			{
				dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
    2284:	481c      	ldr	r0, [pc, #112]	; (22f8 <vTraceStoreKernelCall+0x144>)
    2286:	4b1d      	ldr	r3, [pc, #116]	; (22fc <vTraceStoreKernelCall+0x148>)
    2288:	58e3      	ldr	r3, [r4, r3]
    228a:	4798      	blx	r3
    228c:	1c05      	adds	r5, r0, #0
				hnd8 = prvTraceGet8BitHandle(objectNumber);
				kse = (KernelCall*) xTraceNextFreeEventBufferSlot();
    228e:	4b1c      	ldr	r3, [pc, #112]	; (2300 <vTraceStoreKernelCall+0x14c>)
    2290:	58e3      	ldr	r3, [r4, r3]
    2292:	4798      	blx	r3
				if (kse != NULL)
    2294:	2800      	cmp	r0, #0
    2296:	d005      	beq.n	22a4 <vTraceStoreKernelCall+0xf0>
				{
					kse->dts = dts1;
    2298:	8045      	strh	r5, [r0, #2]
					kse->type = (uint8_t)ecode;
    229a:	7006      	strb	r6, [r0, #0]
					kse->objHandle = hnd8;
    229c:	7047      	strb	r7, [r0, #1]
					prvTraceUpdateCounters();
    229e:	4b19      	ldr	r3, [pc, #100]	; (2304 <vTraceStoreKernelCall+0x150>)
    22a0:	58e3      	ldr	r3, [r4, r3]
    22a2:	4798      	blx	r3
				}
			}
		}
	}
	trcCRITICAL_SECTION_END();
    22a4:	4b0c      	ldr	r3, [pc, #48]	; (22d8 <vTraceStoreKernelCall+0x124>)
    22a6:	58e3      	ldr	r3, [r4, r3]
    22a8:	681a      	ldr	r2, [r3, #0]
    22aa:	3a01      	subs	r2, #1
    22ac:	601a      	str	r2, [r3, #0]
    22ae:	4640      	mov	r0, r8
    22b0:	4b15      	ldr	r3, [pc, #84]	; (2308 <vTraceStoreKernelCall+0x154>)
    22b2:	58e3      	ldr	r3, [r4, r3]
    22b4:	4798      	blx	r3
#endif /* TRACE_SCHEDULING_ONLY */
}
    22b6:	b002      	add	sp, #8
    22b8:	bc04      	pop	{r2}
    22ba:	4690      	mov	r8, r2
    22bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22be:	46c0      	nop			; (mov r8, r8)
    22c0:	00005b60 	.word	0x00005b60
    22c4:	00004ee4 	.word	0x00004ee4
    22c8:	00000120 	.word	0x00000120
    22cc:	00004f08 	.word	0x00004f08
    22d0:	00000028 	.word	0x00000028
    22d4:	00004f30 	.word	0x00004f30
    22d8:	000002c4 	.word	0x000002c4
    22dc:	00004f5e 	.word	0x00004f5e
    22e0:	0000002c 	.word	0x0000002c
    22e4:	00000274 	.word	0x00000274
    22e8:	000002c8 	.word	0x000002c8
    22ec:	00000230 	.word	0x00000230
    22f0:	000001a4 	.word	0x000001a4
    22f4:	00000298 	.word	0x00000298
    22f8:	0000ffff 	.word	0x0000ffff
    22fc:	00000180 	.word	0x00000180
    2300:	000000e4 	.word	0x000000e4
    2304:	00000244 	.word	0x00000244
    2308:	00000134 	.word	0x00000134

0000230c <vTraceStoreKernelCallWithParam>:
 ******************************************************************************/
void vTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
    230c:	b5f0      	push	{r4, r5, r6, r7, lr}
    230e:	4657      	mov	r7, sl
    2310:	464e      	mov	r6, r9
    2312:	4645      	mov	r5, r8
    2314:	b4e0      	push	{r5, r6, r7}
    2316:	b082      	sub	sp, #8
    2318:	1c06      	adds	r6, r0, #0
    231a:	1c0d      	adds	r5, r1, #0
    231c:	1c17      	adds	r7, r2, #0
    231e:	4698      	mov	r8, r3
    2320:	4c4a      	ldr	r4, [pc, #296]	; (244c <vTraceStoreKernelCallWithParam+0x140>)
    2322:	447c      	add	r4, pc
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "vTraceStoreKernelCall: evtcode >= 0xFF", );
    2324:	28fe      	cmp	r0, #254	; 0xfe
    2326:	d905      	bls.n	2334 <vTraceStoreKernelCallWithParam+0x28>
    2328:	4849      	ldr	r0, [pc, #292]	; (2450 <vTraceStoreKernelCallWithParam+0x144>)
    232a:	4478      	add	r0, pc
    232c:	4b49      	ldr	r3, [pc, #292]	; (2454 <vTraceStoreKernelCallWithParam+0x148>)
    232e:	58e3      	ldr	r3, [r4, r3]
    2330:	4798      	blx	r3
    2332:	e085      	b.n	2440 <vTraceStoreKernelCallWithParam+0x134>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "vTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", );
    2334:	2906      	cmp	r1, #6
    2336:	d905      	bls.n	2344 <vTraceStoreKernelCallWithParam+0x38>
    2338:	4847      	ldr	r0, [pc, #284]	; (2458 <vTraceStoreKernelCallWithParam+0x14c>)
    233a:	4478      	add	r0, pc
    233c:	4b45      	ldr	r3, [pc, #276]	; (2454 <vTraceStoreKernelCallWithParam+0x148>)
    233e:	58e3      	ldr	r3, [r4, r3]
    2340:	4798      	blx	r3
    2342:	e07d      	b.n	2440 <vTraceStoreKernelCallWithParam+0x134>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "vTraceStoreKernelCallWithParam: Invalid value for objectNumber", );
    2344:	4b45      	ldr	r3, [pc, #276]	; (245c <vTraceStoreKernelCallWithParam+0x150>)
    2346:	58e2      	ldr	r2, [r4, r3]
    2348:	6812      	ldr	r2, [r2, #0]
    234a:	1852      	adds	r2, r2, r1
    234c:	3260      	adds	r2, #96	; 0x60
    234e:	7912      	ldrb	r2, [r2, #4]
    2350:	42ba      	cmp	r2, r7
    2352:	d205      	bcs.n	2360 <vTraceStoreKernelCallWithParam+0x54>
    2354:	4842      	ldr	r0, [pc, #264]	; (2460 <vTraceStoreKernelCallWithParam+0x154>)
    2356:	4478      	add	r0, pc
    2358:	4b3e      	ldr	r3, [pc, #248]	; (2454 <vTraceStoreKernelCallWithParam+0x148>)
    235a:	58e3      	ldr	r3, [r4, r3]
    235c:	4798      	blx	r3
    235e:	e06f      	b.n	2440 <vTraceStoreKernelCallWithParam+0x134>

	if (recorder_busy)
    2360:	4b40      	ldr	r3, [pc, #256]	; (2464 <vTraceStoreKernelCallWithParam+0x158>)
    2362:	58e3      	ldr	r3, [r4, r3]
    2364:	681b      	ldr	r3, [r3, #0]
    2366:	2b00      	cmp	r3, #0
    2368:	d005      	beq.n	2376 <vTraceStoreKernelCallWithParam+0x6a>
		* or creates a user event.
		* Only ISRs that are disabled by TRACE_ENTER_CRITICAL_SECTION may use system calls
		* or user events (see TRACE_MAX_SYSCALL_INTERRUPT_PRIORITY).
		*************************************************************************/

		vTraceError("Recorder busy - high priority ISR using syscall? (3)");
    236a:	483f      	ldr	r0, [pc, #252]	; (2468 <vTraceStoreKernelCallWithParam+0x15c>)
    236c:	4478      	add	r0, pc
    236e:	4b39      	ldr	r3, [pc, #228]	; (2454 <vTraceStoreKernelCallWithParam+0x148>)
    2370:	58e3      	ldr	r3, [r4, r3]
    2372:	4798      	blx	r3
		return;
    2374:	e064      	b.n	2440 <vTraceStoreKernelCallWithParam+0x134>
	}

	trcCRITICAL_SECTION_BEGIN();
    2376:	4b3d      	ldr	r3, [pc, #244]	; (246c <vTraceStoreKernelCallWithParam+0x160>)
    2378:	58e3      	ldr	r3, [r4, r3]
    237a:	4798      	blx	r3
    237c:	4681      	mov	r9, r0
    237e:	4b39      	ldr	r3, [pc, #228]	; (2464 <vTraceStoreKernelCallWithParam+0x158>)
    2380:	58e3      	ldr	r3, [r4, r3]
    2382:	681a      	ldr	r2, [r3, #0]
    2384:	3201      	adds	r2, #1
    2386:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task && (! inExcludedTask || nISRactive))
    2388:	4b34      	ldr	r3, [pc, #208]	; (245c <vTraceStoreKernelCallWithParam+0x150>)
    238a:	58e3      	ldr	r3, [r4, r3]
    238c:	681b      	ldr	r3, [r3, #0]
    238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2390:	2b00      	cmp	r3, #0
    2392:	d04c      	beq.n	242e <vTraceStoreKernelCallWithParam+0x122>
    2394:	4b36      	ldr	r3, [pc, #216]	; (2470 <vTraceStoreKernelCallWithParam+0x164>)
    2396:	58e3      	ldr	r3, [r4, r3]
    2398:	9301      	str	r3, [sp, #4]
    239a:	781b      	ldrb	r3, [r3, #0]
    239c:	2b00      	cmp	r3, #0
    239e:	d046      	beq.n	242e <vTraceStoreKernelCallWithParam+0x122>
    23a0:	4b34      	ldr	r3, [pc, #208]	; (2474 <vTraceStoreKernelCallWithParam+0x168>)
    23a2:	58e3      	ldr	r3, [r4, r3]
    23a4:	9301      	str	r3, [sp, #4]
    23a6:	781b      	ldrb	r3, [r3, #0]
    23a8:	2b00      	cmp	r3, #0
    23aa:	d006      	beq.n	23ba <vTraceStoreKernelCallWithParam+0xae>
    23ac:	4b32      	ldr	r3, [pc, #200]	; (2478 <vTraceStoreKernelCallWithParam+0x16c>)
    23ae:	58e3      	ldr	r3, [r4, r3]
    23b0:	9301      	str	r3, [sp, #4]
    23b2:	781b      	ldrb	r3, [r3, #0]
    23b4:	b25b      	sxtb	r3, r3
    23b6:	2b00      	cmp	r3, #0
    23b8:	d039      	beq.n	242e <vTraceStoreKernelCallWithParam+0x122>
	{
		/* Check if the referenced object or the event code is excluded */
		if (!uiTraceIsObjectExcluded(objectClass, (objectHandleType)objectNumber) &&
    23ba:	b2ff      	uxtb	r7, r7
    23bc:	1c28      	adds	r0, r5, #0
    23be:	1c39      	adds	r1, r7, #0
    23c0:	4b2e      	ldr	r3, [pc, #184]	; (247c <vTraceStoreKernelCallWithParam+0x170>)
    23c2:	58e3      	ldr	r3, [r4, r3]
    23c4:	4798      	blx	r3
    23c6:	2800      	cmp	r0, #0
    23c8:	d131      	bne.n	242e <vTraceStoreKernelCallWithParam+0x122>
			!TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(evtcode))
    23ca:	4b2d      	ldr	r3, [pc, #180]	; (2480 <vTraceStoreKernelCallWithParam+0x174>)
    23cc:	58e3      	ldr	r3, [r4, r3]
    23ce:	9301      	str	r3, [sp, #4]
    23d0:	08f3      	lsrs	r3, r6, #3
    23d2:	9901      	ldr	r1, [sp, #4]
    23d4:	5cca      	ldrb	r2, [r1, r3]
    23d6:	2307      	movs	r3, #7
    23d8:	4033      	ands	r3, r6
    23da:	411a      	asrs	r2, r3
    23dc:	1c13      	adds	r3, r2, #0

	trcCRITICAL_SECTION_BEGIN();
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task && (! inExcludedTask || nISRactive))
	{
		/* Check if the referenced object or the event code is excluded */
		if (!uiTraceIsObjectExcluded(objectClass, (objectHandleType)objectNumber) &&
    23de:	07da      	lsls	r2, r3, #31
    23e0:	d425      	bmi.n	242e <vTraceStoreKernelCallWithParam+0x122>
			!TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(evtcode))
		{
			dts2 = (uint8_t)prvTraceGetDTS(0xFF);
    23e2:	20ff      	movs	r0, #255	; 0xff
    23e4:	4b27      	ldr	r3, [pc, #156]	; (2484 <vTraceStoreKernelCallWithParam+0x178>)
    23e6:	58e3      	ldr	r3, [r4, r3]
    23e8:	4798      	blx	r3
    23ea:	4682      	mov	sl, r0
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
	{
		return param;
    23ec:	4645      	mov	r5, r8
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
    23ee:	2dff      	cmp	r5, #255	; 0xff
    23f0:	d910      	bls.n	2414 <vTraceStoreKernelCallWithParam+0x108>
	{
		return param;
	}
	else
	{
		xps = (XPSEvent*) xTraceNextFreeEventBufferSlot();
    23f2:	4b25      	ldr	r3, [pc, #148]	; (2488 <vTraceStoreKernelCallWithParam+0x17c>)
    23f4:	58e3      	ldr	r3, [r4, r3]
    23f6:	4798      	blx	r3
		if (xps != NULL)
    23f8:	2800      	cmp	r0, #0
    23fa:	d008      	beq.n	240e <vTraceStoreKernelCallWithParam+0x102>
		{
			xps->type = DIV_XPS;
    23fc:	2301      	movs	r3, #1
    23fe:	7003      	strb	r3, [r0, #0]
			xps->xps_8 = (param & (0xFF00 & ~param_max)) >> 8;
    2400:	0a2b      	lsrs	r3, r5, #8
    2402:	7043      	strb	r3, [r0, #1]
			xps->xps_16 = (param & (0xFFFF0000 & ~param_max)) >> 16;
    2404:	0c2b      	lsrs	r3, r5, #16
    2406:	8043      	strh	r3, [r0, #2]
			prvTraceUpdateCounters();
    2408:	4b20      	ldr	r3, [pc, #128]	; (248c <vTraceStoreKernelCallWithParam+0x180>)
    240a:	58e3      	ldr	r3, [r4, r3]
    240c:	4798      	blx	r3
		}

		return param & param_max;
    240e:	25ff      	movs	r5, #255	; 0xff
    2410:	4643      	mov	r3, r8
    2412:	401d      	ands	r5, r3
			!TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(evtcode))
		{
			dts2 = (uint8_t)prvTraceGetDTS(0xFF);
			p8 = (uint8_t) prvTraceGetParam(0xFF, param);
			hnd8 = prvTraceGet8BitHandle((objectHandleType)objectNumber);
			kse = (KernelCallWithParamAndHandle*) xTraceNextFreeEventBufferSlot();
    2414:	4b1c      	ldr	r3, [pc, #112]	; (2488 <vTraceStoreKernelCallWithParam+0x17c>)
    2416:	58e3      	ldr	r3, [r4, r3]
    2418:	4798      	blx	r3
			if (kse != NULL)
    241a:	2800      	cmp	r0, #0
    241c:	d007      	beq.n	242e <vTraceStoreKernelCallWithParam+0x122>
			{
				kse->dts = dts2;
    241e:	4651      	mov	r1, sl
    2420:	70c1      	strb	r1, [r0, #3]
				kse->type = (uint8_t)evtcode;
    2422:	7006      	strb	r6, [r0, #0]
				kse->objHandle = hnd8;
    2424:	7047      	strb	r7, [r0, #1]
				kse->param = p8;
    2426:	7085      	strb	r5, [r0, #2]
				prvTraceUpdateCounters();
    2428:	4b18      	ldr	r3, [pc, #96]	; (248c <vTraceStoreKernelCallWithParam+0x180>)
    242a:	58e3      	ldr	r3, [r4, r3]
    242c:	4798      	blx	r3
			}
		}
	}
	trcCRITICAL_SECTION_END();
    242e:	4b0d      	ldr	r3, [pc, #52]	; (2464 <vTraceStoreKernelCallWithParam+0x158>)
    2430:	58e3      	ldr	r3, [r4, r3]
    2432:	681a      	ldr	r2, [r3, #0]
    2434:	3a01      	subs	r2, #1
    2436:	601a      	str	r2, [r3, #0]
    2438:	4648      	mov	r0, r9
    243a:	4b15      	ldr	r3, [pc, #84]	; (2490 <vTraceStoreKernelCallWithParam+0x184>)
    243c:	58e3      	ldr	r3, [r4, r3]
    243e:	4798      	blx	r3
#endif /* TRACE_SCHEDULING_ONLY */
}
    2440:	b002      	add	sp, #8
    2442:	bc1c      	pop	{r2, r3, r4}
    2444:	4690      	mov	r8, r2
    2446:	4699      	mov	r9, r3
    2448:	46a2      	mov	sl, r4
    244a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    244c:	00005a02 	.word	0x00005a02
    2450:	00004e7a 	.word	0x00004e7a
    2454:	00000120 	.word	0x00000120
    2458:	00004ea2 	.word	0x00004ea2
    245c:	00000028 	.word	0x00000028
    2460:	00004ed2 	.word	0x00004ed2
    2464:	000002c4 	.word	0x000002c4
    2468:	00004f0c 	.word	0x00004f0c
    246c:	00000274 	.word	0x00000274
    2470:	0000002c 	.word	0x0000002c
    2474:	00000230 	.word	0x00000230
    2478:	000002c8 	.word	0x000002c8
    247c:	000001a4 	.word	0x000001a4
    2480:	00000298 	.word	0x00000298
    2484:	00000180 	.word	0x00000180
    2488:	000000e4 	.word	0x000000e4
    248c:	00000244 	.word	0x00000244
    2490:	00000134 	.word	0x00000134

00002494 <vTraceStoreKernelCallWithNumericParamOnly>:
 *
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
void vTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
    2494:	b5f0      	push	{r4, r5, r6, r7, lr}
    2496:	464f      	mov	r7, r9
    2498:	4646      	mov	r6, r8
    249a:	b4c0      	push	{r6, r7}
    249c:	b083      	sub	sp, #12
    249e:	1c05      	adds	r5, r0, #0
    24a0:	1c0e      	adds	r6, r1, #0
    24a2:	4c3c      	ldr	r4, [pc, #240]	; (2594 <vTraceStoreKernelCallWithNumericParamOnly+0x100>)
    24a4:	447c      	add	r4, pc
	uint16_t restParam;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	restParam = 0;

	TRACE_ASSERT(evtcode < 0xFF,
    24a6:	28fe      	cmp	r0, #254	; 0xfe
    24a8:	d905      	bls.n	24b6 <vTraceStoreKernelCallWithNumericParamOnly+0x22>
    24aa:	483b      	ldr	r0, [pc, #236]	; (2598 <vTraceStoreKernelCallWithNumericParamOnly+0x104>)
    24ac:	4478      	add	r0, pc
    24ae:	4b3b      	ldr	r3, [pc, #236]	; (259c <vTraceStoreKernelCallWithNumericParamOnly+0x108>)
    24b0:	58e3      	ldr	r3, [r4, r3]
    24b2:	4798      	blx	r3
    24b4:	e068      	b.n	2588 <vTraceStoreKernelCallWithNumericParamOnly+0xf4>
		"vTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", );

	if (recorder_busy)
    24b6:	4b3a      	ldr	r3, [pc, #232]	; (25a0 <vTraceStoreKernelCallWithNumericParamOnly+0x10c>)
    24b8:	58e3      	ldr	r3, [r4, r3]
    24ba:	681b      	ldr	r3, [r3, #0]
    24bc:	2b00      	cmp	r3, #0
    24be:	d005      	beq.n	24cc <vTraceStoreKernelCallWithNumericParamOnly+0x38>
		* or creates a user event.
		* Only ISRs that are disabled by TRACE_ENTER_CRITICAL_SECTION may use system calls
		* or user events (see TRACE_MAX_SYSCALL_INTERRUPT_PRIORITY).
		*************************************************************************/

		vTraceError("Recorder busy - high priority ISR using syscall? (4)");
    24c0:	4838      	ldr	r0, [pc, #224]	; (25a4 <vTraceStoreKernelCallWithNumericParamOnly+0x110>)
    24c2:	4478      	add	r0, pc
    24c4:	4b35      	ldr	r3, [pc, #212]	; (259c <vTraceStoreKernelCallWithNumericParamOnly+0x108>)
    24c6:	58e3      	ldr	r3, [r4, r3]
    24c8:	4798      	blx	r3
		return;
    24ca:	e05d      	b.n	2588 <vTraceStoreKernelCallWithNumericParamOnly+0xf4>
	}

	trcCRITICAL_SECTION_BEGIN();
    24cc:	4b36      	ldr	r3, [pc, #216]	; (25a8 <vTraceStoreKernelCallWithNumericParamOnly+0x114>)
    24ce:	58e3      	ldr	r3, [r4, r3]
    24d0:	4798      	blx	r3
    24d2:	1c07      	adds	r7, r0, #0
    24d4:	4b32      	ldr	r3, [pc, #200]	; (25a0 <vTraceStoreKernelCallWithNumericParamOnly+0x10c>)
    24d6:	58e3      	ldr	r3, [r4, r3]
    24d8:	681a      	ldr	r2, [r3, #0]
    24da:	3201      	adds	r2, #1
    24dc:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task
    24de:	4b33      	ldr	r3, [pc, #204]	; (25ac <vTraceStoreKernelCallWithNumericParamOnly+0x118>)
    24e0:	58e3      	ldr	r3, [r4, r3]
    24e2:	681b      	ldr	r3, [r3, #0]
    24e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    24e6:	2b00      	cmp	r3, #0
    24e8:	d045      	beq.n	2576 <vTraceStoreKernelCallWithNumericParamOnly+0xe2>
    24ea:	4b31      	ldr	r3, [pc, #196]	; (25b0 <vTraceStoreKernelCallWithNumericParamOnly+0x11c>)
    24ec:	58e3      	ldr	r3, [r4, r3]
    24ee:	9301      	str	r3, [sp, #4]
    24f0:	781b      	ldrb	r3, [r3, #0]
    24f2:	2b00      	cmp	r3, #0
    24f4:	d03f      	beq.n	2576 <vTraceStoreKernelCallWithNumericParamOnly+0xe2>
		&& (! inExcludedTask || nISRactive))
    24f6:	4b2f      	ldr	r3, [pc, #188]	; (25b4 <vTraceStoreKernelCallWithNumericParamOnly+0x120>)
    24f8:	58e3      	ldr	r3, [r4, r3]
    24fa:	9301      	str	r3, [sp, #4]
    24fc:	781b      	ldrb	r3, [r3, #0]
    24fe:	2b00      	cmp	r3, #0
    2500:	d006      	beq.n	2510 <vTraceStoreKernelCallWithNumericParamOnly+0x7c>
    2502:	4b2d      	ldr	r3, [pc, #180]	; (25b8 <vTraceStoreKernelCallWithNumericParamOnly+0x124>)
    2504:	58e3      	ldr	r3, [r4, r3]
    2506:	9301      	str	r3, [sp, #4]
    2508:	781b      	ldrb	r3, [r3, #0]
    250a:	b25b      	sxtb	r3, r3
    250c:	2b00      	cmp	r3, #0
    250e:	d032      	beq.n	2576 <vTraceStoreKernelCallWithNumericParamOnly+0xe2>
	{
		/* Check if the event code is excluded */
		if (!TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(evtcode))
    2510:	4b2a      	ldr	r3, [pc, #168]	; (25bc <vTraceStoreKernelCallWithNumericParamOnly+0x128>)
    2512:	58e3      	ldr	r3, [r4, r3]
    2514:	9301      	str	r3, [sp, #4]
    2516:	08eb      	lsrs	r3, r5, #3
    2518:	9901      	ldr	r1, [sp, #4]
    251a:	5cca      	ldrb	r2, [r1, r3]
    251c:	2307      	movs	r3, #7
    251e:	402b      	ands	r3, r5
    2520:	411a      	asrs	r2, r3
    2522:	1c13      	adds	r3, r2, #0
    2524:	07da      	lsls	r2, r3, #31
    2526:	d426      	bmi.n	2576 <vTraceStoreKernelCallWithNumericParamOnly+0xe2>
		{
			dts6 = (uint8_t)prvTraceGetDTS(0xFF);
    2528:	20ff      	movs	r0, #255	; 0xff
    252a:	4b25      	ldr	r3, [pc, #148]	; (25c0 <vTraceStoreKernelCallWithNumericParamOnly+0x12c>)
    252c:	58e3      	ldr	r3, [r4, r3]
    252e:	4798      	blx	r3
    2530:	4681      	mov	r9, r0
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
	{
		return param;
    2532:	46b0      	mov	r8, r6
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
    2534:	4b23      	ldr	r3, [pc, #140]	; (25c4 <vTraceStoreKernelCallWithNumericParamOnly+0x130>)
    2536:	429e      	cmp	r6, r3
    2538:	d910      	bls.n	255c <vTraceStoreKernelCallWithNumericParamOnly+0xc8>
	{
		return param;
	}
	else
	{
		xps = (XPSEvent*) xTraceNextFreeEventBufferSlot();
    253a:	4b23      	ldr	r3, [pc, #140]	; (25c8 <vTraceStoreKernelCallWithNumericParamOnly+0x134>)
    253c:	58e3      	ldr	r3, [r4, r3]
    253e:	4798      	blx	r3
		if (xps != NULL)
    2540:	2800      	cmp	r0, #0
    2542:	d008      	beq.n	2556 <vTraceStoreKernelCallWithNumericParamOnly+0xc2>
		{
			xps->type = DIV_XPS;
    2544:	2301      	movs	r3, #1
    2546:	7003      	strb	r3, [r0, #0]
			xps->xps_8 = (param & (0xFF00 & ~param_max)) >> 8;
    2548:	2300      	movs	r3, #0
    254a:	7043      	strb	r3, [r0, #1]
			xps->xps_16 = (param & (0xFFFF0000 & ~param_max)) >> 16;
    254c:	0c33      	lsrs	r3, r6, #16
    254e:	8043      	strh	r3, [r0, #2]
			prvTraceUpdateCounters();
    2550:	4b1e      	ldr	r3, [pc, #120]	; (25cc <vTraceStoreKernelCallWithNumericParamOnly+0x138>)
    2552:	58e3      	ldr	r3, [r4, r3]
    2554:	4798      	blx	r3
		}

		return param & param_max;
    2556:	0436      	lsls	r6, r6, #16
    2558:	0c36      	lsrs	r6, r6, #16
    255a:	46b0      	mov	r8, r6
		/* Check if the event code is excluded */
		if (!TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(evtcode))
		{
			dts6 = (uint8_t)prvTraceGetDTS(0xFF);
			restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
			kse = (KernelCallWithParam16*) xTraceNextFreeEventBufferSlot();
    255c:	4b1a      	ldr	r3, [pc, #104]	; (25c8 <vTraceStoreKernelCallWithNumericParamOnly+0x134>)
    255e:	58e3      	ldr	r3, [r4, r3]
    2560:	4798      	blx	r3
			if (kse != NULL)
    2562:	2800      	cmp	r0, #0
    2564:	d007      	beq.n	2576 <vTraceStoreKernelCallWithNumericParamOnly+0xe2>
			{
				kse->dts = dts6;
    2566:	464b      	mov	r3, r9
    2568:	7043      	strb	r3, [r0, #1]
				kse->type = (uint8_t)evtcode;
    256a:	7005      	strb	r5, [r0, #0]
				kse->param = restParam;
    256c:	4641      	mov	r1, r8
    256e:	8041      	strh	r1, [r0, #2]
				prvTraceUpdateCounters();
    2570:	4b16      	ldr	r3, [pc, #88]	; (25cc <vTraceStoreKernelCallWithNumericParamOnly+0x138>)
    2572:	58e3      	ldr	r3, [r4, r3]
    2574:	4798      	blx	r3
			}
		}
	}
	trcCRITICAL_SECTION_END();
    2576:	4b0a      	ldr	r3, [pc, #40]	; (25a0 <vTraceStoreKernelCallWithNumericParamOnly+0x10c>)
    2578:	58e3      	ldr	r3, [r4, r3]
    257a:	681a      	ldr	r2, [r3, #0]
    257c:	3a01      	subs	r2, #1
    257e:	601a      	str	r2, [r3, #0]
    2580:	1c38      	adds	r0, r7, #0
    2582:	4b13      	ldr	r3, [pc, #76]	; (25d0 <vTraceStoreKernelCallWithNumericParamOnly+0x13c>)
    2584:	58e3      	ldr	r3, [r4, r3]
    2586:	4798      	blx	r3
#endif /* TRACE_SCHEDULING_ONLY */
}
    2588:	b003      	add	sp, #12
    258a:	bc0c      	pop	{r2, r3}
    258c:	4690      	mov	r8, r2
    258e:	4699      	mov	r9, r3
    2590:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2592:	46c0      	nop			; (mov r8, r8)
    2594:	00005880 	.word	0x00005880
    2598:	00004e04 	.word	0x00004e04
    259c:	00000120 	.word	0x00000120
    25a0:	000002c4 	.word	0x000002c4
    25a4:	00004e42 	.word	0x00004e42
    25a8:	00000274 	.word	0x00000274
    25ac:	00000028 	.word	0x00000028
    25b0:	0000002c 	.word	0x0000002c
    25b4:	00000230 	.word	0x00000230
    25b8:	000002c8 	.word	0x000002c8
    25bc:	00000298 	.word	0x00000298
    25c0:	00000180 	.word	0x00000180
    25c4:	0000ffff 	.word	0x0000ffff
    25c8:	000000e4 	.word	0x000000e4
    25cc:	00000244 	.word	0x00000244
    25d0:	00000134 	.word	0x00000134

000025d4 <vTraceStoreObjectNameOnCloseEvent>:
 * "old" one, valid up until this point.
 ******************************************************************************/
#if (INCLUDE_OBJECT_DELETE == 1)
void vTraceStoreObjectNameOnCloseEvent(objectHandleType handle,
										traceObjectClass objectclass)
{
    25d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    25d6:	b083      	sub	sp, #12
    25d8:	1c07      	adds	r7, r0, #0
    25da:	1c0d      	adds	r5, r1, #0
    25dc:	4c19      	ldr	r4, [pc, #100]	; (2644 <vTraceStoreObjectNameOnCloseEvent+0x70>)
    25de:	447c      	add	r4, pc
	ObjCloseNameEvent * ce;
	const char * name;
	traceLabel idx;

	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    25e0:	2906      	cmp	r1, #6
    25e2:	d905      	bls.n	25f0 <vTraceStoreObjectNameOnCloseEvent+0x1c>
    25e4:	4818      	ldr	r0, [pc, #96]	; (2648 <vTraceStoreObjectNameOnCloseEvent+0x74>)
    25e6:	4478      	add	r0, pc
    25e8:	4b18      	ldr	r3, [pc, #96]	; (264c <vTraceStoreObjectNameOnCloseEvent+0x78>)
    25ea:	58e3      	ldr	r3, [r4, r3]
    25ec:	4798      	blx	r3
    25ee:	e026      	b.n	263e <vTraceStoreObjectNameOnCloseEvent+0x6a>
		"vTraceStoreObjectNameOnCloseEvent: objectclass >= TRACE_NCLASSES", );
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    25f0:	4b17      	ldr	r3, [pc, #92]	; (2650 <vTraceStoreObjectNameOnCloseEvent+0x7c>)
    25f2:	58e3      	ldr	r3, [r4, r3]
    25f4:	681e      	ldr	r6, [r3, #0]
    25f6:	1873      	adds	r3, r6, r1
    25f8:	3360      	adds	r3, #96	; 0x60
    25fa:	791b      	ldrb	r3, [r3, #4]
    25fc:	4283      	cmp	r3, r0
    25fe:	d205      	bcs.n	260c <vTraceStoreObjectNameOnCloseEvent+0x38>
    2600:	4814      	ldr	r0, [pc, #80]	; (2654 <vTraceStoreObjectNameOnCloseEvent+0x80>)
    2602:	4478      	add	r0, pc
    2604:	4b11      	ldr	r3, [pc, #68]	; (264c <vTraceStoreObjectNameOnCloseEvent+0x78>)
    2606:	58e3      	ldr	r3, [r4, r3]
    2608:	4798      	blx	r3
    260a:	e018      	b.n	263e <vTraceStoreObjectNameOnCloseEvent+0x6a>
		"vTraceStoreObjectNameOnCloseEvent: Invalid value for handle", );

	if (RecorderDataPtr->recorderActive)
    260c:	6b33      	ldr	r3, [r6, #48]	; 0x30
    260e:	2b00      	cmp	r3, #0
    2610:	d015      	beq.n	263e <vTraceStoreObjectNameOnCloseEvent+0x6a>
	{
		uint8_t hnd8 = prvTraceGet8BitHandle(handle);
		name = TRACE_PROPERTY_NAME_GET(objectclass, handle);
    2612:	4b11      	ldr	r3, [pc, #68]	; (2658 <vTraceStoreObjectNameOnCloseEvent+0x84>)
    2614:	58e3      	ldr	r3, [r4, r3]
    2616:	4798      	blx	r3
    2618:	1830      	adds	r0, r6, r0
    261a:	308c      	adds	r0, #140	; 0x8c
		idx = prvTraceOpenSymbol(name, 0);
    261c:	2100      	movs	r1, #0
    261e:	4b0f      	ldr	r3, [pc, #60]	; (265c <vTraceStoreObjectNameOnCloseEvent+0x88>)
    2620:	58e3      	ldr	r3, [r4, r3]
    2622:	4798      	blx	r3
    2624:	1c06      	adds	r6, r0, #0

		// Interrupt disable not necessary, already done in trcHooks.h macro
		ce = (ObjCloseNameEvent*) xTraceNextFreeEventBufferSlot();
    2626:	4b0e      	ldr	r3, [pc, #56]	; (2660 <vTraceStoreObjectNameOnCloseEvent+0x8c>)
    2628:	58e3      	ldr	r3, [r4, r3]
    262a:	4798      	blx	r3
		if (ce != NULL)
    262c:	2800      	cmp	r0, #0
    262e:	d006      	beq.n	263e <vTraceStoreObjectNameOnCloseEvent+0x6a>
		{
			ce->type = EVENTGROUP_OBJCLOSE_NAME + objectclass;
    2630:	3508      	adds	r5, #8
    2632:	7005      	strb	r5, [r0, #0]
			ce->objHandle = hnd8;
    2634:	7047      	strb	r7, [r0, #1]
			ce->symbolIndex = idx;
    2636:	8046      	strh	r6, [r0, #2]
			prvTraceUpdateCounters();
    2638:	4b0a      	ldr	r3, [pc, #40]	; (2664 <vTraceStoreObjectNameOnCloseEvent+0x90>)
    263a:	58e3      	ldr	r3, [r4, r3]
    263c:	4798      	blx	r3
		}
	}
}
    263e:	b003      	add	sp, #12
    2640:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2642:	46c0      	nop			; (mov r8, r8)
    2644:	00005746 	.word	0x00005746
    2648:	00004d56 	.word	0x00004d56
    264c:	00000120 	.word	0x00000120
    2650:	00000028 	.word	0x00000028
    2654:	00004d8a 	.word	0x00004d8a
    2658:	00000264 	.word	0x00000264
    265c:	000000f0 	.word	0x000000f0
    2660:	000000e4 	.word	0x000000e4
    2664:	00000244 	.word	0x00000244

00002668 <vTraceStoreObjectPropertiesOnCloseEvent>:

void vTraceStoreObjectPropertiesOnCloseEvent(objectHandleType handle,
											 traceObjectClass objectclass)
{
    2668:	b5f0      	push	{r4, r5, r6, r7, lr}
    266a:	b083      	sub	sp, #12
    266c:	1c06      	adds	r6, r0, #0
    266e:	1c0d      	adds	r5, r1, #0
    2670:	4c24      	ldr	r4, [pc, #144]	; (2704 <vTraceStoreObjectPropertiesOnCloseEvent+0x9c>)
    2672:	447c      	add	r4, pc
	ObjClosePropEvent * pe;

	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    2674:	2906      	cmp	r1, #6
    2676:	d905      	bls.n	2684 <vTraceStoreObjectPropertiesOnCloseEvent+0x1c>
    2678:	4823      	ldr	r0, [pc, #140]	; (2708 <vTraceStoreObjectPropertiesOnCloseEvent+0xa0>)
    267a:	4478      	add	r0, pc
    267c:	4b23      	ldr	r3, [pc, #140]	; (270c <vTraceStoreObjectPropertiesOnCloseEvent+0xa4>)
    267e:	58e3      	ldr	r3, [r4, r3]
    2680:	4798      	blx	r3
    2682:	e03d      	b.n	2700 <vTraceStoreObjectPropertiesOnCloseEvent+0x98>
		"vTraceStoreObjectPropertiesOnCloseEvent: objectclass >= TRACE_NCLASSES", );
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    2684:	4b22      	ldr	r3, [pc, #136]	; (2710 <vTraceStoreObjectPropertiesOnCloseEvent+0xa8>)
    2686:	58e3      	ldr	r3, [r4, r3]
    2688:	681b      	ldr	r3, [r3, #0]
    268a:	185a      	adds	r2, r3, r1
    268c:	3260      	adds	r2, #96	; 0x60
    268e:	7912      	ldrb	r2, [r2, #4]
    2690:	4282      	cmp	r2, r0
    2692:	d205      	bcs.n	26a0 <vTraceStoreObjectPropertiesOnCloseEvent+0x38>
    2694:	481f      	ldr	r0, [pc, #124]	; (2714 <vTraceStoreObjectPropertiesOnCloseEvent+0xac>)
    2696:	4478      	add	r0, pc
    2698:	4b1c      	ldr	r3, [pc, #112]	; (270c <vTraceStoreObjectPropertiesOnCloseEvent+0xa4>)
    269a:	58e3      	ldr	r3, [r4, r3]
    269c:	4798      	blx	r3
    269e:	e02f      	b.n	2700 <vTraceStoreObjectPropertiesOnCloseEvent+0x98>
		"vTraceStoreObjectPropertiesOnCloseEvent: Invalid value for handle", );

	if (RecorderDataPtr->recorderActive)
    26a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    26a2:	2b00      	cmp	r3, #0
    26a4:	d02c      	beq.n	2700 <vTraceStoreObjectPropertiesOnCloseEvent+0x98>
	{
		// Interrupt disable not necessary, already done in trcHooks.h macro
		pe = (ObjClosePropEvent*) xTraceNextFreeEventBufferSlot();
    26a6:	4b1c      	ldr	r3, [pc, #112]	; (2718 <vTraceStoreObjectPropertiesOnCloseEvent+0xb0>)
    26a8:	58e3      	ldr	r3, [r4, r3]
    26aa:	4798      	blx	r3
    26ac:	1e07      	subs	r7, r0, #0
		if (pe != NULL)
    26ae:	d027      	beq.n	2700 <vTraceStoreObjectPropertiesOnCloseEvent+0x98>
		{
			if (objectclass == TRACE_CLASS_TASK)
    26b0:	2d03      	cmp	r5, #3
    26b2:	d110      	bne.n	26d6 <vTraceStoreObjectPropertiesOnCloseEvent+0x6e>
			{
				pe->arg1 = TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, handle);
    26b4:	1c30      	adds	r0, r6, #0
    26b6:	2103      	movs	r1, #3
    26b8:	4b18      	ldr	r3, [pc, #96]	; (271c <vTraceStoreObjectPropertiesOnCloseEvent+0xb4>)
    26ba:	58e3      	ldr	r3, [r4, r3]
    26bc:	4798      	blx	r3
    26be:	4b14      	ldr	r3, [pc, #80]	; (2710 <vTraceStoreObjectPropertiesOnCloseEvent+0xa8>)
    26c0:	58e2      	ldr	r2, [r4, r3]
    26c2:	6813      	ldr	r3, [r2, #0]
    26c4:	195a      	adds	r2, r3, r5
    26c6:	3268      	adds	r2, #104	; 0x68
    26c8:	7912      	ldrb	r2, [r2, #4]
    26ca:	181b      	adds	r3, r3, r0
    26cc:	189b      	adds	r3, r3, r2
    26ce:	3389      	adds	r3, #137	; 0x89
    26d0:	791b      	ldrb	r3, [r3, #4]
    26d2:	707b      	strb	r3, [r7, #1]
    26d4:	e00f      	b.n	26f6 <vTraceStoreObjectPropertiesOnCloseEvent+0x8e>
			}
			else
			{
				pe->arg1 = TRACE_PROPERTY_OBJECT_STATE(objectclass, handle);
    26d6:	1c30      	adds	r0, r6, #0
    26d8:	1c29      	adds	r1, r5, #0
    26da:	4b10      	ldr	r3, [pc, #64]	; (271c <vTraceStoreObjectPropertiesOnCloseEvent+0xb4>)
    26dc:	58e3      	ldr	r3, [r4, r3]
    26de:	4798      	blx	r3
    26e0:	4b0b      	ldr	r3, [pc, #44]	; (2710 <vTraceStoreObjectPropertiesOnCloseEvent+0xa8>)
    26e2:	58e2      	ldr	r2, [r4, r3]
    26e4:	6813      	ldr	r3, [r2, #0]
    26e6:	195a      	adds	r2, r3, r5
    26e8:	3268      	adds	r2, #104	; 0x68
    26ea:	7912      	ldrb	r2, [r2, #4]
    26ec:	181b      	adds	r3, r3, r0
    26ee:	189b      	adds	r3, r3, r2
    26f0:	3388      	adds	r3, #136	; 0x88
    26f2:	791b      	ldrb	r3, [r3, #4]
    26f4:	707b      	strb	r3, [r7, #1]
			}
			pe->type = EVENTGROUP_OBJCLOSE_PROP + objectclass;
    26f6:	3510      	adds	r5, #16
    26f8:	703d      	strb	r5, [r7, #0]
			prvTraceUpdateCounters();
    26fa:	4b09      	ldr	r3, [pc, #36]	; (2720 <vTraceStoreObjectPropertiesOnCloseEvent+0xb8>)
    26fc:	58e3      	ldr	r3, [r4, r3]
    26fe:	4798      	blx	r3
		}
	}
}
    2700:	b003      	add	sp, #12
    2702:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2704:	000056b2 	.word	0x000056b2
    2708:	00004d5e 	.word	0x00004d5e
    270c:	00000120 	.word	0x00000120
    2710:	00000028 	.word	0x00000028
    2714:	00004d9a 	.word	0x00004d9a
    2718:	000000e4 	.word	0x000000e4
    271c:	00000264 	.word	0x00000264
    2720:	00000244 	.word	0x00000244

00002724 <vTraceSetPriorityProperty>:
#endif

void vTraceSetPriorityProperty(uint8_t objectclass, objectHandleType id, uint8_t value)
{
    2724:	b570      	push	{r4, r5, r6, lr}
    2726:	b082      	sub	sp, #8
    2728:	1c05      	adds	r5, r0, #0
    272a:	1c16      	adds	r6, r2, #0
    272c:	4c14      	ldr	r4, [pc, #80]	; (2780 <vTraceSetPriorityProperty+0x5c>)
    272e:	447c      	add	r4, pc
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    2730:	2806      	cmp	r0, #6
    2732:	d905      	bls.n	2740 <vTraceSetPriorityProperty+0x1c>
    2734:	4813      	ldr	r0, [pc, #76]	; (2784 <vTraceSetPriorityProperty+0x60>)
    2736:	4478      	add	r0, pc
    2738:	4b13      	ldr	r3, [pc, #76]	; (2788 <vTraceSetPriorityProperty+0x64>)
    273a:	58e3      	ldr	r3, [r4, r3]
    273c:	4798      	blx	r3
    273e:	e01c      	b.n	277a <vTraceSetPriorityProperty+0x56>
		"vTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", );
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    2740:	4b12      	ldr	r3, [pc, #72]	; (278c <vTraceSetPriorityProperty+0x68>)
    2742:	58e3      	ldr	r3, [r4, r3]
    2744:	681b      	ldr	r3, [r3, #0]
    2746:	181b      	adds	r3, r3, r0
    2748:	3360      	adds	r3, #96	; 0x60
    274a:	791b      	ldrb	r3, [r3, #4]
    274c:	428b      	cmp	r3, r1
    274e:	d205      	bcs.n	275c <vTraceSetPriorityProperty+0x38>
    2750:	480f      	ldr	r0, [pc, #60]	; (2790 <vTraceSetPriorityProperty+0x6c>)
    2752:	4478      	add	r0, pc
    2754:	4b0c      	ldr	r3, [pc, #48]	; (2788 <vTraceSetPriorityProperty+0x64>)
    2756:	58e3      	ldr	r3, [r4, r3]
    2758:	4798      	blx	r3
    275a:	e00e      	b.n	277a <vTraceSetPriorityProperty+0x56>
		"vTraceSetPriorityProperty: Invalid value for id", );

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
    275c:	1c08      	adds	r0, r1, #0
    275e:	1c29      	adds	r1, r5, #0
    2760:	4b0c      	ldr	r3, [pc, #48]	; (2794 <vTraceSetPriorityProperty+0x70>)
    2762:	58e3      	ldr	r3, [r4, r3]
    2764:	4798      	blx	r3
    2766:	4b09      	ldr	r3, [pc, #36]	; (278c <vTraceSetPriorityProperty+0x68>)
    2768:	58e2      	ldr	r2, [r4, r3]
    276a:	6813      	ldr	r3, [r2, #0]
    276c:	195d      	adds	r5, r3, r5
    276e:	3568      	adds	r5, #104	; 0x68
    2770:	792a      	ldrb	r2, [r5, #4]
    2772:	181b      	adds	r3, r3, r0
    2774:	189b      	adds	r3, r3, r2
    2776:	3389      	adds	r3, #137	; 0x89
    2778:	711e      	strb	r6, [r3, #4]
}
    277a:	b002      	add	sp, #8
    277c:	bd70      	pop	{r4, r5, r6, pc}
    277e:	46c0      	nop			; (mov r8, r8)
    2780:	000055f6 	.word	0x000055f6
    2784:	00004d4a 	.word	0x00004d4a
    2788:	00000120 	.word	0x00000120
    278c:	00000028 	.word	0x00000028
    2790:	00004d76 	.word	0x00004d76
    2794:	00000264 	.word	0x00000264

00002798 <uiTraceGetPriorityProperty>:

uint8_t uiTraceGetPriorityProperty(uint8_t objectclass, objectHandleType id)
{
    2798:	b530      	push	{r4, r5, lr}
    279a:	b083      	sub	sp, #12
    279c:	1c05      	adds	r5, r0, #0
    279e:	4c15      	ldr	r4, [pc, #84]	; (27f4 <uiTraceGetPriorityProperty+0x5c>)
    27a0:	447c      	add	r4, pc
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    27a2:	2806      	cmp	r0, #6
    27a4:	d906      	bls.n	27b4 <uiTraceGetPriorityProperty+0x1c>
    27a6:	4814      	ldr	r0, [pc, #80]	; (27f8 <uiTraceGetPriorityProperty+0x60>)
    27a8:	4478      	add	r0, pc
    27aa:	4b14      	ldr	r3, [pc, #80]	; (27fc <uiTraceGetPriorityProperty+0x64>)
    27ac:	58e3      	ldr	r3, [r4, r3]
    27ae:	4798      	blx	r3
    27b0:	2000      	movs	r0, #0
    27b2:	e01d      	b.n	27f0 <uiTraceGetPriorityProperty+0x58>
		"uiTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    27b4:	4b12      	ldr	r3, [pc, #72]	; (2800 <uiTraceGetPriorityProperty+0x68>)
    27b6:	58e3      	ldr	r3, [r4, r3]
    27b8:	681b      	ldr	r3, [r3, #0]
    27ba:	181b      	adds	r3, r3, r0
    27bc:	3360      	adds	r3, #96	; 0x60
    27be:	791b      	ldrb	r3, [r3, #4]
    27c0:	428b      	cmp	r3, r1
    27c2:	d206      	bcs.n	27d2 <uiTraceGetPriorityProperty+0x3a>
    27c4:	480f      	ldr	r0, [pc, #60]	; (2804 <uiTraceGetPriorityProperty+0x6c>)
    27c6:	4478      	add	r0, pc
    27c8:	4b0c      	ldr	r3, [pc, #48]	; (27fc <uiTraceGetPriorityProperty+0x64>)
    27ca:	58e3      	ldr	r3, [r4, r3]
    27cc:	4798      	blx	r3
    27ce:	2000      	movs	r0, #0
    27d0:	e00e      	b.n	27f0 <uiTraceGetPriorityProperty+0x58>
		"uiTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
    27d2:	1c08      	adds	r0, r1, #0
    27d4:	1c29      	adds	r1, r5, #0
    27d6:	4b0c      	ldr	r3, [pc, #48]	; (2808 <uiTraceGetPriorityProperty+0x70>)
    27d8:	58e3      	ldr	r3, [r4, r3]
    27da:	4798      	blx	r3
    27dc:	4b08      	ldr	r3, [pc, #32]	; (2800 <uiTraceGetPriorityProperty+0x68>)
    27de:	58e2      	ldr	r2, [r4, r3]
    27e0:	6813      	ldr	r3, [r2, #0]
    27e2:	195d      	adds	r5, r3, r5
    27e4:	3568      	adds	r5, #104	; 0x68
    27e6:	792a      	ldrb	r2, [r5, #4]
    27e8:	181b      	adds	r3, r3, r0
    27ea:	189b      	adds	r3, r3, r2
    27ec:	3389      	adds	r3, #137	; 0x89
    27ee:	7918      	ldrb	r0, [r3, #4]
}
    27f0:	b003      	add	sp, #12
    27f2:	bd30      	pop	{r4, r5, pc}
    27f4:	00005584 	.word	0x00005584
    27f8:	00004d60 	.word	0x00004d60
    27fc:	00000120 	.word	0x00000120
    2800:	00000028 	.word	0x00000028
    2804:	00004d8a 	.word	0x00004d8a
    2808:	00000264 	.word	0x00000264

0000280c <vTraceSetObjectState>:

void vTraceSetObjectState(uint8_t objectclass, objectHandleType id, uint8_t value)
{
    280c:	b570      	push	{r4, r5, r6, lr}
    280e:	b082      	sub	sp, #8
    2810:	1c05      	adds	r5, r0, #0
    2812:	1c16      	adds	r6, r2, #0
    2814:	4c14      	ldr	r4, [pc, #80]	; (2868 <vTraceSetObjectState+0x5c>)
    2816:	447c      	add	r4, pc
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    2818:	2806      	cmp	r0, #6
    281a:	d905      	bls.n	2828 <vTraceSetObjectState+0x1c>
    281c:	4813      	ldr	r0, [pc, #76]	; (286c <vTraceSetObjectState+0x60>)
    281e:	4478      	add	r0, pc
    2820:	4b13      	ldr	r3, [pc, #76]	; (2870 <vTraceSetObjectState+0x64>)
    2822:	58e3      	ldr	r3, [r4, r3]
    2824:	4798      	blx	r3
    2826:	e01c      	b.n	2862 <vTraceSetObjectState+0x56>
		"vTraceSetObjectState: objectclass >= TRACE_NCLASSES", );
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    2828:	4b12      	ldr	r3, [pc, #72]	; (2874 <vTraceSetObjectState+0x68>)
    282a:	58e3      	ldr	r3, [r4, r3]
    282c:	681b      	ldr	r3, [r3, #0]
    282e:	181b      	adds	r3, r3, r0
    2830:	3360      	adds	r3, #96	; 0x60
    2832:	791b      	ldrb	r3, [r3, #4]
    2834:	428b      	cmp	r3, r1
    2836:	d205      	bcs.n	2844 <vTraceSetObjectState+0x38>
    2838:	480f      	ldr	r0, [pc, #60]	; (2878 <vTraceSetObjectState+0x6c>)
    283a:	4478      	add	r0, pc
    283c:	4b0c      	ldr	r3, [pc, #48]	; (2870 <vTraceSetObjectState+0x64>)
    283e:	58e3      	ldr	r3, [r4, r3]
    2840:	4798      	blx	r3
    2842:	e00e      	b.n	2862 <vTraceSetObjectState+0x56>
		"vTraceSetObjectState: Invalid value for id", );

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
    2844:	1c08      	adds	r0, r1, #0
    2846:	1c29      	adds	r1, r5, #0
    2848:	4b0c      	ldr	r3, [pc, #48]	; (287c <vTraceSetObjectState+0x70>)
    284a:	58e3      	ldr	r3, [r4, r3]
    284c:	4798      	blx	r3
    284e:	4b09      	ldr	r3, [pc, #36]	; (2874 <vTraceSetObjectState+0x68>)
    2850:	58e2      	ldr	r2, [r4, r3]
    2852:	6813      	ldr	r3, [r2, #0]
    2854:	195d      	adds	r5, r3, r5
    2856:	3568      	adds	r5, #104	; 0x68
    2858:	792a      	ldrb	r2, [r5, #4]
    285a:	181b      	adds	r3, r3, r0
    285c:	189b      	adds	r3, r3, r2
    285e:	3388      	adds	r3, #136	; 0x88
    2860:	711e      	strb	r6, [r3, #4]
}
    2862:	b002      	add	sp, #8
    2864:	bd70      	pop	{r4, r5, r6, pc}
    2866:	46c0      	nop			; (mov r8, r8)
    2868:	0000550e 	.word	0x0000550e
    286c:	00004d72 	.word	0x00004d72
    2870:	00000120 	.word	0x00000120
    2874:	00000028 	.word	0x00000028
    2878:	00004d9a 	.word	0x00004d9a
    287c:	00000264 	.word	0x00000264

00002880 <uiTraceGetObjectState>:

uint8_t uiTraceGetObjectState(uint8_t objectclass, objectHandleType id)
{
    2880:	b530      	push	{r4, r5, lr}
    2882:	b083      	sub	sp, #12
    2884:	1c05      	adds	r5, r0, #0
    2886:	4c15      	ldr	r4, [pc, #84]	; (28dc <uiTraceGetObjectState+0x5c>)
    2888:	447c      	add	r4, pc
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    288a:	2806      	cmp	r0, #6
    288c:	d906      	bls.n	289c <uiTraceGetObjectState+0x1c>
    288e:	4814      	ldr	r0, [pc, #80]	; (28e0 <uiTraceGetObjectState+0x60>)
    2890:	4478      	add	r0, pc
    2892:	4b14      	ldr	r3, [pc, #80]	; (28e4 <uiTraceGetObjectState+0x64>)
    2894:	58e3      	ldr	r3, [r4, r3]
    2896:	4798      	blx	r3
    2898:	2000      	movs	r0, #0
    289a:	e01d      	b.n	28d8 <uiTraceGetObjectState+0x58>
		"uiTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    289c:	4b12      	ldr	r3, [pc, #72]	; (28e8 <uiTraceGetObjectState+0x68>)
    289e:	58e3      	ldr	r3, [r4, r3]
    28a0:	681b      	ldr	r3, [r3, #0]
    28a2:	181b      	adds	r3, r3, r0
    28a4:	3360      	adds	r3, #96	; 0x60
    28a6:	791b      	ldrb	r3, [r3, #4]
    28a8:	428b      	cmp	r3, r1
    28aa:	d206      	bcs.n	28ba <uiTraceGetObjectState+0x3a>
    28ac:	480f      	ldr	r0, [pc, #60]	; (28ec <uiTraceGetObjectState+0x6c>)
    28ae:	4478      	add	r0, pc
    28b0:	4b0c      	ldr	r3, [pc, #48]	; (28e4 <uiTraceGetObjectState+0x64>)
    28b2:	58e3      	ldr	r3, [r4, r3]
    28b4:	4798      	blx	r3
    28b6:	2000      	movs	r0, #0
    28b8:	e00e      	b.n	28d8 <uiTraceGetObjectState+0x58>
		"uiTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
    28ba:	1c08      	adds	r0, r1, #0
    28bc:	1c29      	adds	r1, r5, #0
    28be:	4b0c      	ldr	r3, [pc, #48]	; (28f0 <uiTraceGetObjectState+0x70>)
    28c0:	58e3      	ldr	r3, [r4, r3]
    28c2:	4798      	blx	r3
    28c4:	4b08      	ldr	r3, [pc, #32]	; (28e8 <uiTraceGetObjectState+0x68>)
    28c6:	58e2      	ldr	r2, [r4, r3]
    28c8:	6813      	ldr	r3, [r2, #0]
    28ca:	195d      	adds	r5, r3, r5
    28cc:	3568      	adds	r5, #104	; 0x68
    28ce:	792a      	ldrb	r2, [r5, #4]
    28d0:	181b      	adds	r3, r3, r0
    28d2:	189b      	adds	r3, r3, r2
    28d4:	3388      	adds	r3, #136	; 0x88
    28d6:	7918      	ldrb	r0, [r3, #4]
}
    28d8:	b003      	add	sp, #12
    28da:	bd30      	pop	{r4, r5, pc}
    28dc:	0000549c 	.word	0x0000549c
    28e0:	00004d80 	.word	0x00004d80
    28e4:	00000120 	.word	0x00000120
    28e8:	00000028 	.word	0x00000028
    28ec:	00004da6 	.word	0x00004da6
    28f0:	00000264 	.word	0x00000264

000028f4 <vTraceStoreTaskswitch>:
 * vTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void vTraceStoreTaskswitch(objectHandleType task_handle)
{
    28f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28f6:	b083      	sub	sp, #12
    28f8:	1c05      	adds	r5, r0, #0
    28fa:	4c34      	ldr	r4, [pc, #208]	; (29cc <vTraceStoreTaskswitch+0xd8>)
    28fc:	447c      	add	r4, pc
	uint8_t hnd8;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	skipEvent = 0;

	TRACE_ASSERT(task_handle <= NTask,
    28fe:	280f      	cmp	r0, #15
    2900:	d905      	bls.n	290e <vTraceStoreTaskswitch+0x1a>
    2902:	4833      	ldr	r0, [pc, #204]	; (29d0 <vTraceStoreTaskswitch+0xdc>)
    2904:	4478      	add	r0, pc
    2906:	4b33      	ldr	r3, [pc, #204]	; (29d4 <vTraceStoreTaskswitch+0xe0>)
    2908:	58e3      	ldr	r3, [r4, r3]
    290a:	4798      	blx	r3
    290c:	e05c      	b.n	29c8 <vTraceStoreTaskswitch+0xd4>
	function since critical sections should not be used in the context switch
	event...)
	***************************************************************************/

	/* Skip the event if the task has been excluded, using vTraceExcludeTask */
	if (TRACE_GET_TASK_FLAG_ISEXCLUDED(task_handle))
    290e:	1c03      	adds	r3, r0, #0
    2910:	3321      	adds	r3, #33	; 0x21
    2912:	4a31      	ldr	r2, [pc, #196]	; (29d8 <vTraceStoreTaskswitch+0xe4>)
    2914:	58a2      	ldr	r2, [r4, r2]
    2916:	9201      	str	r2, [sp, #4]
    2918:	10da      	asrs	r2, r3, #3
    291a:	9901      	ldr	r1, [sp, #4]
    291c:	5c8a      	ldrb	r2, [r1, r2]
    291e:	2107      	movs	r1, #7
    2920:	400b      	ands	r3, r1
    2922:	411a      	asrs	r2, r3
    2924:	1c13      	adds	r3, r2, #0
    2926:	07da      	lsls	r2, r3, #31
    2928:	d507      	bpl.n	293a <vTraceStoreTaskswitch+0x46>
	{
		skipEvent = 1;
		inExcludedTask = 1;
    292a:	4b2c      	ldr	r3, [pc, #176]	; (29dc <vTraceStoreTaskswitch+0xe8>)
    292c:	58e3      	ldr	r3, [r4, r3]
    292e:	9301      	str	r3, [sp, #4]
    2930:	2301      	movs	r3, #1
    2932:	9901      	ldr	r1, [sp, #4]
    2934:	700b      	strb	r3, [r1, #0]
	***************************************************************************/

	/* Skip the event if the task has been excluded, using vTraceExcludeTask */
	if (TRACE_GET_TASK_FLAG_ISEXCLUDED(task_handle))
	{
		skipEvent = 1;
    2936:	2101      	movs	r1, #1
    2938:	e006      	b.n	2948 <vTraceStoreTaskswitch+0x54>
		inExcludedTask = 1;
	}
	else
	{
		inExcludedTask = 0;
    293a:	4b28      	ldr	r3, [pc, #160]	; (29dc <vTraceStoreTaskswitch+0xe8>)
    293c:	58e3      	ldr	r3, [r4, r3]
    293e:	9301      	str	r3, [sp, #4]
    2940:	2300      	movs	r3, #0
    2942:	9a01      	ldr	r2, [sp, #4]
    2944:	7013      	strb	r3, [r2, #0]
	TSEvent* ts;
	int8_t skipEvent;
	uint8_t hnd8;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	skipEvent = 0;
    2946:	2100      	movs	r1, #0
	else
	{
		inExcludedTask = 0;
	}

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
    2948:	4b25      	ldr	r3, [pc, #148]	; (29e0 <vTraceStoreTaskswitch+0xec>)
    294a:	58e3      	ldr	r3, [r4, r3]
    294c:	681a      	ldr	r2, [r3, #0]
    294e:	3201      	adds	r2, #1
    2950:	601a      	str	r2, [r3, #0]

	/* Skip the event if the same task is scheduled */
	if (task_handle == handle_of_last_logged_task)
    2952:	4b24      	ldr	r3, [pc, #144]	; (29e4 <vTraceStoreTaskswitch+0xf0>)
    2954:	58e3      	ldr	r3, [r4, r3]
    2956:	9301      	str	r3, [sp, #4]
    2958:	781b      	ldrb	r3, [r3, #0]
    295a:	42ab      	cmp	r3, r5
    295c:	d02f      	beq.n	29be <vTraceStoreTaskswitch+0xca>
	{
		skipEvent = 1;
	}

	if (!RecorderDataPtr->recorderActive)
    295e:	4b22      	ldr	r3, [pc, #136]	; (29e8 <vTraceStoreTaskswitch+0xf4>)
    2960:	58e3      	ldr	r3, [r4, r3]
    2962:	681b      	ldr	r3, [r3, #0]
    2964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2966:	2b00      	cmp	r3, #0
    2968:	d029      	beq.n	29be <vTraceStoreTaskswitch+0xca>
	{
		skipEvent = 1;
	}

	/* If this event should be logged, log it! */
	if (skipEvent == 0)
    296a:	2900      	cmp	r1, #0
    296c:	d127      	bne.n	29be <vTraceStoreTaskswitch+0xca>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    296e:	481f      	ldr	r0, [pc, #124]	; (29ec <vTraceStoreTaskswitch+0xf8>)
    2970:	4b1f      	ldr	r3, [pc, #124]	; (29f0 <vTraceStoreTaskswitch+0xfc>)
    2972:	58e3      	ldr	r3, [r4, r3]
    2974:	4798      	blx	r3
    2976:	1c07      	adds	r7, r0, #0
		handle_of_last_logged_task = task_handle;
    2978:	4b1a      	ldr	r3, [pc, #104]	; (29e4 <vTraceStoreTaskswitch+0xf0>)
    297a:	58e3      	ldr	r3, [r4, r3]
    297c:	701d      	strb	r5, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
		ts = (TSEvent*)xTraceNextFreeEventBufferSlot();
    297e:	4b1d      	ldr	r3, [pc, #116]	; (29f4 <vTraceStoreTaskswitch+0x100>)
    2980:	58e3      	ldr	r3, [r4, r3]
    2982:	4798      	blx	r3
    2984:	1e06      	subs	r6, r0, #0

		if (ts != NULL)
    2986:	d01a      	beq.n	29be <vTraceStoreTaskswitch+0xca>
		{
			if (uiTraceGetObjectState(TRACE_CLASS_TASK,
    2988:	4b16      	ldr	r3, [pc, #88]	; (29e4 <vTraceStoreTaskswitch+0xf0>)
    298a:	58e3      	ldr	r3, [r4, r3]
    298c:	7819      	ldrb	r1, [r3, #0]
    298e:	2003      	movs	r0, #3
    2990:	4b19      	ldr	r3, [pc, #100]	; (29f8 <vTraceStoreTaskswitch+0x104>)
    2992:	58e3      	ldr	r3, [r4, r3]
    2994:	4798      	blx	r3
    2996:	2801      	cmp	r0, #1
    2998:	d102      	bne.n	29a0 <vTraceStoreTaskswitch+0xac>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
    299a:	2307      	movs	r3, #7
    299c:	7033      	strb	r3, [r6, #0]
    299e:	e001      	b.n	29a4 <vTraceStoreTaskswitch+0xb0>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
    29a0:	2306      	movs	r3, #6
    29a2:	7033      	strb	r3, [r6, #0]
			}

			ts->dts = dts3;
    29a4:	8077      	strh	r7, [r6, #2]
			ts->objHandle = hnd8;
    29a6:	7075      	strb	r5, [r6, #1]

			vTraceSetObjectState(TRACE_CLASS_TASK,
    29a8:	4b0e      	ldr	r3, [pc, #56]	; (29e4 <vTraceStoreTaskswitch+0xf0>)
    29aa:	58e3      	ldr	r3, [r4, r3]
    29ac:	7819      	ldrb	r1, [r3, #0]
    29ae:	2003      	movs	r0, #3
    29b0:	2201      	movs	r2, #1
    29b2:	4b12      	ldr	r3, [pc, #72]	; (29fc <vTraceStoreTaskswitch+0x108>)
    29b4:	58e3      	ldr	r3, [r4, r3]
    29b6:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
    29b8:	4b11      	ldr	r3, [pc, #68]	; (2a00 <vTraceStoreTaskswitch+0x10c>)
    29ba:	58e3      	ldr	r3, [r4, r3]
    29bc:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
    29be:	4b08      	ldr	r3, [pc, #32]	; (29e0 <vTraceStoreTaskswitch+0xec>)
    29c0:	58e3      	ldr	r3, [r4, r3]
    29c2:	681a      	ldr	r2, [r3, #0]
    29c4:	3a01      	subs	r2, #1
    29c6:	601a      	str	r2, [r3, #0]
}
    29c8:	b003      	add	sp, #12
    29ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29cc:	00005428 	.word	0x00005428
    29d0:	00004d8c 	.word	0x00004d8c
    29d4:	00000120 	.word	0x00000120
    29d8:	00000124 	.word	0x00000124
    29dc:	00000230 	.word	0x00000230
    29e0:	000002c4 	.word	0x000002c4
    29e4:	0000002c 	.word	0x0000002c
    29e8:	00000028 	.word	0x00000028
    29ec:	0000ffff 	.word	0x0000ffff
    29f0:	00000180 	.word	0x00000180
    29f4:	000000e4 	.word	0x000000e4
    29f8:	0000015c 	.word	0x0000015c
    29fc:	000002a4 	.word	0x000002a4
    2a00:	00000244 	.word	0x00000244

00002a04 <vTraceSetTaskInstanceFinished>:

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
}

void vTraceSetTaskInstanceFinished(objectHandleType handle)
{
    2a04:	b510      	push	{r4, lr}
    2a06:	b082      	sub	sp, #8
    2a08:	4c0f      	ldr	r4, [pc, #60]	; (2a48 <vTraceSetTaskInstanceFinished+0x44>)
    2a0a:	447c      	add	r4, pc
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
    2a0c:	4b0f      	ldr	r3, [pc, #60]	; (2a4c <vTraceSetTaskInstanceFinished+0x48>)
    2a0e:	58e3      	ldr	r3, [r4, r3]
    2a10:	681a      	ldr	r2, [r3, #0]
    2a12:	2367      	movs	r3, #103	; 0x67
    2a14:	5cd3      	ldrb	r3, [r2, r3]
    2a16:	4283      	cmp	r3, r0
    2a18:	d205      	bcs.n	2a26 <vTraceSetTaskInstanceFinished+0x22>
    2a1a:	480d      	ldr	r0, [pc, #52]	; (2a50 <vTraceSetTaskInstanceFinished+0x4c>)
    2a1c:	4478      	add	r0, pc
    2a1e:	4b0d      	ldr	r3, [pc, #52]	; (2a54 <vTraceSetTaskInstanceFinished+0x50>)
    2a20:	58e3      	ldr	r3, [r4, r3]
    2a22:	4798      	blx	r3
    2a24:	e00d      	b.n	2a42 <vTraceSetTaskInstanceFinished+0x3e>
		"vTraceSetTaskInstanceFinished: Invalid value for handle", );

#if (USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
    2a26:	2103      	movs	r1, #3
    2a28:	4b0b      	ldr	r3, [pc, #44]	; (2a58 <vTraceSetTaskInstanceFinished+0x54>)
    2a2a:	58e3      	ldr	r3, [r4, r3]
    2a2c:	4798      	blx	r3
    2a2e:	4b07      	ldr	r3, [pc, #28]	; (2a4c <vTraceSetTaskInstanceFinished+0x48>)
    2a30:	58e2      	ldr	r2, [r4, r3]
    2a32:	6813      	ldr	r3, [r2, #0]
    2a34:	226f      	movs	r2, #111	; 0x6f
    2a36:	5c9a      	ldrb	r2, [r3, r2]
    2a38:	181b      	adds	r3, r3, r0
    2a3a:	189b      	adds	r3, r3, r2
    2a3c:	3388      	adds	r3, #136	; 0x88
    2a3e:	2200      	movs	r2, #0
    2a40:	711a      	strb	r2, [r3, #4]
#endif
}
    2a42:	b002      	add	sp, #8
    2a44:	bd10      	pop	{r4, pc}
    2a46:	46c0      	nop			; (mov r8, r8)
    2a48:	0000531a 	.word	0x0000531a
    2a4c:	00000028 	.word	0x00000028
    2a50:	00004cb8 	.word	0x00004cb8
    2a54:	00000120 	.word	0x00000120
    2a58:	00000264 	.word	0x00000264

00002a5c <prvTraceGetObjectNumber>:
#else

extern portBASE_TYPE uxQueueGetQueueNumber(void*);

objectHandleType prvTraceGetObjectNumber(void* handle)
{
    2a5c:	b500      	push	{lr}
    2a5e:	b083      	sub	sp, #12
    2a60:	4b04      	ldr	r3, [pc, #16]	; (2a74 <prvTraceGetObjectNumber+0x18>)
    2a62:	447b      	add	r3, pc
	return (objectHandleType) uxQueueGetQueueNumber(handle);
    2a64:	4a04      	ldr	r2, [pc, #16]	; (2a78 <prvTraceGetObjectNumber+0x1c>)
    2a66:	589a      	ldr	r2, [r3, r2]
    2a68:	9201      	str	r2, [sp, #4]
    2a6a:	4790      	blx	r2
    2a6c:	b2c0      	uxtb	r0, r0
}
    2a6e:	b003      	add	sp, #12
    2a70:	bd00      	pop	{pc}
    2a72:	46c0      	nop			; (mov r8, r8)
    2a74:	000052c2 	.word	0x000052c2
    2a78:	00000094 	.word	0x00000094

00002a7c <prvTraceGetObjectType>:

#endif

unsigned char prvTraceGetObjectType(void* handle)
{
    2a7c:	b500      	push	{lr}
    2a7e:	b083      	sub	sp, #12
    2a80:	4b03      	ldr	r3, [pc, #12]	; (2a90 <prvTraceGetObjectType+0x14>)
    2a82:	447b      	add	r3, pc
	return ucQueueGetQueueType(handle);
    2a84:	4a03      	ldr	r2, [pc, #12]	; (2a94 <prvTraceGetObjectType+0x18>)
    2a86:	589a      	ldr	r2, [r3, r2]
    2a88:	9201      	str	r2, [sp, #4]
    2a8a:	4790      	blx	r2
}
    2a8c:	b003      	add	sp, #12
    2a8e:	bd00      	pop	{pc}
    2a90:	000052a2 	.word	0x000052a2
    2a94:	000001c8 	.word	0x000001c8

00002a98 <prvTraceGetTaskNumber>:

objectHandleType prvTraceGetTaskNumber(void* handle)
{
    2a98:	b500      	push	{lr}
    2a9a:	b083      	sub	sp, #12
    2a9c:	4b04      	ldr	r3, [pc, #16]	; (2ab0 <prvTraceGetTaskNumber+0x18>)
    2a9e:	447b      	add	r3, pc
	return (objectHandleType)uxTaskGetTaskNumber(handle);
    2aa0:	4a04      	ldr	r2, [pc, #16]	; (2ab4 <prvTraceGetTaskNumber+0x1c>)
    2aa2:	589a      	ldr	r2, [r3, r2]
    2aa4:	9201      	str	r2, [sp, #4]
    2aa6:	4790      	blx	r2
    2aa8:	b2c0      	uxtb	r0, r0
}
    2aaa:	b003      	add	sp, #12
    2aac:	bd00      	pop	{pc}
    2aae:	46c0      	nop			; (mov r8, r8)
    2ab0:	00005286 	.word	0x00005286
    2ab4:	000001a8 	.word	0x000001a8

00002ab8 <prvTraceGetCurrentTaskHandle>:
{
	return xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED;
}

void* prvTraceGetCurrentTaskHandle()
{
    2ab8:	b500      	push	{lr}
    2aba:	b083      	sub	sp, #12
    2abc:	4b03      	ldr	r3, [pc, #12]	; (2acc <prvTraceGetCurrentTaskHandle+0x14>)
    2abe:	447b      	add	r3, pc
	return xTaskGetCurrentTaskHandle();
    2ac0:	4a03      	ldr	r2, [pc, #12]	; (2ad0 <prvTraceGetCurrentTaskHandle+0x18>)
    2ac2:	589a      	ldr	r2, [r3, r2]
    2ac4:	9201      	str	r2, [sp, #4]
    2ac6:	4790      	blx	r2
}
    2ac8:	b003      	add	sp, #12
    2aca:	bd00      	pop	{pc}
    2acc:	00005266 	.word	0x00005266
    2ad0:	000001dc 	.word	0x000001dc

00002ad4 <vTraceInitObjectPropertyTable>:

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
    2ad4:	b510      	push	{r4, lr}
    2ad6:	4b29      	ldr	r3, [pc, #164]	; (2b7c <vTraceInitObjectPropertyTable+0xa8>)
    2ad8:	447b      	add	r3, pc
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
    2ada:	4a29      	ldr	r2, [pc, #164]	; (2b80 <vTraceInitObjectPropertyTable+0xac>)
    2adc:	589b      	ldr	r3, [r3, r2]
    2ade:	681b      	ldr	r3, [r3, #0]
    2ae0:	2207      	movs	r2, #7
    2ae2:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = NQueue;
    2ae4:	220a      	movs	r2, #10
    2ae6:	2164      	movs	r1, #100	; 0x64
    2ae8:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = NSemaphore;
    2aea:	2165      	movs	r1, #101	; 0x65
    2aec:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = NMutex;
    2aee:	2166      	movs	r1, #102	; 0x66
    2af0:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = NTask;
    2af2:	220f      	movs	r2, #15
    2af4:	2167      	movs	r1, #103	; 0x67
    2af6:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = NISR;
    2af8:	2005      	movs	r0, #5
    2afa:	2168      	movs	r1, #104	; 0x68
    2afc:	5458      	strb	r0, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = NTimer;
    2afe:	2102      	movs	r1, #2
    2b00:	2069      	movs	r0, #105	; 0x69
    2b02:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = NEventGroup;	
    2b04:	206a      	movs	r0, #106	; 0x6a
    2b06:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = NameLenQueue;
    2b08:	216c      	movs	r1, #108	; 0x6c
    2b0a:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = NameLenSemaphore;
    2b0c:	216d      	movs	r1, #109	; 0x6d
    2b0e:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = NameLenMutex;
    2b10:	216e      	movs	r1, #110	; 0x6e
    2b12:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = NameLenTask;
    2b14:	216f      	movs	r1, #111	; 0x6f
    2b16:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = NameLenISR;
    2b18:	2170      	movs	r1, #112	; 0x70
    2b1a:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = NameLenTimer;
    2b1c:	2171      	movs	r1, #113	; 0x71
    2b1e:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = NameLenEventGroup;	
    2b20:	2172      	movs	r1, #114	; 0x72
    2b22:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
    2b24:	2210      	movs	r2, #16
    2b26:	2174      	movs	r1, #116	; 0x74
    2b28:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
    2b2a:	2175      	movs	r1, #117	; 0x75
    2b2c:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
    2b2e:	2176      	movs	r1, #118	; 0x76
    2b30:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
    2b32:	2113      	movs	r1, #19
    2b34:	2077      	movs	r0, #119	; 0x77
    2b36:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
    2b38:	2411      	movs	r4, #17
    2b3a:	2078      	movs	r0, #120	; 0x78
    2b3c:	541c      	strb	r4, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
    2b3e:	2079      	movs	r0, #121	; 0x79
    2b40:	541a      	strb	r2, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
    2b42:	227a      	movs	r2, #122	; 0x7a
    2b44:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
    2b46:	2100      	movs	r1, #0
    2b48:	227c      	movs	r2, #124	; 0x7c
    2b4a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
    2b4c:	21a0      	movs	r1, #160	; 0xa0
    2b4e:	227e      	movs	r2, #126	; 0x7e
    2b50:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
    2b52:	0049      	lsls	r1, r1, #1
    2b54:	2280      	movs	r2, #128	; 0x80
    2b56:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
    2b58:	21f0      	movs	r1, #240	; 0xf0
    2b5a:	0049      	lsls	r1, r1, #1
    2b5c:	2282      	movs	r2, #130	; 0x82
    2b5e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
    2b60:	4908      	ldr	r1, [pc, #32]	; (2b84 <vTraceInitObjectPropertyTable+0xb0>)
    2b62:	2284      	movs	r2, #132	; 0x84
    2b64:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
    2b66:	4908      	ldr	r1, [pc, #32]	; (2b88 <vTraceInitObjectPropertyTable+0xb4>)
    2b68:	2286      	movs	r2, #134	; 0x86
    2b6a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
    2b6c:	4907      	ldr	r1, [pc, #28]	; (2b8c <vTraceInitObjectPropertyTable+0xb8>)
    2b6e:	2288      	movs	r2, #136	; 0x88
    2b70:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
    2b72:	22e6      	movs	r2, #230	; 0xe6
    2b74:	0092      	lsls	r2, r2, #2
    2b76:	661a      	str	r2, [r3, #96]	; 0x60
}
    2b78:	bd10      	pop	{r4, pc}
    2b7a:	46c0      	nop			; (mov r8, r8)
    2b7c:	0000524c 	.word	0x0000524c
    2b80:	00000028 	.word	0x00000028
    2b84:	000002fd 	.word	0x000002fd
    2b88:	00000352 	.word	0x00000352
    2b8c:	00000372 	.word	0x00000372

00002b90 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, xTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
    2b90:	4b13      	ldr	r3, [pc, #76]	; (2be0 <vTraceInitObjectHandleStack+0x50>)
    2b92:	447b      	add	r3, pc
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
    2b94:	4a13      	ldr	r2, [pc, #76]	; (2be4 <vTraceInitObjectHandleStack+0x54>)
    2b96:	589b      	ldr	r3, [r3, r2]
    2b98:	2200      	movs	r2, #0
    2b9a:	81da      	strh	r2, [r3, #14]
    2b9c:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = NQueue;
    2b9e:	220a      	movs	r2, #10
    2ba0:	821a      	strh	r2, [r3, #16]
    2ba2:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = NQueue + NSemaphore;
    2ba4:	2214      	movs	r2, #20
    2ba6:	825a      	strh	r2, [r3, #18]
    2ba8:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = NQueue + NSemaphore + NMutex;
    2baa:	221e      	movs	r2, #30
    2bac:	829a      	strh	r2, [r3, #20]
    2bae:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = NQueue + NSemaphore + NMutex + NTask;
    2bb0:	222d      	movs	r2, #45	; 0x2d
    2bb2:	82da      	strh	r2, [r3, #22]
    2bb4:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = NQueue + NSemaphore + NMutex + NTask + NISR;
    2bb6:	2232      	movs	r2, #50	; 0x32
    2bb8:	831a      	strh	r2, [r3, #24]
    2bba:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = NQueue + NSemaphore + NMutex + NTask + NISR + NTimer;
    2bbc:	2234      	movs	r2, #52	; 0x34
    2bbe:	835a      	strh	r2, [r3, #26]
    2bc0:	819a      	strh	r2, [r3, #12]

	objectHandleStacks.highestIndexOfClass[0] = NQueue - 1;
    2bc2:	2209      	movs	r2, #9
    2bc4:	839a      	strh	r2, [r3, #28]
	objectHandleStacks.highestIndexOfClass[1] = NQueue + NSemaphore - 1;
    2bc6:	2213      	movs	r2, #19
    2bc8:	83da      	strh	r2, [r3, #30]
	objectHandleStacks.highestIndexOfClass[2] = NQueue + NSemaphore + NMutex - 1;
    2bca:	221d      	movs	r2, #29
    2bcc:	841a      	strh	r2, [r3, #32]
	objectHandleStacks.highestIndexOfClass[3] = NQueue + NSemaphore + NMutex + NTask - 1;
    2bce:	222c      	movs	r2, #44	; 0x2c
    2bd0:	845a      	strh	r2, [r3, #34]	; 0x22
	objectHandleStacks.highestIndexOfClass[4] = NQueue + NSemaphore + NMutex + NTask + NISR - 1;
    2bd2:	2231      	movs	r2, #49	; 0x31
    2bd4:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[5] = NQueue + NSemaphore + NMutex + NTask + NISR + NTimer - 1;
    2bd6:	2233      	movs	r2, #51	; 0x33
    2bd8:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[6] = NQueue + NSemaphore + NMutex + NTask + NISR + NTimer + NEventGroup - 1;
    2bda:	2235      	movs	r2, #53	; 0x35
    2bdc:	851a      	strh	r2, [r3, #40]	; 0x28
}
    2bde:	4770      	bx	lr
    2be0:	00005192 	.word	0x00005192
    2be4:	000002b8 	.word	0x000002b8

00002be8 <pszTraceGetErrorNotEnoughHandles>:
	
/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
    2be8:	b500      	push	{lr}
	switch(objectclass)
    2bea:	2806      	cmp	r0, #6
    2bec:	d817      	bhi.n	2c1e <pszTraceGetErrorNotEnoughHandles+0x36>
    2bee:	f003 fc2f 	bl	6450 <__gnu_thumb1_case_uqi>
    2bf2:	070d      	.short	0x070d
    2bf4:	1019040a 	.word	0x1019040a
    2bf8:	13          	.byte	0x13
    2bf9:	00          	.byte	0x00
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase NTask in trcConfig.h";
    2bfa:	480c      	ldr	r0, [pc, #48]	; (2c2c <pszTraceGetErrorNotEnoughHandles+0x44>)
    2bfc:	4478      	add	r0, pc
    2bfe:	e013      	b.n	2c28 <pszTraceGetErrorNotEnoughHandles+0x40>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase NISR in trcConfig.h";
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase NSemaphore in trcConfig.h";
    2c00:	480b      	ldr	r0, [pc, #44]	; (2c30 <pszTraceGetErrorNotEnoughHandles+0x48>)
    2c02:	4478      	add	r0, pc
    2c04:	e010      	b.n	2c28 <pszTraceGetErrorNotEnoughHandles+0x40>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase NMutex in trcConfig.h";
    2c06:	480b      	ldr	r0, [pc, #44]	; (2c34 <pszTraceGetErrorNotEnoughHandles+0x4c>)
    2c08:	4478      	add	r0, pc
    2c0a:	e00d      	b.n	2c28 <pszTraceGetErrorNotEnoughHandles+0x40>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase NQueue in trcConfig.h";
    2c0c:	480a      	ldr	r0, [pc, #40]	; (2c38 <pszTraceGetErrorNotEnoughHandles+0x50>)
    2c0e:	4478      	add	r0, pc
    2c10:	e00a      	b.n	2c28 <pszTraceGetErrorNotEnoughHandles+0x40>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase NTimer in trcConfig.h";
    2c12:	480a      	ldr	r0, [pc, #40]	; (2c3c <pszTraceGetErrorNotEnoughHandles+0x54>)
    2c14:	4478      	add	r0, pc
    2c16:	e007      	b.n	2c28 <pszTraceGetErrorNotEnoughHandles+0x40>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase NEventGroup in trcConfig.h";		
    2c18:	4809      	ldr	r0, [pc, #36]	; (2c40 <pszTraceGetErrorNotEnoughHandles+0x58>)
    2c1a:	4478      	add	r0, pc
    2c1c:	e004      	b.n	2c28 <pszTraceGetErrorNotEnoughHandles+0x40>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
    2c1e:	4809      	ldr	r0, [pc, #36]	; (2c44 <pszTraceGetErrorNotEnoughHandles+0x5c>)
    2c20:	4478      	add	r0, pc
    2c22:	e001      	b.n	2c28 <pszTraceGetErrorNotEnoughHandles+0x40>
	switch(objectclass)
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase NTask in trcConfig.h";
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase NISR in trcConfig.h";
    2c24:	4808      	ldr	r0, [pc, #32]	; (2c48 <pszTraceGetErrorNotEnoughHandles+0x60>)
    2c26:	4478      	add	r0, pc
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase NEventGroup in trcConfig.h";		
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
	}
}
    2c28:	bd00      	pop	{pc}
    2c2a:	46c0      	nop			; (mov r8, r8)
    2c2c:	00004b20 	.word	0x00004b20
    2c30:	00004b8a 	.word	0x00004b8a
    2c34:	00004bc8 	.word	0x00004bc8
    2c38:	00004bfe 	.word	0x00004bfe
    2c3c:	00004c34 	.word	0x00004c34
    2c40:	00004c6a 	.word	0x00004c6a
    2c44:	00004ca8 	.word	0x00004ca8
    2c48:	00004b2e 	.word	0x00004b2e

00002c4c <uiTraceIsObjectExcluded>:

/* Returns the exclude state of the object */
uint8_t uiTraceIsObjectExcluded(traceObjectClass objectclass, objectHandleType handle)
{
    2c4c:	b500      	push	{lr}
    2c4e:	b083      	sub	sp, #12
    2c50:	4b38      	ldr	r3, [pc, #224]	; (2d34 <uiTraceIsObjectExcluded+0xe8>)
    2c52:	447b      	add	r3, pc
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, "prvTraceIsObjectExcluded: objectclass >= TRACE_NCLASSES", 1);
    2c54:	2806      	cmp	r0, #6
    2c56:	d906      	bls.n	2c66 <uiTraceIsObjectExcluded+0x1a>
    2c58:	4837      	ldr	r0, [pc, #220]	; (2d38 <uiTraceIsObjectExcluded+0xec>)
    2c5a:	4478      	add	r0, pc
    2c5c:	4a37      	ldr	r2, [pc, #220]	; (2d3c <uiTraceIsObjectExcluded+0xf0>)
    2c5e:	589a      	ldr	r2, [r3, r2]
    2c60:	4790      	blx	r2
    2c62:	2001      	movs	r0, #1
    2c64:	e063      	b.n	2d2e <uiTraceIsObjectExcluded+0xe2>
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], "uiTraceIsObjectExcluded: Invalid value for handle", 1);
    2c66:	4a36      	ldr	r2, [pc, #216]	; (2d40 <uiTraceIsObjectExcluded+0xf4>)
    2c68:	589a      	ldr	r2, [r3, r2]
    2c6a:	6812      	ldr	r2, [r2, #0]
    2c6c:	1812      	adds	r2, r2, r0
    2c6e:	3260      	adds	r2, #96	; 0x60
    2c70:	7912      	ldrb	r2, [r2, #4]
    2c72:	428a      	cmp	r2, r1
    2c74:	d206      	bcs.n	2c84 <uiTraceIsObjectExcluded+0x38>
    2c76:	4833      	ldr	r0, [pc, #204]	; (2d44 <uiTraceIsObjectExcluded+0xf8>)
    2c78:	4478      	add	r0, pc
    2c7a:	4a30      	ldr	r2, [pc, #192]	; (2d3c <uiTraceIsObjectExcluded+0xf0>)
    2c7c:	589a      	ldr	r2, [r3, r2]
    2c7e:	4790      	blx	r2
    2c80:	2001      	movs	r0, #1
    2c82:	e054      	b.n	2d2e <uiTraceIsObjectExcluded+0xe2>
	
	switch(objectclass)
    2c84:	2806      	cmp	r0, #6
    2c86:	d84c      	bhi.n	2d22 <uiTraceIsObjectExcluded+0xd6>
    2c88:	f003 fbe2 	bl	6450 <__gnu_thumb1_case_uqi>
    2c8c:	041c1028 	.word	0x041c1028
    2c90:	334b      	.short	0x334b
    2c92:	3f          	.byte	0x3f
    2c93:	00          	.byte	0x00
	{
	case TRACE_CLASS_TASK:
		return TRACE_GET_TASK_FLAG_ISEXCLUDED(handle);
    2c94:	3121      	adds	r1, #33	; 0x21
    2c96:	2007      	movs	r0, #7
    2c98:	4008      	ands	r0, r1
    2c9a:	2201      	movs	r2, #1
    2c9c:	4082      	lsls	r2, r0
    2c9e:	1c10      	adds	r0, r2, #0
    2ca0:	4a29      	ldr	r2, [pc, #164]	; (2d48 <uiTraceIsObjectExcluded+0xfc>)
    2ca2:	589a      	ldr	r2, [r3, r2]
    2ca4:	10c9      	asrs	r1, r1, #3
    2ca6:	5c53      	ldrb	r3, [r2, r1]
    2ca8:	4018      	ands	r0, r3
    2caa:	e040      	b.n	2d2e <uiTraceIsObjectExcluded+0xe2>
	case TRACE_CLASS_SEMAPHORE:
		return TRACE_GET_SEMAPHORE_FLAG_ISEXCLUDED(handle);
    2cac:	310b      	adds	r1, #11
    2cae:	2007      	movs	r0, #7
    2cb0:	4008      	ands	r0, r1
    2cb2:	2201      	movs	r2, #1
    2cb4:	4082      	lsls	r2, r0
    2cb6:	1c10      	adds	r0, r2, #0
    2cb8:	4a23      	ldr	r2, [pc, #140]	; (2d48 <uiTraceIsObjectExcluded+0xfc>)
    2cba:	589a      	ldr	r2, [r3, r2]
    2cbc:	10c9      	asrs	r1, r1, #3
    2cbe:	5c53      	ldrb	r3, [r2, r1]
    2cc0:	4018      	ands	r0, r3
    2cc2:	e034      	b.n	2d2e <uiTraceIsObjectExcluded+0xe2>
	case TRACE_CLASS_MUTEX:
		return TRACE_GET_MUTEX_FLAG_ISEXCLUDED(handle);
    2cc4:	3116      	adds	r1, #22
    2cc6:	2007      	movs	r0, #7
    2cc8:	4008      	ands	r0, r1
    2cca:	2201      	movs	r2, #1
    2ccc:	4082      	lsls	r2, r0
    2cce:	1c10      	adds	r0, r2, #0
    2cd0:	4a1d      	ldr	r2, [pc, #116]	; (2d48 <uiTraceIsObjectExcluded+0xfc>)
    2cd2:	589a      	ldr	r2, [r3, r2]
    2cd4:	10c9      	asrs	r1, r1, #3
    2cd6:	5c53      	ldrb	r3, [r2, r1]
    2cd8:	4018      	ands	r0, r3
    2cda:	e028      	b.n	2d2e <uiTraceIsObjectExcluded+0xe2>
	case TRACE_CLASS_QUEUE:
		return TRACE_GET_QUEUE_FLAG_ISEXCLUDED(handle);
    2cdc:	2007      	movs	r0, #7
    2cde:	4008      	ands	r0, r1
    2ce0:	2201      	movs	r2, #1
    2ce2:	4082      	lsls	r2, r0
    2ce4:	1c10      	adds	r0, r2, #0
    2ce6:	4a18      	ldr	r2, [pc, #96]	; (2d48 <uiTraceIsObjectExcluded+0xfc>)
    2ce8:	589a      	ldr	r2, [r3, r2]
    2cea:	08c9      	lsrs	r1, r1, #3
    2cec:	5c53      	ldrb	r3, [r2, r1]
    2cee:	4018      	ands	r0, r3
    2cf0:	e01d      	b.n	2d2e <uiTraceIsObjectExcluded+0xe2>
	case TRACE_CLASS_TIMER:
		return TRACE_GET_TIMER_FLAG_ISEXCLUDED(handle);		
    2cf2:	3131      	adds	r1, #49	; 0x31
    2cf4:	2007      	movs	r0, #7
    2cf6:	4008      	ands	r0, r1
    2cf8:	2201      	movs	r2, #1
    2cfa:	4082      	lsls	r2, r0
    2cfc:	1c10      	adds	r0, r2, #0
    2cfe:	4a12      	ldr	r2, [pc, #72]	; (2d48 <uiTraceIsObjectExcluded+0xfc>)
    2d00:	589a      	ldr	r2, [r3, r2]
    2d02:	10c9      	asrs	r1, r1, #3
    2d04:	5c53      	ldrb	r3, [r2, r1]
    2d06:	4018      	ands	r0, r3
    2d08:	e011      	b.n	2d2e <uiTraceIsObjectExcluded+0xe2>
	case TRACE_CLASS_EVENTGROUP:
		return TRACE_GET_EVENTGROUP_FLAG_ISEXCLUDED(handle);				
    2d0a:	3134      	adds	r1, #52	; 0x34
    2d0c:	2007      	movs	r0, #7
    2d0e:	4008      	ands	r0, r1
    2d10:	2201      	movs	r2, #1
    2d12:	4082      	lsls	r2, r0
    2d14:	1c10      	adds	r0, r2, #0
    2d16:	4a0c      	ldr	r2, [pc, #48]	; (2d48 <uiTraceIsObjectExcluded+0xfc>)
    2d18:	589a      	ldr	r2, [r3, r2]
    2d1a:	10c9      	asrs	r1, r1, #3
    2d1c:	5c53      	ldrb	r3, [r2, r1]
    2d1e:	4018      	ands	r0, r3
    2d20:	e005      	b.n	2d2e <uiTraceIsObjectExcluded+0xe2>
	}
	
	vTraceError("Invalid object class ID in uiTraceIsObjectExcluded!");
    2d22:	480a      	ldr	r0, [pc, #40]	; (2d4c <uiTraceIsObjectExcluded+0x100>)
    2d24:	4478      	add	r0, pc
    2d26:	4a05      	ldr	r2, [pc, #20]	; (2d3c <uiTraceIsObjectExcluded+0xf0>)
    2d28:	589a      	ldr	r2, [r3, r2]
    2d2a:	4790      	blx	r2
	
	/* Must never reach */
	return 1;
    2d2c:	2001      	movs	r0, #1
}
    2d2e:	b003      	add	sp, #12
    2d30:	bd00      	pop	{pc}
    2d32:	46c0      	nop			; (mov r8, r8)
    2d34:	000050d2 	.word	0x000050d2
    2d38:	00004c9e 	.word	0x00004c9e
    2d3c:	00000120 	.word	0x00000120
    2d40:	00000028 	.word	0x00000028
    2d44:	00004cc8 	.word	0x00004cc8
    2d48:	00000124 	.word	0x00000124
    2d4c:	00004c5c 	.word	0x00004c5c

00002d50 <writeInt32>:
	return i + 2;
}

/*** Locally used in vTracePrintF ***/
static uint8_t writeInt32(void * buffer, uint8_t i, uint32_t value)
{
    2d50:	b510      	push	{r4, lr}
    2d52:	b082      	sub	sp, #8
    2d54:	1c03      	adds	r3, r0, #0
    2d56:	4c13      	ldr	r4, [pc, #76]	; (2da4 <writeInt32+0x54>)
    2d58:	447c      	add	r4, pc
	TRACE_ASSERT(buffer != NULL, "writeInt32: buffer == NULL", 0);
    2d5a:	2800      	cmp	r0, #0
    2d5c:	d006      	beq.n	2d6c <writeInt32+0x1c>

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
    2d5e:	0788      	lsls	r0, r1, #30
    2d60:	d012      	beq.n	2d88 <writeInt32+0x38>
	{
		if (i >= MAX_ARG_SIZE)
    2d62:	2923      	cmp	r1, #35	; 0x23
    2d64:	d819      	bhi.n	2d9a <writeInt32+0x4a>
		{
			return 255;
		}

		((uint8_t*)buffer)[i] = 0;
    2d66:	2400      	movs	r4, #0
static uint8_t writeInt32(void * buffer, uint8_t i, uint32_t value)
{
	TRACE_ASSERT(buffer != NULL, "writeInt32: buffer == NULL", 0);

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
    2d68:	2003      	movs	r0, #3
    2d6a:	e008      	b.n	2d7e <writeInt32+0x2e>
}

/*** Locally used in vTracePrintF ***/
static uint8_t writeInt32(void * buffer, uint8_t i, uint32_t value)
{
	TRACE_ASSERT(buffer != NULL, "writeInt32: buffer == NULL", 0);
    2d6c:	480e      	ldr	r0, [pc, #56]	; (2da8 <writeInt32+0x58>)
    2d6e:	4478      	add	r0, pc
    2d70:	4b0e      	ldr	r3, [pc, #56]	; (2dac <writeInt32+0x5c>)
    2d72:	58e3      	ldr	r3, [r4, r3]
    2d74:	4798      	blx	r3
    2d76:	2000      	movs	r0, #0
    2d78:	e012      	b.n	2da0 <writeInt32+0x50>

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
	{
		if (i >= MAX_ARG_SIZE)
    2d7a:	2924      	cmp	r1, #36	; 0x24
    2d7c:	d00f      	beq.n	2d9e <writeInt32+0x4e>
		{
			return 255;
		}

		((uint8_t*)buffer)[i] = 0;
    2d7e:	545c      	strb	r4, [r3, r1]
		i++;
    2d80:	3101      	adds	r1, #1
    2d82:	b2c9      	uxtb	r1, r1
static uint8_t writeInt32(void * buffer, uint8_t i, uint32_t value)
{
	TRACE_ASSERT(buffer != NULL, "writeInt32: buffer == NULL", 0);

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
    2d84:	4208      	tst	r0, r1
    2d86:	d1f8      	bne.n	2d7a <writeInt32+0x2a>

		((uint8_t*)buffer)[i] = 0;
		i++;
	}

	if (i + 4 > MAX_ARG_SIZE)
    2d88:	1d0c      	adds	r4, r1, #4
	{
		return 255;
    2d8a:	20ff      	movs	r0, #255	; 0xff

		((uint8_t*)buffer)[i] = 0;
		i++;
	}

	if (i + 4 > MAX_ARG_SIZE)
    2d8c:	2c24      	cmp	r4, #36	; 0x24
    2d8e:	dc07      	bgt.n	2da0 <writeInt32+0x50>
	{
		return 255;
	}

	((uint32_t*)buffer)[i/4] = value;
    2d90:	0888      	lsrs	r0, r1, #2
    2d92:	0080      	lsls	r0, r0, #2
    2d94:	50c2      	str	r2, [r0, r3]

	return i + 4;
    2d96:	b2e0      	uxtb	r0, r4
    2d98:	e002      	b.n	2da0 <writeInt32+0x50>
	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
	{
		if (i >= MAX_ARG_SIZE)
		{
			return 255;
    2d9a:	20ff      	movs	r0, #255	; 0xff
    2d9c:	e000      	b.n	2da0 <writeInt32+0x50>
    2d9e:	20ff      	movs	r0, #255	; 0xff
	}

	((uint32_t*)buffer)[i/4] = value;

	return i + 4;
}
    2da0:	b002      	add	sp, #8
    2da2:	bd10      	pop	{r4, pc}
    2da4:	00004fcc 	.word	0x00004fcc
    2da8:	00004c46 	.word	0x00004c46
    2dac:	00000120 	.word	0x00000120

00002db0 <writeInt16>:
	return i + 1;
}

/*** Locally used in vTracePrintF ***/
static uint8_t writeInt16(void * buffer, uint8_t i, uint16_t value)
{
    2db0:	b510      	push	{r4, lr}
    2db2:	b082      	sub	sp, #8
    2db4:	1c03      	adds	r3, r0, #0
    2db6:	4c13      	ldr	r4, [pc, #76]	; (2e04 <writeInt16+0x54>)
    2db8:	447c      	add	r4, pc
	TRACE_ASSERT(buffer != NULL, "writeInt16: buffer == NULL", 0);
    2dba:	2800      	cmp	r0, #0
    2dbc:	d006      	beq.n	2dcc <writeInt16+0x1c>

	/* Align to multiple of 2 */
	while ((i % 2) != 0)
    2dbe:	07c8      	lsls	r0, r1, #31
    2dc0:	d512      	bpl.n	2de8 <writeInt16+0x38>
	{
		if (i >= MAX_ARG_SIZE)
    2dc2:	2923      	cmp	r1, #35	; 0x23
    2dc4:	d819      	bhi.n	2dfa <writeInt16+0x4a>
		{
			return 255;
		}

		((uint8_t*)buffer)[i] = 0;
    2dc6:	2400      	movs	r4, #0
static uint8_t writeInt16(void * buffer, uint8_t i, uint16_t value)
{
	TRACE_ASSERT(buffer != NULL, "writeInt16: buffer == NULL", 0);

	/* Align to multiple of 2 */
	while ((i % 2) != 0)
    2dc8:	2001      	movs	r0, #1
    2dca:	e008      	b.n	2dde <writeInt16+0x2e>
}

/*** Locally used in vTracePrintF ***/
static uint8_t writeInt16(void * buffer, uint8_t i, uint16_t value)
{
	TRACE_ASSERT(buffer != NULL, "writeInt16: buffer == NULL", 0);
    2dcc:	480e      	ldr	r0, [pc, #56]	; (2e08 <writeInt16+0x58>)
    2dce:	4478      	add	r0, pc
    2dd0:	4b0e      	ldr	r3, [pc, #56]	; (2e0c <writeInt16+0x5c>)
    2dd2:	58e3      	ldr	r3, [r4, r3]
    2dd4:	4798      	blx	r3
    2dd6:	2000      	movs	r0, #0
    2dd8:	e012      	b.n	2e00 <writeInt16+0x50>

	/* Align to multiple of 2 */
	while ((i % 2) != 0)
	{
		if (i >= MAX_ARG_SIZE)
    2dda:	2924      	cmp	r1, #36	; 0x24
    2ddc:	d00f      	beq.n	2dfe <writeInt16+0x4e>
		{
			return 255;
		}

		((uint8_t*)buffer)[i] = 0;
    2dde:	545c      	strb	r4, [r3, r1]
		i++;
    2de0:	3101      	adds	r1, #1
    2de2:	b2c9      	uxtb	r1, r1
static uint8_t writeInt16(void * buffer, uint8_t i, uint16_t value)
{
	TRACE_ASSERT(buffer != NULL, "writeInt16: buffer == NULL", 0);

	/* Align to multiple of 2 */
	while ((i % 2) != 0)
    2de4:	4208      	tst	r0, r1
    2de6:	d1f8      	bne.n	2dda <writeInt16+0x2a>

		((uint8_t*)buffer)[i] = 0;
		i++;
	}

	if (i + 2 > MAX_ARG_SIZE)
    2de8:	1c8c      	adds	r4, r1, #2
	{
		return 255;
    2dea:	20ff      	movs	r0, #255	; 0xff

		((uint8_t*)buffer)[i] = 0;
		i++;
	}

	if (i + 2 > MAX_ARG_SIZE)
    2dec:	2c24      	cmp	r4, #36	; 0x24
    2dee:	dc07      	bgt.n	2e00 <writeInt16+0x50>
	{
		return 255;
	}

	((uint16_t*)buffer)[i/2] = value;
    2df0:	0848      	lsrs	r0, r1, #1
    2df2:	0040      	lsls	r0, r0, #1
    2df4:	52c2      	strh	r2, [r0, r3]

	return i + 2;
    2df6:	b2e0      	uxtb	r0, r4
    2df8:	e002      	b.n	2e00 <writeInt16+0x50>
	/* Align to multiple of 2 */
	while ((i % 2) != 0)
	{
		if (i >= MAX_ARG_SIZE)
		{
			return 255;
    2dfa:	20ff      	movs	r0, #255	; 0xff
    2dfc:	e000      	b.n	2e00 <writeInt16+0x50>
    2dfe:	20ff      	movs	r0, #255	; 0xff
	}

	((uint16_t*)buffer)[i/2] = value;

	return i + 2;
}
    2e00:	b002      	add	sp, #8
    2e02:	bd10      	pop	{r4, pc}
    2e04:	00004f6c 	.word	0x00004f6c
    2e08:	00004c12 	.word	0x00004c12
    2e0c:	00000120 	.word	0x00000120

00002e10 <vTraceInitTraceData>:
 *
 * Allocates, if necessary, and initializes the recorder data structure, based
 * on the constants in trcConfig.h.
 ******************************************************************************/
void vTraceInitTraceData(void)
{
    2e10:	b500      	push	{lr}
    2e12:	b083      	sub	sp, #12
    2e14:	4b03      	ldr	r3, [pc, #12]	; (2e24 <vTraceInitTraceData+0x14>)
    2e16:	447b      	add	r3, pc
	prvTraceInitTraceData();
    2e18:	4a03      	ldr	r2, [pc, #12]	; (2e28 <vTraceInitTraceData+0x18>)
    2e1a:	589a      	ldr	r2, [r3, r2]
    2e1c:	9201      	str	r2, [sp, #4]
    2e1e:	4790      	blx	r2
}
    2e20:	b003      	add	sp, #12
    2e22:	bd00      	pop	{pc}
    2e24:	00004f0e 	.word	0x00004f0e
    2e28:	0000011c 	.word	0x0000011c

00002e2c <xTraceOpenLabel>:
 * therefore recommended for user events that are frequently
 * executed and/or located in time-critical code. The lookup operation is
 * however fairly fast due to the design of the symbol table.
 ******************************************************************************/
traceLabel xTraceOpenLabel(const char* label)
{
    2e2c:	b500      	push	{lr}
    2e2e:	b083      	sub	sp, #12
    2e30:	4b09      	ldr	r3, [pc, #36]	; (2e58 <xTraceOpenLabel+0x2c>)
    2e32:	447b      	add	r3, pc
	TRACE_ASSERT(label != NULL, "xTraceOpenLabel: label == NULL", (traceLabel)0);
    2e34:	2800      	cmp	r0, #0
    2e36:	d107      	bne.n	2e48 <xTraceOpenLabel+0x1c>
    2e38:	4808      	ldr	r0, [pc, #32]	; (2e5c <xTraceOpenLabel+0x30>)
    2e3a:	4478      	add	r0, pc
    2e3c:	4a08      	ldr	r2, [pc, #32]	; (2e60 <xTraceOpenLabel+0x34>)
    2e3e:	589a      	ldr	r2, [r3, r2]
    2e40:	9201      	str	r2, [sp, #4]
    2e42:	4790      	blx	r2
    2e44:	2000      	movs	r0, #0
    2e46:	e004      	b.n	2e52 <xTraceOpenLabel+0x26>

	return prvTraceOpenSymbol(label, 0);
    2e48:	2100      	movs	r1, #0
    2e4a:	4a06      	ldr	r2, [pc, #24]	; (2e64 <xTraceOpenLabel+0x38>)
    2e4c:	589a      	ldr	r2, [r3, r2]
    2e4e:	9201      	str	r2, [sp, #4]
    2e50:	4790      	blx	r2
}
    2e52:	b003      	add	sp, #12
    2e54:	bd00      	pop	{pc}
    2e56:	46c0      	nop			; (mov r8, r8)
    2e58:	00004ef2 	.word	0x00004ef2
    2e5c:	00004dde 	.word	0x00004dde
    2e60:	00000120 	.word	0x00000120
    2e64:	000000f0 	.word	0x000000f0

00002e68 <vTracePrintF_Helper>:
	va_end(vl);
#endif /* TRACE_SCHEDULING_ONLY */
}

void vTracePrintF_Helper(traceLabel eventLabel, const char* formatStr, va_list vl)
{
    2e68:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e6a:	465f      	mov	r7, fp
    2e6c:	4656      	mov	r6, sl
    2e6e:	464d      	mov	r5, r9
    2e70:	4644      	mov	r4, r8
    2e72:	b4f0      	push	{r4, r5, r6, r7}
    2e74:	b093      	sub	sp, #76	; 0x4c
    2e76:	9002      	str	r0, [sp, #8]
    2e78:	1c0d      	adds	r5, r1, #0
    2e7a:	1c14      	adds	r4, r2, #0
    2e7c:	4eb8      	ldr	r6, [pc, #736]	; (3160 <vTracePrintF_Helper+0x2f8>)
    2e7e:	447e      	add	r6, pc
	* global. That would cause data corruption when two calls to vTracePrintF
	* from different tasks overlaps (interrupts are only disabled in a small
	* part of this function, otherwise enabled)
	***************************************************************************/

	TRACE_ASSERT(formatStr != NULL, "vTracePrintF: formatStr == NULL", );
    2e80:	2900      	cmp	r1, #0
    2e82:	d105      	bne.n	2e90 <vTracePrintF_Helper+0x28>
    2e84:	48b7      	ldr	r0, [pc, #732]	; (3164 <vTracePrintF_Helper+0x2fc>)
    2e86:	4478      	add	r0, pc
    2e88:	4bb7      	ldr	r3, [pc, #732]	; (3168 <vTracePrintF_Helper+0x300>)
    2e8a:	58f3      	ldr	r3, [r6, r3]
    2e8c:	4798      	blx	r3
    2e8e:	e202      	b.n	3296 <vTracePrintF_Helper+0x42e>

	trcCRITICAL_SECTION_BEGIN();
    2e90:	4bb6      	ldr	r3, [pc, #728]	; (316c <vTracePrintF_Helper+0x304>)
    2e92:	58f3      	ldr	r3, [r6, r3]
    2e94:	4798      	blx	r3
    2e96:	4680      	mov	r8, r0
    2e98:	4bb5      	ldr	r3, [pc, #724]	; (3170 <vTracePrintF_Helper+0x308>)
    2e9a:	58f3      	ldr	r3, [r6, r3]
    2e9c:	681a      	ldr	r2, [r3, #0]
    2e9e:	3201      	adds	r2, #1
    2ea0:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->recorderActive && (! inExcludedTask || nISRactive) && handle_of_last_logged_task)
    2ea2:	4bb4      	ldr	r3, [pc, #720]	; (3174 <vTracePrintF_Helper+0x30c>)
    2ea4:	58f3      	ldr	r3, [r6, r3]
    2ea6:	681b      	ldr	r3, [r3, #0]
    2ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2eaa:	2b00      	cmp	r3, #0
    2eac:	d100      	bne.n	2eb0 <vTracePrintF_Helper+0x48>
    2eae:	e1e9      	b.n	3284 <vTracePrintF_Helper+0x41c>
    2eb0:	4bb1      	ldr	r3, [pc, #708]	; (3178 <vTracePrintF_Helper+0x310>)
    2eb2:	58f3      	ldr	r3, [r6, r3]
    2eb4:	9300      	str	r3, [sp, #0]
    2eb6:	781b      	ldrb	r3, [r3, #0]
    2eb8:	2b00      	cmp	r3, #0
    2eba:	d007      	beq.n	2ecc <vTracePrintF_Helper+0x64>
    2ebc:	4baf      	ldr	r3, [pc, #700]	; (317c <vTracePrintF_Helper+0x314>)
    2ebe:	58f3      	ldr	r3, [r6, r3]
    2ec0:	9300      	str	r3, [sp, #0]
    2ec2:	781b      	ldrb	r3, [r3, #0]
    2ec4:	b25b      	sxtb	r3, r3
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	d100      	bne.n	2ecc <vTracePrintF_Helper+0x64>
    2eca:	e1db      	b.n	3284 <vTracePrintF_Helper+0x41c>
    2ecc:	4bac      	ldr	r3, [pc, #688]	; (3180 <vTracePrintF_Helper+0x318>)
    2ece:	58f3      	ldr	r3, [r6, r3]
    2ed0:	9300      	str	r3, [sp, #0]
    2ed2:	781b      	ldrb	r3, [r3, #0]
    2ed4:	2b00      	cmp	r3, #0
    2ed6:	d100      	bne.n	2eda <vTracePrintF_Helper+0x72>
    2ed8:	e1d4      	b.n	3284 <vTracePrintF_Helper+0x41c>
		/* First, write the "primary" user event entry in the local buffer, but
		let the event type be "EVENT_BEING_WRITTEN" for now...*/

		ue1 = (UserEvent*)(&tempDataBuffer[0]);

		ue1->type = EVENT_BEING_WRITTEN;	 /* Update this as the last step */
    2eda:	22aa      	movs	r2, #170	; 0xaa
    2edc:	ab09      	add	r3, sp, #36	; 0x24
    2ede:	701a      	strb	r2, [r3, #0]
    2ee0:	46a2      	mov	sl, r4
 ******************************************************************************/
static uint8_t prvTraceUserEventFormat(const char* formatStr, va_list vl, uint8_t* buffer, uint8_t byteOffset)
{
	uint16_t formatStrIndex = 0;
	uint8_t argCounter = 0;
	uint8_t i = byteOffset;
    2ee2:	2704      	movs	r7, #4
 * Parses the format string and stores the arguments in the buffer.
 ******************************************************************************/
static uint8_t prvTraceUserEventFormat(const char* formatStr, va_list vl, uint8_t* buffer, uint8_t byteOffset)
{
	uint16_t formatStrIndex = 0;
	uint8_t argCounter = 0;
    2ee4:	2000      	movs	r0, #0
 *
 * Parses the format string and stores the arguments in the buffer.
 ******************************************************************************/
static uint8_t prvTraceUserEventFormat(const char* formatStr, va_list vl, uint8_t* buffer, uint8_t byteOffset)
{
	uint16_t formatStrIndex = 0;
    2ee6:	2400      	movs	r4, #0
	if (i >= MAX_ARG_SIZE)
	{
		return 255;
	}

	((uint8_t*)buffer)[i] = value;
    2ee8:	469b      	mov	fp, r3
								break;
					case 'h':
								formatStrIndex++;
								switch (formatStr[formatStrIndex])
								{
									case 'd':	i = writeInt16(	buffer,
    2eea:	4aa6      	ldr	r2, [pc, #664]	; (3184 <vTracePrintF_Helper+0x31c>)
    2eec:	447a      	add	r2, pc
    2eee:	9204      	str	r2, [sp, #16]
    2ef0:	1c33      	adds	r3, r6, #0
    2ef2:	1c06      	adds	r6, r0, #0
    2ef4:	4699      	mov	r9, r3
    2ef6:	e162      	b.n	31be <vTracePrintF_Helper+0x356>
	uint8_t argCounter = 0;
	uint8_t i = byteOffset;

	while (formatStr[formatStrIndex] != '\0')
	{
		if (formatStr[formatStrIndex] == '%')
    2ef8:	2b25      	cmp	r3, #37	; 0x25
    2efa:	d000      	beq.n	2efe <vTracePrintF_Helper+0x96>
    2efc:	e153      	b.n	31a6 <vTracePrintF_Helper+0x33e>
		{
			argCounter++;
    2efe:	3601      	adds	r6, #1
    2f00:	b2f6      	uxtb	r6, r6

			if (argCounter > 15)
    2f02:	2e0f      	cmp	r6, #15
    2f04:	d907      	bls.n	2f16 <vTracePrintF_Helper+0xae>
    2f06:	464e      	mov	r6, r9
			{
				vTraceError("vTracePrintF - Too many arguments, max 15 allowed!");
    2f08:	489f      	ldr	r0, [pc, #636]	; (3188 <vTracePrintF_Helper+0x320>)
    2f0a:	4478      	add	r0, pc
    2f0c:	4b96      	ldr	r3, [pc, #600]	; (3168 <vTracePrintF_Helper+0x300>)
    2f0e:	58f3      	ldr	r3, [r6, r3]
    2f10:	4798      	blx	r3
				return 0;
    2f12:	2700      	movs	r7, #0
    2f14:	e15e      	b.n	31d4 <vTracePrintF_Helper+0x36c>
			* the main event buffer using a fast memcpy. The event code is finalized as the
			* very last step. Before that step, the event code indicates an unfinished
			* event, which causes it to be ignored and stop the loading of the file (since
			* an unfinished event is the last event in the trace).
			*******************************************************************************/
			formatStrIndex++;
    2f16:	3401      	adds	r4, #1
    2f18:	b2a4      	uxth	r4, r4
    2f1a:	e001      	b.n	2f20 <vTracePrintF_Helper+0xb8>

			while ((formatStr[formatStrIndex] >= '0' && formatStr[formatStrIndex] <= '9') || formatStr[formatStrIndex] == '#' || formatStr[formatStrIndex] == '.')
				formatStrIndex++;
    2f1c:	3401      	adds	r4, #1
    2f1e:	b2a4      	uxth	r4, r4
			* event, which causes it to be ignored and stop the loading of the file (since
			* an unfinished event is the last event in the trace).
			*******************************************************************************/
			formatStrIndex++;

			while ((formatStr[formatStrIndex] >= '0' && formatStr[formatStrIndex] <= '9') || formatStr[formatStrIndex] == '#' || formatStr[formatStrIndex] == '.')
    2f20:	5d28      	ldrb	r0, [r5, r4]
    2f22:	1c03      	adds	r3, r0, #0
    2f24:	3b30      	subs	r3, #48	; 0x30
    2f26:	2b09      	cmp	r3, #9
    2f28:	d9f8      	bls.n	2f1c <vTracePrintF_Helper+0xb4>
    2f2a:	2823      	cmp	r0, #35	; 0x23
    2f2c:	d0f6      	beq.n	2f1c <vTracePrintF_Helper+0xb4>
    2f2e:	282e      	cmp	r0, #46	; 0x2e
    2f30:	d0f4      	beq.n	2f1c <vTracePrintF_Helper+0xb4>
    2f32:	1c23      	adds	r3, r4, #0
				formatStrIndex++;

			if (formatStr[formatStrIndex] != '\0')
    2f34:	2800      	cmp	r0, #0
    2f36:	d100      	bne.n	2f3a <vTracePrintF_Helper+0xd2>
    2f38:	e145      	b.n	31c6 <vTracePrintF_Helper+0x35e>
			{
				switch (formatStr[formatStrIndex])
    2f3a:	3858      	subs	r0, #88	; 0x58
    2f3c:	2820      	cmp	r0, #32
    2f3e:	d900      	bls.n	2f42 <vTracePrintF_Helper+0xda>
    2f40:	e131      	b.n	31a6 <vTracePrintF_Helper+0x33e>
    2f42:	f003 fa8f 	bl	6464 <__gnu_thumb1_case_uhi>
    2f46:	002f      	.short	0x002f
    2f48:	01300130 	.word	0x01300130
    2f4c:	01300130 	.word	0x01300130
    2f50:	01300130 	.word	0x01300130
    2f54:	01300130 	.word	0x01300130
    2f58:	00e30130 	.word	0x00e30130
    2f5c:	00210130 	.word	0x00210130
    2f60:	00500130 	.word	0x00500130
    2f64:	00c00130 	.word	0x00c00130
    2f68:	01300130 	.word	0x01300130
    2f6c:	00880130 	.word	0x00880130
    2f70:	01300130 	.word	0x01300130
    2f74:	01300130 	.word	0x01300130
    2f78:	01300130 	.word	0x01300130
    2f7c:	0130003d 	.word	0x0130003d
    2f80:	0130002f 	.word	0x0130002f
    2f84:	002f0130 	.word	0x002f0130
				{
					case 'd':	i = writeInt32(	buffer,
    2f88:	4653      	mov	r3, sl
    2f8a:	3304      	adds	r3, #4
    2f8c:	9300      	str	r3, [sp, #0]
    2f8e:	4650      	mov	r0, sl
    2f90:	6802      	ldr	r2, [r0, #0]
    2f92:	4658      	mov	r0, fp
    2f94:	1c39      	adds	r1, r7, #0
    2f96:	4b7d      	ldr	r3, [pc, #500]	; (318c <vTracePrintF_Helper+0x324>)
    2f98:	447b      	add	r3, pc
    2f9a:	4798      	blx	r3
    2f9c:	1c07      	adds	r7, r0, #0
    2f9e:	9900      	ldr	r1, [sp, #0]
    2fa0:	468a      	mov	sl, r1
    2fa2:	e100      	b.n	31a6 <vTracePrintF_Helper+0x33e>
												i,
												(uint32_t)va_arg(vl, uint32_t));
								break;
					case 'x':
					case 'X':
					case 'u':	i = writeInt32(	buffer,
    2fa4:	4652      	mov	r2, sl
    2fa6:	3204      	adds	r2, #4
    2fa8:	9200      	str	r2, [sp, #0]
    2faa:	4653      	mov	r3, sl
    2fac:	681a      	ldr	r2, [r3, #0]
    2fae:	4658      	mov	r0, fp
    2fb0:	1c39      	adds	r1, r7, #0
    2fb2:	4b77      	ldr	r3, [pc, #476]	; (3190 <vTracePrintF_Helper+0x328>)
    2fb4:	447b      	add	r3, pc
    2fb6:	4798      	blx	r3
    2fb8:	1c07      	adds	r7, r0, #0
    2fba:	9800      	ldr	r0, [sp, #0]
    2fbc:	4682      	mov	sl, r0
    2fbe:	e0f2      	b.n	31a6 <vTracePrintF_Helper+0x33e>
												i,
												(uint32_t)va_arg(vl, uint32_t));
								break;
					case 's':	i = writeInt16(	buffer,
    2fc0:	4651      	mov	r1, sl
    2fc2:	3104      	adds	r1, #4
    2fc4:	9100      	str	r1, [sp, #0]
    2fc6:	4652      	mov	r2, sl
    2fc8:	6810      	ldr	r0, [r2, #0]
    2fca:	4b72      	ldr	r3, [pc, #456]	; (3194 <vTracePrintF_Helper+0x32c>)
    2fcc:	4649      	mov	r1, r9
    2fce:	58cb      	ldr	r3, [r1, r3]
    2fd0:	4798      	blx	r3
    2fd2:	1c02      	adds	r2, r0, #0
    2fd4:	4658      	mov	r0, fp
    2fd6:	1c39      	adds	r1, r7, #0
    2fd8:	4b6f      	ldr	r3, [pc, #444]	; (3198 <vTracePrintF_Helper+0x330>)
    2fda:	447b      	add	r3, pc
    2fdc:	4798      	blx	r3
    2fde:	1c07      	adds	r7, r0, #0
    2fe0:	9a00      	ldr	r2, [sp, #0]
    2fe2:	4692      	mov	sl, r2
    2fe4:	e0df      	b.n	31a6 <vTracePrintF_Helper+0x33e>
					/* Yes, "double" as type also in the float
					case. This since "float" is promoted into "double"
					by the va_arg stuff. */
					case 'f':	i = writeFloat(	buffer,
												i,
												(float)va_arg(vl, double));
    2fe6:	4653      	mov	r3, sl
    2fe8:	3307      	adds	r3, #7
    2fea:	2207      	movs	r2, #7
    2fec:	4393      	bics	r3, r2
    2fee:	2008      	movs	r0, #8
    2ff0:	18c0      	adds	r0, r0, r3
    2ff2:	4682      	mov	sl, r0
    2ff4:	6819      	ldr	r1, [r3, #0]
    2ff6:	685a      	ldr	r2, [r3, #4]
    2ff8:	9100      	str	r1, [sp, #0]
    2ffa:	9201      	str	r2, [sp, #4]
static uint8_t writeFloat(void * buffer, uint8_t i, float value)
{
	TRACE_ASSERT(buffer != NULL, "writeFloat: buffer == NULL", 0);

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
    2ffc:	07ba      	lsls	r2, r7, #30
    2ffe:	d00e      	beq.n	301e <vTracePrintF_Helper+0x1b6>
	{
		if (i >= MAX_ARG_SIZE)
    3000:	2f23      	cmp	r7, #35	; 0x23
    3002:	d821      	bhi.n	3048 <vTracePrintF_Helper+0x1e0>
		{
			return 255;
		}

		((uint8_t*)buffer)[i] = 0;
    3004:	2200      	movs	r2, #0
static uint8_t writeFloat(void * buffer, uint8_t i, float value)
{
	TRACE_ASSERT(buffer != NULL, "writeFloat: buffer == NULL", 0);

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
    3006:	2303      	movs	r3, #3
    3008:	4658      	mov	r0, fp
    300a:	e001      	b.n	3010 <vTracePrintF_Helper+0x1a8>
	{
		if (i >= MAX_ARG_SIZE)
    300c:	2f24      	cmp	r7, #36	; 0x24
    300e:	d01d      	beq.n	304c <vTracePrintF_Helper+0x1e4>
		{
			return 255;
		}

		((uint8_t*)buffer)[i] = 0;
    3010:	19c1      	adds	r1, r0, r7
    3012:	700a      	strb	r2, [r1, #0]
		i++;
    3014:	3701      	adds	r7, #1
    3016:	b2ff      	uxtb	r7, r7
static uint8_t writeFloat(void * buffer, uint8_t i, float value)
{
	TRACE_ASSERT(buffer != NULL, "writeFloat: buffer == NULL", 0);

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
    3018:	423b      	tst	r3, r7
    301a:	d1f7      	bne.n	300c <vTracePrintF_Helper+0x1a4>
    301c:	4683      	mov	fp, r0

		((uint8_t*)buffer)[i] = 0;
		i++;
	}

	if (i + 4 > MAX_ARG_SIZE)
    301e:	1d3b      	adds	r3, r7, #4
    3020:	2b24      	cmp	r3, #36	; 0x24
    3022:	dc16      	bgt.n	3052 <vTracePrintF_Helper+0x1ea>
	{
		return 255;
	}

	((float*)buffer)[i/4] = value;
    3024:	23ff      	movs	r3, #255	; 0xff
    3026:	009b      	lsls	r3, r3, #2
    3028:	403b      	ands	r3, r7
    302a:	a812      	add	r0, sp, #72	; 0x48
    302c:	18c3      	adds	r3, r0, r3
    302e:	3b24      	subs	r3, #36	; 0x24
    3030:	9303      	str	r3, [sp, #12]

#if (INCLUDE_FLOAT_SUPPORT)
					/* Yes, "double" as type also in the float
					case. This since "float" is promoted into "double"
					by the va_arg stuff. */
					case 'f':	i = writeFloat(	buffer,
    3032:	4b5a      	ldr	r3, [pc, #360]	; (319c <vTracePrintF_Helper+0x334>)
    3034:	4649      	mov	r1, r9
    3036:	58cb      	ldr	r3, [r1, r3]
    3038:	9800      	ldr	r0, [sp, #0]
    303a:	9901      	ldr	r1, [sp, #4]
    303c:	4798      	blx	r3
    303e:	9a03      	ldr	r2, [sp, #12]
    3040:	6010      	str	r0, [r2, #0]
		return 255;
	}

	((float*)buffer)[i/4] = value;

	return i + 4;
    3042:	3704      	adds	r7, #4
    3044:	b2ff      	uxtb	r7, r7
    3046:	e0ae      	b.n	31a6 <vTracePrintF_Helper+0x33e>
	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
	{
		if (i >= MAX_ARG_SIZE)
		{
			return 255;
    3048:	27ff      	movs	r7, #255	; 0xff
    304a:	e0ac      	b.n	31a6 <vTracePrintF_Helper+0x33e>
    304c:	4683      	mov	fp, r0
    304e:	27ff      	movs	r7, #255	; 0xff
    3050:	e0a9      	b.n	31a6 <vTracePrintF_Helper+0x33e>
		i++;
	}

	if (i + 4 > MAX_ARG_SIZE)
	{
		return 255;
    3052:	27ff      	movs	r7, #255	; 0xff
    3054:	e0a7      	b.n	31a6 <vTracePrintF_Helper+0x33e>
												i,
												(uint32_t)va_arg(vl, double));
								break;
#endif
					case 'l':
								formatStrIndex++;
    3056:	3301      	adds	r3, #1
    3058:	b29c      	uxth	r4, r3
								switch (formatStr[formatStrIndex])
    305a:	5d2b      	ldrb	r3, [r5, r4]
    305c:	2b66      	cmp	r3, #102	; 0x66
    305e:	d000      	beq.n	3062 <vTracePrintF_Helper+0x1fa>
    3060:	e0a1      	b.n	31a6 <vTracePrintF_Helper+0x33e>
								{
#if (INCLUDE_FLOAT_SUPPORT)
									case 'f':	i = writeDouble(buffer,
    3062:	4653      	mov	r3, sl
    3064:	3307      	adds	r3, #7
    3066:	2207      	movs	r2, #7
    3068:	4393      	bics	r3, r2
    306a:	2008      	movs	r0, #8
    306c:	18c0      	adds	r0, r0, r3
    306e:	4682      	mov	sl, r0
    3070:	6819      	ldr	r1, [r3, #0]
    3072:	685a      	ldr	r2, [r3, #4]
    3074:	9106      	str	r1, [sp, #24]
    3076:	9207      	str	r2, [sp, #28]

	TRACE_ASSERT(buffer != NULL, "writeDouble: buffer == NULL", 0);

	/* The double is written as two 32 bit values, and should begin at an even
	4-byte address (to avoid having to align with 8 byte) */
	while (i % 4 != 0)
    3078:	07ba      	lsls	r2, r7, #30
    307a:	d00e      	beq.n	309a <vTracePrintF_Helper+0x232>
	{
		if (i >= MAX_ARG_SIZE)
    307c:	2f23      	cmp	r7, #35	; 0x23
    307e:	d81b      	bhi.n	30b8 <vTracePrintF_Helper+0x250>
		{
			return 255;
		}

		((uint8_t*)buffer)[i] = 0;
    3080:	2100      	movs	r1, #0

	TRACE_ASSERT(buffer != NULL, "writeDouble: buffer == NULL", 0);

	/* The double is written as two 32 bit values, and should begin at an even
	4-byte address (to avoid having to align with 8 byte) */
	while (i % 4 != 0)
    3082:	2203      	movs	r2, #3
    3084:	4658      	mov	r0, fp
    3086:	e001      	b.n	308c <vTracePrintF_Helper+0x224>
	{
		if (i >= MAX_ARG_SIZE)
    3088:	2f24      	cmp	r7, #36	; 0x24
    308a:	d017      	beq.n	30bc <vTracePrintF_Helper+0x254>
		{
			return 255;
		}

		((uint8_t*)buffer)[i] = 0;
    308c:	19c3      	adds	r3, r0, r7
    308e:	7019      	strb	r1, [r3, #0]
		i++;
    3090:	3701      	adds	r7, #1
    3092:	b2ff      	uxtb	r7, r7

	TRACE_ASSERT(buffer != NULL, "writeDouble: buffer == NULL", 0);

	/* The double is written as two 32 bit values, and should begin at an even
	4-byte address (to avoid having to align with 8 byte) */
	while (i % 4 != 0)
    3094:	423a      	tst	r2, r7
    3096:	d1f7      	bne.n	3088 <vTracePrintF_Helper+0x220>
    3098:	4683      	mov	fp, r0

		((uint8_t*)buffer)[i] = 0;
		i++;
	}

	if (i + 8 > MAX_ARG_SIZE)
    309a:	1c3b      	adds	r3, r7, #0
    309c:	3308      	adds	r3, #8
    309e:	2b24      	cmp	r3, #36	; 0x24
    30a0:	dc0f      	bgt.n	30c2 <vTracePrintF_Helper+0x25a>
	{
		return 255;
	}

	dest = &(((uint32_t *)buffer)[i/4]);
    30a2:	23ff      	movs	r3, #255	; 0xff
    30a4:	009b      	lsls	r3, r3, #2
    30a6:	403b      	ands	r3, r7
    30a8:	445b      	add	r3, fp

	dest[0] = src[0];
    30aa:	9806      	ldr	r0, [sp, #24]
    30ac:	6018      	str	r0, [r3, #0]
	dest[1] = src[1];
    30ae:	9907      	ldr	r1, [sp, #28]
    30b0:	6059      	str	r1, [r3, #4]

	return i + 8;
    30b2:	3708      	adds	r7, #8
    30b4:	b2ff      	uxtb	r7, r7
    30b6:	e076      	b.n	31a6 <vTracePrintF_Helper+0x33e>
	4-byte address (to avoid having to align with 8 byte) */
	while (i % 4 != 0)
	{
		if (i >= MAX_ARG_SIZE)
		{
			return 255;
    30b8:	27ff      	movs	r7, #255	; 0xff
    30ba:	e074      	b.n	31a6 <vTracePrintF_Helper+0x33e>
    30bc:	4683      	mov	fp, r0
    30be:	27ff      	movs	r7, #255	; 0xff
    30c0:	e071      	b.n	31a6 <vTracePrintF_Helper+0x33e>
		i++;
	}

	if (i + 8 > MAX_ARG_SIZE)
	{
		return 255;
    30c2:	27ff      	movs	r7, #255	; 0xff
    30c4:	e06f      	b.n	31a6 <vTracePrintF_Helper+0x33e>
#endif

								}
								break;
					case 'h':
								formatStrIndex++;
    30c6:	3301      	adds	r3, #1
    30c8:	b29c      	uxth	r4, r3
								switch (formatStr[formatStrIndex])
    30ca:	5d2b      	ldrb	r3, [r5, r4]
    30cc:	2b64      	cmp	r3, #100	; 0x64
    30ce:	d002      	beq.n	30d6 <vTracePrintF_Helper+0x26e>
    30d0:	2b75      	cmp	r3, #117	; 0x75
    30d2:	d00d      	beq.n	30f0 <vTracePrintF_Helper+0x288>
    30d4:	e067      	b.n	31a6 <vTracePrintF_Helper+0x33e>
								{
									case 'd':	i = writeInt16(	buffer,
																i,
																(uint16_t)va_arg(vl, uint32_t));
    30d6:	4652      	mov	r2, sl
    30d8:	3204      	adds	r2, #4
    30da:	9200      	str	r2, [sp, #0]
								break;
					case 'h':
								formatStrIndex++;
								switch (formatStr[formatStrIndex])
								{
									case 'd':	i = writeInt16(	buffer,
    30dc:	4653      	mov	r3, sl
    30de:	881a      	ldrh	r2, [r3, #0]
    30e0:	4658      	mov	r0, fp
    30e2:	1c39      	adds	r1, r7, #0
    30e4:	9b04      	ldr	r3, [sp, #16]
    30e6:	4798      	blx	r3
    30e8:	1c07      	adds	r7, r0, #0
																i,
																(uint16_t)va_arg(vl, uint32_t));
    30ea:	9800      	ldr	r0, [sp, #0]
    30ec:	4682      	mov	sl, r0
    30ee:	e05a      	b.n	31a6 <vTracePrintF_Helper+0x33e>
												break;
									case 'u':	i = writeInt16(	buffer,
																i,
																(uint16_t)va_arg(vl, uint32_t));
    30f0:	4651      	mov	r1, sl
    30f2:	3104      	adds	r1, #4
    30f4:	9100      	str	r1, [sp, #0]
								{
									case 'd':	i = writeInt16(	buffer,
																i,
																(uint16_t)va_arg(vl, uint32_t));
												break;
									case 'u':	i = writeInt16(	buffer,
    30f6:	4653      	mov	r3, sl
    30f8:	881a      	ldrh	r2, [r3, #0]
    30fa:	4658      	mov	r0, fp
    30fc:	1c39      	adds	r1, r7, #0
    30fe:	4b28      	ldr	r3, [pc, #160]	; (31a0 <vTracePrintF_Helper+0x338>)
    3100:	447b      	add	r3, pc
    3102:	4798      	blx	r3
    3104:	1c07      	adds	r7, r0, #0
																i,
																(uint16_t)va_arg(vl, uint32_t));
    3106:	9800      	ldr	r0, [sp, #0]
    3108:	4682      	mov	sl, r0
    310a:	e04c      	b.n	31a6 <vTracePrintF_Helper+0x33e>
												break;
								}
								break;
					case 'b':
								formatStrIndex++;
    310c:	3301      	adds	r3, #1
    310e:	b29c      	uxth	r4, r3
								switch (formatStr[formatStrIndex])
    3110:	5d2b      	ldrb	r3, [r5, r4]
    3112:	2b64      	cmp	r3, #100	; 0x64
    3114:	d002      	beq.n	311c <vTracePrintF_Helper+0x2b4>
    3116:	2b75      	cmp	r3, #117	; 0x75
    3118:	d012      	beq.n	3140 <vTracePrintF_Helper+0x2d8>
    311a:	e044      	b.n	31a6 <vTracePrintF_Helper+0x33e>
								{
									case 'd':	i = writeInt8(	buffer,
																i,
																(uint8_t)va_arg(vl, uint32_t));
    311c:	4653      	mov	r3, sl
    311e:	3304      	adds	r3, #4
    3120:	4651      	mov	r1, sl
    3122:	680a      	ldr	r2, [r1, #0]
/*** Locally used in vTracePrintF ***/
static uint8_t writeInt8(void * buffer, uint8_t i, uint8_t value)
{
	TRACE_ASSERT(buffer != NULL, "writeInt8: buffer == NULL", 0);

	if (i >= MAX_ARG_SIZE)
    3124:	2f23      	cmp	r7, #35	; 0x23
    3126:	d807      	bhi.n	3138 <vTracePrintF_Helper+0x2d0>
								break;
					case 'b':
								formatStrIndex++;
								switch (formatStr[formatStrIndex])
								{
									case 'd':	i = writeInt8(	buffer,
    3128:	4658      	mov	r0, fp
    312a:	55c2      	strb	r2, [r0, r7]
		return 255;
	}

	((uint8_t*)buffer)[i] = value;

	if (i + 1 > MAX_ARG_SIZE)
    312c:	1c7a      	adds	r2, r7, #1
	{
		return 255;
    312e:	27ff      	movs	r7, #255	; 0xff
		return 255;
	}

	((uint8_t*)buffer)[i] = value;

	if (i + 1 > MAX_ARG_SIZE)
    3130:	2a24      	cmp	r2, #36	; 0x24
    3132:	dc03      	bgt.n	313c <vTracePrintF_Helper+0x2d4>
	{
		return 255;
	}

	return i + 1;
    3134:	b2d7      	uxtb	r7, r2
    3136:	e001      	b.n	313c <vTracePrintF_Helper+0x2d4>
{
	TRACE_ASSERT(buffer != NULL, "writeInt8: buffer == NULL", 0);

	if (i >= MAX_ARG_SIZE)
	{
		return 255;
    3138:	27ff      	movs	r7, #255	; 0xff
    313a:	e7ff      	b.n	313c <vTracePrintF_Helper+0x2d4>
								formatStrIndex++;
								switch (formatStr[formatStrIndex])
								{
									case 'd':	i = writeInt8(	buffer,
																i,
																(uint8_t)va_arg(vl, uint32_t));
    313c:	469a      	mov	sl, r3
    313e:	e032      	b.n	31a6 <vTracePrintF_Helper+0x33e>
												break;

									case 'u':	i = writeInt8(	buffer,
																i,
																(uint8_t)va_arg(vl, uint32_t));
    3140:	4653      	mov	r3, sl
    3142:	3304      	adds	r3, #4
    3144:	4651      	mov	r1, sl
    3146:	680a      	ldr	r2, [r1, #0]
/*** Locally used in vTracePrintF ***/
static uint8_t writeInt8(void * buffer, uint8_t i, uint8_t value)
{
	TRACE_ASSERT(buffer != NULL, "writeInt8: buffer == NULL", 0);

	if (i >= MAX_ARG_SIZE)
    3148:	2f23      	cmp	r7, #35	; 0x23
    314a:	d807      	bhi.n	315c <vTracePrintF_Helper+0x2f4>
									case 'd':	i = writeInt8(	buffer,
																i,
																(uint8_t)va_arg(vl, uint32_t));
												break;

									case 'u':	i = writeInt8(	buffer,
    314c:	4658      	mov	r0, fp
    314e:	55c2      	strb	r2, [r0, r7]
		return 255;
	}

	((uint8_t*)buffer)[i] = value;

	if (i + 1 > MAX_ARG_SIZE)
    3150:	1c7a      	adds	r2, r7, #1
	{
		return 255;
    3152:	27ff      	movs	r7, #255	; 0xff
		return 255;
	}

	((uint8_t*)buffer)[i] = value;

	if (i + 1 > MAX_ARG_SIZE)
    3154:	2a24      	cmp	r2, #36	; 0x24
    3156:	dc25      	bgt.n	31a4 <vTracePrintF_Helper+0x33c>
	{
		return 255;
	}

	return i + 1;
    3158:	b2d7      	uxtb	r7, r2
    315a:	e023      	b.n	31a4 <vTracePrintF_Helper+0x33c>
{
	TRACE_ASSERT(buffer != NULL, "writeInt8: buffer == NULL", 0);

	if (i >= MAX_ARG_SIZE)
	{
		return 255;
    315c:	27ff      	movs	r7, #255	; 0xff
    315e:	e021      	b.n	31a4 <vTracePrintF_Helper+0x33c>
    3160:	00004ea6 	.word	0x00004ea6
    3164:	00004dc2 	.word	0x00004dc2
    3168:	00000120 	.word	0x00000120
    316c:	00000274 	.word	0x00000274
    3170:	000002c4 	.word	0x000002c4
    3174:	00000028 	.word	0x00000028
    3178:	00000230 	.word	0x00000230
    317c:	000002c8 	.word	0x000002c8
    3180:	0000002c 	.word	0x0000002c
    3184:	fffffec1 	.word	0xfffffec1
    3188:	00004d6e 	.word	0x00004d6e
    318c:	fffffdb5 	.word	0xfffffdb5
    3190:	fffffd99 	.word	0xfffffd99
    3194:	00000144 	.word	0x00000144
    3198:	fffffdd3 	.word	0xfffffdd3
    319c:	000000fc 	.word	0x000000fc
    31a0:	fffffcad 	.word	0xfffffcad
																(uint8_t)va_arg(vl, uint32_t));
												break;

									case 'u':	i = writeInt8(	buffer,
																i,
																(uint8_t)va_arg(vl, uint32_t));
    31a4:	469a      	mov	sl, r3
				}
			}
			else
				break;
		}
		formatStrIndex++;
    31a6:	3401      	adds	r4, #1
    31a8:	b2a4      	uxth	r4, r4
		if (i == 255)
    31aa:	2fff      	cmp	r7, #255	; 0xff
    31ac:	d107      	bne.n	31be <vTracePrintF_Helper+0x356>
    31ae:	464e      	mov	r6, r9
		{
			vTraceError("vTracePrintF - Too large arguments, max 32 byte allowed!");
    31b0:	483c      	ldr	r0, [pc, #240]	; (32a4 <vTracePrintF_Helper+0x43c>)
    31b2:	4478      	add	r0, pc
    31b4:	4b3c      	ldr	r3, [pc, #240]	; (32a8 <vTracePrintF_Helper+0x440>)
    31b6:	58f3      	ldr	r3, [r6, r3]
    31b8:	4798      	blx	r3
			return 0;
    31ba:	2700      	movs	r7, #0
    31bc:	e00a      	b.n	31d4 <vTracePrintF_Helper+0x36c>
{
	uint16_t formatStrIndex = 0;
	uint8_t argCounter = 0;
	uint8_t i = byteOffset;

	while (formatStr[formatStrIndex] != '\0')
    31be:	5d2b      	ldrb	r3, [r5, r4]
    31c0:	2b00      	cmp	r3, #0
    31c2:	d000      	beq.n	31c6 <vTracePrintF_Helper+0x35e>
    31c4:	e698      	b.n	2ef8 <vTracePrintF_Helper+0x90>
    31c6:	464e      	mov	r6, r9
		{
			vTraceError("vTracePrintF - Too large arguments, max 32 byte allowed!");
			return 0;
		}
	}
	return (i+3)/4;
    31c8:	3703      	adds	r7, #3
    31ca:	17fb      	asrs	r3, r7, #31
    31cc:	0f9b      	lsrs	r3, r3, #30
    31ce:	19df      	adds	r7, r3, r7
    31d0:	10bf      	asrs	r7, r7, #2
    31d2:	b2ff      	uxtb	r7, r7
		ue1->type = EVENT_BEING_WRITTEN;	 /* Update this as the last step */

		noOfSlots = prvTraceUserEventFormat(formatStr, vl, (uint8_t*)tempDataBuffer, 4);

		/* Store the format string, with a reference to the channel symbol */
		ue1->payload = prvTraceOpenSymbol(formatStr, eventLabel);
    31d4:	1c28      	adds	r0, r5, #0
    31d6:	9902      	ldr	r1, [sp, #8]
    31d8:	4b34      	ldr	r3, [pc, #208]	; (32ac <vTracePrintF_Helper+0x444>)
    31da:	58f3      	ldr	r3, [r6, r3]
    31dc:	4798      	blx	r3
    31de:	ac09      	add	r4, sp, #36	; 0x24
    31e0:	8060      	strh	r0, [r4, #2]

		ue1->dts = (uint8_t)prvTraceGetDTS(0xFF);
    31e2:	20ff      	movs	r0, #255	; 0xff
    31e4:	4b32      	ldr	r3, [pc, #200]	; (32b0 <vTracePrintF_Helper+0x448>)
    31e6:	58f3      	ldr	r3, [r6, r3]
    31e8:	4798      	blx	r3
    31ea:	7060      	strb	r0, [r4, #1]

		 /* prvTraceGetDTS might stop the recorder in some cases... */
		if (RecorderDataPtr->recorderActive)
    31ec:	4b31      	ldr	r3, [pc, #196]	; (32b4 <vTracePrintF_Helper+0x44c>)
    31ee:	58f3      	ldr	r3, [r6, r3]
    31f0:	681b      	ldr	r3, [r3, #0]
    31f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
    31f4:	2900      	cmp	r1, #0
    31f6:	d045      	beq.n	3284 <vTracePrintF_Helper+0x41c>

		ue1 = (UserEvent*)(&tempDataBuffer[0]);

		ue1->type = EVENT_BEING_WRITTEN;	 /* Update this as the last step */

		noOfSlots = prvTraceUserEventFormat(formatStr, vl, (uint8_t*)tempDataBuffer, 4);
    31f8:	1c3c      	adds	r4, r7, #0
		if (RecorderDataPtr->recorderActive)
		{

			/* If the data does not fit in the remaining main buffer, wrap around to
			0 if allowed, otherwise stop the recorder and quit). */
			if (RecorderDataPtr->nextFreeIndex + noOfSlots > RecorderDataPtr->maxEvents)
    31fa:	69d9      	ldr	r1, [r3, #28]
    31fc:	699a      	ldr	r2, [r3, #24]
    31fe:	1878      	adds	r0, r7, r1
    3200:	4290      	cmp	r0, r2
    3202:	d914      	bls.n	322e <vTracePrintF_Helper+0x3c6>
			{
				#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
				(void)memset(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
						0,
						(RecorderDataPtr->maxEvents - RecorderDataPtr->nextFreeIndex)*4);
    3204:	1a52      	subs	r2, r2, r1
    3206:	0092      	lsls	r2, r2, #2
			/* If the data does not fit in the remaining main buffer, wrap around to
			0 if allowed, otherwise stop the recorder and quit). */
			if (RecorderDataPtr->nextFreeIndex + noOfSlots > RecorderDataPtr->maxEvents)
			{
				#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
				(void)memset(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
    3208:	0088      	lsls	r0, r1, #2
    320a:	2183      	movs	r1, #131	; 0x83
    320c:	0109      	lsls	r1, r1, #4
    320e:	1840      	adds	r0, r0, r1
    3210:	1818      	adds	r0, r3, r0
    3212:	2100      	movs	r1, #0
    3214:	4b28      	ldr	r3, [pc, #160]	; (32b8 <vTracePrintF_Helper+0x450>)
    3216:	58f3      	ldr	r3, [r6, r3]
    3218:	4798      	blx	r3
						0,
						(RecorderDataPtr->maxEvents - RecorderDataPtr->nextFreeIndex)*4);
				RecorderDataPtr->nextFreeIndex = 0;
    321a:	4b26      	ldr	r3, [pc, #152]	; (32b4 <vTracePrintF_Helper+0x44c>)
    321c:	58f3      	ldr	r3, [r6, r3]
    321e:	681b      	ldr	r3, [r3, #0]
    3220:	2200      	movs	r2, #0
    3222:	61da      	str	r2, [r3, #28]
				RecorderDataPtr->bufferIsFull = 1;
    3224:	2201      	movs	r2, #1
    3226:	621a      	str	r2, [r3, #32]
				vTraceStop();
				#endif
			}

			/* Check if recorder has been stopped (i.e., vTraceStop above) */
			if (RecorderDataPtr->recorderActive)
    3228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    322a:	2b00      	cmp	r3, #0
    322c:	d026      	beq.n	327c <vTracePrintF_Helper+0x414>
				/* Check that the buffer to be overwritten does not contain any user
				events that would be partially overwritten. If so, they must be "killed"
				by replacing the user event and following data with NULL events (i.e.,
				using a memset to zero).*/
				#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
				prvCheckDataToBeOverwrittenForMultiEntryEvents((uint8_t)noOfSlots);
    322e:	1c38      	adds	r0, r7, #0
    3230:	4b22      	ldr	r3, [pc, #136]	; (32bc <vTracePrintF_Helper+0x454>)
    3232:	58f3      	ldr	r3, [r6, r3]
    3234:	4798      	blx	r3
				#endif
				/* Copy the local buffer to the main buffer */
				(void)memcpy(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
    3236:	4b1f      	ldr	r3, [pc, #124]	; (32b4 <vTracePrintF_Helper+0x44c>)
    3238:	58f5      	ldr	r5, [r6, r3]
    323a:	682b      	ldr	r3, [r5, #0]
    323c:	69da      	ldr	r2, [r3, #28]
    323e:	0090      	lsls	r0, r2, #2
    3240:	2183      	movs	r1, #131	; 0x83
    3242:	0109      	lsls	r1, r1, #4
    3244:	1840      	adds	r0, r0, r1
    3246:	1818      	adds	r0, r3, r0
						tempDataBuffer,
						noOfSlots * 4);
    3248:	00a2      	lsls	r2, r4, #2
				using a memset to zero).*/
				#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
				prvCheckDataToBeOverwrittenForMultiEntryEvents((uint8_t)noOfSlots);
				#endif
				/* Copy the local buffer to the main buffer */
				(void)memcpy(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
    324a:	a909      	add	r1, sp, #36	; 0x24
    324c:	4b1c      	ldr	r3, [pc, #112]	; (32c0 <vTracePrintF_Helper+0x458>)
    324e:	58f3      	ldr	r3, [r6, r3]
    3250:	4798      	blx	r3
						noOfSlots * 4);

				/* Update the event type, i.e., number of data entries following the
				main USER_EVENT entry (Note: important that this is after the memcpy,
				but within the critical section!)*/
				RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4] =
    3252:	682b      	ldr	r3, [r5, #0]
    3254:	69da      	ldr	r2, [r3, #28]
    3256:	0091      	lsls	r1, r2, #2
    3258:	1859      	adds	r1, r3, r1
    325a:	2083      	movs	r0, #131	; 0x83
    325c:	0100      	lsls	r0, r0, #4
    325e:	1809      	adds	r1, r1, r0
				 (uint8_t) ( USER_EVENT + noOfSlots - 1 );
    3260:	3f69      	subs	r7, #105	; 0x69
						noOfSlots * 4);

				/* Update the event type, i.e., number of data entries following the
				main USER_EVENT entry (Note: important that this is after the memcpy,
				but within the critical section!)*/
				RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4] =
    3262:	700f      	strb	r7, [r1, #0]
				 (uint8_t) ( USER_EVENT + noOfSlots - 1 );

				/* Update the main buffer event index (already checked that it fits in
				the buffer, so no need to check for wrapping)*/

				RecorderDataPtr->nextFreeIndex += noOfSlots;
    3264:	18a2      	adds	r2, r4, r2
    3266:	61da      	str	r2, [r3, #28]
				RecorderDataPtr->numEvents += noOfSlots;
    3268:	6959      	ldr	r1, [r3, #20]
    326a:	190c      	adds	r4, r1, r4
    326c:	615c      	str	r4, [r3, #20]

				if (RecorderDataPtr->nextFreeIndex >= EVENT_BUFFER_SIZE)
    326e:	4915      	ldr	r1, [pc, #84]	; (32c4 <vTracePrintF_Helper+0x45c>)
    3270:	428a      	cmp	r2, r1
    3272:	d903      	bls.n	327c <vTracePrintF_Helper+0x414>
				{
					#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
					/* We have reached the end, but this is a ring buffer. Start from the beginning again. */
					RecorderDataPtr->bufferIsFull = 1;
    3274:	2201      	movs	r2, #1
    3276:	621a      	str	r2, [r3, #32]
					RecorderDataPtr->nextFreeIndex = 0;
    3278:	2200      	movs	r2, #0
    327a:	61da      	str	r2, [r3, #28]
				}
			}

			#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
			/* Make sure the next entry is cleared correctly */
			prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
    327c:	2001      	movs	r0, #1
    327e:	4b0f      	ldr	r3, [pc, #60]	; (32bc <vTracePrintF_Helper+0x454>)
    3280:	58f3      	ldr	r3, [r6, r3]
    3282:	4798      	blx	r3
			#endif

		}
	}
	trcCRITICAL_SECTION_END();
    3284:	4b10      	ldr	r3, [pc, #64]	; (32c8 <vTracePrintF_Helper+0x460>)
    3286:	58f3      	ldr	r3, [r6, r3]
    3288:	681a      	ldr	r2, [r3, #0]
    328a:	3a01      	subs	r2, #1
    328c:	601a      	str	r2, [r3, #0]
    328e:	4640      	mov	r0, r8
    3290:	4b0e      	ldr	r3, [pc, #56]	; (32cc <vTracePrintF_Helper+0x464>)
    3292:	58f3      	ldr	r3, [r6, r3]
    3294:	4798      	blx	r3
		channel = xTraceRegisterChannelFormat(eventLabel, formatLabel);

		prvTraceUserEventHelper1(channel, eventLabel, formatLabel, vl);
	}
#endif
}
    3296:	b013      	add	sp, #76	; 0x4c
    3298:	bc3c      	pop	{r2, r3, r4, r5}
    329a:	4690      	mov	r8, r2
    329c:	4699      	mov	r9, r3
    329e:	46a2      	mov	sl, r4
    32a0:	46ab      	mov	fp, r5
    32a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32a4:	00004afa 	.word	0x00004afa
    32a8:	00000120 	.word	0x00000120
    32ac:	000000f0 	.word	0x000000f0
    32b0:	00000180 	.word	0x00000180
    32b4:	00000028 	.word	0x00000028
    32b8:	000001ac 	.word	0x000001ac
    32bc:	0000021c 	.word	0x0000021c
    32c0:	00000064 	.word	0x00000064
    32c4:	000003e7 	.word	0x000003e7
    32c8:	000002c4 	.word	0x000002c4
    32cc:	00000134 	.word	0x00000134

000032d0 <vTracePrintF>:
 * Before using a %lf argument on a 16-bit MCU, please verify that
 * "sizeof(double)" actually gives 8 as expected. If not, use %f instead.
 ******************************************************************************/

void vTracePrintF(traceLabel eventLabel, const char* formatStr, ...)
{
    32d0:	b40e      	push	{r1, r2, r3}
    32d2:	b510      	push	{r4, lr}
    32d4:	b085      	sub	sp, #20
    32d6:	aa07      	add	r2, sp, #28
    32d8:	ca08      	ldmia	r2!, {r3}
    32da:	4b06      	ldr	r3, [pc, #24]	; (32f4 <vTracePrintF+0x24>)
    32dc:	447b      	add	r3, pc
#if (TRACE_SCHEDULING_ONLY == 0)
	va_list vl;

	va_start(vl, formatStr);
    32de:	9203      	str	r2, [sp, #12]
	vTracePrintF_Helper(eventLabel, formatStr, vl);
    32e0:	9907      	ldr	r1, [sp, #28]
    32e2:	4c05      	ldr	r4, [pc, #20]	; (32f8 <vTracePrintF+0x28>)
    32e4:	591c      	ldr	r4, [r3, r4]
    32e6:	9401      	str	r4, [sp, #4]
    32e8:	47a0      	blx	r4
	va_end(vl);
#endif /* TRACE_SCHEDULING_ONLY */
}
    32ea:	b005      	add	sp, #20
    32ec:	bc10      	pop	{r4}
    32ee:	bc08      	pop	{r3}
    32f0:	b003      	add	sp, #12
    32f2:	4718      	bx	r3
    32f4:	00004a48 	.word	0x00004a48
    32f8:	00000190 	.word	0x00000190

000032fc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    32fc:	1c03      	adds	r3, r0, #0
    32fe:	3308      	adds	r3, #8
    3300:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3302:	2201      	movs	r2, #1
    3304:	4252      	negs	r2, r2
    3306:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3308:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    330a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    330c:	2300      	movs	r3, #0
    330e:	6003      	str	r3, [r0, #0]
}
    3310:	4770      	bx	lr
    3312:	46c0      	nop			; (mov r8, r8)

00003314 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3314:	2300      	movs	r3, #0
    3316:	6103      	str	r3, [r0, #16]
}
    3318:	4770      	bx	lr
    331a:	46c0      	nop			; (mov r8, r8)

0000331c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    331c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    331e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    3320:	689a      	ldr	r2, [r3, #8]
    3322:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    3324:	689a      	ldr	r2, [r3, #8]
    3326:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    3328:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    332a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    332c:	6803      	ldr	r3, [r0, #0]
    332e:	3301      	adds	r3, #1
    3330:	6003      	str	r3, [r0, #0]
}
    3332:	4770      	bx	lr

00003334 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    3334:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    3336:	680c      	ldr	r4, [r1, #0]
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3338:	1c02      	adds	r2, r0, #0
    333a:	3208      	adds	r2, #8
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    333c:	1c63      	adds	r3, r4, #1
    333e:	d101      	bne.n	3344 <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    3340:	6902      	ldr	r2, [r0, #16]
    3342:	e005      	b.n	3350 <vListInsert+0x1c>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3344:	6853      	ldr	r3, [r2, #4]
    3346:	681d      	ldr	r5, [r3, #0]
    3348:	42ac      	cmp	r4, r5
    334a:	d301      	bcc.n	3350 <vListInsert+0x1c>
    334c:	1c1a      	adds	r2, r3, #0
    334e:	e7f9      	b.n	3344 <vListInsert+0x10>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    3350:	6853      	ldr	r3, [r2, #4]
    3352:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    3354:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    3356:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    3358:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    335a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    335c:	6803      	ldr	r3, [r0, #0]
    335e:	3301      	adds	r3, #1
    3360:	6003      	str	r3, [r0, #0]
}
    3362:	bd30      	pop	{r4, r5, pc}

00003364 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    3364:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    3366:	6842      	ldr	r2, [r0, #4]
    3368:	6881      	ldr	r1, [r0, #8]
    336a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    336c:	6882      	ldr	r2, [r0, #8]
    336e:	6841      	ldr	r1, [r0, #4]
    3370:	6051      	str	r1, [r2, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    3372:	685a      	ldr	r2, [r3, #4]
    3374:	4282      	cmp	r2, r0
    3376:	d101      	bne.n	337c <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    3378:	6892      	ldr	r2, [r2, #8]
    337a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    337c:	2200      	movs	r2, #0
    337e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    3380:	6818      	ldr	r0, [r3, #0]
    3382:	3801      	subs	r0, #1
    3384:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
    3386:	4770      	bx	lr

00003388 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    3388:	4b04      	ldr	r3, [pc, #16]	; (339c <prvTaskExitError+0x14>)
    338a:	447b      	add	r3, pc
    338c:	681b      	ldr	r3, [r3, #0]
    338e:	3301      	adds	r3, #1
    3390:	d001      	beq.n	3396 <prvTaskExitError+0xe>
    3392:	b672      	cpsid	i
    3394:	e7fe      	b.n	3394 <prvTaskExitError+0xc>
	portDISABLE_INTERRUPTS();
    3396:	b672      	cpsid	i
    3398:	e7fe      	b.n	3398 <prvTaskExitError+0x10>
    339a:	46c0      	nop			; (mov r8, r8)
    339c:	1fffcc82 	.word	0x1fffcc82

000033a0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    33a0:	4a06      	ldr	r2, [pc, #24]	; (33bc <pxCurrentTCBConst2>)
    33a2:	6813      	ldr	r3, [r2, #0]
    33a4:	6818      	ldr	r0, [r3, #0]
    33a6:	3020      	adds	r0, #32
    33a8:	f380 8809 	msr	PSP, r0
    33ac:	2002      	movs	r0, #2
    33ae:	f380 8814 	msr	CONTROL, r0
    33b2:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    33b4:	46ae      	mov	lr, r5
    33b6:	b662      	cpsie	i
    33b8:	bd00      	pop	{pc}
    33ba:	46c0      	nop			; (mov r8, r8)

000033bc <pxCurrentTCBConst2>:
    33bc:	2000161c 	.word	0x2000161c

000033c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    33c0:	b510      	push	{r4, lr}
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    33c2:	1f03      	subs	r3, r0, #4
    33c4:	2480      	movs	r4, #128	; 0x80
    33c6:	0464      	lsls	r4, r4, #17
    33c8:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    33ca:	3b04      	subs	r3, #4
    33cc:	6019      	str	r1, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    33ce:	3b04      	subs	r3, #4
    33d0:	4903      	ldr	r1, [pc, #12]	; (33e0 <pxPortInitialiseStack+0x20>)
    33d2:	4479      	add	r1, pc
    33d4:	6019      	str	r1, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    33d6:	3b14      	subs	r3, #20
    33d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */

	return pxTopOfStack;
    33da:	3840      	subs	r0, #64	; 0x40
}
    33dc:	bd10      	pop	{r4, pc}
    33de:	46c0      	nop			; (mov r8, r8)
    33e0:	ffffffb3 	.word	0xffffffb3

000033e4 <SVC_Handler>:

void vPortSVCHandler( void )
{
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    33e4:	4770      	bx	lr
    33e6:	46c0      	nop			; (mov r8, r8)

000033e8 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    33e8:	2280      	movs	r2, #128	; 0x80
    33ea:	0552      	lsls	r2, r2, #21
    33ec:	4b03      	ldr	r3, [pc, #12]	; (33fc <vPortYield+0x14>)
    33ee:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    33f0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    33f4:	f3bf 8f6f 	isb	sy
}
    33f8:	4770      	bx	lr
    33fa:	46c0      	nop			; (mov r8, r8)
    33fc:	e000ed04 	.word	0xe000ed04

00003400 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
    3400:	b672      	cpsid	i
    uxCriticalNesting++;
    3402:	4b05      	ldr	r3, [pc, #20]	; (3418 <vPortEnterCritical+0x18>)
    3404:	447b      	add	r3, pc
    3406:	681a      	ldr	r2, [r3, #0]
    3408:	3201      	adds	r2, #1
    340a:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
    340c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    3410:	f3bf 8f6f 	isb	sy
}
    3414:	4770      	bx	lr
    3416:	46c0      	nop			; (mov r8, r8)
    3418:	1fffcc08 	.word	0x1fffcc08

0000341c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
    341c:	4b07      	ldr	r3, [pc, #28]	; (343c <vPortExitCritical+0x20>)
    341e:	447b      	add	r3, pc
    3420:	681b      	ldr	r3, [r3, #0]
    3422:	2b00      	cmp	r3, #0
    3424:	d101      	bne.n	342a <vPortExitCritical+0xe>
    3426:	b672      	cpsid	i
    3428:	e7fe      	b.n	3428 <vPortExitCritical+0xc>
    uxCriticalNesting--;
    342a:	3b01      	subs	r3, #1
    342c:	4a04      	ldr	r2, [pc, #16]	; (3440 <vPortExitCritical+0x24>)
    342e:	447a      	add	r2, pc
    3430:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    3432:	2b00      	cmp	r3, #0
    3434:	d100      	bne.n	3438 <vPortExitCritical+0x1c>
    {
        portENABLE_INTERRUPTS();
    3436:	b662      	cpsie	i
    }
}
    3438:	4770      	bx	lr
    343a:	46c0      	nop			; (mov r8, r8)
    343c:	1fffcbee 	.word	0x1fffcbee
    3440:	1fffcbde 	.word	0x1fffcbde

00003444 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    3444:	f3ef 8010 	mrs	r0, PRIMASK
    3448:	b672      	cpsid	i
    344a:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
    344c:	2000      	movs	r0, #0
    344e:	46c0      	nop			; (mov r8, r8)

00003450 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
    3450:	f380 8810 	msr	PRIMASK, r0
    3454:	4770      	bx	lr
    3456:	46c0      	nop			; (mov r8, r8)

00003458 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    3458:	f3ef 8009 	mrs	r0, PSP
    345c:	4b0e      	ldr	r3, [pc, #56]	; (3498 <pxCurrentTCBConst>)
    345e:	681a      	ldr	r2, [r3, #0]
    3460:	3820      	subs	r0, #32
    3462:	6010      	str	r0, [r2, #0]
    3464:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    3466:	4644      	mov	r4, r8
    3468:	464d      	mov	r5, r9
    346a:	4656      	mov	r6, sl
    346c:	465f      	mov	r7, fp
    346e:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    3470:	b508      	push	{r3, lr}
    3472:	b672      	cpsid	i
    3474:	f001 fc20 	bl	4cb8 <vTaskSwitchContext>
    3478:	b662      	cpsie	i
    347a:	bc0c      	pop	{r2, r3}
    347c:	6811      	ldr	r1, [r2, #0]
    347e:	6808      	ldr	r0, [r1, #0]
    3480:	3010      	adds	r0, #16
    3482:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    3484:	46a0      	mov	r8, r4
    3486:	46a9      	mov	r9, r5
    3488:	46b2      	mov	sl, r6
    348a:	46bb      	mov	fp, r7
    348c:	f380 8809 	msr	PSP, r0
    3490:	3820      	subs	r0, #32
    3492:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    3494:	4718      	bx	r3
    3496:	46c0      	nop			; (mov r8, r8)

00003498 <pxCurrentTCBConst>:
    3498:	2000161c 	.word	0x2000161c

0000349c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    349c:	b530      	push	{r4, r5, lr}
    349e:	b083      	sub	sp, #12
    34a0:	4c0a      	ldr	r4, [pc, #40]	; (34cc <SysTick_Handler+0x30>)
    34a2:	447c      	add	r4, pc
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    34a4:	4b0a      	ldr	r3, [pc, #40]	; (34d0 <SysTick_Handler+0x34>)
    34a6:	58e3      	ldr	r3, [r4, r3]
    34a8:	4798      	blx	r3
    34aa:	1c05      	adds	r5, r0, #0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    34ac:	4b09      	ldr	r3, [pc, #36]	; (34d4 <SysTick_Handler+0x38>)
    34ae:	58e3      	ldr	r3, [r4, r3]
    34b0:	4798      	blx	r3
    34b2:	2800      	cmp	r0, #0
    34b4:	d003      	beq.n	34be <SysTick_Handler+0x22>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    34b6:	2280      	movs	r2, #128	; 0x80
    34b8:	0552      	lsls	r2, r2, #21
    34ba:	4b07      	ldr	r3, [pc, #28]	; (34d8 <SysTick_Handler+0x3c>)
    34bc:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    34be:	1c28      	adds	r0, r5, #0
    34c0:	4b06      	ldr	r3, [pc, #24]	; (34dc <SysTick_Handler+0x40>)
    34c2:	58e3      	ldr	r3, [r4, r3]
    34c4:	4798      	blx	r3
}
    34c6:	b003      	add	sp, #12
    34c8:	bd30      	pop	{r4, r5, pc}
    34ca:	46c0      	nop			; (mov r8, r8)
    34cc:	00004882 	.word	0x00004882
    34d0:	00000274 	.word	0x00000274
    34d4:	00000248 	.word	0x00000248
    34d8:	e000ed04 	.word	0xe000ed04
    34dc:	00000134 	.word	0x00000134

000034e0 <vPortSetupTimerInterrupt>:
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
    34e0:	2200      	movs	r2, #0
    34e2:	4b04      	ldr	r3, [pc, #16]	; (34f4 <vPortSetupTimerInterrupt+0x14>)
    34e4:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    34e6:	4a04      	ldr	r2, [pc, #16]	; (34f8 <vPortSetupTimerInterrupt+0x18>)
    34e8:	4b04      	ldr	r3, [pc, #16]	; (34fc <vPortSetupTimerInterrupt+0x1c>)
    34ea:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    34ec:	2207      	movs	r2, #7
    34ee:	4b04      	ldr	r3, [pc, #16]	; (3500 <vPortSetupTimerInterrupt+0x20>)
    34f0:	601a      	str	r2, [r3, #0]
}
    34f2:	4770      	bx	lr
    34f4:	e000e018 	.word	0xe000e018
    34f8:	0000bb7f 	.word	0x0000bb7f
    34fc:	e000e014 	.word	0xe000e014
    3500:	e000e010 	.word	0xe000e010

00003504 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    3504:	b500      	push	{lr}
    3506:	b083      	sub	sp, #12
    3508:	4a0c      	ldr	r2, [pc, #48]	; (353c <xPortStartScheduler+0x38>)
    350a:	447a      	add	r2, pc
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    350c:	4b0c      	ldr	r3, [pc, #48]	; (3540 <xPortStartScheduler+0x3c>)
    350e:	6818      	ldr	r0, [r3, #0]
    3510:	21ff      	movs	r1, #255	; 0xff
    3512:	0409      	lsls	r1, r1, #16
    3514:	4301      	orrs	r1, r0
    3516:	6019      	str	r1, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    3518:	6818      	ldr	r0, [r3, #0]
    351a:	21ff      	movs	r1, #255	; 0xff
    351c:	0609      	lsls	r1, r1, #24
    351e:	4301      	orrs	r1, r0
    3520:	6019      	str	r1, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    3522:	4b08      	ldr	r3, [pc, #32]	; (3544 <xPortStartScheduler+0x40>)
    3524:	58d3      	ldr	r3, [r2, r3]
    3526:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    3528:	2200      	movs	r2, #0
    352a:	4b07      	ldr	r3, [pc, #28]	; (3548 <xPortStartScheduler+0x44>)
    352c:	447b      	add	r3, pc
    352e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    3530:	4b06      	ldr	r3, [pc, #24]	; (354c <xPortStartScheduler+0x48>)
    3532:	447b      	add	r3, pc
    3534:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
    3536:	4b06      	ldr	r3, [pc, #24]	; (3550 <xPortStartScheduler+0x4c>)
    3538:	447b      	add	r3, pc
    353a:	4798      	blx	r3
    353c:	0000481a 	.word	0x0000481a
    3540:	e000ed20 	.word	0xe000ed20
    3544:	00000078 	.word	0x00000078
    3548:	1fffcae0 	.word	0x1fffcae0
    354c:	fffffe6b 	.word	0xfffffe6b
    3550:	fffffe4d 	.word	0xfffffe4d

00003554 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    3554:	b570      	push	{r4, r5, r6, lr}
    3556:	b082      	sub	sp, #8
    3558:	1c05      	adds	r5, r0, #0
    355a:	4c18      	ldr	r4, [pc, #96]	; (35bc <pvPortMalloc+0x68>)
    355c:	447c      	add	r4, pc
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    355e:	0743      	lsls	r3, r0, #29
    3560:	d002      	beq.n	3568 <pvPortMalloc+0x14>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    3562:	2307      	movs	r3, #7
    3564:	439d      	bics	r5, r3
    3566:	3508      	adds	r5, #8
		}
	#endif

	vTaskSuspendAll();
    3568:	4b15      	ldr	r3, [pc, #84]	; (35c0 <pvPortMalloc+0x6c>)
    356a:	58e3      	ldr	r3, [r4, r3]
    356c:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    356e:	4b15      	ldr	r3, [pc, #84]	; (35c4 <pvPortMalloc+0x70>)
    3570:	447b      	add	r3, pc
    3572:	681b      	ldr	r3, [r3, #0]
    3574:	2b00      	cmp	r3, #0
    3576:	d106      	bne.n	3586 <pvPortMalloc+0x32>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    3578:	4b13      	ldr	r3, [pc, #76]	; (35c8 <pvPortMalloc+0x74>)
    357a:	447b      	add	r3, pc
    357c:	1c1a      	adds	r2, r3, #0
    357e:	320c      	adds	r2, #12
    3580:	2107      	movs	r1, #7
    3582:	438a      	bics	r2, r1
    3584:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    3586:	4b11      	ldr	r3, [pc, #68]	; (35cc <pvPortMalloc+0x78>)
    3588:	447b      	add	r3, pc
    358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    358c:	18ed      	adds	r5, r5, r3
    358e:	4a10      	ldr	r2, [pc, #64]	; (35d0 <pvPortMalloc+0x7c>)
    3590:	4295      	cmp	r5, r2
    3592:	d809      	bhi.n	35a8 <pvPortMalloc+0x54>
    3594:	42ab      	cmp	r3, r5
    3596:	d209      	bcs.n	35ac <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    3598:	4a0e      	ldr	r2, [pc, #56]	; (35d4 <pvPortMalloc+0x80>)
    359a:	447a      	add	r2, pc
    359c:	6816      	ldr	r6, [r2, #0]
    359e:	18f6      	adds	r6, r6, r3
			xNextFreeByte += xWantedSize;
    35a0:	4b0d      	ldr	r3, [pc, #52]	; (35d8 <pvPortMalloc+0x84>)
    35a2:	447b      	add	r3, pc
    35a4:	625d      	str	r5, [r3, #36]	; 0x24
    35a6:	e002      	b.n	35ae <pvPortMalloc+0x5a>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    35a8:	2600      	movs	r6, #0
    35aa:	e000      	b.n	35ae <pvPortMalloc+0x5a>
    35ac:	2600      	movs	r6, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    35ae:	4b0b      	ldr	r3, [pc, #44]	; (35dc <pvPortMalloc+0x88>)
    35b0:	58e3      	ldr	r3, [r4, r3]
    35b2:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    35b4:	1c30      	adds	r0, r6, #0
    35b6:	b002      	add	sp, #8
    35b8:	bd70      	pop	{r4, r5, r6, pc}
    35ba:	46c0      	nop			; (mov r8, r8)
    35bc:	000047c8 	.word	0x000047c8
    35c0:	00000138 	.word	0x00000138
    35c4:	1fffd008 	.word	0x1fffd008
    35c8:	1fffcffe 	.word	0x1fffcffe
    35cc:	1fffdf70 	.word	0x1fffdf70
    35d0:	00000f97 	.word	0x00000f97
    35d4:	1fffcfde 	.word	0x1fffcfde
    35d8:	1fffdf56 	.word	0x1fffdf56
    35dc:	00000200 	.word	0x00000200

000035e0 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    35e0:	2800      	cmp	r0, #0
    35e2:	d001      	beq.n	35e8 <vPortFree+0x8>
    35e4:	b672      	cpsid	i
    35e6:	e7fe      	b.n	35e6 <vPortFree+0x6>
}
    35e8:	4770      	bx	lr
    35ea:	46c0      	nop			; (mov r8, r8)

000035ec <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    35ec:	b570      	push	{r4, r5, r6, lr}
    35ee:	b082      	sub	sp, #8
    35f0:	1c04      	adds	r4, r0, #0
    35f2:	1c16      	adds	r6, r2, #0
    35f4:	4b1e      	ldr	r3, [pc, #120]	; (3670 <prvCopyDataToQueue+0x84>)
    35f6:	447b      	add	r3, pc
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    35f8:	6c02      	ldr	r2, [r0, #64]	; 0x40
    35fa:	2a00      	cmp	r2, #0
    35fc:	d109      	bne.n	3612 <prvCopyDataToQueue+0x26>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    35fe:	6800      	ldr	r0, [r0, #0]
    3600:	2800      	cmp	r0, #0
    3602:	d12f      	bne.n	3664 <prvCopyDataToQueue+0x78>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    3604:	6860      	ldr	r0, [r4, #4]
    3606:	4a1b      	ldr	r2, [pc, #108]	; (3674 <prvCopyDataToQueue+0x88>)
    3608:	589a      	ldr	r2, [r3, r2]
    360a:	4790      	blx	r2
				pxQueue->pxMutexHolder = NULL;
    360c:	2300      	movs	r3, #0
    360e:	6063      	str	r3, [r4, #4]
    3610:	e028      	b.n	3664 <prvCopyDataToQueue+0x78>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    3612:	2e00      	cmp	r6, #0
    3614:	d10e      	bne.n	3634 <prvCopyDataToQueue+0x48>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    3616:	6880      	ldr	r0, [r0, #8]
    3618:	4d17      	ldr	r5, [pc, #92]	; (3678 <prvCopyDataToQueue+0x8c>)
    361a:	595d      	ldr	r5, [r3, r5]
    361c:	9501      	str	r5, [sp, #4]
    361e:	47a8      	blx	r5
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3620:	68a1      	ldr	r1, [r4, #8]
    3622:	6c22      	ldr	r2, [r4, #64]	; 0x40
    3624:	188b      	adds	r3, r1, r2
    3626:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    3628:	6860      	ldr	r0, [r4, #4]
    362a:	4283      	cmp	r3, r0
    362c:	d31a      	bcc.n	3664 <prvCopyDataToQueue+0x78>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    362e:	6821      	ldr	r1, [r4, #0]
    3630:	60a1      	str	r1, [r4, #8]
    3632:	e017      	b.n	3664 <prvCopyDataToQueue+0x78>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3634:	68c0      	ldr	r0, [r0, #12]
    3636:	4d10      	ldr	r5, [pc, #64]	; (3678 <prvCopyDataToQueue+0x8c>)
    3638:	595d      	ldr	r5, [r3, r5]
    363a:	9501      	str	r5, [sp, #4]
    363c:	47a8      	blx	r5
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    363e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3640:	425a      	negs	r2, r3
    3642:	68e0      	ldr	r0, [r4, #12]
    3644:	1883      	adds	r3, r0, r2
    3646:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    3648:	6821      	ldr	r1, [r4, #0]
    364a:	428b      	cmp	r3, r1
    364c:	d202      	bcs.n	3654 <prvCopyDataToQueue+0x68>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    364e:	6863      	ldr	r3, [r4, #4]
    3650:	189a      	adds	r2, r3, r2
    3652:	60e2      	str	r2, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    3654:	2e02      	cmp	r6, #2
    3656:	d105      	bne.n	3664 <prvCopyDataToQueue+0x78>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    3658:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    365a:	2b00      	cmp	r3, #0
    365c:	d002      	beq.n	3664 <prvCopyDataToQueue+0x78>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    365e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3660:	3b01      	subs	r3, #1
    3662:	63a3      	str	r3, [r4, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    3664:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3666:	3301      	adds	r3, #1
    3668:	63a3      	str	r3, [r4, #56]	; 0x38
}
    366a:	b002      	add	sp, #8
    366c:	bd70      	pop	{r4, r5, r6, pc}
    366e:	46c0      	nop			; (mov r8, r8)
    3670:	0000472e 	.word	0x0000472e
    3674:	00000150 	.word	0x00000150
    3678:	00000064 	.word	0x00000064

0000367c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    367c:	b5f0      	push	{r4, r5, r6, r7, lr}
    367e:	465f      	mov	r7, fp
    3680:	4656      	mov	r6, sl
    3682:	464d      	mov	r5, r9
    3684:	b4e0      	push	{r5, r6, r7}
    3686:	b084      	sub	sp, #16
    3688:	9003      	str	r0, [sp, #12]
    368a:	4689      	mov	r9, r1
    368c:	4d2d      	ldr	r5, [pc, #180]	; (3744 <prvNotifyQueueSetContainer+0xc8>)
    368e:	447d      	add	r5, pc
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    3690:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    3692:	2c00      	cmp	r4, #0
    3694:	d101      	bne.n	369a <prvNotifyQueueSetContainer+0x1e>
    3696:	b672      	cpsid	i
    3698:	e7fe      	b.n	3698 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    369a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    369c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    369e:	429a      	cmp	r2, r3
    36a0:	d301      	bcc.n	36a6 <prvNotifyQueueSetContainer+0x2a>
    36a2:	b672      	cpsid	i
    36a4:	e7fe      	b.n	36a4 <prvNotifyQueueSetContainer+0x28>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    36a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    36a8:	2000      	movs	r0, #0
		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    36aa:	4293      	cmp	r3, r2
    36ac:	d943      	bls.n	3736 <prvNotifyQueueSetContainer+0xba>
		{
			traceQUEUE_SEND( pxQueueSetContainer );
    36ae:	1c20      	adds	r0, r4, #0
    36b0:	4b25      	ldr	r3, [pc, #148]	; (3748 <prvNotifyQueueSetContainer+0xcc>)
    36b2:	58ee      	ldr	r6, [r5, r3]
    36b4:	47b0      	blx	r6
    36b6:	4b25      	ldr	r3, [pc, #148]	; (374c <prvNotifyQueueSetContainer+0xd0>)
    36b8:	58eb      	ldr	r3, [r5, r3]
    36ba:	9300      	str	r3, [sp, #0]
    36bc:	5c1b      	ldrb	r3, [r3, r0]
    36be:	3320      	adds	r3, #32
    36c0:	b2db      	uxtb	r3, r3
    36c2:	469b      	mov	fp, r3
    36c4:	1c20      	adds	r0, r4, #0
    36c6:	47b0      	blx	r6
    36c8:	9a00      	ldr	r2, [sp, #0]
    36ca:	5c17      	ldrb	r7, [r2, r0]
    36cc:	1c20      	adds	r0, r4, #0
    36ce:	4b20      	ldr	r3, [pc, #128]	; (3750 <prvNotifyQueueSetContainer+0xd4>)
    36d0:	58eb      	ldr	r3, [r5, r3]
    36d2:	9301      	str	r3, [sp, #4]
    36d4:	4798      	blx	r3
    36d6:	1c02      	adds	r2, r0, #0
    36d8:	4658      	mov	r0, fp
    36da:	1c39      	adds	r1, r7, #0
    36dc:	4b1d      	ldr	r3, [pc, #116]	; (3754 <prvNotifyQueueSetContainer+0xd8>)
    36de:	58eb      	ldr	r3, [r5, r3]
    36e0:	4798      	blx	r3
    36e2:	1c20      	adds	r0, r4, #0
    36e4:	47b0      	blx	r6
    36e6:	9b00      	ldr	r3, [sp, #0]
    36e8:	5c18      	ldrb	r0, [r3, r0]
    36ea:	4682      	mov	sl, r0
    36ec:	1c20      	adds	r0, r4, #0
    36ee:	9a01      	ldr	r2, [sp, #4]
    36f0:	4790      	blx	r2
    36f2:	1c07      	adds	r7, r0, #0
    36f4:	1c20      	adds	r0, r4, #0
    36f6:	47b0      	blx	r6
    36f8:	9a00      	ldr	r2, [sp, #0]
    36fa:	5c13      	ldrb	r3, [r2, r0]
    36fc:	2b02      	cmp	r3, #2
    36fe:	d003      	beq.n	3708 <prvNotifyQueueSetContainer+0x8c>
    3700:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3702:	3301      	adds	r3, #1
    3704:	b2da      	uxtb	r2, r3
    3706:	e000      	b.n	370a <prvNotifyQueueSetContainer+0x8e>
    3708:	2200      	movs	r2, #0
    370a:	4650      	mov	r0, sl
    370c:	1c39      	adds	r1, r7, #0
    370e:	4b12      	ldr	r3, [pc, #72]	; (3758 <prvNotifyQueueSetContainer+0xdc>)
    3710:	58eb      	ldr	r3, [r5, r3]
    3712:	4798      	blx	r3
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    3714:	1c20      	adds	r0, r4, #0
    3716:	a903      	add	r1, sp, #12
    3718:	464a      	mov	r2, r9
    371a:	4b10      	ldr	r3, [pc, #64]	; (375c <prvNotifyQueueSetContainer+0xe0>)
    371c:	447b      	add	r3, pc
    371e:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    3720:	2000      	movs	r0, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    3722:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3724:	2b00      	cmp	r3, #0
    3726:	d006      	beq.n	3736 <prvNotifyQueueSetContainer+0xba>
			{
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    3728:	1c20      	adds	r0, r4, #0
    372a:	3024      	adds	r0, #36	; 0x24
    372c:	4b0c      	ldr	r3, [pc, #48]	; (3760 <prvNotifyQueueSetContainer+0xe4>)
    372e:	58eb      	ldr	r3, [r5, r3]
    3730:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    3732:	1e43      	subs	r3, r0, #1
    3734:	4198      	sbcs	r0, r3
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    3736:	b004      	add	sp, #16
    3738:	bc1c      	pop	{r2, r3, r4}
    373a:	4691      	mov	r9, r2
    373c:	469a      	mov	sl, r3
    373e:	46a3      	mov	fp, r4
    3740:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3742:	46c0      	nop			; (mov r8, r8)
    3744:	00004696 	.word	0x00004696
    3748:	0000019c 	.word	0x0000019c
    374c:	000002a8 	.word	0x000002a8
    3750:	0000006c 	.word	0x0000006c
    3754:	00000250 	.word	0x00000250
    3758:	000002a4 	.word	0x000002a4
    375c:	fffffecd 	.word	0xfffffecd
    3760:	00000110 	.word	0x00000110

00003764 <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    3764:	b570      	push	{r4, r5, r6, lr}
    3766:	b082      	sub	sp, #8
    3768:	4b0a      	ldr	r3, [pc, #40]	; (3794 <prvCopyDataFromQueue+0x30>)
    376a:	447b      	add	r3, pc
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    376c:	6805      	ldr	r5, [r0, #0]
    376e:	2d00      	cmp	r5, #0
    3770:	d00d      	beq.n	378e <prvCopyDataFromQueue+0x2a>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    3772:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3774:	68c6      	ldr	r6, [r0, #12]
    3776:	18b4      	adds	r4, r6, r2
    3778:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    377a:	6846      	ldr	r6, [r0, #4]
    377c:	42b4      	cmp	r4, r6
    377e:	d300      	bcc.n	3782 <prvCopyDataFromQueue+0x1e>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    3780:	60c5      	str	r5, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    3782:	68c4      	ldr	r4, [r0, #12]
    3784:	1c08      	adds	r0, r1, #0
    3786:	1c21      	adds	r1, r4, #0
    3788:	4c03      	ldr	r4, [pc, #12]	; (3798 <prvCopyDataFromQueue+0x34>)
    378a:	591c      	ldr	r4, [r3, r4]
    378c:	47a0      	blx	r4
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    378e:	b002      	add	sp, #8
    3790:	bd70      	pop	{r4, r5, r6, pc}
    3792:	46c0      	nop			; (mov r8, r8)
    3794:	000045ba 	.word	0x000045ba
    3798:	00000064 	.word	0x00000064

0000379c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    379c:	b5f0      	push	{r4, r5, r6, r7, lr}
    379e:	b083      	sub	sp, #12
    37a0:	1c04      	adds	r4, r0, #0
    37a2:	4d2b      	ldr	r5, [pc, #172]	; (3850 <prvUnlockQueue+0xb4>)
    37a4:	447d      	add	r5, pc

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    37a6:	4b2b      	ldr	r3, [pc, #172]	; (3854 <prvUnlockQueue+0xb8>)
    37a8:	58eb      	ldr	r3, [r5, r3]
    37aa:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    37ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    37ae:	2b00      	cmp	r3, #0
    37b0:	dd21      	ble.n	37f6 <prvUnlockQueue+0x5a>
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    37b2:	1c27      	adds	r7, r4, #0
    37b4:	3724      	adds	r7, #36	; 0x24
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    37b6:	4e28      	ldr	r6, [pc, #160]	; (3858 <prvUnlockQueue+0xbc>)
    37b8:	447e      	add	r6, pc
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    37ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
    37bc:	2b00      	cmp	r3, #0
    37be:	d008      	beq.n	37d2 <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    37c0:	1c20      	adds	r0, r4, #0
    37c2:	2100      	movs	r1, #0
    37c4:	47b0      	blx	r6
    37c6:	2801      	cmp	r0, #1
    37c8:	d10f      	bne.n	37ea <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    37ca:	4b24      	ldr	r3, [pc, #144]	; (385c <prvUnlockQueue+0xc0>)
    37cc:	58eb      	ldr	r3, [r5, r3]
    37ce:	4798      	blx	r3
    37d0:	e00b      	b.n	37ea <prvUnlockQueue+0x4e>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    37d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    37d4:	2b00      	cmp	r3, #0
    37d6:	d00e      	beq.n	37f6 <prvUnlockQueue+0x5a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    37d8:	1c38      	adds	r0, r7, #0
    37da:	4b21      	ldr	r3, [pc, #132]	; (3860 <prvUnlockQueue+0xc4>)
    37dc:	58eb      	ldr	r3, [r5, r3]
    37de:	4798      	blx	r3
    37e0:	2800      	cmp	r0, #0
    37e2:	d002      	beq.n	37ea <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    37e4:	4b1d      	ldr	r3, [pc, #116]	; (385c <prvUnlockQueue+0xc0>)
    37e6:	58eb      	ldr	r3, [r5, r3]
    37e8:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    37ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    37ec:	3b01      	subs	r3, #1
    37ee:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    37f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    37f2:	2b00      	cmp	r3, #0
    37f4:	dce1      	bgt.n	37ba <prvUnlockQueue+0x1e>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    37f6:	2301      	movs	r3, #1
    37f8:	425b      	negs	r3, r3
    37fa:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    37fc:	4b19      	ldr	r3, [pc, #100]	; (3864 <prvUnlockQueue+0xc8>)
    37fe:	58eb      	ldr	r3, [r5, r3]
    3800:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3802:	4b14      	ldr	r3, [pc, #80]	; (3854 <prvUnlockQueue+0xb8>)
    3804:	58eb      	ldr	r3, [r5, r3]
    3806:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3808:	6c63      	ldr	r3, [r4, #68]	; 0x44
    380a:	2b00      	cmp	r3, #0
    380c:	dd17      	ble.n	383e <prvUnlockQueue+0xa2>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    380e:	6923      	ldr	r3, [r4, #16]
    3810:	2b00      	cmp	r3, #0
    3812:	d014      	beq.n	383e <prvUnlockQueue+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3814:	1c27      	adds	r7, r4, #0
    3816:	3710      	adds	r7, #16
    3818:	4b11      	ldr	r3, [pc, #68]	; (3860 <prvUnlockQueue+0xc4>)
    381a:	58ee      	ldr	r6, [r5, r3]
    381c:	e002      	b.n	3824 <prvUnlockQueue+0x88>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    381e:	6923      	ldr	r3, [r4, #16]
    3820:	2b00      	cmp	r3, #0
    3822:	d00c      	beq.n	383e <prvUnlockQueue+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3824:	1c38      	adds	r0, r7, #0
    3826:	47b0      	blx	r6
    3828:	2800      	cmp	r0, #0
    382a:	d002      	beq.n	3832 <prvUnlockQueue+0x96>
				{
					vTaskMissedYield();
    382c:	4b0b      	ldr	r3, [pc, #44]	; (385c <prvUnlockQueue+0xc0>)
    382e:	58eb      	ldr	r3, [r5, r3]
    3830:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    3832:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3834:	3b01      	subs	r3, #1
    3836:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3838:	6c63      	ldr	r3, [r4, #68]	; 0x44
    383a:	2b00      	cmp	r3, #0
    383c:	dcef      	bgt.n	381e <prvUnlockQueue+0x82>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    383e:	2301      	movs	r3, #1
    3840:	425b      	negs	r3, r3
    3842:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    3844:	4b07      	ldr	r3, [pc, #28]	; (3864 <prvUnlockQueue+0xc8>)
    3846:	58eb      	ldr	r3, [r5, r3]
    3848:	4798      	blx	r3
}
    384a:	b003      	add	sp, #12
    384c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    384e:	46c0      	nop			; (mov r8, r8)
    3850:	00004580 	.word	0x00004580
    3854:	000002b4 	.word	0x000002b4
    3858:	fffffec1 	.word	0xfffffec1
    385c:	0000023c 	.word	0x0000023c
    3860:	00000110 	.word	0x00000110
    3864:	00000014 	.word	0x00000014

00003868 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    3868:	b570      	push	{r4, r5, r6, lr}
    386a:	b082      	sub	sp, #8
    386c:	1c04      	adds	r4, r0, #0
    386e:	1c0e      	adds	r6, r1, #0
    3870:	4d1b      	ldr	r5, [pc, #108]	; (38e0 <xQueueGenericReset+0x78>)
    3872:	447d      	add	r5, pc
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    3874:	2800      	cmp	r0, #0
    3876:	d101      	bne.n	387c <xQueueGenericReset+0x14>
    3878:	b672      	cpsid	i
    387a:	e7fe      	b.n	387a <xQueueGenericReset+0x12>

	taskENTER_CRITICAL();
    387c:	4b19      	ldr	r3, [pc, #100]	; (38e4 <xQueueGenericReset+0x7c>)
    387e:	58eb      	ldr	r3, [r5, r3]
    3880:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    3882:	6823      	ldr	r3, [r4, #0]
    3884:	6c22      	ldr	r2, [r4, #64]	; 0x40
    3886:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3888:	4350      	muls	r0, r2
    388a:	1819      	adds	r1, r3, r0
    388c:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    388e:	2100      	movs	r1, #0
    3890:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    3892:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    3894:	1a82      	subs	r2, r0, r2
    3896:	189b      	adds	r3, r3, r2
    3898:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    389a:	2301      	movs	r3, #1
    389c:	425b      	negs	r3, r3
    389e:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    38a0:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
    38a2:	2e00      	cmp	r6, #0
    38a4:	d10d      	bne.n	38c2 <xQueueGenericReset+0x5a>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    38a6:	6921      	ldr	r1, [r4, #16]
    38a8:	2900      	cmp	r1, #0
    38aa:	d012      	beq.n	38d2 <xQueueGenericReset+0x6a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    38ac:	1c20      	adds	r0, r4, #0
    38ae:	3010      	adds	r0, #16
    38b0:	4b0d      	ldr	r3, [pc, #52]	; (38e8 <xQueueGenericReset+0x80>)
    38b2:	58eb      	ldr	r3, [r5, r3]
    38b4:	4798      	blx	r3
    38b6:	2801      	cmp	r0, #1
    38b8:	d10b      	bne.n	38d2 <xQueueGenericReset+0x6a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    38ba:	4b0c      	ldr	r3, [pc, #48]	; (38ec <xQueueGenericReset+0x84>)
    38bc:	58eb      	ldr	r3, [r5, r3]
    38be:	4798      	blx	r3
    38c0:	e007      	b.n	38d2 <xQueueGenericReset+0x6a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    38c2:	1c20      	adds	r0, r4, #0
    38c4:	3010      	adds	r0, #16
    38c6:	4b0a      	ldr	r3, [pc, #40]	; (38f0 <xQueueGenericReset+0x88>)
    38c8:	58ee      	ldr	r6, [r5, r3]
    38ca:	47b0      	blx	r6
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    38cc:	1c20      	adds	r0, r4, #0
    38ce:	3024      	adds	r0, #36	; 0x24
    38d0:	47b0      	blx	r6
		}
	}
	taskEXIT_CRITICAL();
    38d2:	4b08      	ldr	r3, [pc, #32]	; (38f4 <xQueueGenericReset+0x8c>)
    38d4:	58eb      	ldr	r3, [r5, r3]
    38d6:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    38d8:	2001      	movs	r0, #1
    38da:	b002      	add	sp, #8
    38dc:	bd70      	pop	{r4, r5, r6, pc}
    38de:	46c0      	nop			; (mov r8, r8)
    38e0:	000044b2 	.word	0x000044b2
    38e4:	000002b4 	.word	0x000002b4
    38e8:	00000110 	.word	0x00000110
    38ec:	00000194 	.word	0x00000194
    38f0:	000000f4 	.word	0x000000f4
    38f4:	00000014 	.word	0x00000014

000038f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    38f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    38fa:	4657      	mov	r7, sl
    38fc:	464e      	mov	r6, r9
    38fe:	4645      	mov	r5, r8
    3900:	b4e0      	push	{r5, r6, r7}
    3902:	b082      	sub	sp, #8
    3904:	1c05      	adds	r5, r0, #0
    3906:	4688      	mov	r8, r1
    3908:	1c16      	adds	r6, r2, #0
    390a:	4f32      	ldr	r7, [pc, #200]	; (39d4 <xQueueGenericCreate+0xdc>)
    390c:	447f      	add	r7, pc
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
    390e:	2800      	cmp	r0, #0
    3910:	d01e      	beq.n	3950 <xQueueGenericCreate+0x58>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    3912:	2058      	movs	r0, #88	; 0x58
    3914:	4b30      	ldr	r3, [pc, #192]	; (39d8 <xQueueGenericCreate+0xe0>)
    3916:	58fb      	ldr	r3, [r7, r3]
    3918:	4798      	blx	r3
    391a:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    391c:	d018      	beq.n	3950 <xQueueGenericCreate+0x58>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    391e:	4640      	mov	r0, r8
    3920:	4368      	muls	r0, r5
    3922:	3001      	adds	r0, #1

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
    3924:	4b2c      	ldr	r3, [pc, #176]	; (39d8 <xQueueGenericCreate+0xe0>)
    3926:	58fb      	ldr	r3, [r7, r3]
    3928:	4798      	blx	r3
    392a:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
    392c:	2800      	cmp	r0, #0
    392e:	d111      	bne.n	3954 <xQueueGenericCreate+0x5c>
				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
    3930:	4b2a      	ldr	r3, [pc, #168]	; (39dc <xQueueGenericCreate+0xe4>)
    3932:	58fb      	ldr	r3, [r7, r3]
    3934:	5d99      	ldrb	r1, [r3, r6]
    3936:	1c08      	adds	r0, r1, #0
    3938:	3040      	adds	r0, #64	; 0x40
    393a:	b2c0      	uxtb	r0, r0
    393c:	2200      	movs	r2, #0
    393e:	4b28      	ldr	r3, [pc, #160]	; (39e0 <xQueueGenericCreate+0xe8>)
    3940:	58fb      	ldr	r3, [r7, r3]
    3942:	4798      	blx	r3
				vPortFree( pxNewQueue );
    3944:	1c20      	adds	r0, r4, #0
    3946:	4b27      	ldr	r3, [pc, #156]	; (39e4 <xQueueGenericCreate+0xec>)
    3948:	58fb      	ldr	r3, [r7, r3]
    394a:	4798      	blx	r3
    394c:	e000      	b.n	3950 <xQueueGenericCreate+0x58>
    394e:	e7fe      	b.n	394e <xQueueGenericCreate+0x56>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    3950:	b672      	cpsid	i
    3952:	e7fc      	b.n	394e <xQueueGenericCreate+0x56>
			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    3954:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    3956:	4643      	mov	r3, r8
    3958:	6423      	str	r3, [r4, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    395a:	1c20      	adds	r0, r4, #0
    395c:	2101      	movs	r1, #1
    395e:	4b22      	ldr	r3, [pc, #136]	; (39e8 <xQueueGenericCreate+0xf0>)
    3960:	58fb      	ldr	r3, [r7, r3]
    3962:	4798      	blx	r3

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
    3964:	2350      	movs	r3, #80	; 0x50
    3966:	54e6      	strb	r6, [r4, r3]
				}
				#endif /* configUSE_TRACE_FACILITY */

				#if( configUSE_QUEUE_SETS == 1 )
				{
					pxNewQueue->pxQueueSetContainer = NULL;
    3968:	2300      	movs	r3, #0
    396a:	6563      	str	r3, [r4, #84]	; 0x54
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
    396c:	1c20      	adds	r0, r4, #0
    396e:	4b1f      	ldr	r3, [pc, #124]	; (39ec <xQueueGenericCreate+0xf4>)
    3970:	58fe      	ldr	r6, [r7, r3]
    3972:	47b0      	blx	r6
    3974:	4b19      	ldr	r3, [pc, #100]	; (39dc <xQueueGenericCreate+0xe4>)
    3976:	58fd      	ldr	r5, [r7, r3]
    3978:	5c28      	ldrb	r0, [r5, r0]
    397a:	4b1d      	ldr	r3, [pc, #116]	; (39f0 <xQueueGenericCreate+0xf8>)
    397c:	58fb      	ldr	r3, [r7, r3]
    397e:	4798      	blx	r3
    3980:	64e0      	str	r0, [r4, #76]	; 0x4c
    3982:	1c20      	adds	r0, r4, #0
    3984:	47b0      	blx	r6
    3986:	5c2b      	ldrb	r3, [r5, r0]
    3988:	3318      	adds	r3, #24
    398a:	b2db      	uxtb	r3, r3
    398c:	469a      	mov	sl, r3
    398e:	1c20      	adds	r0, r4, #0
    3990:	47b0      	blx	r6
    3992:	5c28      	ldrb	r0, [r5, r0]
    3994:	4681      	mov	r9, r0
    3996:	1c20      	adds	r0, r4, #0
    3998:	4b16      	ldr	r3, [pc, #88]	; (39f4 <xQueueGenericCreate+0xfc>)
    399a:	58fb      	ldr	r3, [r7, r3]
    399c:	9300      	str	r3, [sp, #0]
    399e:	4798      	blx	r3
    39a0:	1c02      	adds	r2, r0, #0
    39a2:	4650      	mov	r0, sl
    39a4:	4649      	mov	r1, r9
    39a6:	4b0e      	ldr	r3, [pc, #56]	; (39e0 <xQueueGenericCreate+0xe8>)
    39a8:	58fb      	ldr	r3, [r7, r3]
    39aa:	4798      	blx	r3
    39ac:	1c20      	adds	r0, r4, #0
    39ae:	47b0      	blx	r6
    39b0:	5c2d      	ldrb	r5, [r5, r0]
    39b2:	1c20      	adds	r0, r4, #0
    39b4:	9b00      	ldr	r3, [sp, #0]
    39b6:	4798      	blx	r3
    39b8:	1c01      	adds	r1, r0, #0
    39ba:	1c28      	adds	r0, r5, #0
    39bc:	2200      	movs	r2, #0
    39be:	4b0e      	ldr	r3, [pc, #56]	; (39f8 <xQueueGenericCreate+0x100>)
    39c0:	58fb      	ldr	r3, [r7, r3]
    39c2:	4798      	blx	r3
	}

	configASSERT( xReturn );

	return xReturn;
}
    39c4:	1c20      	adds	r0, r4, #0
    39c6:	b002      	add	sp, #8
    39c8:	bc1c      	pop	{r2, r3, r4}
    39ca:	4690      	mov	r8, r2
    39cc:	4699      	mov	r9, r3
    39ce:	46a2      	mov	sl, r4
    39d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39d2:	46c0      	nop			; (mov r8, r8)
    39d4:	00004418 	.word	0x00004418
    39d8:	000000dc 	.word	0x000000dc
    39dc:	000002a8 	.word	0x000002a8
    39e0:	00000250 	.word	0x00000250
    39e4:	00000088 	.word	0x00000088
    39e8:	0000025c 	.word	0x0000025c
    39ec:	0000019c 	.word	0x0000019c
    39f0:	000002bc 	.word	0x000002bc
    39f4:	0000006c 	.word	0x0000006c
    39f8:	000002a4 	.word	0x000002a4

000039fc <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    39fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    39fe:	465f      	mov	r7, fp
    3a00:	4656      	mov	r6, sl
    3a02:	464d      	mov	r5, r9
    3a04:	4644      	mov	r4, r8
    3a06:	b4f0      	push	{r4, r5, r6, r7}
    3a08:	b089      	sub	sp, #36	; 0x24
    3a0a:	1c05      	adds	r5, r0, #0
    3a0c:	4688      	mov	r8, r1
    3a0e:	9205      	str	r2, [sp, #20]
    3a10:	1c1e      	adds	r6, r3, #0
    3a12:	4c9c      	ldr	r4, [pc, #624]	; (3c84 <xQueueGenericSend+0x288>)
    3a14:	447c      	add	r4, pc
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    3a16:	2800      	cmp	r0, #0
    3a18:	d101      	bne.n	3a1e <xQueueGenericSend+0x22>
    3a1a:	b672      	cpsid	i
    3a1c:	e7fe      	b.n	3a1c <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    3a1e:	2900      	cmp	r1, #0
    3a20:	d104      	bne.n	3a2c <xQueueGenericSend+0x30>
    3a22:	6c03      	ldr	r3, [r0, #64]	; 0x40
    3a24:	2b00      	cmp	r3, #0
    3a26:	d001      	beq.n	3a2c <xQueueGenericSend+0x30>
    3a28:	b672      	cpsid	i
    3a2a:	e7fe      	b.n	3a2a <xQueueGenericSend+0x2e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    3a2c:	2e02      	cmp	r6, #2
    3a2e:	d104      	bne.n	3a3a <xQueueGenericSend+0x3e>
    3a30:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    3a32:	2a01      	cmp	r2, #1
    3a34:	d001      	beq.n	3a3a <xQueueGenericSend+0x3e>
    3a36:	b672      	cpsid	i
    3a38:	e7fe      	b.n	3a38 <xQueueGenericSend+0x3c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    3a3a:	4b93      	ldr	r3, [pc, #588]	; (3c88 <xQueueGenericSend+0x28c>)
    3a3c:	58e3      	ldr	r3, [r4, r3]
    3a3e:	4798      	blx	r3
    3a40:	2800      	cmp	r0, #0
    3a42:	d102      	bne.n	3a4a <xQueueGenericSend+0x4e>
    3a44:	9b05      	ldr	r3, [sp, #20]
    3a46:	2b00      	cmp	r3, #0
    3a48:	d107      	bne.n	3a5a <xQueueGenericSend+0x5e>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    3a4a:	2200      	movs	r2, #0
    3a4c:	4692      	mov	sl, r2
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3a4e:	4b8f      	ldr	r3, [pc, #572]	; (3c8c <xQueueGenericSend+0x290>)
    3a50:	58e3      	ldr	r3, [r4, r3]
    3a52:	9302      	str	r3, [sp, #8]
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3a54:	ab06      	add	r3, sp, #24
    3a56:	4699      	mov	r9, r3
    3a58:	e001      	b.n	3a5e <xQueueGenericSend+0x62>
	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    3a5a:	b672      	cpsid	i
    3a5c:	e7fe      	b.n	3a5c <xQueueGenericSend+0x60>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3a5e:	9a02      	ldr	r2, [sp, #8]
    3a60:	4790      	blx	r2
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    3a62:	6bab      	ldr	r3, [r5, #56]	; 0x38
    3a64:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    3a66:	4293      	cmp	r3, r2
    3a68:	d301      	bcc.n	3a6e <xQueueGenericSend+0x72>
    3a6a:	2e02      	cmp	r6, #2
    3a6c:	d15c      	bne.n	3b28 <xQueueGenericSend+0x12c>
			{
				traceQUEUE_SEND( pxQueue );
    3a6e:	1c28      	adds	r0, r5, #0
    3a70:	4b87      	ldr	r3, [pc, #540]	; (3c90 <xQueueGenericSend+0x294>)
    3a72:	58e3      	ldr	r3, [r4, r3]
    3a74:	9301      	str	r3, [sp, #4]
    3a76:	4798      	blx	r3
    3a78:	4b86      	ldr	r3, [pc, #536]	; (3c94 <xQueueGenericSend+0x298>)
    3a7a:	58e3      	ldr	r3, [r4, r3]
    3a7c:	9302      	str	r3, [sp, #8]
    3a7e:	5c1b      	ldrb	r3, [r3, r0]
    3a80:	3320      	adds	r3, #32
    3a82:	b2db      	uxtb	r3, r3
    3a84:	469a      	mov	sl, r3
    3a86:	1c28      	adds	r0, r5, #0
    3a88:	9b01      	ldr	r3, [sp, #4]
    3a8a:	4798      	blx	r3
    3a8c:	9a02      	ldr	r2, [sp, #8]
    3a8e:	5c17      	ldrb	r7, [r2, r0]
    3a90:	1c28      	adds	r0, r5, #0
    3a92:	4b81      	ldr	r3, [pc, #516]	; (3c98 <xQueueGenericSend+0x29c>)
    3a94:	58e3      	ldr	r3, [r4, r3]
    3a96:	9303      	str	r3, [sp, #12]
    3a98:	4798      	blx	r3
    3a9a:	1c02      	adds	r2, r0, #0
    3a9c:	4650      	mov	r0, sl
    3a9e:	1c39      	adds	r1, r7, #0
    3aa0:	4b7e      	ldr	r3, [pc, #504]	; (3c9c <xQueueGenericSend+0x2a0>)
    3aa2:	58e3      	ldr	r3, [r4, r3]
    3aa4:	4798      	blx	r3
    3aa6:	1c28      	adds	r0, r5, #0
    3aa8:	9b01      	ldr	r3, [sp, #4]
    3aaa:	4798      	blx	r3
    3aac:	9a02      	ldr	r2, [sp, #8]
    3aae:	5c10      	ldrb	r0, [r2, r0]
    3ab0:	4681      	mov	r9, r0
    3ab2:	1c28      	adds	r0, r5, #0
    3ab4:	9b03      	ldr	r3, [sp, #12]
    3ab6:	4798      	blx	r3
    3ab8:	1c07      	adds	r7, r0, #0
    3aba:	1c28      	adds	r0, r5, #0
    3abc:	9a01      	ldr	r2, [sp, #4]
    3abe:	4790      	blx	r2
    3ac0:	9a02      	ldr	r2, [sp, #8]
    3ac2:	5c13      	ldrb	r3, [r2, r0]
    3ac4:	2b02      	cmp	r3, #2
    3ac6:	d003      	beq.n	3ad0 <xQueueGenericSend+0xd4>
    3ac8:	6baa      	ldr	r2, [r5, #56]	; 0x38
    3aca:	3201      	adds	r2, #1
    3acc:	b2d2      	uxtb	r2, r2
    3ace:	e000      	b.n	3ad2 <xQueueGenericSend+0xd6>
    3ad0:	2200      	movs	r2, #0
    3ad2:	4648      	mov	r0, r9
    3ad4:	1c39      	adds	r1, r7, #0
    3ad6:	4b72      	ldr	r3, [pc, #456]	; (3ca0 <xQueueGenericSend+0x2a4>)
    3ad8:	58e3      	ldr	r3, [r4, r3]
    3ada:	4798      	blx	r3
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3adc:	1c28      	adds	r0, r5, #0
    3ade:	4641      	mov	r1, r8
    3ae0:	1c32      	adds	r2, r6, #0
    3ae2:	4b70      	ldr	r3, [pc, #448]	; (3ca4 <xQueueGenericSend+0x2a8>)
    3ae4:	447b      	add	r3, pc
    3ae6:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    3ae8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    3aea:	2b00      	cmp	r3, #0
    3aec:	d00a      	beq.n	3b04 <xQueueGenericSend+0x108>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    3aee:	1c28      	adds	r0, r5, #0
    3af0:	1c31      	adds	r1, r6, #0
    3af2:	4b6d      	ldr	r3, [pc, #436]	; (3ca8 <xQueueGenericSend+0x2ac>)
    3af4:	447b      	add	r3, pc
    3af6:	4798      	blx	r3
    3af8:	2801      	cmp	r0, #1
    3afa:	d110      	bne.n	3b1e <xQueueGenericSend+0x122>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    3afc:	4b6b      	ldr	r3, [pc, #428]	; (3cac <xQueueGenericSend+0x2b0>)
    3afe:	58e3      	ldr	r3, [r4, r3]
    3b00:	4798      	blx	r3
    3b02:	e00c      	b.n	3b1e <xQueueGenericSend+0x122>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3b04:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3b06:	2a00      	cmp	r2, #0
    3b08:	d009      	beq.n	3b1e <xQueueGenericSend+0x122>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    3b0a:	1c28      	adds	r0, r5, #0
    3b0c:	3024      	adds	r0, #36	; 0x24
    3b0e:	4b68      	ldr	r3, [pc, #416]	; (3cb0 <xQueueGenericSend+0x2b4>)
    3b10:	58e3      	ldr	r3, [r4, r3]
    3b12:	4798      	blx	r3
    3b14:	2801      	cmp	r0, #1
    3b16:	d102      	bne.n	3b1e <xQueueGenericSend+0x122>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    3b18:	4b64      	ldr	r3, [pc, #400]	; (3cac <xQueueGenericSend+0x2b0>)
    3b1a:	58e3      	ldr	r3, [r4, r3]
    3b1c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    3b1e:	4b65      	ldr	r3, [pc, #404]	; (3cb4 <xQueueGenericSend+0x2b8>)
    3b20:	58e3      	ldr	r3, [r4, r3]
    3b22:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    3b24:	2001      	movs	r0, #1
    3b26:	e0a5      	b.n	3c74 <xQueueGenericSend+0x278>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    3b28:	9b05      	ldr	r3, [sp, #20]
    3b2a:	2b00      	cmp	r3, #0
    3b2c:	d11c      	bne.n	3b68 <xQueueGenericSend+0x16c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3b2e:	4b61      	ldr	r3, [pc, #388]	; (3cb4 <xQueueGenericSend+0x2b8>)
    3b30:	58e3      	ldr	r3, [r4, r3]
    3b32:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
    3b34:	1c28      	adds	r0, r5, #0
    3b36:	4b56      	ldr	r3, [pc, #344]	; (3c90 <xQueueGenericSend+0x294>)
    3b38:	58e3      	ldr	r3, [r4, r3]
    3b3a:	9301      	str	r3, [sp, #4]
    3b3c:	4798      	blx	r3
    3b3e:	4b55      	ldr	r3, [pc, #340]	; (3c94 <xQueueGenericSend+0x298>)
    3b40:	58e6      	ldr	r6, [r4, r3]
    3b42:	5c33      	ldrb	r3, [r6, r0]
    3b44:	3348      	adds	r3, #72	; 0x48
    3b46:	b2df      	uxtb	r7, r3
    3b48:	1c28      	adds	r0, r5, #0
    3b4a:	9a01      	ldr	r2, [sp, #4]
    3b4c:	4790      	blx	r2
    3b4e:	5c36      	ldrb	r6, [r6, r0]
    3b50:	1c28      	adds	r0, r5, #0
    3b52:	4b51      	ldr	r3, [pc, #324]	; (3c98 <xQueueGenericSend+0x29c>)
    3b54:	58e3      	ldr	r3, [r4, r3]
    3b56:	4798      	blx	r3
    3b58:	1c02      	adds	r2, r0, #0
    3b5a:	1c38      	adds	r0, r7, #0
    3b5c:	1c31      	adds	r1, r6, #0
    3b5e:	4b4f      	ldr	r3, [pc, #316]	; (3c9c <xQueueGenericSend+0x2a0>)
    3b60:	58e3      	ldr	r3, [r4, r3]
    3b62:	4798      	blx	r3
					return errQUEUE_FULL;
    3b64:	2000      	movs	r0, #0
    3b66:	e085      	b.n	3c74 <xQueueGenericSend+0x278>
				}
				else if( xEntryTimeSet == pdFALSE )
    3b68:	4653      	mov	r3, sl
    3b6a:	2b00      	cmp	r3, #0
    3b6c:	d105      	bne.n	3b7a <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3b6e:	4648      	mov	r0, r9
    3b70:	4b51      	ldr	r3, [pc, #324]	; (3cb8 <xQueueGenericSend+0x2bc>)
    3b72:	58e3      	ldr	r3, [r4, r3]
    3b74:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    3b76:	2201      	movs	r2, #1
    3b78:	4692      	mov	sl, r2
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    3b7a:	4b4e      	ldr	r3, [pc, #312]	; (3cb4 <xQueueGenericSend+0x2b8>)
    3b7c:	58e3      	ldr	r3, [r4, r3]
    3b7e:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3b80:	4b4e      	ldr	r3, [pc, #312]	; (3cbc <xQueueGenericSend+0x2c0>)
    3b82:	58e3      	ldr	r3, [r4, r3]
    3b84:	4798      	blx	r3
		prvLockQueue( pxQueue );
    3b86:	4b41      	ldr	r3, [pc, #260]	; (3c8c <xQueueGenericSend+0x290>)
    3b88:	58e3      	ldr	r3, [r4, r3]
    3b8a:	4798      	blx	r3
    3b8c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    3b8e:	3301      	adds	r3, #1
    3b90:	d101      	bne.n	3b96 <xQueueGenericSend+0x19a>
    3b92:	2300      	movs	r3, #0
    3b94:	646b      	str	r3, [r5, #68]	; 0x44
    3b96:	6cab      	ldr	r3, [r5, #72]	; 0x48
    3b98:	3301      	adds	r3, #1
    3b9a:	d101      	bne.n	3ba0 <xQueueGenericSend+0x1a4>
    3b9c:	2300      	movs	r3, #0
    3b9e:	64ab      	str	r3, [r5, #72]	; 0x48
    3ba0:	4b44      	ldr	r3, [pc, #272]	; (3cb4 <xQueueGenericSend+0x2b8>)
    3ba2:	58e3      	ldr	r3, [r4, r3]
    3ba4:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3ba6:	4648      	mov	r0, r9
    3ba8:	a905      	add	r1, sp, #20
    3baa:	4b45      	ldr	r3, [pc, #276]	; (3cc0 <xQueueGenericSend+0x2c4>)
    3bac:	58e3      	ldr	r3, [r4, r3]
    3bae:	4798      	blx	r3
    3bb0:	2800      	cmp	r0, #0
    3bb2:	d13f      	bne.n	3c34 <xQueueGenericSend+0x238>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3bb4:	4b35      	ldr	r3, [pc, #212]	; (3c8c <xQueueGenericSend+0x290>)
    3bb6:	58e3      	ldr	r3, [r4, r3]
    3bb8:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    3bba:	6bab      	ldr	r3, [r5, #56]	; 0x38
    3bbc:	469b      	mov	fp, r3
    3bbe:	6bef      	ldr	r7, [r5, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    3bc0:	4b3c      	ldr	r3, [pc, #240]	; (3cb4 <xQueueGenericSend+0x2b8>)
    3bc2:	58e3      	ldr	r3, [r4, r3]
    3bc4:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    3bc6:	45bb      	cmp	fp, r7
    3bc8:	d12c      	bne.n	3c24 <xQueueGenericSend+0x228>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
    3bca:	1c28      	adds	r0, r5, #0
    3bcc:	4b30      	ldr	r3, [pc, #192]	; (3c90 <xQueueGenericSend+0x294>)
    3bce:	58e3      	ldr	r3, [r4, r3]
    3bd0:	9301      	str	r3, [sp, #4]
    3bd2:	4798      	blx	r3
    3bd4:	4b2f      	ldr	r3, [pc, #188]	; (3c94 <xQueueGenericSend+0x298>)
    3bd6:	58e7      	ldr	r7, [r4, r3]
    3bd8:	5c3b      	ldrb	r3, [r7, r0]
    3bda:	3370      	adds	r3, #112	; 0x70
    3bdc:	b2db      	uxtb	r3, r3
    3bde:	469b      	mov	fp, r3
    3be0:	1c28      	adds	r0, r5, #0
    3be2:	9a01      	ldr	r2, [sp, #4]
    3be4:	4790      	blx	r2
    3be6:	5c3f      	ldrb	r7, [r7, r0]
    3be8:	1c28      	adds	r0, r5, #0
    3bea:	4b2b      	ldr	r3, [pc, #172]	; (3c98 <xQueueGenericSend+0x29c>)
    3bec:	58e3      	ldr	r3, [r4, r3]
    3bee:	4798      	blx	r3
    3bf0:	1c02      	adds	r2, r0, #0
    3bf2:	4658      	mov	r0, fp
    3bf4:	1c39      	adds	r1, r7, #0
    3bf6:	4b29      	ldr	r3, [pc, #164]	; (3c9c <xQueueGenericSend+0x2a0>)
    3bf8:	58e3      	ldr	r3, [r4, r3]
    3bfa:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    3bfc:	1c28      	adds	r0, r5, #0
    3bfe:	3010      	adds	r0, #16
    3c00:	9905      	ldr	r1, [sp, #20]
    3c02:	4b30      	ldr	r3, [pc, #192]	; (3cc4 <xQueueGenericSend+0x2c8>)
    3c04:	58e3      	ldr	r3, [r4, r3]
    3c06:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    3c08:	1c28      	adds	r0, r5, #0
    3c0a:	4b2f      	ldr	r3, [pc, #188]	; (3cc8 <xQueueGenericSend+0x2cc>)
    3c0c:	447b      	add	r3, pc
    3c0e:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    3c10:	4b2e      	ldr	r3, [pc, #184]	; (3ccc <xQueueGenericSend+0x2d0>)
    3c12:	58e3      	ldr	r3, [r4, r3]
    3c14:	4798      	blx	r3
    3c16:	2800      	cmp	r0, #0
    3c18:	d000      	beq.n	3c1c <xQueueGenericSend+0x220>
    3c1a:	e720      	b.n	3a5e <xQueueGenericSend+0x62>
				{
					portYIELD_WITHIN_API();
    3c1c:	4b23      	ldr	r3, [pc, #140]	; (3cac <xQueueGenericSend+0x2b0>)
    3c1e:	58e3      	ldr	r3, [r4, r3]
    3c20:	4798      	blx	r3
    3c22:	e71c      	b.n	3a5e <xQueueGenericSend+0x62>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3c24:	1c28      	adds	r0, r5, #0
    3c26:	4b2a      	ldr	r3, [pc, #168]	; (3cd0 <xQueueGenericSend+0x2d4>)
    3c28:	447b      	add	r3, pc
    3c2a:	4798      	blx	r3
				( void ) xTaskResumeAll();
    3c2c:	4b27      	ldr	r3, [pc, #156]	; (3ccc <xQueueGenericSend+0x2d0>)
    3c2e:	58e3      	ldr	r3, [r4, r3]
    3c30:	4798      	blx	r3
    3c32:	e714      	b.n	3a5e <xQueueGenericSend+0x62>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    3c34:	1c28      	adds	r0, r5, #0
    3c36:	4b27      	ldr	r3, [pc, #156]	; (3cd4 <xQueueGenericSend+0x2d8>)
    3c38:	447b      	add	r3, pc
    3c3a:	4798      	blx	r3
			( void ) xTaskResumeAll();
    3c3c:	4b23      	ldr	r3, [pc, #140]	; (3ccc <xQueueGenericSend+0x2d0>)
    3c3e:	58e3      	ldr	r3, [r4, r3]
    3c40:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
    3c42:	1c28      	adds	r0, r5, #0
    3c44:	4b12      	ldr	r3, [pc, #72]	; (3c90 <xQueueGenericSend+0x294>)
    3c46:	58e3      	ldr	r3, [r4, r3]
    3c48:	9301      	str	r3, [sp, #4]
    3c4a:	4798      	blx	r3
    3c4c:	4b11      	ldr	r3, [pc, #68]	; (3c94 <xQueueGenericSend+0x298>)
    3c4e:	58e6      	ldr	r6, [r4, r3]
    3c50:	5c33      	ldrb	r3, [r6, r0]
    3c52:	3348      	adds	r3, #72	; 0x48
    3c54:	b2df      	uxtb	r7, r3
    3c56:	1c28      	adds	r0, r5, #0
    3c58:	9b01      	ldr	r3, [sp, #4]
    3c5a:	4798      	blx	r3
    3c5c:	5c36      	ldrb	r6, [r6, r0]
    3c5e:	1c28      	adds	r0, r5, #0
    3c60:	4b0d      	ldr	r3, [pc, #52]	; (3c98 <xQueueGenericSend+0x29c>)
    3c62:	58e3      	ldr	r3, [r4, r3]
    3c64:	4798      	blx	r3
    3c66:	1c02      	adds	r2, r0, #0
    3c68:	1c38      	adds	r0, r7, #0
    3c6a:	1c31      	adds	r1, r6, #0
    3c6c:	4b0b      	ldr	r3, [pc, #44]	; (3c9c <xQueueGenericSend+0x2a0>)
    3c6e:	58e3      	ldr	r3, [r4, r3]
    3c70:	4798      	blx	r3
			return errQUEUE_FULL;
    3c72:	2000      	movs	r0, #0
		}
	}
}
    3c74:	b009      	add	sp, #36	; 0x24
    3c76:	bc3c      	pop	{r2, r3, r4, r5}
    3c78:	4690      	mov	r8, r2
    3c7a:	4699      	mov	r9, r3
    3c7c:	46a2      	mov	sl, r4
    3c7e:	46ab      	mov	fp, r5
    3c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c82:	46c0      	nop			; (mov r8, r8)
    3c84:	00004310 	.word	0x00004310
    3c88:	0000027c 	.word	0x0000027c
    3c8c:	000002b4 	.word	0x000002b4
    3c90:	0000019c 	.word	0x0000019c
    3c94:	000002a8 	.word	0x000002a8
    3c98:	0000006c 	.word	0x0000006c
    3c9c:	00000250 	.word	0x00000250
    3ca0:	000002a4 	.word	0x000002a4
    3ca4:	fffffb05 	.word	0xfffffb05
    3ca8:	fffffb85 	.word	0xfffffb85
    3cac:	00000194 	.word	0x00000194
    3cb0:	00000110 	.word	0x00000110
    3cb4:	00000014 	.word	0x00000014
    3cb8:	000002b0 	.word	0x000002b0
    3cbc:	00000138 	.word	0x00000138
    3cc0:	00000130 	.word	0x00000130
    3cc4:	00000068 	.word	0x00000068
    3cc8:	fffffb8d 	.word	0xfffffb8d
    3ccc:	00000200 	.word	0x00000200
    3cd0:	fffffb71 	.word	0xfffffb71
    3cd4:	fffffb61 	.word	0xfffffb61

00003cd8 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    3cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cda:	465f      	mov	r7, fp
    3cdc:	4656      	mov	r6, sl
    3cde:	464d      	mov	r5, r9
    3ce0:	4644      	mov	r4, r8
    3ce2:	b4f0      	push	{r4, r5, r6, r7}
    3ce4:	b085      	sub	sp, #20
    3ce6:	1c04      	adds	r4, r0, #0
    3ce8:	1c0f      	adds	r7, r1, #0
    3cea:	1c16      	adds	r6, r2, #0
    3cec:	4698      	mov	r8, r3
    3cee:	4d56      	ldr	r5, [pc, #344]	; (3e48 <xQueueGenericSendFromISR+0x170>)
    3cf0:	447d      	add	r5, pc
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    3cf2:	2800      	cmp	r0, #0
    3cf4:	d101      	bne.n	3cfa <xQueueGenericSendFromISR+0x22>
    3cf6:	b672      	cpsid	i
    3cf8:	e7fe      	b.n	3cf8 <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    3cfa:	2900      	cmp	r1, #0
    3cfc:	d104      	bne.n	3d08 <xQueueGenericSendFromISR+0x30>
    3cfe:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3d00:	2a00      	cmp	r2, #0
    3d02:	d001      	beq.n	3d08 <xQueueGenericSendFromISR+0x30>
    3d04:	b672      	cpsid	i
    3d06:	e7fe      	b.n	3d06 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    3d08:	4643      	mov	r3, r8
    3d0a:	2b02      	cmp	r3, #2
    3d0c:	d000      	beq.n	3d10 <xQueueGenericSendFromISR+0x38>
    3d0e:	e07f      	b.n	3e10 <xQueueGenericSendFromISR+0x138>
    3d10:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    3d12:	2a01      	cmp	r2, #1
    3d14:	d100      	bne.n	3d18 <xQueueGenericSendFromISR+0x40>
    3d16:	e084      	b.n	3e22 <xQueueGenericSendFromISR+0x14a>
    3d18:	b672      	cpsid	i
    3d1a:	e7fe      	b.n	3d1a <xQueueGenericSendFromISR+0x42>
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );
    3d1c:	1c20      	adds	r0, r4, #0
    3d1e:	4b4b      	ldr	r3, [pc, #300]	; (3e4c <xQueueGenericSendFromISR+0x174>)
    3d20:	58eb      	ldr	r3, [r5, r3]
    3d22:	9300      	str	r3, [sp, #0]
    3d24:	4798      	blx	r3
    3d26:	4b4a      	ldr	r3, [pc, #296]	; (3e50 <xQueueGenericSendFromISR+0x178>)
    3d28:	58eb      	ldr	r3, [r5, r3]
    3d2a:	9301      	str	r3, [sp, #4]
    3d2c:	5c1b      	ldrb	r3, [r3, r0]
    3d2e:	3330      	adds	r3, #48	; 0x30
    3d30:	b2db      	uxtb	r3, r3
    3d32:	469b      	mov	fp, r3
    3d34:	1c20      	adds	r0, r4, #0
    3d36:	9b00      	ldr	r3, [sp, #0]
    3d38:	4798      	blx	r3
    3d3a:	9a01      	ldr	r2, [sp, #4]
    3d3c:	5c10      	ldrb	r0, [r2, r0]
    3d3e:	4682      	mov	sl, r0
    3d40:	1c20      	adds	r0, r4, #0
    3d42:	4b44      	ldr	r3, [pc, #272]	; (3e54 <xQueueGenericSendFromISR+0x17c>)
    3d44:	58eb      	ldr	r3, [r5, r3]
    3d46:	9302      	str	r3, [sp, #8]
    3d48:	4798      	blx	r3
    3d4a:	1c02      	adds	r2, r0, #0
    3d4c:	4658      	mov	r0, fp
    3d4e:	4651      	mov	r1, sl
    3d50:	4b41      	ldr	r3, [pc, #260]	; (3e58 <xQueueGenericSendFromISR+0x180>)
    3d52:	58eb      	ldr	r3, [r5, r3]
    3d54:	4798      	blx	r3
    3d56:	1c20      	adds	r0, r4, #0
    3d58:	9b00      	ldr	r3, [sp, #0]
    3d5a:	4798      	blx	r3
    3d5c:	9a01      	ldr	r2, [sp, #4]
    3d5e:	5c10      	ldrb	r0, [r2, r0]
    3d60:	4683      	mov	fp, r0
    3d62:	1c20      	adds	r0, r4, #0
    3d64:	9b02      	ldr	r3, [sp, #8]
    3d66:	4798      	blx	r3
    3d68:	1c01      	adds	r1, r0, #0
    3d6a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3d6c:	3201      	adds	r2, #1
    3d6e:	b2d2      	uxtb	r2, r2
    3d70:	4658      	mov	r0, fp
    3d72:	4b3a      	ldr	r3, [pc, #232]	; (3e5c <xQueueGenericSendFromISR+0x184>)
    3d74:	58eb      	ldr	r3, [r5, r3]
    3d76:	4798      	blx	r3

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3d78:	1c20      	adds	r0, r4, #0
    3d7a:	1c39      	adds	r1, r7, #0
    3d7c:	4642      	mov	r2, r8
    3d7e:	4b38      	ldr	r3, [pc, #224]	; (3e60 <xQueueGenericSendFromISR+0x188>)
    3d80:	447b      	add	r3, pc
    3d82:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    3d84:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3d86:	3301      	adds	r3, #1
    3d88:	d11f      	bne.n	3dca <xQueueGenericSendFromISR+0xf2>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    3d8a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    3d8c:	2a00      	cmp	r2, #0
    3d8e:	d00c      	beq.n	3daa <xQueueGenericSendFromISR+0xd2>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    3d90:	1c20      	adds	r0, r4, #0
    3d92:	4641      	mov	r1, r8
    3d94:	4b33      	ldr	r3, [pc, #204]	; (3e64 <xQueueGenericSendFromISR+0x18c>)
    3d96:	447b      	add	r3, pc
    3d98:	4798      	blx	r3
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    3d9a:	2701      	movs	r7, #1
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    3d9c:	2801      	cmp	r0, #1
    3d9e:	d146      	bne.n	3e2e <xQueueGenericSendFromISR+0x156>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    3da0:	2e00      	cmp	r6, #0
    3da2:	d031      	beq.n	3e08 <xQueueGenericSendFromISR+0x130>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    3da4:	2301      	movs	r3, #1
    3da6:	6033      	str	r3, [r6, #0]
    3da8:	e041      	b.n	3e2e <xQueueGenericSendFromISR+0x156>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    3daa:	2701      	movs	r7, #1
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3dac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3dae:	2b00      	cmp	r3, #0
    3db0:	d03d      	beq.n	3e2e <xQueueGenericSendFromISR+0x156>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3db2:	1c20      	adds	r0, r4, #0
    3db4:	3024      	adds	r0, #36	; 0x24
    3db6:	4b2c      	ldr	r3, [pc, #176]	; (3e68 <xQueueGenericSendFromISR+0x190>)
    3db8:	58eb      	ldr	r3, [r5, r3]
    3dba:	4798      	blx	r3
    3dbc:	2800      	cmp	r0, #0
    3dbe:	d036      	beq.n	3e2e <xQueueGenericSendFromISR+0x156>
							{
								/* The task waiting has a higher priority so record that a
								context	switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    3dc0:	2e00      	cmp	r6, #0
    3dc2:	d023      	beq.n	3e0c <xQueueGenericSendFromISR+0x134>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    3dc4:	2301      	movs	r3, #1
    3dc6:	6033      	str	r3, [r6, #0]
    3dc8:	e031      	b.n	3e2e <xQueueGenericSendFromISR+0x156>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    3dca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3dcc:	3301      	adds	r3, #1
    3dce:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
    3dd0:	2701      	movs	r7, #1
    3dd2:	e02c      	b.n	3e2e <xQueueGenericSendFromISR+0x156>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    3dd4:	1c20      	adds	r0, r4, #0
    3dd6:	4b1d      	ldr	r3, [pc, #116]	; (3e4c <xQueueGenericSendFromISR+0x174>)
    3dd8:	58eb      	ldr	r3, [r5, r3]
    3dda:	9300      	str	r3, [sp, #0]
    3ddc:	4798      	blx	r3
    3dde:	4b1c      	ldr	r3, [pc, #112]	; (3e50 <xQueueGenericSendFromISR+0x178>)
    3de0:	58ee      	ldr	r6, [r5, r3]
    3de2:	5c33      	ldrb	r3, [r6, r0]
    3de4:	3358      	adds	r3, #88	; 0x58
    3de6:	b2df      	uxtb	r7, r3
    3de8:	1c20      	adds	r0, r4, #0
    3dea:	9a00      	ldr	r2, [sp, #0]
    3dec:	4790      	blx	r2
    3dee:	5c36      	ldrb	r6, [r6, r0]
    3df0:	1c20      	adds	r0, r4, #0
    3df2:	4b18      	ldr	r3, [pc, #96]	; (3e54 <xQueueGenericSendFromISR+0x17c>)
    3df4:	58eb      	ldr	r3, [r5, r3]
    3df6:	4798      	blx	r3
    3df8:	1c02      	adds	r2, r0, #0
    3dfa:	1c38      	adds	r0, r7, #0
    3dfc:	1c31      	adds	r1, r6, #0
    3dfe:	4b16      	ldr	r3, [pc, #88]	; (3e58 <xQueueGenericSendFromISR+0x180>)
    3e00:	58eb      	ldr	r3, [r5, r3]
    3e02:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    3e04:	2700      	movs	r7, #0
    3e06:	e012      	b.n	3e2e <xQueueGenericSendFromISR+0x156>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    3e08:	2701      	movs	r7, #1
    3e0a:	e010      	b.n	3e2e <xQueueGenericSendFromISR+0x156>
    3e0c:	2701      	movs	r7, #1
    3e0e:	e00e      	b.n	3e2e <xQueueGenericSendFromISR+0x156>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3e10:	4b16      	ldr	r3, [pc, #88]	; (3e6c <xQueueGenericSendFromISR+0x194>)
    3e12:	58eb      	ldr	r3, [r5, r3]
    3e14:	4798      	blx	r3
    3e16:	4681      	mov	r9, r0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    3e18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3e1a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    3e1c:	4293      	cmp	r3, r2
    3e1e:	d2d9      	bcs.n	3dd4 <xQueueGenericSendFromISR+0xfc>
    3e20:	e77c      	b.n	3d1c <xQueueGenericSendFromISR+0x44>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3e22:	4b12      	ldr	r3, [pc, #72]	; (3e6c <xQueueGenericSendFromISR+0x194>)
    3e24:	58eb      	ldr	r3, [r5, r3]
    3e26:	4798      	blx	r3
    3e28:	4681      	mov	r9, r0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    3e2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3e2c:	e776      	b.n	3d1c <xQueueGenericSendFromISR+0x44>
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3e2e:	4648      	mov	r0, r9
    3e30:	4b0f      	ldr	r3, [pc, #60]	; (3e70 <xQueueGenericSendFromISR+0x198>)
    3e32:	58eb      	ldr	r3, [r5, r3]
    3e34:	4798      	blx	r3

	return xReturn;
}
    3e36:	1c38      	adds	r0, r7, #0
    3e38:	b005      	add	sp, #20
    3e3a:	bc3c      	pop	{r2, r3, r4, r5}
    3e3c:	4690      	mov	r8, r2
    3e3e:	4699      	mov	r9, r3
    3e40:	46a2      	mov	sl, r4
    3e42:	46ab      	mov	fp, r5
    3e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e46:	46c0      	nop			; (mov r8, r8)
    3e48:	00004034 	.word	0x00004034
    3e4c:	0000019c 	.word	0x0000019c
    3e50:	000002a8 	.word	0x000002a8
    3e54:	0000006c 	.word	0x0000006c
    3e58:	00000250 	.word	0x00000250
    3e5c:	000002a4 	.word	0x000002a4
    3e60:	fffff869 	.word	0xfffff869
    3e64:	fffff8e3 	.word	0xfffff8e3
    3e68:	00000110 	.word	0x00000110
    3e6c:	00000274 	.word	0x00000274
    3e70:	00000134 	.word	0x00000134

00003e74 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    3e74:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e76:	465f      	mov	r7, fp
    3e78:	4656      	mov	r6, sl
    3e7a:	464d      	mov	r5, r9
    3e7c:	4644      	mov	r4, r8
    3e7e:	b4f0      	push	{r4, r5, r6, r7}
    3e80:	b089      	sub	sp, #36	; 0x24
    3e82:	1c05      	adds	r5, r0, #0
    3e84:	1c0f      	adds	r7, r1, #0
    3e86:	9205      	str	r2, [sp, #20]
    3e88:	9303      	str	r3, [sp, #12]
    3e8a:	4cba      	ldr	r4, [pc, #744]	; (4174 <xQueueGenericReceive+0x300>)
    3e8c:	447c      	add	r4, pc
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    3e8e:	2800      	cmp	r0, #0
    3e90:	d101      	bne.n	3e96 <xQueueGenericReceive+0x22>
    3e92:	b672      	cpsid	i
    3e94:	e7fe      	b.n	3e94 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    3e96:	2900      	cmp	r1, #0
    3e98:	d104      	bne.n	3ea4 <xQueueGenericReceive+0x30>
    3e9a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3e9c:	2a00      	cmp	r2, #0
    3e9e:	d001      	beq.n	3ea4 <xQueueGenericReceive+0x30>
    3ea0:	b672      	cpsid	i
    3ea2:	e7fe      	b.n	3ea2 <xQueueGenericReceive+0x2e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    3ea4:	4bb4      	ldr	r3, [pc, #720]	; (4178 <xQueueGenericReceive+0x304>)
    3ea6:	58e3      	ldr	r3, [r4, r3]
    3ea8:	4798      	blx	r3
    3eaa:	2800      	cmp	r0, #0
    3eac:	d102      	bne.n	3eb4 <xQueueGenericReceive+0x40>
    3eae:	9b05      	ldr	r3, [sp, #20]
    3eb0:	2b00      	cmp	r3, #0
    3eb2:	d107      	bne.n	3ec4 <xQueueGenericReceive+0x50>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    3eb4:	2200      	movs	r2, #0
    3eb6:	4691      	mov	r9, r2
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    3eb8:	4bb0      	ldr	r3, [pc, #704]	; (417c <xQueueGenericReceive+0x308>)
    3eba:	58e3      	ldr	r3, [r4, r3]
    3ebc:	9304      	str	r3, [sp, #16]
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3ebe:	ab06      	add	r3, sp, #24
    3ec0:	4698      	mov	r8, r3
    3ec2:	e001      	b.n	3ec8 <xQueueGenericReceive+0x54>

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    3ec4:	b672      	cpsid	i
    3ec6:	e7fe      	b.n	3ec6 <xQueueGenericReceive+0x52>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    3ec8:	9a04      	ldr	r2, [sp, #16]
    3eca:	4790      	blx	r2
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    3ecc:	6bab      	ldr	r3, [r5, #56]	; 0x38
    3ece:	2b00      	cmp	r3, #0
    3ed0:	d100      	bne.n	3ed4 <xQueueGenericReceive+0x60>
    3ed2:	e086      	b.n	3fe2 <xQueueGenericReceive+0x16e>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    3ed4:	68eb      	ldr	r3, [r5, #12]
    3ed6:	4698      	mov	r8, r3

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    3ed8:	1c28      	adds	r0, r5, #0
    3eda:	1c39      	adds	r1, r7, #0
    3edc:	4ba8      	ldr	r3, [pc, #672]	; (4180 <xQueueGenericReceive+0x30c>)
    3ede:	447b      	add	r3, pc
    3ee0:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    3ee2:	9a03      	ldr	r2, [sp, #12]
    3ee4:	2a00      	cmp	r2, #0
    3ee6:	d150      	bne.n	3f8a <xQueueGenericReceive+0x116>
				{
					traceQUEUE_RECEIVE( pxQueue );
    3ee8:	1c28      	adds	r0, r5, #0
    3eea:	4ba6      	ldr	r3, [pc, #664]	; (4184 <xQueueGenericReceive+0x310>)
    3eec:	58e6      	ldr	r6, [r4, r3]
    3eee:	47b0      	blx	r6
    3ef0:	4ba5      	ldr	r3, [pc, #660]	; (4188 <xQueueGenericReceive+0x314>)
    3ef2:	58e3      	ldr	r3, [r4, r3]
    3ef4:	9301      	str	r3, [sp, #4]
    3ef6:	5c1b      	ldrb	r3, [r3, r0]
    3ef8:	3328      	adds	r3, #40	; 0x28
    3efa:	b2db      	uxtb	r3, r3
    3efc:	4699      	mov	r9, r3
    3efe:	1c28      	adds	r0, r5, #0
    3f00:	47b0      	blx	r6
    3f02:	9b01      	ldr	r3, [sp, #4]
    3f04:	5c1f      	ldrb	r7, [r3, r0]
    3f06:	1c28      	adds	r0, r5, #0
    3f08:	4ba0      	ldr	r3, [pc, #640]	; (418c <xQueueGenericReceive+0x318>)
    3f0a:	58e3      	ldr	r3, [r4, r3]
    3f0c:	9303      	str	r3, [sp, #12]
    3f0e:	4798      	blx	r3
    3f10:	1c02      	adds	r2, r0, #0
    3f12:	4648      	mov	r0, r9
    3f14:	1c39      	adds	r1, r7, #0
    3f16:	4b9e      	ldr	r3, [pc, #632]	; (4190 <xQueueGenericReceive+0x31c>)
    3f18:	58e3      	ldr	r3, [r4, r3]
    3f1a:	4798      	blx	r3
    3f1c:	1c28      	adds	r0, r5, #0
    3f1e:	47b0      	blx	r6
    3f20:	9a01      	ldr	r2, [sp, #4]
    3f22:	5c10      	ldrb	r0, [r2, r0]
    3f24:	4680      	mov	r8, r0
    3f26:	1c28      	adds	r0, r5, #0
    3f28:	9b03      	ldr	r3, [sp, #12]
    3f2a:	4798      	blx	r3
    3f2c:	1c07      	adds	r7, r0, #0
    3f2e:	1c28      	adds	r0, r5, #0
    3f30:	47b0      	blx	r6
    3f32:	9a01      	ldr	r2, [sp, #4]
    3f34:	5c13      	ldrb	r3, [r2, r0]
    3f36:	2b02      	cmp	r3, #2
    3f38:	d107      	bne.n	3f4a <xQueueGenericReceive+0xd6>
    3f3a:	4b96      	ldr	r3, [pc, #600]	; (4194 <xQueueGenericReceive+0x320>)
    3f3c:	58e3      	ldr	r3, [r4, r3]
    3f3e:	4798      	blx	r3
    3f40:	4b95      	ldr	r3, [pc, #596]	; (4198 <xQueueGenericReceive+0x324>)
    3f42:	58e3      	ldr	r3, [r4, r3]
    3f44:	4798      	blx	r3
    3f46:	1c02      	adds	r2, r0, #0
    3f48:	e002      	b.n	3f50 <xQueueGenericReceive+0xdc>
    3f4a:	6baa      	ldr	r2, [r5, #56]	; 0x38
    3f4c:	3a01      	subs	r2, #1
    3f4e:	b2d2      	uxtb	r2, r2
    3f50:	4640      	mov	r0, r8
    3f52:	1c39      	adds	r1, r7, #0
    3f54:	4b91      	ldr	r3, [pc, #580]	; (419c <xQueueGenericReceive+0x328>)
    3f56:	58e3      	ldr	r3, [r4, r3]
    3f58:	4798      	blx	r3

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    3f5a:	6bab      	ldr	r3, [r5, #56]	; 0x38
    3f5c:	3b01      	subs	r3, #1
    3f5e:	63ab      	str	r3, [r5, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3f60:	682b      	ldr	r3, [r5, #0]
    3f62:	2b00      	cmp	r3, #0
    3f64:	d103      	bne.n	3f6e <xQueueGenericReceive+0xfa>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    3f66:	4b8e      	ldr	r3, [pc, #568]	; (41a0 <xQueueGenericReceive+0x32c>)
    3f68:	58e3      	ldr	r3, [r4, r3]
    3f6a:	4798      	blx	r3
    3f6c:	6068      	str	r0, [r5, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3f6e:	692a      	ldr	r2, [r5, #16]
    3f70:	2a00      	cmp	r2, #0
    3f72:	d031      	beq.n	3fd8 <xQueueGenericReceive+0x164>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    3f74:	1c28      	adds	r0, r5, #0
    3f76:	3010      	adds	r0, #16
    3f78:	4b8a      	ldr	r3, [pc, #552]	; (41a4 <xQueueGenericReceive+0x330>)
    3f7a:	58e3      	ldr	r3, [r4, r3]
    3f7c:	4798      	blx	r3
    3f7e:	2801      	cmp	r0, #1
    3f80:	d12a      	bne.n	3fd8 <xQueueGenericReceive+0x164>
						{
							queueYIELD_IF_USING_PREEMPTION();
    3f82:	4b89      	ldr	r3, [pc, #548]	; (41a8 <xQueueGenericReceive+0x334>)
    3f84:	58e3      	ldr	r3, [r4, r3]
    3f86:	4798      	blx	r3
    3f88:	e026      	b.n	3fd8 <xQueueGenericReceive+0x164>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					traceQUEUE_PEEK( pxQueue );
    3f8a:	1c28      	adds	r0, r5, #0
    3f8c:	4b7d      	ldr	r3, [pc, #500]	; (4184 <xQueueGenericReceive+0x310>)
    3f8e:	58e3      	ldr	r3, [r4, r3]
    3f90:	9301      	str	r3, [sp, #4]
    3f92:	4798      	blx	r3
    3f94:	4b7c      	ldr	r3, [pc, #496]	; (4188 <xQueueGenericReceive+0x314>)
    3f96:	58e6      	ldr	r6, [r4, r3]
    3f98:	5c33      	ldrb	r3, [r6, r0]
    3f9a:	3378      	adds	r3, #120	; 0x78
    3f9c:	b2df      	uxtb	r7, r3
    3f9e:	1c28      	adds	r0, r5, #0
    3fa0:	9b01      	ldr	r3, [sp, #4]
    3fa2:	4798      	blx	r3
    3fa4:	5c36      	ldrb	r6, [r6, r0]
    3fa6:	1c28      	adds	r0, r5, #0
    3fa8:	4b78      	ldr	r3, [pc, #480]	; (418c <xQueueGenericReceive+0x318>)
    3faa:	58e3      	ldr	r3, [r4, r3]
    3fac:	4798      	blx	r3
    3fae:	1c02      	adds	r2, r0, #0
    3fb0:	1c38      	adds	r0, r7, #0
    3fb2:	1c31      	adds	r1, r6, #0
    3fb4:	4b76      	ldr	r3, [pc, #472]	; (4190 <xQueueGenericReceive+0x31c>)
    3fb6:	58e3      	ldr	r3, [r4, r3]
    3fb8:	4798      	blx	r3

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    3fba:	4642      	mov	r2, r8
    3fbc:	60ea      	str	r2, [r5, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3fbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3fc0:	2b00      	cmp	r3, #0
    3fc2:	d009      	beq.n	3fd8 <xQueueGenericReceive+0x164>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3fc4:	1c28      	adds	r0, r5, #0
    3fc6:	3024      	adds	r0, #36	; 0x24
    3fc8:	4b76      	ldr	r3, [pc, #472]	; (41a4 <xQueueGenericReceive+0x330>)
    3fca:	58e3      	ldr	r3, [r4, r3]
    3fcc:	4798      	blx	r3
    3fce:	2800      	cmp	r0, #0
    3fd0:	d002      	beq.n	3fd8 <xQueueGenericReceive+0x164>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    3fd2:	4b75      	ldr	r3, [pc, #468]	; (41a8 <xQueueGenericReceive+0x334>)
    3fd4:	58e3      	ldr	r3, [r4, r3]
    3fd6:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    3fd8:	4b74      	ldr	r3, [pc, #464]	; (41ac <xQueueGenericReceive+0x338>)
    3fda:	58e3      	ldr	r3, [r4, r3]
    3fdc:	4798      	blx	r3
				return pdPASS;
    3fde:	2001      	movs	r0, #1
    3fe0:	e0c0      	b.n	4164 <xQueueGenericReceive+0x2f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    3fe2:	9a05      	ldr	r2, [sp, #20]
    3fe4:	2a00      	cmp	r2, #0
    3fe6:	d11c      	bne.n	4022 <xQueueGenericReceive+0x1ae>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3fe8:	4b70      	ldr	r3, [pc, #448]	; (41ac <xQueueGenericReceive+0x338>)
    3fea:	58e3      	ldr	r3, [r4, r3]
    3fec:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    3fee:	1c28      	adds	r0, r5, #0
    3ff0:	4b64      	ldr	r3, [pc, #400]	; (4184 <xQueueGenericReceive+0x310>)
    3ff2:	58e3      	ldr	r3, [r4, r3]
    3ff4:	9301      	str	r3, [sp, #4]
    3ff6:	4798      	blx	r3
    3ff8:	4b63      	ldr	r3, [pc, #396]	; (4188 <xQueueGenericReceive+0x314>)
    3ffa:	58e6      	ldr	r6, [r4, r3]
    3ffc:	5c33      	ldrb	r3, [r6, r0]
    3ffe:	3350      	adds	r3, #80	; 0x50
    4000:	b2df      	uxtb	r7, r3
    4002:	1c28      	adds	r0, r5, #0
    4004:	9b01      	ldr	r3, [sp, #4]
    4006:	4798      	blx	r3
    4008:	5c36      	ldrb	r6, [r6, r0]
    400a:	1c28      	adds	r0, r5, #0
    400c:	4b5f      	ldr	r3, [pc, #380]	; (418c <xQueueGenericReceive+0x318>)
    400e:	58e3      	ldr	r3, [r4, r3]
    4010:	4798      	blx	r3
    4012:	1c02      	adds	r2, r0, #0
    4014:	1c38      	adds	r0, r7, #0
    4016:	1c31      	adds	r1, r6, #0
    4018:	4b5d      	ldr	r3, [pc, #372]	; (4190 <xQueueGenericReceive+0x31c>)
    401a:	58e3      	ldr	r3, [r4, r3]
    401c:	4798      	blx	r3
					return errQUEUE_EMPTY;
    401e:	2000      	movs	r0, #0
    4020:	e0a0      	b.n	4164 <xQueueGenericReceive+0x2f0>
				}
				else if( xEntryTimeSet == pdFALSE )
    4022:	464a      	mov	r2, r9
    4024:	2a00      	cmp	r2, #0
    4026:	d105      	bne.n	4034 <xQueueGenericReceive+0x1c0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    4028:	4640      	mov	r0, r8
    402a:	4b61      	ldr	r3, [pc, #388]	; (41b0 <xQueueGenericReceive+0x33c>)
    402c:	58e3      	ldr	r3, [r4, r3]
    402e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    4030:	2301      	movs	r3, #1
    4032:	4699      	mov	r9, r3
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    4034:	4b5d      	ldr	r3, [pc, #372]	; (41ac <xQueueGenericReceive+0x338>)
    4036:	58e3      	ldr	r3, [r4, r3]
    4038:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    403a:	4b5e      	ldr	r3, [pc, #376]	; (41b4 <xQueueGenericReceive+0x340>)
    403c:	58e3      	ldr	r3, [r4, r3]
    403e:	4798      	blx	r3
		prvLockQueue( pxQueue );
    4040:	4b4e      	ldr	r3, [pc, #312]	; (417c <xQueueGenericReceive+0x308>)
    4042:	58e3      	ldr	r3, [r4, r3]
    4044:	4798      	blx	r3
    4046:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    4048:	3301      	adds	r3, #1
    404a:	d101      	bne.n	4050 <xQueueGenericReceive+0x1dc>
    404c:	2300      	movs	r3, #0
    404e:	646b      	str	r3, [r5, #68]	; 0x44
    4050:	6cab      	ldr	r3, [r5, #72]	; 0x48
    4052:	3301      	adds	r3, #1
    4054:	d101      	bne.n	405a <xQueueGenericReceive+0x1e6>
    4056:	2300      	movs	r3, #0
    4058:	64ab      	str	r3, [r5, #72]	; 0x48
    405a:	4b54      	ldr	r3, [pc, #336]	; (41ac <xQueueGenericReceive+0x338>)
    405c:	58e3      	ldr	r3, [r4, r3]
    405e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4060:	4640      	mov	r0, r8
    4062:	a905      	add	r1, sp, #20
    4064:	4b54      	ldr	r3, [pc, #336]	; (41b8 <xQueueGenericReceive+0x344>)
    4066:	58e3      	ldr	r3, [r4, r3]
    4068:	4798      	blx	r3
    406a:	2800      	cmp	r0, #0
    406c:	d15a      	bne.n	4124 <xQueueGenericReceive+0x2b0>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    406e:	4b43      	ldr	r3, [pc, #268]	; (417c <xQueueGenericReceive+0x308>)
    4070:	58e3      	ldr	r3, [r4, r3]
    4072:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    4074:	6bae      	ldr	r6, [r5, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    4076:	4b4d      	ldr	r3, [pc, #308]	; (41ac <xQueueGenericReceive+0x338>)
    4078:	58e3      	ldr	r3, [r4, r3]
    407a:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    407c:	2e00      	cmp	r6, #0
    407e:	d149      	bne.n	4114 <xQueueGenericReceive+0x2a0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    4080:	1c28      	adds	r0, r5, #0
    4082:	4b40      	ldr	r3, [pc, #256]	; (4184 <xQueueGenericReceive+0x310>)
    4084:	58e3      	ldr	r3, [r4, r3]
    4086:	9301      	str	r3, [sp, #4]
    4088:	4798      	blx	r3
    408a:	4b3f      	ldr	r3, [pc, #252]	; (4188 <xQueueGenericReceive+0x314>)
    408c:	58e6      	ldr	r6, [r4, r3]
    408e:	5c33      	ldrb	r3, [r6, r0]
    4090:	3368      	adds	r3, #104	; 0x68
    4092:	b2db      	uxtb	r3, r3
    4094:	469b      	mov	fp, r3
    4096:	1c28      	adds	r0, r5, #0
    4098:	9a01      	ldr	r2, [sp, #4]
    409a:	4790      	blx	r2
    409c:	5c30      	ldrb	r0, [r6, r0]
    409e:	4682      	mov	sl, r0
    40a0:	1c28      	adds	r0, r5, #0
    40a2:	4b3a      	ldr	r3, [pc, #232]	; (418c <xQueueGenericReceive+0x318>)
    40a4:	58e3      	ldr	r3, [r4, r3]
    40a6:	4798      	blx	r3
    40a8:	1c02      	adds	r2, r0, #0
    40aa:	4658      	mov	r0, fp
    40ac:	4651      	mov	r1, sl
    40ae:	4b38      	ldr	r3, [pc, #224]	; (4190 <xQueueGenericReceive+0x31c>)
    40b0:	58e3      	ldr	r3, [r4, r3]
    40b2:	4798      	blx	r3
    40b4:	1c28      	adds	r0, r5, #0
    40b6:	9b01      	ldr	r3, [sp, #4]
    40b8:	4798      	blx	r3
    40ba:	5c33      	ldrb	r3, [r6, r0]
    40bc:	2b02      	cmp	r3, #2
    40be:	d008      	beq.n	40d2 <xQueueGenericReceive+0x25e>
    40c0:	4b34      	ldr	r3, [pc, #208]	; (4194 <xQueueGenericReceive+0x320>)
    40c2:	58e3      	ldr	r3, [r4, r3]
    40c4:	4798      	blx	r3
    40c6:	4b34      	ldr	r3, [pc, #208]	; (4198 <xQueueGenericReceive+0x324>)
    40c8:	58e3      	ldr	r3, [r4, r3]
    40ca:	4798      	blx	r3
    40cc:	4b3b      	ldr	r3, [pc, #236]	; (41bc <xQueueGenericReceive+0x348>)
    40ce:	58e3      	ldr	r3, [r4, r3]
    40d0:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    40d2:	682a      	ldr	r2, [r5, #0]
    40d4:	2a00      	cmp	r2, #0
    40d6:	d109      	bne.n	40ec <xQueueGenericReceive+0x278>
					{
						taskENTER_CRITICAL();
    40d8:	4b28      	ldr	r3, [pc, #160]	; (417c <xQueueGenericReceive+0x308>)
    40da:	58e3      	ldr	r3, [r4, r3]
    40dc:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    40de:	6868      	ldr	r0, [r5, #4]
    40e0:	4b37      	ldr	r3, [pc, #220]	; (41c0 <xQueueGenericReceive+0x34c>)
    40e2:	58e3      	ldr	r3, [r4, r3]
    40e4:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    40e6:	4b31      	ldr	r3, [pc, #196]	; (41ac <xQueueGenericReceive+0x338>)
    40e8:	58e3      	ldr	r3, [r4, r3]
    40ea:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    40ec:	1c28      	adds	r0, r5, #0
    40ee:	3024      	adds	r0, #36	; 0x24
    40f0:	9905      	ldr	r1, [sp, #20]
    40f2:	4b34      	ldr	r3, [pc, #208]	; (41c4 <xQueueGenericReceive+0x350>)
    40f4:	58e3      	ldr	r3, [r4, r3]
    40f6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    40f8:	1c28      	adds	r0, r5, #0
    40fa:	4b33      	ldr	r3, [pc, #204]	; (41c8 <xQueueGenericReceive+0x354>)
    40fc:	447b      	add	r3, pc
    40fe:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    4100:	4b32      	ldr	r3, [pc, #200]	; (41cc <xQueueGenericReceive+0x358>)
    4102:	58e3      	ldr	r3, [r4, r3]
    4104:	4798      	blx	r3
    4106:	2800      	cmp	r0, #0
    4108:	d000      	beq.n	410c <xQueueGenericReceive+0x298>
    410a:	e6dd      	b.n	3ec8 <xQueueGenericReceive+0x54>
				{
					portYIELD_WITHIN_API();
    410c:	4b26      	ldr	r3, [pc, #152]	; (41a8 <xQueueGenericReceive+0x334>)
    410e:	58e3      	ldr	r3, [r4, r3]
    4110:	4798      	blx	r3
    4112:	e6d9      	b.n	3ec8 <xQueueGenericReceive+0x54>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    4114:	1c28      	adds	r0, r5, #0
    4116:	4b2e      	ldr	r3, [pc, #184]	; (41d0 <xQueueGenericReceive+0x35c>)
    4118:	447b      	add	r3, pc
    411a:	4798      	blx	r3
				( void ) xTaskResumeAll();
    411c:	4b2b      	ldr	r3, [pc, #172]	; (41cc <xQueueGenericReceive+0x358>)
    411e:	58e3      	ldr	r3, [r4, r3]
    4120:	4798      	blx	r3
    4122:	e6d1      	b.n	3ec8 <xQueueGenericReceive+0x54>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    4124:	1c28      	adds	r0, r5, #0
    4126:	4b2b      	ldr	r3, [pc, #172]	; (41d4 <xQueueGenericReceive+0x360>)
    4128:	447b      	add	r3, pc
    412a:	4798      	blx	r3
			( void ) xTaskResumeAll();
    412c:	4b27      	ldr	r3, [pc, #156]	; (41cc <xQueueGenericReceive+0x358>)
    412e:	58e3      	ldr	r3, [r4, r3]
    4130:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
    4132:	1c28      	adds	r0, r5, #0
    4134:	4b13      	ldr	r3, [pc, #76]	; (4184 <xQueueGenericReceive+0x310>)
    4136:	58e3      	ldr	r3, [r4, r3]
    4138:	9301      	str	r3, [sp, #4]
    413a:	4798      	blx	r3
    413c:	4b12      	ldr	r3, [pc, #72]	; (4188 <xQueueGenericReceive+0x314>)
    413e:	58e6      	ldr	r6, [r4, r3]
    4140:	5c33      	ldrb	r3, [r6, r0]
    4142:	3350      	adds	r3, #80	; 0x50
    4144:	b2df      	uxtb	r7, r3
    4146:	1c28      	adds	r0, r5, #0
    4148:	9b01      	ldr	r3, [sp, #4]
    414a:	4798      	blx	r3
    414c:	5c36      	ldrb	r6, [r6, r0]
    414e:	1c28      	adds	r0, r5, #0
    4150:	4b0e      	ldr	r3, [pc, #56]	; (418c <xQueueGenericReceive+0x318>)
    4152:	58e3      	ldr	r3, [r4, r3]
    4154:	4798      	blx	r3
    4156:	1c02      	adds	r2, r0, #0
    4158:	1c38      	adds	r0, r7, #0
    415a:	1c31      	adds	r1, r6, #0
    415c:	4b0c      	ldr	r3, [pc, #48]	; (4190 <xQueueGenericReceive+0x31c>)
    415e:	58e3      	ldr	r3, [r4, r3]
    4160:	4798      	blx	r3
			return errQUEUE_EMPTY;
    4162:	2000      	movs	r0, #0
		}
	}
}
    4164:	b009      	add	sp, #36	; 0x24
    4166:	bc3c      	pop	{r2, r3, r4, r5}
    4168:	4690      	mov	r8, r2
    416a:	4699      	mov	r9, r3
    416c:	46a2      	mov	sl, r4
    416e:	46ab      	mov	fp, r5
    4170:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4172:	46c0      	nop			; (mov r8, r8)
    4174:	00003e98 	.word	0x00003e98
    4178:	0000027c 	.word	0x0000027c
    417c:	000002b4 	.word	0x000002b4
    4180:	fffff883 	.word	0xfffff883
    4184:	0000019c 	.word	0x0000019c
    4188:	000002a8 	.word	0x000002a8
    418c:	0000006c 	.word	0x0000006c
    4190:	00000250 	.word	0x00000250
    4194:	00000008 	.word	0x00000008
    4198:	00000080 	.word	0x00000080
    419c:	000002a4 	.word	0x000002a4
    41a0:	000001dc 	.word	0x000001dc
    41a4:	00000110 	.word	0x00000110
    41a8:	00000194 	.word	0x00000194
    41ac:	00000014 	.word	0x00000014
    41b0:	000002b0 	.word	0x000002b0
    41b4:	00000138 	.word	0x00000138
    41b8:	00000130 	.word	0x00000130
    41bc:	0000022c 	.word	0x0000022c
    41c0:	00000160 	.word	0x00000160
    41c4:	00000068 	.word	0x00000068
    41c8:	fffff69d 	.word	0xfffff69d
    41cc:	00000200 	.word	0x00000200
    41d0:	fffff681 	.word	0xfffff681
    41d4:	fffff671 	.word	0xfffff671

000041d8 <uxQueueGetQueueNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
    41d8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	}
    41da:	4770      	bx	lr

000041dc <ucQueueGetQueueType>:

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
		return ( ( Queue_t * ) xQueue )->ucQueueType;
    41dc:	2350      	movs	r3, #80	; 0x50
    41de:	5cc0      	ldrb	r0, [r0, r3]
	}
    41e0:	4770      	bx	lr
    41e2:	46c0      	nop			; (mov r8, r8)

000041e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
    41e4:	b570      	push	{r4, r5, r6, lr}
    41e6:	b082      	sub	sp, #8
    41e8:	1c04      	adds	r4, r0, #0
    41ea:	1c0e      	adds	r6, r1, #0
    41ec:	4d10      	ldr	r5, [pc, #64]	; (4230 <vQueueWaitForMessageRestricted+0x4c>)
    41ee:	447d      	add	r5, pc
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    41f0:	4b10      	ldr	r3, [pc, #64]	; (4234 <vQueueWaitForMessageRestricted+0x50>)
    41f2:	58eb      	ldr	r3, [r5, r3]
    41f4:	4798      	blx	r3
    41f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    41f8:	3301      	adds	r3, #1
    41fa:	d101      	bne.n	4200 <vQueueWaitForMessageRestricted+0x1c>
    41fc:	2300      	movs	r3, #0
    41fe:	6463      	str	r3, [r4, #68]	; 0x44
    4200:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    4202:	3301      	adds	r3, #1
    4204:	d101      	bne.n	420a <vQueueWaitForMessageRestricted+0x26>
    4206:	2300      	movs	r3, #0
    4208:	64a3      	str	r3, [r4, #72]	; 0x48
    420a:	4b0b      	ldr	r3, [pc, #44]	; (4238 <vQueueWaitForMessageRestricted+0x54>)
    420c:	58eb      	ldr	r3, [r5, r3]
    420e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    4210:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4212:	2b00      	cmp	r3, #0
    4214:	d105      	bne.n	4222 <vQueueWaitForMessageRestricted+0x3e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    4216:	1c20      	adds	r0, r4, #0
    4218:	3024      	adds	r0, #36	; 0x24
    421a:	1c31      	adds	r1, r6, #0
    421c:	4b07      	ldr	r3, [pc, #28]	; (423c <vQueueWaitForMessageRestricted+0x58>)
    421e:	58eb      	ldr	r3, [r5, r3]
    4220:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    4222:	1c20      	adds	r0, r4, #0
    4224:	4b06      	ldr	r3, [pc, #24]	; (4240 <vQueueWaitForMessageRestricted+0x5c>)
    4226:	447b      	add	r3, pc
    4228:	4798      	blx	r3
	}
    422a:	b002      	add	sp, #8
    422c:	bd70      	pop	{r4, r5, r6, pc}
    422e:	46c0      	nop			; (mov r8, r8)
    4230:	00003b36 	.word	0x00003b36
    4234:	000002b4 	.word	0x000002b4
    4238:	00000014 	.word	0x00000014
    423c:	00000170 	.word	0x00000170
    4240:	fffff573 	.word	0xfffff573

00004244 <prvTaskIsTaskSuspended>:

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
    4244:	2800      	cmp	r0, #0
    4246:	d101      	bne.n	424c <prvTaskIsTaskSuspended+0x8>
    4248:	b672      	cpsid	i
    424a:	e7fe      	b.n	424a <prvTaskIsTaskSuspended+0x6>

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
	BaseType_t xReturn = pdFALSE;
    424c:	2300      	movs	r3, #0

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    424e:	4a08      	ldr	r2, [pc, #32]	; (4270 <prvTaskIsTaskSuspended+0x2c>)
    4250:	447a      	add	r2, pc
    4252:	6941      	ldr	r1, [r0, #20]
    4254:	4291      	cmp	r1, r2
    4256:	d109      	bne.n	426c <prvTaskIsTaskSuspended+0x28>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    4258:	6a83      	ldr	r3, [r0, #40]	; 0x28
    425a:	4a06      	ldr	r2, [pc, #24]	; (4274 <prvTaskIsTaskSuspended+0x30>)
    425c:	447a      	add	r2, pc
    425e:	3214      	adds	r2, #20
    4260:	4293      	cmp	r3, r2
    4262:	d002      	beq.n	426a <prvTaskIsTaskSuspended+0x26>

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
	BaseType_t xReturn = pdFALSE;
    4264:	425a      	negs	r2, r3
    4266:	4153      	adcs	r3, r2
    4268:	e000      	b.n	426c <prvTaskIsTaskSuspended+0x28>
    426a:	2300      	movs	r3, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    426c:	1c18      	adds	r0, r3, #0
    426e:	4770      	bx	lr
    4270:	1fffd2d0 	.word	0x1fffd2d0
    4274:	1fffd2c4 	.word	0x1fffd2c4

00004278 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4278:	4b0a      	ldr	r3, [pc, #40]	; (42a4 <prvResetNextTaskUnblockTime+0x2c>)
    427a:	447b      	add	r3, pc
    427c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    427e:	681b      	ldr	r3, [r3, #0]
    4280:	2b00      	cmp	r3, #0
    4282:	d105      	bne.n	4290 <prvResetNextTaskUnblockTime+0x18>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    4284:	2201      	movs	r2, #1
    4286:	4252      	negs	r2, r2
    4288:	4b07      	ldr	r3, [pc, #28]	; (42a8 <prvResetNextTaskUnblockTime+0x30>)
    428a:	447b      	add	r3, pc
    428c:	601a      	str	r2, [r3, #0]
    428e:	e008      	b.n	42a2 <prvResetNextTaskUnblockTime+0x2a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4290:	4b06      	ldr	r3, [pc, #24]	; (42ac <prvResetNextTaskUnblockTime+0x34>)
    4292:	447b      	add	r3, pc
    4294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4296:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    4298:	68db      	ldr	r3, [r3, #12]
    429a:	685a      	ldr	r2, [r3, #4]
    429c:	4b04      	ldr	r3, [pc, #16]	; (42b0 <prvResetNextTaskUnblockTime+0x38>)
    429e:	447b      	add	r3, pc
    42a0:	601a      	str	r2, [r3, #0]
	}
}
    42a2:	4770      	bx	lr
    42a4:	1fffd2a6 	.word	0x1fffd2a6
    42a8:	1fffbd86 	.word	0x1fffbd86
    42ac:	1fffd28e 	.word	0x1fffd28e
    42b0:	1fffbd72 	.word	0x1fffbd72

000042b4 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    42b4:	b510      	push	{r4, lr}
    42b6:	b082      	sub	sp, #8
    42b8:	1c04      	adds	r4, r0, #0
    42ba:	4b16      	ldr	r3, [pc, #88]	; (4314 <prvAddCurrentTaskToDelayedList+0x60>)
    42bc:	447b      	add	r3, pc
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    42be:	4a16      	ldr	r2, [pc, #88]	; (4318 <prvAddCurrentTaskToDelayedList+0x64>)
    42c0:	589a      	ldr	r2, [r3, r2]
    42c2:	6812      	ldr	r2, [r2, #0]
    42c4:	6050      	str	r0, [r2, #4]

	if( xTimeToWake < xTickCount )
    42c6:	4a15      	ldr	r2, [pc, #84]	; (431c <prvAddCurrentTaskToDelayedList+0x68>)
    42c8:	447a      	add	r2, pc
    42ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    42cc:	4290      	cmp	r0, r2
    42ce:	d20b      	bcs.n	42e8 <prvAddCurrentTaskToDelayedList+0x34>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    42d0:	4a13      	ldr	r2, [pc, #76]	; (4320 <prvAddCurrentTaskToDelayedList+0x6c>)
    42d2:	447a      	add	r2, pc
    42d4:	6b10      	ldr	r0, [r2, #48]	; 0x30
    42d6:	4a10      	ldr	r2, [pc, #64]	; (4318 <prvAddCurrentTaskToDelayedList+0x64>)
    42d8:	589a      	ldr	r2, [r3, r2]
    42da:	6811      	ldr	r1, [r2, #0]
    42dc:	3104      	adds	r1, #4
    42de:	4a11      	ldr	r2, [pc, #68]	; (4324 <prvAddCurrentTaskToDelayedList+0x70>)
    42e0:	589a      	ldr	r2, [r3, r2]
    42e2:	9201      	str	r2, [sp, #4]
    42e4:	4790      	blx	r2
    42e6:	e012      	b.n	430e <prvAddCurrentTaskToDelayedList+0x5a>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    42e8:	4a0f      	ldr	r2, [pc, #60]	; (4328 <prvAddCurrentTaskToDelayedList+0x74>)
    42ea:	447a      	add	r2, pc
    42ec:	6a90      	ldr	r0, [r2, #40]	; 0x28
    42ee:	4a0a      	ldr	r2, [pc, #40]	; (4318 <prvAddCurrentTaskToDelayedList+0x64>)
    42f0:	589a      	ldr	r2, [r3, r2]
    42f2:	6811      	ldr	r1, [r2, #0]
    42f4:	3104      	adds	r1, #4
    42f6:	4a0b      	ldr	r2, [pc, #44]	; (4324 <prvAddCurrentTaskToDelayedList+0x70>)
    42f8:	589a      	ldr	r2, [r3, r2]
    42fa:	9201      	str	r2, [sp, #4]
    42fc:	4790      	blx	r2

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    42fe:	4b0b      	ldr	r3, [pc, #44]	; (432c <prvAddCurrentTaskToDelayedList+0x78>)
    4300:	447b      	add	r3, pc
    4302:	681b      	ldr	r3, [r3, #0]
    4304:	429c      	cmp	r4, r3
    4306:	d202      	bcs.n	430e <prvAddCurrentTaskToDelayedList+0x5a>
		{
			xNextTaskUnblockTime = xTimeToWake;
    4308:	4b09      	ldr	r3, [pc, #36]	; (4330 <prvAddCurrentTaskToDelayedList+0x7c>)
    430a:	447b      	add	r3, pc
    430c:	601c      	str	r4, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    430e:	b002      	add	sp, #8
    4310:	bd10      	pop	{r4, pc}
    4312:	46c0      	nop			; (mov r8, r8)
    4314:	00003a68 	.word	0x00003a68
    4318:	00000050 	.word	0x00000050
    431c:	1fffd258 	.word	0x1fffd258
    4320:	1fffd24e 	.word	0x1fffd24e
    4324:	000001bc 	.word	0x000001bc
    4328:	1fffd236 	.word	0x1fffd236
    432c:	1fffbd10 	.word	0x1fffbd10
    4330:	1fffbd06 	.word	0x1fffbd06

00004334 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    4334:	b5f0      	push	{r4, r5, r6, r7, lr}
    4336:	465f      	mov	r7, fp
    4338:	4656      	mov	r6, sl
    433a:	464d      	mov	r5, r9
    433c:	4644      	mov	r4, r8
    433e:	b4f0      	push	{r4, r5, r6, r7}
    4340:	b085      	sub	sp, #20
    4342:	4681      	mov	r9, r0
    4344:	1c0f      	adds	r7, r1, #0
    4346:	1c16      	adds	r6, r2, #0
    4348:	469a      	mov	sl, r3
    434a:	4d8e      	ldr	r5, [pc, #568]	; (4584 <xTaskGenericCreate+0x250>)
    434c:	447d      	add	r5, pc
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
    434e:	2800      	cmp	r0, #0
    4350:	d101      	bne.n	4356 <xTaskGenericCreate+0x22>
    4352:	b672      	cpsid	i
    4354:	e7fe      	b.n	4354 <xTaskGenericCreate+0x20>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
    4356:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4358:	2a04      	cmp	r2, #4
    435a:	d901      	bls.n	4360 <xTaskGenericCreate+0x2c>
    435c:	b672      	cpsid	i
    435e:	e7fe      	b.n	435e <xTaskGenericCreate+0x2a>
{
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    4360:	2048      	movs	r0, #72	; 0x48
    4362:	4b89      	ldr	r3, [pc, #548]	; (4588 <xTaskGenericCreate+0x254>)
    4364:	58eb      	ldr	r3, [r5, r3]
    4366:	4798      	blx	r3
    4368:	1e04      	subs	r4, r0, #0

	if( pxNewTCB != NULL )
    436a:	d100      	bne.n	436e <xTaskGenericCreate+0x3a>
    436c:	e0c8      	b.n	4500 <xTaskGenericCreate+0x1cc>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    436e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4370:	2b00      	cmp	r3, #0
    4372:	d000      	beq.n	4376 <xTaskGenericCreate+0x42>
    4374:	e0c0      	b.n	44f8 <xTaskGenericCreate+0x1c4>
    4376:	00b0      	lsls	r0, r6, #2
    4378:	4b83      	ldr	r3, [pc, #524]	; (4588 <xTaskGenericCreate+0x254>)
    437a:	58eb      	ldr	r3, [r5, r3]
    437c:	4798      	blx	r3
    437e:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    4380:	2800      	cmp	r0, #0
    4382:	d104      	bne.n	438e <xTaskGenericCreate+0x5a>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    4384:	1c20      	adds	r0, r4, #0
    4386:	4b81      	ldr	r3, [pc, #516]	; (458c <xTaskGenericCreate+0x258>)
    4388:	58eb      	ldr	r3, [r5, r3]
    438a:	4798      	blx	r3
    438c:	e0b8      	b.n	4500 <xTaskGenericCreate+0x1cc>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
    438e:	00b2      	lsls	r2, r6, #2
    4390:	21a5      	movs	r1, #165	; 0xa5
    4392:	4b7f      	ldr	r3, [pc, #508]	; (4590 <xTaskGenericCreate+0x25c>)
    4394:	58eb      	ldr	r3, [r5, r3]
    4396:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
    4398:	4a7e      	ldr	r2, [pc, #504]	; (4594 <xTaskGenericCreate+0x260>)
    439a:	18b3      	adds	r3, r6, r2
    439c:	009b      	lsls	r3, r3, #2
    439e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    43a0:	18d3      	adds	r3, r2, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    43a2:	2207      	movs	r2, #7
    43a4:	4393      	bics	r3, r2
    43a6:	469b      	mov	fp, r3
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    43a8:	783a      	ldrb	r2, [r7, #0]
    43aa:	2334      	movs	r3, #52	; 0x34
    43ac:	54e2      	strb	r2, [r4, r3]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    43ae:	783b      	ldrb	r3, [r7, #0]
    43b0:	2b00      	cmp	r3, #0
    43b2:	d00a      	beq.n	43ca <xTaskGenericCreate+0x96>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    43b4:	2301      	movs	r3, #1
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    43b6:	5cf9      	ldrb	r1, [r7, r3]
    43b8:	18e2      	adds	r2, r4, r3
    43ba:	3234      	adds	r2, #52	; 0x34
    43bc:	7011      	strb	r1, [r2, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    43be:	5cfa      	ldrb	r2, [r7, r3]
    43c0:	2a00      	cmp	r2, #0
    43c2:	d002      	beq.n	43ca <xTaskGenericCreate+0x96>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    43c4:	3301      	adds	r3, #1
    43c6:	2b05      	cmp	r3, #5
    43c8:	d1f5      	bne.n	43b6 <xTaskGenericCreate+0x82>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    43ca:	2200      	movs	r2, #0
    43cc:	2338      	movs	r3, #56	; 0x38
    43ce:	54e2      	strb	r2, [r4, r3]
    43d0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    43d2:	2e04      	cmp	r6, #4
    43d4:	d900      	bls.n	43d8 <xTaskGenericCreate+0xa4>
    43d6:	2604      	movs	r6, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    43d8:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    43da:	6466      	str	r6, [r4, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    43dc:	1d23      	adds	r3, r4, #4
    43de:	4698      	mov	r8, r3
    43e0:	1c18      	adds	r0, r3, #0
    43e2:	4b6d      	ldr	r3, [pc, #436]	; (4598 <xTaskGenericCreate+0x264>)
    43e4:	58ef      	ldr	r7, [r5, r3]
    43e6:	47b8      	blx	r7
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    43e8:	1c20      	adds	r0, r4, #0
    43ea:	3018      	adds	r0, #24
    43ec:	47b8      	blx	r7

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    43ee:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    43f0:	2305      	movs	r3, #5
    43f2:	1b9e      	subs	r6, r3, r6
    43f4:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    43f6:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    43f8:	4658      	mov	r0, fp
    43fa:	4649      	mov	r1, r9
    43fc:	4652      	mov	r2, sl
    43fe:	4b67      	ldr	r3, [pc, #412]	; (459c <xTaskGenericCreate+0x268>)
    4400:	58eb      	ldr	r3, [r5, r3]
    4402:	4798      	blx	r3
    4404:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    4406:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4408:	2a00      	cmp	r2, #0
    440a:	d000      	beq.n	440e <xTaskGenericCreate+0xda>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    440c:	6014      	str	r4, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    440e:	4b64      	ldr	r3, [pc, #400]	; (45a0 <xTaskGenericCreate+0x26c>)
    4410:	58eb      	ldr	r3, [r5, r3]
    4412:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
    4414:	4b63      	ldr	r3, [pc, #396]	; (45a4 <xTaskGenericCreate+0x270>)
    4416:	447b      	add	r3, pc
    4418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    441a:	3201      	adds	r2, #1
    441c:	635a      	str	r2, [r3, #52]	; 0x34
			if( pxCurrentTCB == NULL )
    441e:	4b62      	ldr	r3, [pc, #392]	; (45a8 <xTaskGenericCreate+0x274>)
    4420:	58eb      	ldr	r3, [r5, r3]
    4422:	681b      	ldr	r3, [r3, #0]
    4424:	2b00      	cmp	r3, #0
    4426:	d134      	bne.n	4492 <xTaskGenericCreate+0x15e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    4428:	4b5f      	ldr	r3, [pc, #380]	; (45a8 <xTaskGenericCreate+0x274>)
    442a:	58eb      	ldr	r3, [r5, r3]
    442c:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    442e:	4b5f      	ldr	r3, [pc, #380]	; (45ac <xTaskGenericCreate+0x278>)
    4430:	447b      	add	r3, pc
    4432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4434:	2b01      	cmp	r3, #1
    4436:	d16c      	bne.n	4512 <xTaskGenericCreate+0x1de>
    4438:	4b5d      	ldr	r3, [pc, #372]	; (45b0 <xTaskGenericCreate+0x27c>)
    443a:	447b      	add	r3, pc
    443c:	1c1e      	adds	r6, r3, #0
    443e:	3638      	adds	r6, #56	; 0x38
    4440:	1c1f      	adds	r7, r3, #0
    4442:	379c      	adds	r7, #156	; 0x9c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    4444:	4b5b      	ldr	r3, [pc, #364]	; (45b4 <xTaskGenericCreate+0x280>)
    4446:	58eb      	ldr	r3, [r5, r3]
    4448:	9301      	str	r3, [sp, #4]
    444a:	1c30      	adds	r0, r6, #0
    444c:	9b01      	ldr	r3, [sp, #4]
    444e:	4798      	blx	r3
    4450:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    4452:	42be      	cmp	r6, r7
    4454:	d1f9      	bne.n	444a <xTaskGenericCreate+0x116>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    4456:	4a58      	ldr	r2, [pc, #352]	; (45b8 <xTaskGenericCreate+0x284>)
    4458:	447a      	add	r2, pc
    445a:	4691      	mov	r9, r2
    445c:	231c      	movs	r3, #28
    445e:	469b      	mov	fp, r3
    4460:	44cb      	add	fp, r9
    4462:	4658      	mov	r0, fp
    4464:	4b53      	ldr	r3, [pc, #332]	; (45b4 <xTaskGenericCreate+0x280>)
    4466:	58ee      	ldr	r6, [r5, r3]
    4468:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    446a:	2230      	movs	r2, #48	; 0x30
    446c:	4692      	mov	sl, r2
    446e:	44ca      	add	sl, r9
    4470:	4650      	mov	r0, sl
    4472:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    4474:	4f51      	ldr	r7, [pc, #324]	; (45bc <xTaskGenericCreate+0x288>)
    4476:	447f      	add	r7, pc
    4478:	1c38      	adds	r0, r7, #0
    447a:	3014      	adds	r0, #20
    447c:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    447e:	4648      	mov	r0, r9
    4480:	3044      	adds	r0, #68	; 0x44
    4482:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    4484:	1c38      	adds	r0, r7, #0
    4486:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    4488:	465b      	mov	r3, fp
    448a:	62bb      	str	r3, [r7, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    448c:	4652      	mov	r2, sl
    448e:	633a      	str	r2, [r7, #48]	; 0x30
    4490:	e03f      	b.n	4512 <xTaskGenericCreate+0x1de>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    4492:	4b4b      	ldr	r3, [pc, #300]	; (45c0 <xTaskGenericCreate+0x28c>)
    4494:	447b      	add	r3, pc
    4496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    4498:	2b00      	cmp	r3, #0
    449a:	d13a      	bne.n	4512 <xTaskGenericCreate+0x1de>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    449c:	4b42      	ldr	r3, [pc, #264]	; (45a8 <xTaskGenericCreate+0x274>)
    449e:	58eb      	ldr	r3, [r5, r3]
    44a0:	681b      	ldr	r3, [r3, #0]
    44a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    44a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    44a6:	429a      	cmp	r2, r3
    44a8:	d333      	bcc.n	4512 <xTaskGenericCreate+0x1de>
					{
						pxCurrentTCB = pxNewTCB;
    44aa:	4b3f      	ldr	r3, [pc, #252]	; (45a8 <xTaskGenericCreate+0x274>)
    44ac:	58eb      	ldr	r3, [r5, r3]
    44ae:	601c      	str	r4, [r3, #0]
    44b0:	e02f      	b.n	4512 <xTaskGenericCreate+0x1de>
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    44b2:	4a44      	ldr	r2, [pc, #272]	; (45c4 <xTaskGenericCreate+0x290>)
    44b4:	447a      	add	r2, pc
    44b6:	65d3      	str	r3, [r2, #92]	; 0x5c
    44b8:	009a      	lsls	r2, r3, #2
    44ba:	18d3      	adds	r3, r2, r3
    44bc:	009b      	lsls	r3, r3, #2
    44be:	4842      	ldr	r0, [pc, #264]	; (45c8 <xTaskGenericCreate+0x294>)
    44c0:	4478      	add	r0, pc
    44c2:	3038      	adds	r0, #56	; 0x38
    44c4:	18c0      	adds	r0, r0, r3
    44c6:	4641      	mov	r1, r8
    44c8:	4b40      	ldr	r3, [pc, #256]	; (45cc <xTaskGenericCreate+0x298>)
    44ca:	58eb      	ldr	r3, [r5, r3]
    44cc:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    44ce:	4b40      	ldr	r3, [pc, #256]	; (45d0 <xTaskGenericCreate+0x29c>)
    44d0:	58eb      	ldr	r3, [r5, r3]
    44d2:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    44d4:	4b3f      	ldr	r3, [pc, #252]	; (45d4 <xTaskGenericCreate+0x2a0>)
    44d6:	447b      	add	r3, pc
    44d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
    44da:	2001      	movs	r0, #1
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    44dc:	2b00      	cmp	r3, #0
    44de:	d049      	beq.n	4574 <xTaskGenericCreate+0x240>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    44e0:	4b31      	ldr	r3, [pc, #196]	; (45a8 <xTaskGenericCreate+0x274>)
    44e2:	58eb      	ldr	r3, [r5, r3]
    44e4:	681b      	ldr	r3, [r3, #0]
    44e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    44e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    44ea:	429a      	cmp	r2, r3
    44ec:	d942      	bls.n	4574 <xTaskGenericCreate+0x240>
			{
				taskYIELD_IF_USING_PREEMPTION();
    44ee:	4b3a      	ldr	r3, [pc, #232]	; (45d8 <xTaskGenericCreate+0x2a4>)
    44f0:	58eb      	ldr	r3, [r5, r3]
    44f2:	4798      	blx	r3
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
    44f4:	2001      	movs	r0, #1
    44f6:	e03d      	b.n	4574 <xTaskGenericCreate+0x240>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    44f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    44fa:	6303      	str	r3, [r0, #48]	; 0x30
    44fc:	1c18      	adds	r0, r3, #0
    44fe:	e746      	b.n	438e <xTaskGenericCreate+0x5a>
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
		traceTASK_CREATE_FAILED();
    4500:	2043      	movs	r0, #67	; 0x43
    4502:	2103      	movs	r1, #3
    4504:	2200      	movs	r2, #0
    4506:	4b35      	ldr	r3, [pc, #212]	; (45dc <xTaskGenericCreate+0x2a8>)
    4508:	58eb      	ldr	r3, [r5, r3]
    450a:	4798      	blx	r3
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    450c:	2001      	movs	r0, #1
    450e:	4240      	negs	r0, r0
    4510:	e030      	b.n	4574 <xTaskGenericCreate+0x240>
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    4512:	4f33      	ldr	r7, [pc, #204]	; (45e0 <xTaskGenericCreate+0x2ac>)
    4514:	447f      	add	r7, pc
    4516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4518:	3301      	adds	r3, #1
    451a:	663b      	str	r3, [r7, #96]	; 0x60

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
    451c:	63e3      	str	r3, [r4, #60]	; 0x3c
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );
    451e:	2003      	movs	r0, #3
    4520:	4b30      	ldr	r3, [pc, #192]	; (45e4 <xTaskGenericCreate+0x2b0>)
    4522:	58eb      	ldr	r3, [r5, r3]
    4524:	4798      	blx	r3
    4526:	6420      	str	r0, [r4, #64]	; 0x40
    4528:	1c20      	adds	r0, r4, #0
    452a:	4b2f      	ldr	r3, [pc, #188]	; (45e8 <xTaskGenericCreate+0x2b4>)
    452c:	58ee      	ldr	r6, [r5, r3]
    452e:	47b0      	blx	r6
    4530:	1c01      	adds	r1, r0, #0
    4532:	1c22      	adds	r2, r4, #0
    4534:	3234      	adds	r2, #52	; 0x34
    4536:	2003      	movs	r0, #3
    4538:	4b2c      	ldr	r3, [pc, #176]	; (45ec <xTaskGenericCreate+0x2b8>)
    453a:	58eb      	ldr	r3, [r5, r3]
    453c:	4798      	blx	r3
    453e:	1c20      	adds	r0, r4, #0
    4540:	47b0      	blx	r6
    4542:	1c01      	adds	r1, r0, #0
    4544:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4546:	b2da      	uxtb	r2, r3
    4548:	2003      	movs	r0, #3
    454a:	4b29      	ldr	r3, [pc, #164]	; (45f0 <xTaskGenericCreate+0x2bc>)
    454c:	58eb      	ldr	r3, [r5, r3]
    454e:	4798      	blx	r3
    4550:	1c20      	adds	r0, r4, #0
    4552:	47b0      	blx	r6
    4554:	1c02      	adds	r2, r0, #0
    4556:	201b      	movs	r0, #27
    4558:	2103      	movs	r1, #3
    455a:	4b20      	ldr	r3, [pc, #128]	; (45dc <xTaskGenericCreate+0x2a8>)
    455c:	58eb      	ldr	r3, [r5, r3]
    455e:	4798      	blx	r3

			prvAddTaskToReadyList( pxNewTCB );
    4560:	1c20      	adds	r0, r4, #0
    4562:	47b0      	blx	r6
    4564:	4b23      	ldr	r3, [pc, #140]	; (45f4 <xTaskGenericCreate+0x2c0>)
    4566:	58eb      	ldr	r3, [r5, r3]
    4568:	4798      	blx	r3
    456a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    456c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    456e:	4293      	cmp	r3, r2
    4570:	d89f      	bhi.n	44b2 <xTaskGenericCreate+0x17e>
    4572:	e7a1      	b.n	44b8 <xTaskGenericCreate+0x184>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
    4574:	b005      	add	sp, #20
    4576:	bc3c      	pop	{r2, r3, r4, r5}
    4578:	4690      	mov	r8, r2
    457a:	4699      	mov	r9, r3
    457c:	46a2      	mov	sl, r4
    457e:	46ab      	mov	fp, r5
    4580:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4582:	46c0      	nop			; (mov r8, r8)
    4584:	000039d8 	.word	0x000039d8
    4588:	000000dc 	.word	0x000000dc
    458c:	00000088 	.word	0x00000088
    4590:	000001ac 	.word	0x000001ac
    4594:	3fffffff 	.word	0x3fffffff
    4598:	000000b4 	.word	0x000000b4
    459c:	0000029c 	.word	0x0000029c
    45a0:	000002b4 	.word	0x000002b4
    45a4:	1fffd10a 	.word	0x1fffd10a
    45a8:	00000050 	.word	0x00000050
    45ac:	1fffd0f0 	.word	0x1fffd0f0
    45b0:	1fffd0e6 	.word	0x1fffd0e6
    45b4:	000000f4 	.word	0x000000f4
    45b8:	1fffd148 	.word	0x1fffd148
    45bc:	1fffd0aa 	.word	0x1fffd0aa
    45c0:	1fffd10c 	.word	0x1fffd10c
    45c4:	1fffd0ec 	.word	0x1fffd0ec
    45c8:	1fffd060 	.word	0x1fffd060
    45cc:	0000009c 	.word	0x0000009c
    45d0:	00000014 	.word	0x00000014
    45d4:	1fffd0ca 	.word	0x1fffd0ca
    45d8:	00000194 	.word	0x00000194
    45dc:	00000250 	.word	0x00000250
    45e0:	1fffd08c 	.word	0x1fffd08c
    45e4:	000002bc 	.word	0x000002bc
    45e8:	00000080 	.word	0x00000080
    45ec:	0000014c 	.word	0x0000014c
    45f0:	00000270 	.word	0x00000270
    45f4:	000001d4 	.word	0x000001d4

000045f8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    45f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    45fa:	b083      	sub	sp, #12
    45fc:	1c05      	adds	r5, r0, #0
    45fe:	4c25      	ldr	r4, [pc, #148]	; (4694 <vTaskResume+0x9c>)
    4600:	447c      	add	r4, pc
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
    4602:	2800      	cmp	r0, #0
    4604:	d101      	bne.n	460a <vTaskResume+0x12>
    4606:	b672      	cpsid	i
    4608:	e7fe      	b.n	4608 <vTaskResume+0x10>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    460a:	4b23      	ldr	r3, [pc, #140]	; (4698 <vTaskResume+0xa0>)
    460c:	58e3      	ldr	r3, [r4, r3]
    460e:	681b      	ldr	r3, [r3, #0]
    4610:	4298      	cmp	r0, r3
    4612:	d03d      	beq.n	4690 <vTaskResume+0x98>
		{
			taskENTER_CRITICAL();
    4614:	4b21      	ldr	r3, [pc, #132]	; (469c <vTaskResume+0xa4>)
    4616:	58e3      	ldr	r3, [r4, r3]
    4618:	4798      	blx	r3
			{
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    461a:	1c28      	adds	r0, r5, #0
    461c:	4b20      	ldr	r3, [pc, #128]	; (46a0 <vTaskResume+0xa8>)
    461e:	447b      	add	r3, pc
    4620:	4798      	blx	r3
    4622:	2801      	cmp	r0, #1
    4624:	d131      	bne.n	468a <vTaskResume+0x92>
				{
					traceTASK_RESUME( pxTCB );
    4626:	1c28      	adds	r0, r5, #0
    4628:	4b1e      	ldr	r3, [pc, #120]	; (46a4 <vTaskResume+0xac>)
    462a:	58e6      	ldr	r6, [r4, r3]
    462c:	47b0      	blx	r6
    462e:	1c02      	adds	r2, r0, #0
    4630:	208b      	movs	r0, #139	; 0x8b
    4632:	2103      	movs	r1, #3
    4634:	4b1c      	ldr	r3, [pc, #112]	; (46a8 <vTaskResume+0xb0>)
    4636:	58e3      	ldr	r3, [r4, r3]
    4638:	4798      	blx	r3

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
    463a:	1d2f      	adds	r7, r5, #4
    463c:	1c38      	adds	r0, r7, #0
    463e:	4b1b      	ldr	r3, [pc, #108]	; (46ac <vTaskResume+0xb4>)
    4640:	58e3      	ldr	r3, [r4, r3]
    4642:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    4644:	1c28      	adds	r0, r5, #0
    4646:	47b0      	blx	r6
    4648:	4b19      	ldr	r3, [pc, #100]	; (46b0 <vTaskResume+0xb8>)
    464a:	58e3      	ldr	r3, [r4, r3]
    464c:	4798      	blx	r3
    464e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    4650:	4a18      	ldr	r2, [pc, #96]	; (46b4 <vTaskResume+0xbc>)
    4652:	447a      	add	r2, pc
    4654:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    4656:	4293      	cmp	r3, r2
    4658:	d902      	bls.n	4660 <vTaskResume+0x68>
    465a:	4a17      	ldr	r2, [pc, #92]	; (46b8 <vTaskResume+0xc0>)
    465c:	447a      	add	r2, pc
    465e:	65d3      	str	r3, [r2, #92]	; 0x5c
    4660:	009a      	lsls	r2, r3, #2
    4662:	18d3      	adds	r3, r2, r3
    4664:	009b      	lsls	r3, r3, #2
    4666:	4815      	ldr	r0, [pc, #84]	; (46bc <vTaskResume+0xc4>)
    4668:	4478      	add	r0, pc
    466a:	3038      	adds	r0, #56	; 0x38
    466c:	18c0      	adds	r0, r0, r3
    466e:	1c39      	adds	r1, r7, #0
    4670:	4b13      	ldr	r3, [pc, #76]	; (46c0 <vTaskResume+0xc8>)
    4672:	58e3      	ldr	r3, [r4, r3]
    4674:	4798      	blx	r3

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4676:	4b08      	ldr	r3, [pc, #32]	; (4698 <vTaskResume+0xa0>)
    4678:	58e3      	ldr	r3, [r4, r3]
    467a:	681b      	ldr	r3, [r3, #0]
    467c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4680:	429a      	cmp	r2, r3
    4682:	d302      	bcc.n	468a <vTaskResume+0x92>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    4684:	4b0f      	ldr	r3, [pc, #60]	; (46c4 <vTaskResume+0xcc>)
    4686:	58e3      	ldr	r3, [r4, r3]
    4688:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    468a:	4b0f      	ldr	r3, [pc, #60]	; (46c8 <vTaskResume+0xd0>)
    468c:	58e3      	ldr	r3, [r4, r3]
    468e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4690:	b003      	add	sp, #12
    4692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4694:	00003724 	.word	0x00003724
    4698:	00000050 	.word	0x00000050
    469c:	000002b4 	.word	0x000002b4
    46a0:	fffffc23 	.word	0xfffffc23
    46a4:	00000080 	.word	0x00000080
    46a8:	00000250 	.word	0x00000250
    46ac:	00000148 	.word	0x00000148
    46b0:	000001d4 	.word	0x000001d4
    46b4:	1fffcf4e 	.word	0x1fffcf4e
    46b8:	1fffcf44 	.word	0x1fffcf44
    46bc:	1fffceb8 	.word	0x1fffceb8
    46c0:	0000009c 	.word	0x0000009c
    46c4:	00000194 	.word	0x00000194
    46c8:	00000014 	.word	0x00000014

000046cc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    46cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    46ce:	4647      	mov	r7, r8
    46d0:	b480      	push	{r7}
    46d2:	b082      	sub	sp, #8
    46d4:	1c05      	adds	r5, r0, #0
    46d6:	4c2d      	ldr	r4, [pc, #180]	; (478c <xTaskResumeFromISR+0xc0>)
    46d8:	447c      	add	r4, pc
	BaseType_t xYieldRequired = pdFALSE;
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
    46da:	2800      	cmp	r0, #0
    46dc:	d101      	bne.n	46e2 <xTaskResumeFromISR+0x16>
    46de:	b672      	cpsid	i
    46e0:	e7fe      	b.n	46e0 <xTaskResumeFromISR+0x14>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    46e2:	4b2b      	ldr	r3, [pc, #172]	; (4790 <xTaskResumeFromISR+0xc4>)
    46e4:	58e3      	ldr	r3, [r4, r3]
    46e6:	4798      	blx	r3
    46e8:	4680      	mov	r8, r0
		{
			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    46ea:	1c28      	adds	r0, r5, #0
    46ec:	4b29      	ldr	r3, [pc, #164]	; (4794 <xTaskResumeFromISR+0xc8>)
    46ee:	447b      	add	r3, pc
    46f0:	4798      	blx	r3

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
	BaseType_t xYieldRequired = pdFALSE;
    46f2:	2600      	movs	r6, #0
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    46f4:	2801      	cmp	r0, #1
    46f6:	d13f      	bne.n	4778 <xTaskResumeFromISR+0xac>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );
    46f8:	1c28      	adds	r0, r5, #0
    46fa:	4b27      	ldr	r3, [pc, #156]	; (4798 <xTaskResumeFromISR+0xcc>)
    46fc:	58e3      	ldr	r3, [r4, r3]
    46fe:	4798      	blx	r3
    4700:	1c02      	adds	r2, r0, #0
    4702:	208c      	movs	r0, #140	; 0x8c
    4704:	2103      	movs	r1, #3
    4706:	4b25      	ldr	r3, [pc, #148]	; (479c <xTaskResumeFromISR+0xd0>)
    4708:	58e3      	ldr	r3, [r4, r3]
    470a:	4798      	blx	r3

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    470c:	4b24      	ldr	r3, [pc, #144]	; (47a0 <xTaskResumeFromISR+0xd4>)
    470e:	447b      	add	r3, pc
    4710:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4712:	2b00      	cmp	r3, #0
    4714:	d127      	bne.n	4766 <xTaskResumeFromISR+0x9a>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4716:	4b23      	ldr	r3, [pc, #140]	; (47a4 <xTaskResumeFromISR+0xd8>)
    4718:	58e3      	ldr	r3, [r4, r3]
    471a:	681b      	ldr	r3, [r3, #0]
    471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    471e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    4720:	429a      	cmp	r2, r3
    4722:	4176      	adcs	r6, r6
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
    4724:	1d2f      	adds	r7, r5, #4
    4726:	1c38      	adds	r0, r7, #0
    4728:	4b1f      	ldr	r3, [pc, #124]	; (47a8 <xTaskResumeFromISR+0xdc>)
    472a:	58e3      	ldr	r3, [r4, r3]
    472c:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    472e:	1c28      	adds	r0, r5, #0
    4730:	4b19      	ldr	r3, [pc, #100]	; (4798 <xTaskResumeFromISR+0xcc>)
    4732:	58e3      	ldr	r3, [r4, r3]
    4734:	4798      	blx	r3
    4736:	4b1d      	ldr	r3, [pc, #116]	; (47ac <xTaskResumeFromISR+0xe0>)
    4738:	58e3      	ldr	r3, [r4, r3]
    473a:	4798      	blx	r3
    473c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    473e:	4a1c      	ldr	r2, [pc, #112]	; (47b0 <xTaskResumeFromISR+0xe4>)
    4740:	447a      	add	r2, pc
    4742:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    4744:	4293      	cmp	r3, r2
    4746:	d902      	bls.n	474e <xTaskResumeFromISR+0x82>
    4748:	4a1a      	ldr	r2, [pc, #104]	; (47b4 <xTaskResumeFromISR+0xe8>)
    474a:	447a      	add	r2, pc
    474c:	65d3      	str	r3, [r2, #92]	; 0x5c
    474e:	009a      	lsls	r2, r3, #2
    4750:	18d3      	adds	r3, r2, r3
    4752:	009b      	lsls	r3, r3, #2
    4754:	4818      	ldr	r0, [pc, #96]	; (47b8 <xTaskResumeFromISR+0xec>)
    4756:	4478      	add	r0, pc
    4758:	3038      	adds	r0, #56	; 0x38
    475a:	18c0      	adds	r0, r0, r3
    475c:	1c39      	adds	r1, r7, #0
    475e:	4b17      	ldr	r3, [pc, #92]	; (47bc <xTaskResumeFromISR+0xf0>)
    4760:	58e3      	ldr	r3, [r4, r3]
    4762:	4798      	blx	r3
    4764:	e008      	b.n	4778 <xTaskResumeFromISR+0xac>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4766:	1c29      	adds	r1, r5, #0
    4768:	3118      	adds	r1, #24
    476a:	4815      	ldr	r0, [pc, #84]	; (47c0 <xTaskResumeFromISR+0xf4>)
    476c:	4478      	add	r0, pc
    476e:	3014      	adds	r0, #20
    4770:	4b12      	ldr	r3, [pc, #72]	; (47bc <xTaskResumeFromISR+0xf0>)
    4772:	58e3      	ldr	r3, [r4, r3]
    4774:	4798      	blx	r3

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
	BaseType_t xYieldRequired = pdFALSE;
    4776:	2600      	movs	r6, #0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4778:	4640      	mov	r0, r8
    477a:	4b12      	ldr	r3, [pc, #72]	; (47c4 <xTaskResumeFromISR+0xf8>)
    477c:	58e3      	ldr	r3, [r4, r3]
    477e:	4798      	blx	r3

		return xYieldRequired;
	}
    4780:	1c30      	adds	r0, r6, #0
    4782:	b002      	add	sp, #8
    4784:	bc04      	pop	{r2}
    4786:	4690      	mov	r8, r2
    4788:	bdf0      	pop	{r4, r5, r6, r7, pc}
    478a:	46c0      	nop			; (mov r8, r8)
    478c:	0000364c 	.word	0x0000364c
    4790:	00000274 	.word	0x00000274
    4794:	fffffb53 	.word	0xfffffb53
    4798:	00000080 	.word	0x00000080
    479c:	00000250 	.word	0x00000250
    47a0:	1fffce92 	.word	0x1fffce92
    47a4:	00000050 	.word	0x00000050
    47a8:	00000148 	.word	0x00000148
    47ac:	000001d4 	.word	0x000001d4
    47b0:	1fffce60 	.word	0x1fffce60
    47b4:	1fffce56 	.word	0x1fffce56
    47b8:	1fffcdca 	.word	0x1fffcdca
    47bc:	0000009c 	.word	0x0000009c
    47c0:	1fffcdb4 	.word	0x1fffcdb4
    47c4:	00000134 	.word	0x00000134

000047c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    47c8:	b530      	push	{r4, r5, lr}
    47ca:	b087      	sub	sp, #28
    47cc:	4c14      	ldr	r4, [pc, #80]	; (4820 <vTaskStartScheduler+0x58>)
    47ce:	447c      	add	r4, pc
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    47d0:	2300      	movs	r3, #0
    47d2:	9300      	str	r3, [sp, #0]
    47d4:	9301      	str	r3, [sp, #4]
    47d6:	9302      	str	r3, [sp, #8]
    47d8:	9303      	str	r3, [sp, #12]
    47da:	4812      	ldr	r0, [pc, #72]	; (4824 <vTaskStartScheduler+0x5c>)
    47dc:	4478      	add	r0, pc
    47de:	4912      	ldr	r1, [pc, #72]	; (4828 <vTaskStartScheduler+0x60>)
    47e0:	4479      	add	r1, pc
    47e2:	228c      	movs	r2, #140	; 0x8c
    47e4:	4d11      	ldr	r5, [pc, #68]	; (482c <vTaskStartScheduler+0x64>)
    47e6:	5965      	ldr	r5, [r4, r5]
    47e8:	47a8      	blx	r5
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    47ea:	2801      	cmp	r0, #1
    47ec:	d111      	bne.n	4812 <vTaskStartScheduler+0x4a>
		{
			xReturn = xTimerCreateTimerTask();
    47ee:	4b10      	ldr	r3, [pc, #64]	; (4830 <vTaskStartScheduler+0x68>)
    47f0:	58e3      	ldr	r3, [r4, r3]
    47f2:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    47f4:	2801      	cmp	r0, #1
    47f6:	d10c      	bne.n	4812 <vTaskStartScheduler+0x4a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    47f8:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
    47fa:	2201      	movs	r2, #1
    47fc:	4b0d      	ldr	r3, [pc, #52]	; (4834 <vTaskStartScheduler+0x6c>)
    47fe:	447b      	add	r3, pc
    4800:	659a      	str	r2, [r3, #88]	; 0x58
		xTickCount = ( TickType_t ) 0U;
    4802:	2200      	movs	r2, #0
    4804:	4b0c      	ldr	r3, [pc, #48]	; (4838 <vTaskStartScheduler+0x70>)
    4806:	447b      	add	r3, pc
    4808:	62da      	str	r2, [r3, #44]	; 0x2c
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    480a:	4b0c      	ldr	r3, [pc, #48]	; (483c <vTaskStartScheduler+0x74>)
    480c:	58e3      	ldr	r3, [r4, r3]
    480e:	4798      	blx	r3
    4810:	e003      	b.n	481a <vTaskStartScheduler+0x52>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
    4812:	2800      	cmp	r0, #0
    4814:	d101      	bne.n	481a <vTaskStartScheduler+0x52>
    4816:	b672      	cpsid	i
    4818:	e7fe      	b.n	4818 <vTaskStartScheduler+0x50>
	}
}
    481a:	b007      	add	sp, #28
    481c:	bd30      	pop	{r4, r5, pc}
    481e:	46c0      	nop			; (mov r8, r8)
    4820:	00003556 	.word	0x00003556
    4824:	00000421 	.word	0x00000421
    4828:	00003508 	.word	0x00003508
    482c:	00000070 	.word	0x00000070
    4830:	000001c4 	.word	0x000001c4
    4834:	1fffcda2 	.word	0x1fffcda2
    4838:	1fffcd1a 	.word	0x1fffcd1a
    483c:	00000060 	.word	0x00000060

00004840 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    4840:	4b02      	ldr	r3, [pc, #8]	; (484c <vTaskSuspendAll+0xc>)
    4842:	447b      	add	r3, pc
    4844:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    4846:	3201      	adds	r2, #1
    4848:	669a      	str	r2, [r3, #104]	; 0x68
}
    484a:	4770      	bx	lr
    484c:	1fffcd5e 	.word	0x1fffcd5e

00004850 <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    4850:	b530      	push	{r4, r5, lr}
    4852:	b083      	sub	sp, #12
    4854:	4c06      	ldr	r4, [pc, #24]	; (4870 <xTaskGetTickCount+0x20>)
    4856:	447c      	add	r4, pc
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    4858:	4b06      	ldr	r3, [pc, #24]	; (4874 <xTaskGetTickCount+0x24>)
    485a:	58e3      	ldr	r3, [r4, r3]
    485c:	4798      	blx	r3
	{
		xTicks = xTickCount;
    485e:	4b06      	ldr	r3, [pc, #24]	; (4878 <xTaskGetTickCount+0x28>)
    4860:	447b      	add	r3, pc
    4862:	6add      	ldr	r5, [r3, #44]	; 0x2c
	}
	taskEXIT_CRITICAL();
    4864:	4b05      	ldr	r3, [pc, #20]	; (487c <xTaskGetTickCount+0x2c>)
    4866:	58e3      	ldr	r3, [r4, r3]
    4868:	4798      	blx	r3

	return xTicks;
}
    486a:	1c28      	adds	r0, r5, #0
    486c:	b003      	add	sp, #12
    486e:	bd30      	pop	{r4, r5, pc}
    4870:	000034ce 	.word	0x000034ce
    4874:	000002b4 	.word	0x000002b4
    4878:	1fffccc0 	.word	0x1fffccc0
    487c:	00000014 	.word	0x00000014

00004880 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    4880:	b530      	push	{r4, r5, lr}
    4882:	b083      	sub	sp, #12
    4884:	4c06      	ldr	r4, [pc, #24]	; (48a0 <xTaskGetTickCountFromISR+0x20>)
    4886:	447c      	add	r4, pc
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4888:	4b06      	ldr	r3, [pc, #24]	; (48a4 <xTaskGetTickCountFromISR+0x24>)
    488a:	58e3      	ldr	r3, [r4, r3]
    488c:	4798      	blx	r3
	{
		xReturn = xTickCount;
    488e:	4b06      	ldr	r3, [pc, #24]	; (48a8 <xTaskGetTickCountFromISR+0x28>)
    4890:	447b      	add	r3, pc
    4892:	6add      	ldr	r5, [r3, #44]	; 0x2c
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4894:	4b05      	ldr	r3, [pc, #20]	; (48ac <xTaskGetTickCountFromISR+0x2c>)
    4896:	58e3      	ldr	r3, [r4, r3]
    4898:	4798      	blx	r3

	return xReturn;
}
    489a:	1c28      	adds	r0, r5, #0
    489c:	b003      	add	sp, #12
    489e:	bd30      	pop	{r4, r5, pc}
    48a0:	0000349e 	.word	0x0000349e
    48a4:	00000274 	.word	0x00000274
    48a8:	1fffcc90 	.word	0x1fffcc90
    48ac:	00000134 	.word	0x00000134

000048b0 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    48b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    48b2:	4657      	mov	r7, sl
    48b4:	464e      	mov	r6, r9
    48b6:	4645      	mov	r5, r8
    48b8:	b4e0      	push	{r5, r6, r7}
    48ba:	b082      	sub	sp, #8
    48bc:	4c58      	ldr	r4, [pc, #352]	; (4a20 <xTaskIncrementTick+0x170>)
    48be:	447c      	add	r4, pc
BaseType_t xSwitchRequired = pdFALSE;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
    48c0:	4b58      	ldr	r3, [pc, #352]	; (4a24 <xTaskIncrementTick+0x174>)
    48c2:	447b      	add	r3, pc
    48c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    48c6:	2b01      	cmp	r3, #1
    48c8:	d004      	beq.n	48d4 <xTaskIncrementTick+0x24>
    48ca:	4b57      	ldr	r3, [pc, #348]	; (4a28 <xTaskIncrementTick+0x178>)
    48cc:	447b      	add	r3, pc
    48ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    48d0:	2b00      	cmp	r3, #0
    48d2:	d108      	bne.n	48e6 <xTaskIncrementTick+0x36>
    48d4:	4b55      	ldr	r3, [pc, #340]	; (4a2c <xTaskIncrementTick+0x17c>)
    48d6:	58e3      	ldr	r3, [r4, r3]
    48d8:	681a      	ldr	r2, [r3, #0]
    48da:	3201      	adds	r2, #1
    48dc:	601a      	str	r2, [r3, #0]
    48de:	2000      	movs	r0, #0
    48e0:	4b53      	ldr	r3, [pc, #332]	; (4a30 <xTaskIncrementTick+0x180>)
    48e2:	58e3      	ldr	r3, [r4, r3]
    48e4:	4798      	blx	r3
    48e6:	4b53      	ldr	r3, [pc, #332]	; (4a34 <xTaskIncrementTick+0x184>)
    48e8:	447b      	add	r3, pc
    48ea:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    48ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    48ee:	2b00      	cmp	r3, #0
    48f0:	d000      	beq.n	48f4 <xTaskIncrementTick+0x44>
    48f2:	e07f      	b.n	49f4 <xTaskIncrementTick+0x144>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    48f4:	4b50      	ldr	r3, [pc, #320]	; (4a38 <xTaskIncrementTick+0x188>)
    48f6:	447b      	add	r3, pc
    48f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48fa:	3201      	adds	r2, #1
    48fc:	62da      	str	r2, [r3, #44]	; 0x2c

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    48fe:	6adf      	ldr	r7, [r3, #44]	; 0x2c

			if( xConstTickCount == ( TickType_t ) 0U )
    4900:	2f00      	cmp	r7, #0
    4902:	d115      	bne.n	4930 <xTaskIncrementTick+0x80>
			{
				taskSWITCH_DELAYED_LISTS();
    4904:	4b4d      	ldr	r3, [pc, #308]	; (4a3c <xTaskIncrementTick+0x18c>)
    4906:	447b      	add	r3, pc
    4908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    490a:	681b      	ldr	r3, [r3, #0]
    490c:	2b00      	cmp	r3, #0
    490e:	d001      	beq.n	4914 <xTaskIncrementTick+0x64>
    4910:	b672      	cpsid	i
    4912:	e7fe      	b.n	4912 <xTaskIncrementTick+0x62>
    4914:	4b4a      	ldr	r3, [pc, #296]	; (4a40 <xTaskIncrementTick+0x190>)
    4916:	447b      	add	r3, pc
    4918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    491a:	6b19      	ldr	r1, [r3, #48]	; 0x30
    491c:	6299      	str	r1, [r3, #40]	; 0x28
    491e:	631a      	str	r2, [r3, #48]	; 0x30
    4920:	4b48      	ldr	r3, [pc, #288]	; (4a44 <xTaskIncrementTick+0x194>)
    4922:	447b      	add	r3, pc
    4924:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    4926:	3201      	adds	r2, #1
    4928:	671a      	str	r2, [r3, #112]	; 0x70
    492a:	4b47      	ldr	r3, [pc, #284]	; (4a48 <xTaskIncrementTick+0x198>)
    492c:	447b      	add	r3, pc
    492e:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    4930:	4b46      	ldr	r3, [pc, #280]	; (4a4c <xTaskIncrementTick+0x19c>)
    4932:	447b      	add	r3, pc
    4934:	681b      	ldr	r3, [r3, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    4936:	2600      	movs	r6, #0

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    4938:	429f      	cmp	r7, r3
    493a:	d34d      	bcc.n	49d8 <xTaskIncrementTick+0x128>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    493c:	4a44      	ldr	r2, [pc, #272]	; (4a50 <xTaskIncrementTick+0x1a0>)
    493e:	447a      	add	r2, pc
    4940:	4692      	mov	sl, r2
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    4942:	4b44      	ldr	r3, [pc, #272]	; (4a54 <xTaskIncrementTick+0x1a4>)
    4944:	447b      	add	r3, pc
    4946:	3338      	adds	r3, #56	; 0x38
    4948:	4699      	mov	r9, r3
    494a:	e000      	b.n	494e <xTaskIncrementTick+0x9e>
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
							{
								xSwitchRequired = pdTRUE;
    494c:	2601      	movs	r6, #1
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    494e:	4652      	mov	r2, sl
    4950:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4952:	681b      	ldr	r3, [r3, #0]
    4954:	2b00      	cmp	r3, #0
    4956:	d105      	bne.n	4964 <xTaskIncrementTick+0xb4>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    4958:	2201      	movs	r2, #1
    495a:	4252      	negs	r2, r2
    495c:	4b3e      	ldr	r3, [pc, #248]	; (4a58 <xTaskIncrementTick+0x1a8>)
    495e:	447b      	add	r3, pc
    4960:	601a      	str	r2, [r3, #0]
						break;
    4962:	e039      	b.n	49d8 <xTaskIncrementTick+0x128>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4964:	4b3d      	ldr	r3, [pc, #244]	; (4a5c <xTaskIncrementTick+0x1ac>)
    4966:	447b      	add	r3, pc
    4968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    496a:	68db      	ldr	r3, [r3, #12]
    496c:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    496e:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
    4970:	429f      	cmp	r7, r3
    4972:	d203      	bcs.n	497c <xTaskIncrementTick+0xcc>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
    4974:	4a3a      	ldr	r2, [pc, #232]	; (4a60 <xTaskIncrementTick+0x1b0>)
    4976:	447a      	add	r2, pc
    4978:	6013      	str	r3, [r2, #0]
							break;
    497a:	e02d      	b.n	49d8 <xTaskIncrementTick+0x128>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    497c:	1d2b      	adds	r3, r5, #4
    497e:	4698      	mov	r8, r3
    4980:	1c18      	adds	r0, r3, #0
    4982:	4b38      	ldr	r3, [pc, #224]	; (4a64 <xTaskIncrementTick+0x1b4>)
    4984:	58e3      	ldr	r3, [r4, r3]
    4986:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    4988:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    498a:	2a00      	cmp	r2, #0
    498c:	d004      	beq.n	4998 <xTaskIncrementTick+0xe8>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    498e:	1c28      	adds	r0, r5, #0
    4990:	3018      	adds	r0, #24
    4992:	4b34      	ldr	r3, [pc, #208]	; (4a64 <xTaskIncrementTick+0x1b4>)
    4994:	58e3      	ldr	r3, [r4, r3]
    4996:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    4998:	1c28      	adds	r0, r5, #0
    499a:	4b33      	ldr	r3, [pc, #204]	; (4a68 <xTaskIncrementTick+0x1b8>)
    499c:	58e3      	ldr	r3, [r4, r3]
    499e:	4798      	blx	r3
    49a0:	4b32      	ldr	r3, [pc, #200]	; (4a6c <xTaskIncrementTick+0x1bc>)
    49a2:	58e3      	ldr	r3, [r4, r3]
    49a4:	4798      	blx	r3
    49a6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    49a8:	4a31      	ldr	r2, [pc, #196]	; (4a70 <xTaskIncrementTick+0x1c0>)
    49aa:	447a      	add	r2, pc
    49ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    49ae:	4293      	cmp	r3, r2
    49b0:	d902      	bls.n	49b8 <xTaskIncrementTick+0x108>
    49b2:	4a30      	ldr	r2, [pc, #192]	; (4a74 <xTaskIncrementTick+0x1c4>)
    49b4:	447a      	add	r2, pc
    49b6:	65d3      	str	r3, [r2, #92]	; 0x5c
    49b8:	0098      	lsls	r0, r3, #2
    49ba:	18c0      	adds	r0, r0, r3
    49bc:	0080      	lsls	r0, r0, #2
    49be:	4448      	add	r0, r9
    49c0:	4641      	mov	r1, r8
    49c2:	4b2d      	ldr	r3, [pc, #180]	; (4a78 <xTaskIncrementTick+0x1c8>)
    49c4:	58e3      	ldr	r3, [r4, r3]
    49c6:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    49c8:	4b2c      	ldr	r3, [pc, #176]	; (4a7c <xTaskIncrementTick+0x1cc>)
    49ca:	58e3      	ldr	r3, [r4, r3]
    49cc:	681b      	ldr	r3, [r3, #0]
    49ce:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    49d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    49d2:	429a      	cmp	r2, r3
    49d4:	d2ba      	bcs.n	494c <xTaskIncrementTick+0x9c>
    49d6:	e7ba      	b.n	494e <xTaskIncrementTick+0x9e>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    49d8:	4b28      	ldr	r3, [pc, #160]	; (4a7c <xTaskIncrementTick+0x1cc>)
    49da:	58e3      	ldr	r3, [r4, r3]
    49dc:	681b      	ldr	r3, [r3, #0]
    49de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    49e0:	009a      	lsls	r2, r3, #2
    49e2:	18d3      	adds	r3, r2, r3
    49e4:	009b      	lsls	r3, r3, #2
    49e6:	4a26      	ldr	r2, [pc, #152]	; (4a80 <xTaskIncrementTick+0x1d0>)
    49e8:	447a      	add	r2, pc
    49ea:	18d3      	adds	r3, r2, r3
    49ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    49ee:	2b01      	cmp	r3, #1
    49f0:	d807      	bhi.n	4a02 <xTaskIncrementTick+0x152>
    49f2:	e007      	b.n	4a04 <xTaskIncrementTick+0x154>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    49f4:	4b23      	ldr	r3, [pc, #140]	; (4a84 <xTaskIncrementTick+0x1d4>)
    49f6:	447b      	add	r3, pc
    49f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    49fa:	3201      	adds	r2, #1
    49fc:	66da      	str	r2, [r3, #108]	; 0x6c

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    49fe:	2600      	movs	r6, #0
    4a00:	e000      	b.n	4a04 <xTaskIncrementTick+0x154>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
    4a02:	2601      	movs	r6, #1
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    4a04:	4b20      	ldr	r3, [pc, #128]	; (4a88 <xTaskIncrementTick+0x1d8>)
    4a06:	447b      	add	r3, pc
    4a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    4a0a:	2b00      	cmp	r3, #0
    4a0c:	d000      	beq.n	4a10 <xTaskIncrementTick+0x160>
		{
			xSwitchRequired = pdTRUE;
    4a0e:	2601      	movs	r6, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
    4a10:	1c30      	adds	r0, r6, #0
    4a12:	b002      	add	sp, #8
    4a14:	bc1c      	pop	{r2, r3, r4}
    4a16:	4690      	mov	r8, r2
    4a18:	4699      	mov	r9, r3
    4a1a:	46a2      	mov	sl, r4
    4a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a1e:	46c0      	nop			; (mov r8, r8)
    4a20:	00003466 	.word	0x00003466
    4a24:	1fffccde 	.word	0x1fffccde
    4a28:	1fffccd4 	.word	0x1fffccd4
    4a2c:	00000228 	.word	0x00000228
    4a30:	00000054 	.word	0x00000054
    4a34:	1fffccb8 	.word	0x1fffccb8
    4a38:	1fffcc2a 	.word	0x1fffcc2a
    4a3c:	1fffcc1a 	.word	0x1fffcc1a
    4a40:	1fffcc0a 	.word	0x1fffcc0a
    4a44:	1fffcc7e 	.word	0x1fffcc7e
    4a48:	fffff949 	.word	0xfffff949
    4a4c:	1fffb6de 	.word	0x1fffb6de
    4a50:	1fffcbe2 	.word	0x1fffcbe2
    4a54:	1fffcbdc 	.word	0x1fffcbdc
    4a58:	1fffb6b2 	.word	0x1fffb6b2
    4a5c:	1fffcbba 	.word	0x1fffcbba
    4a60:	1fffb69a 	.word	0x1fffb69a
    4a64:	00000148 	.word	0x00000148
    4a68:	00000080 	.word	0x00000080
    4a6c:	000001d4 	.word	0x000001d4
    4a70:	1fffcbf6 	.word	0x1fffcbf6
    4a74:	1fffcbec 	.word	0x1fffcbec
    4a78:	0000009c 	.word	0x0000009c
    4a7c:	00000050 	.word	0x00000050
    4a80:	1fffcb38 	.word	0x1fffcb38
    4a84:	1fffcbaa 	.word	0x1fffcbaa
    4a88:	1fffcb9a 	.word	0x1fffcb9a

00004a8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    4a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a8e:	464f      	mov	r7, r9
    4a90:	b480      	push	{r7}
    4a92:	b082      	sub	sp, #8
    4a94:	4c42      	ldr	r4, [pc, #264]	; (4ba0 <xTaskResumeAll+0x114>)
    4a96:	447c      	add	r4, pc
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    4a98:	4b42      	ldr	r3, [pc, #264]	; (4ba4 <xTaskResumeAll+0x118>)
    4a9a:	447b      	add	r3, pc
    4a9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4a9e:	2b00      	cmp	r3, #0
    4aa0:	d101      	bne.n	4aa6 <xTaskResumeAll+0x1a>
    4aa2:	b672      	cpsid	i
    4aa4:	e7fe      	b.n	4aa4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    4aa6:	4b40      	ldr	r3, [pc, #256]	; (4ba8 <xTaskResumeAll+0x11c>)
    4aa8:	58e3      	ldr	r3, [r4, r3]
    4aaa:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    4aac:	4b3f      	ldr	r3, [pc, #252]	; (4bac <xTaskResumeAll+0x120>)
    4aae:	447b      	add	r3, pc
    4ab0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    4ab2:	3a01      	subs	r2, #1
    4ab4:	669a      	str	r2, [r3, #104]	; 0x68

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    4ab8:	2500      	movs	r5, #0
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4aba:	2b00      	cmp	r3, #0
    4abc:	d168      	bne.n	4b90 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    4abe:	4b3c      	ldr	r3, [pc, #240]	; (4bb0 <xTaskResumeAll+0x124>)
    4ac0:	447b      	add	r3, pc
    4ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4ac4:	2b00      	cmp	r3, #0
    4ac6:	d063      	beq.n	4b90 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    4ac8:	4a3a      	ldr	r2, [pc, #232]	; (4bb4 <xTaskResumeAll+0x128>)
    4aca:	447a      	add	r2, pc
    4acc:	4691      	mov	r9, r2
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
    4ace:	4b3a      	ldr	r3, [pc, #232]	; (4bb8 <xTaskResumeAll+0x12c>)
    4ad0:	447b      	add	r3, pc
    4ad2:	1c1e      	adds	r6, r3, #0
    4ad4:	3638      	adds	r6, #56	; 0x38
    4ad6:	e030      	b.n	4b3a <xTaskResumeAll+0xae>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    4ad8:	4b38      	ldr	r3, [pc, #224]	; (4bbc <xTaskResumeAll+0x130>)
    4ada:	447b      	add	r3, pc
    4adc:	6a1b      	ldr	r3, [r3, #32]
    4ade:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4ae0:	1c28      	adds	r0, r5, #0
    4ae2:	3018      	adds	r0, #24
    4ae4:	4b36      	ldr	r3, [pc, #216]	; (4bc0 <xTaskResumeAll+0x134>)
    4ae6:	58e3      	ldr	r3, [r4, r3]
    4ae8:	9301      	str	r3, [sp, #4]
    4aea:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    4aec:	1d2f      	adds	r7, r5, #4
    4aee:	1c38      	adds	r0, r7, #0
    4af0:	9b01      	ldr	r3, [sp, #4]
    4af2:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    4af4:	1c28      	adds	r0, r5, #0
    4af6:	4b33      	ldr	r3, [pc, #204]	; (4bc4 <xTaskResumeAll+0x138>)
    4af8:	58e3      	ldr	r3, [r4, r3]
    4afa:	4798      	blx	r3
    4afc:	4b32      	ldr	r3, [pc, #200]	; (4bc8 <xTaskResumeAll+0x13c>)
    4afe:	58e3      	ldr	r3, [r4, r3]
    4b00:	4798      	blx	r3
    4b02:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    4b04:	4a31      	ldr	r2, [pc, #196]	; (4bcc <xTaskResumeAll+0x140>)
    4b06:	447a      	add	r2, pc
    4b08:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    4b0a:	4293      	cmp	r3, r2
    4b0c:	d902      	bls.n	4b14 <xTaskResumeAll+0x88>
    4b0e:	4a30      	ldr	r2, [pc, #192]	; (4bd0 <xTaskResumeAll+0x144>)
    4b10:	447a      	add	r2, pc
    4b12:	65d3      	str	r3, [r2, #92]	; 0x5c
    4b14:	0098      	lsls	r0, r3, #2
    4b16:	18c0      	adds	r0, r0, r3
    4b18:	0080      	lsls	r0, r0, #2
    4b1a:	1830      	adds	r0, r6, r0
    4b1c:	1c39      	adds	r1, r7, #0
    4b1e:	4b2d      	ldr	r3, [pc, #180]	; (4bd4 <xTaskResumeAll+0x148>)
    4b20:	58e3      	ldr	r3, [r4, r3]
    4b22:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4b24:	4b2c      	ldr	r3, [pc, #176]	; (4bd8 <xTaskResumeAll+0x14c>)
    4b26:	58e3      	ldr	r3, [r4, r3]
    4b28:	681b      	ldr	r3, [r3, #0]
    4b2a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    4b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4b2e:	429a      	cmp	r2, r3
    4b30:	d303      	bcc.n	4b3a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
    4b32:	2201      	movs	r2, #1
    4b34:	4b29      	ldr	r3, [pc, #164]	; (4bdc <xTaskResumeAll+0x150>)
    4b36:	447b      	add	r3, pc
    4b38:	675a      	str	r2, [r3, #116]	; 0x74
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    4b3a:	464a      	mov	r2, r9
    4b3c:	6952      	ldr	r2, [r2, #20]
    4b3e:	2a00      	cmp	r2, #0
    4b40:	d1ca      	bne.n	4ad8 <xTaskResumeAll+0x4c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    4b42:	4b27      	ldr	r3, [pc, #156]	; (4be0 <xTaskResumeAll+0x154>)
    4b44:	447b      	add	r3, pc
    4b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    4b48:	2b00      	cmp	r3, #0
    4b4a:	d017      	beq.n	4b7c <xTaskResumeAll+0xf0>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    4b4c:	4b25      	ldr	r3, [pc, #148]	; (4be4 <xTaskResumeAll+0x158>)
    4b4e:	447b      	add	r3, pc
    4b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    4b52:	2b00      	cmp	r3, #0
    4b54:	d012      	beq.n	4b7c <xTaskResumeAll+0xf0>
					{
						if( xTaskIncrementTick() != pdFALSE )
    4b56:	4b24      	ldr	r3, [pc, #144]	; (4be8 <xTaskResumeAll+0x15c>)
    4b58:	58e3      	ldr	r3, [r4, r3]
    4b5a:	9301      	str	r3, [sp, #4]
						{
							xYieldPending = pdTRUE;
    4b5c:	4e23      	ldr	r6, [pc, #140]	; (4bec <xTaskResumeAll+0x160>)
    4b5e:	447e      	add	r6, pc
    4b60:	2501      	movs	r5, #1
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
    4b62:	9b01      	ldr	r3, [sp, #4]
    4b64:	4798      	blx	r3
    4b66:	2800      	cmp	r0, #0
    4b68:	d000      	beq.n	4b6c <xTaskResumeAll+0xe0>
						{
							xYieldPending = pdTRUE;
    4b6a:	6775      	str	r5, [r6, #116]	; 0x74
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    4b6c:	4b20      	ldr	r3, [pc, #128]	; (4bf0 <xTaskResumeAll+0x164>)
    4b6e:	447b      	add	r3, pc
    4b70:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    4b72:	3a01      	subs	r2, #1
    4b74:	66da      	str	r2, [r3, #108]	; 0x6c
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    4b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    4b78:	2b00      	cmp	r3, #0
    4b7a:	d1f2      	bne.n	4b62 <xTaskResumeAll+0xd6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    4b7c:	4b1d      	ldr	r3, [pc, #116]	; (4bf4 <xTaskResumeAll+0x168>)
    4b7e:	447b      	add	r3, pc
    4b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    4b82:	2500      	movs	r5, #0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    4b84:	2b01      	cmp	r3, #1
    4b86:	d103      	bne.n	4b90 <xTaskResumeAll+0x104>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    4b88:	4b1b      	ldr	r3, [pc, #108]	; (4bf8 <xTaskResumeAll+0x16c>)
    4b8a:	58e3      	ldr	r3, [r4, r3]
    4b8c:	4798      	blx	r3

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    4b8e:	2501      	movs	r5, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    4b90:	4b1a      	ldr	r3, [pc, #104]	; (4bfc <xTaskResumeAll+0x170>)
    4b92:	58e3      	ldr	r3, [r4, r3]
    4b94:	4798      	blx	r3

	return xAlreadyYielded;
}
    4b96:	1c28      	adds	r0, r5, #0
    4b98:	b002      	add	sp, #8
    4b9a:	bc04      	pop	{r2}
    4b9c:	4691      	mov	r9, r2
    4b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ba0:	0000328e 	.word	0x0000328e
    4ba4:	1fffcb06 	.word	0x1fffcb06
    4ba8:	000002b4 	.word	0x000002b4
    4bac:	1fffcaf2 	.word	0x1fffcaf2
    4bb0:	1fffca60 	.word	0x1fffca60
    4bb4:	1fffca56 	.word	0x1fffca56
    4bb8:	1fffca50 	.word	0x1fffca50
    4bbc:	1fffca46 	.word	0x1fffca46
    4bc0:	00000148 	.word	0x00000148
    4bc4:	00000080 	.word	0x00000080
    4bc8:	000001d4 	.word	0x000001d4
    4bcc:	1fffca9a 	.word	0x1fffca9a
    4bd0:	1fffca90 	.word	0x1fffca90
    4bd4:	0000009c 	.word	0x0000009c
    4bd8:	00000050 	.word	0x00000050
    4bdc:	1fffca6a 	.word	0x1fffca6a
    4be0:	1fffca5c 	.word	0x1fffca5c
    4be4:	1fffca52 	.word	0x1fffca52
    4be8:	00000248 	.word	0x00000248
    4bec:	1fffca42 	.word	0x1fffca42
    4bf0:	1fffca32 	.word	0x1fffca32
    4bf4:	1fffca22 	.word	0x1fffca22
    4bf8:	00000194 	.word	0x00000194
    4bfc:	00000014 	.word	0x00000014

00004c00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    4c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c02:	464f      	mov	r7, r9
    4c04:	4646      	mov	r6, r8
    4c06:	b4c0      	push	{r6, r7}
    4c08:	b083      	sub	sp, #12
    4c0a:	4c1e      	ldr	r4, [pc, #120]	; (4c84 <prvIdleTask+0x84>)
    4c0c:	447c      	add	r4, pc
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    4c0e:	4e1e      	ldr	r6, [pc, #120]	; (4c88 <prvIdleTask+0x88>)
    4c10:	447e      	add	r6, pc

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    4c12:	4a1e      	ldr	r2, [pc, #120]	; (4c8c <prvIdleTask+0x8c>)
    4c14:	447a      	add	r2, pc
    4c16:	4690      	mov	r8, r2
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    4c18:	4f1d      	ldr	r7, [pc, #116]	; (4c90 <prvIdleTask+0x90>)
    4c1a:	447f      	add	r7, pc
    4c1c:	e027      	b.n	4c6e <prvIdleTask+0x6e>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    4c1e:	4b1d      	ldr	r3, [pc, #116]	; (4c94 <prvIdleTask+0x94>)
    4c20:	58e3      	ldr	r3, [r4, r3]
    4c22:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    4c24:	6c7d      	ldr	r5, [r7, #68]	; 0x44
			}
			( void ) xTaskResumeAll();
    4c26:	4b1c      	ldr	r3, [pc, #112]	; (4c98 <prvIdleTask+0x98>)
    4c28:	58e3      	ldr	r3, [r4, r3]
    4c2a:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    4c2c:	2d00      	cmp	r5, #0
    4c2e:	d01e      	beq.n	4c6e <prvIdleTask+0x6e>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    4c30:	4b1a      	ldr	r3, [pc, #104]	; (4c9c <prvIdleTask+0x9c>)
    4c32:	58e3      	ldr	r3, [r4, r3]
    4c34:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    4c36:	4d1a      	ldr	r5, [pc, #104]	; (4ca0 <prvIdleTask+0xa0>)
    4c38:	447d      	add	r5, pc
    4c3a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    4c3c:	68da      	ldr	r2, [r3, #12]
    4c3e:	4691      	mov	r9, r2
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    4c40:	1c10      	adds	r0, r2, #0
    4c42:	3004      	adds	r0, #4
    4c44:	4b17      	ldr	r3, [pc, #92]	; (4ca4 <prvIdleTask+0xa4>)
    4c46:	58e3      	ldr	r3, [r4, r3]
    4c48:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    4c4a:	4b17      	ldr	r3, [pc, #92]	; (4ca8 <prvIdleTask+0xa8>)
    4c4c:	447b      	add	r3, pc
    4c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    4c50:	3a01      	subs	r2, #1
    4c52:	635a      	str	r2, [r3, #52]	; 0x34
					--uxTasksDeleted;
    4c54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    4c56:	3b01      	subs	r3, #1
    4c58:	666b      	str	r3, [r5, #100]	; 0x64
				}
				taskEXIT_CRITICAL();
    4c5a:	4b14      	ldr	r3, [pc, #80]	; (4cac <prvIdleTask+0xac>)
    4c5c:	58e3      	ldr	r3, [r4, r3]
    4c5e:	4798      	blx	r3
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
    4c60:	464b      	mov	r3, r9
    4c62:	6b18      	ldr	r0, [r3, #48]	; 0x30
    4c64:	4b12      	ldr	r3, [pc, #72]	; (4cb0 <prvIdleTask+0xb0>)
    4c66:	58e5      	ldr	r5, [r4, r3]
    4c68:	47a8      	blx	r5
		vPortFree( pxTCB );
    4c6a:	4648      	mov	r0, r9
    4c6c:	47a8      	blx	r5
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    4c6e:	6e73      	ldr	r3, [r6, #100]	; 0x64
    4c70:	2b00      	cmp	r3, #0
    4c72:	d1d4      	bne.n	4c1e <prvIdleTask+0x1e>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    4c74:	4642      	mov	r2, r8
    4c76:	6b92      	ldr	r2, [r2, #56]	; 0x38
    4c78:	2a01      	cmp	r2, #1
    4c7a:	d9f8      	bls.n	4c6e <prvIdleTask+0x6e>
			{
				taskYIELD();
    4c7c:	4b0d      	ldr	r3, [pc, #52]	; (4cb4 <prvIdleTask+0xb4>)
    4c7e:	58e3      	ldr	r3, [r4, r3]
    4c80:	4798      	blx	r3
    4c82:	e7f4      	b.n	4c6e <prvIdleTask+0x6e>
    4c84:	00003118 	.word	0x00003118
    4c88:	1fffc990 	.word	0x1fffc990
    4c8c:	1fffc90c 	.word	0x1fffc90c
    4c90:	1fffc986 	.word	0x1fffc986
    4c94:	00000138 	.word	0x00000138
    4c98:	00000200 	.word	0x00000200
    4c9c:	000002b4 	.word	0x000002b4
    4ca0:	1fffc968 	.word	0x1fffc968
    4ca4:	00000148 	.word	0x00000148
    4ca8:	1fffc8d4 	.word	0x1fffc8d4
    4cac:	00000014 	.word	0x00000014
    4cb0:	00000088 	.word	0x00000088
    4cb4:	00000194 	.word	0x00000194

00004cb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    4cb8:	b530      	push	{r4, r5, lr}
    4cba:	b083      	sub	sp, #12
    4cbc:	4c2c      	ldr	r4, [pc, #176]	; (4d70 <vTaskSwitchContext+0xb8>)
    4cbe:	447c      	add	r4, pc
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    4cc0:	4b2c      	ldr	r3, [pc, #176]	; (4d74 <vTaskSwitchContext+0xbc>)
    4cc2:	447b      	add	r3, pc
    4cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4cc6:	2b00      	cmp	r3, #0
    4cc8:	d004      	beq.n	4cd4 <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    4cca:	2201      	movs	r2, #1
    4ccc:	4b2a      	ldr	r3, [pc, #168]	; (4d78 <vTaskSwitchContext+0xc0>)
    4cce:	447b      	add	r3, pc
    4cd0:	675a      	str	r2, [r3, #116]	; 0x74
    4cd2:	e04a      	b.n	4d6a <vTaskSwitchContext+0xb2>
	}
	else
	{
		xYieldPending = pdFALSE;
    4cd4:	4b29      	ldr	r3, [pc, #164]	; (4d7c <vTaskSwitchContext+0xc4>)
    4cd6:	447b      	add	r3, pc
    4cd8:	2200      	movs	r2, #0
    4cda:	675a      	str	r2, [r3, #116]	; 0x74
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    4cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    4cde:	009a      	lsls	r2, r3, #2
    4ce0:	18d3      	adds	r3, r2, r3
    4ce2:	009b      	lsls	r3, r3, #2
    4ce4:	4a26      	ldr	r2, [pc, #152]	; (4d80 <vTaskSwitchContext+0xc8>)
    4ce6:	447a      	add	r2, pc
    4ce8:	18d3      	adds	r3, r2, r3
    4cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4cec:	2b00      	cmp	r3, #0
    4cee:	d11b      	bne.n	4d28 <vTaskSwitchContext+0x70>
    4cf0:	4b24      	ldr	r3, [pc, #144]	; (4d84 <vTaskSwitchContext+0xcc>)
    4cf2:	447b      	add	r3, pc
    4cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    4cf6:	2b00      	cmp	r3, #0
    4cf8:	d105      	bne.n	4d06 <vTaskSwitchContext+0x4e>
    4cfa:	e002      	b.n	4d02 <vTaskSwitchContext+0x4a>
    4cfc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    4cfe:	2a00      	cmp	r2, #0
    4d00:	d107      	bne.n	4d12 <vTaskSwitchContext+0x5a>
    4d02:	b672      	cpsid	i
    4d04:	e7fe      	b.n	4d04 <vTaskSwitchContext+0x4c>
    4d06:	4b20      	ldr	r3, [pc, #128]	; (4d88 <vTaskSwitchContext+0xd0>)
    4d08:	447b      	add	r3, pc
    4d0a:	4d20      	ldr	r5, [pc, #128]	; (4d8c <vTaskSwitchContext+0xd4>)
    4d0c:	447d      	add	r5, pc
    4d0e:	4820      	ldr	r0, [pc, #128]	; (4d90 <vTaskSwitchContext+0xd8>)
    4d10:	4478      	add	r0, pc
    4d12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    4d14:	3a01      	subs	r2, #1
    4d16:	65da      	str	r2, [r3, #92]	; 0x5c
    4d18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    4d1a:	0091      	lsls	r1, r2, #2
    4d1c:	188a      	adds	r2, r1, r2
    4d1e:	0092      	lsls	r2, r2, #2
    4d20:	18aa      	adds	r2, r5, r2
    4d22:	6b92      	ldr	r2, [r2, #56]	; 0x38
    4d24:	2a00      	cmp	r2, #0
    4d26:	d0e9      	beq.n	4cfc <vTaskSwitchContext+0x44>
    4d28:	4b1a      	ldr	r3, [pc, #104]	; (4d94 <vTaskSwitchContext+0xdc>)
    4d2a:	447b      	add	r3, pc
    4d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    4d2e:	009a      	lsls	r2, r3, #2
    4d30:	18d3      	adds	r3, r2, r3
    4d32:	009b      	lsls	r3, r3, #2
    4d34:	4a18      	ldr	r2, [pc, #96]	; (4d98 <vTaskSwitchContext+0xe0>)
    4d36:	447a      	add	r2, pc
    4d38:	3238      	adds	r2, #56	; 0x38
    4d3a:	18d3      	adds	r3, r2, r3
    4d3c:	685a      	ldr	r2, [r3, #4]
    4d3e:	6852      	ldr	r2, [r2, #4]
    4d40:	605a      	str	r2, [r3, #4]
    4d42:	1c19      	adds	r1, r3, #0
    4d44:	3108      	adds	r1, #8
    4d46:	428a      	cmp	r2, r1
    4d48:	d101      	bne.n	4d4e <vTaskSwitchContext+0x96>
    4d4a:	6852      	ldr	r2, [r2, #4]
    4d4c:	605a      	str	r2, [r3, #4]
    4d4e:	685b      	ldr	r3, [r3, #4]
    4d50:	68da      	ldr	r2, [r3, #12]
    4d52:	4b12      	ldr	r3, [pc, #72]	; (4d9c <vTaskSwitchContext+0xe4>)
    4d54:	58e3      	ldr	r3, [r4, r3]
    4d56:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
    4d58:	4b11      	ldr	r3, [pc, #68]	; (4da0 <vTaskSwitchContext+0xe8>)
    4d5a:	58e3      	ldr	r3, [r4, r3]
    4d5c:	4798      	blx	r3
    4d5e:	4b11      	ldr	r3, [pc, #68]	; (4da4 <vTaskSwitchContext+0xec>)
    4d60:	58e3      	ldr	r3, [r4, r3]
    4d62:	4798      	blx	r3
    4d64:	4b10      	ldr	r3, [pc, #64]	; (4da8 <vTaskSwitchContext+0xf0>)
    4d66:	58e3      	ldr	r3, [r4, r3]
    4d68:	4798      	blx	r3
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    4d6a:	b003      	add	sp, #12
    4d6c:	bd30      	pop	{r4, r5, pc}
    4d6e:	46c0      	nop			; (mov r8, r8)
    4d70:	00003066 	.word	0x00003066
    4d74:	1fffc8de 	.word	0x1fffc8de
    4d78:	1fffc8d2 	.word	0x1fffc8d2
    4d7c:	1fffc8ca 	.word	0x1fffc8ca
    4d80:	1fffc83a 	.word	0x1fffc83a
    4d84:	1fffc8ae 	.word	0x1fffc8ae
    4d88:	1fffc898 	.word	0x1fffc898
    4d8c:	1fffc814 	.word	0x1fffc814
    4d90:	1fffc890 	.word	0x1fffc890
    4d94:	1fffc876 	.word	0x1fffc876
    4d98:	1fffc7ea 	.word	0x1fffc7ea
    4d9c:	00000050 	.word	0x00000050
    4da0:	00000008 	.word	0x00000008
    4da4:	00000080 	.word	0x00000080
    4da8:	0000004c 	.word	0x0000004c

00004dac <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    4dac:	b570      	push	{r4, r5, r6, lr}
    4dae:	b082      	sub	sp, #8
    4db0:	1c05      	adds	r5, r0, #0
    4db2:	4c31      	ldr	r4, [pc, #196]	; (4e78 <vTaskSuspend+0xcc>)
    4db4:	447c      	add	r4, pc
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    4db6:	4b31      	ldr	r3, [pc, #196]	; (4e7c <vTaskSuspend+0xd0>)
    4db8:	58e3      	ldr	r3, [r4, r3]
    4dba:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    4dbc:	2d00      	cmp	r5, #0
    4dbe:	d102      	bne.n	4dc6 <vTaskSuspend+0x1a>
    4dc0:	4b2f      	ldr	r3, [pc, #188]	; (4e80 <vTaskSuspend+0xd4>)
    4dc2:	58e3      	ldr	r3, [r4, r3]
    4dc4:	681d      	ldr	r5, [r3, #0]

			traceTASK_SUSPEND( pxTCB );
    4dc6:	1c28      	adds	r0, r5, #0
    4dc8:	4b2e      	ldr	r3, [pc, #184]	; (4e84 <vTaskSuspend+0xd8>)
    4dca:	58e6      	ldr	r6, [r4, r3]
    4dcc:	47b0      	blx	r6
    4dce:	1c02      	adds	r2, r0, #0
    4dd0:	208a      	movs	r0, #138	; 0x8a
    4dd2:	2103      	movs	r1, #3
    4dd4:	4b2c      	ldr	r3, [pc, #176]	; (4e88 <vTaskSuspend+0xdc>)
    4dd6:	58e3      	ldr	r3, [r4, r3]
    4dd8:	4798      	blx	r3
    4dda:	1c28      	adds	r0, r5, #0
    4ddc:	47b0      	blx	r6
    4dde:	4b2b      	ldr	r3, [pc, #172]	; (4e8c <vTaskSuspend+0xe0>)
    4de0:	58e3      	ldr	r3, [r4, r3]
    4de2:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    4de4:	1d2e      	adds	r6, r5, #4
    4de6:	1c30      	adds	r0, r6, #0
    4de8:	4b29      	ldr	r3, [pc, #164]	; (4e90 <vTaskSuspend+0xe4>)
    4dea:	58e3      	ldr	r3, [r4, r3]
    4dec:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    4dee:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4df0:	2b00      	cmp	r3, #0
    4df2:	d004      	beq.n	4dfe <vTaskSuspend+0x52>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4df4:	1c28      	adds	r0, r5, #0
    4df6:	3018      	adds	r0, #24
    4df8:	4b25      	ldr	r3, [pc, #148]	; (4e90 <vTaskSuspend+0xe4>)
    4dfa:	58e3      	ldr	r3, [r4, r3]
    4dfc:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4dfe:	4825      	ldr	r0, [pc, #148]	; (4e94 <vTaskSuspend+0xe8>)
    4e00:	4478      	add	r0, pc
    4e02:	1c31      	adds	r1, r6, #0
    4e04:	4b24      	ldr	r3, [pc, #144]	; (4e98 <vTaskSuspend+0xec>)
    4e06:	58e3      	ldr	r3, [r4, r3]
    4e08:	4798      	blx	r3
		}
		taskEXIT_CRITICAL();
    4e0a:	4b24      	ldr	r3, [pc, #144]	; (4e9c <vTaskSuspend+0xf0>)
    4e0c:	58e3      	ldr	r3, [r4, r3]
    4e0e:	4798      	blx	r3

		if( pxTCB == pxCurrentTCB )
    4e10:	4b1b      	ldr	r3, [pc, #108]	; (4e80 <vTaskSuspend+0xd4>)
    4e12:	58e3      	ldr	r3, [r4, r3]
    4e14:	681b      	ldr	r3, [r3, #0]
    4e16:	429d      	cmp	r5, r3
    4e18:	d11e      	bne.n	4e58 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4e1a:	4b21      	ldr	r3, [pc, #132]	; (4ea0 <vTaskSuspend+0xf4>)
    4e1c:	447b      	add	r3, pc
    4e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    4e20:	2b00      	cmp	r3, #0
    4e22:	d00a      	beq.n	4e3a <vTaskSuspend+0x8e>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
    4e24:	4b1f      	ldr	r3, [pc, #124]	; (4ea4 <vTaskSuspend+0xf8>)
    4e26:	447b      	add	r3, pc
    4e28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4e2a:	2b00      	cmp	r3, #0
    4e2c:	d001      	beq.n	4e32 <vTaskSuspend+0x86>
    4e2e:	b672      	cpsid	i
    4e30:	e7fe      	b.n	4e30 <vTaskSuspend+0x84>
				portYIELD_WITHIN_API();
    4e32:	4b1d      	ldr	r3, [pc, #116]	; (4ea8 <vTaskSuspend+0xfc>)
    4e34:	58e3      	ldr	r3, [r4, r3]
    4e36:	4798      	blx	r3
    4e38:	e01c      	b.n	4e74 <vTaskSuspend+0xc8>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4e3a:	4b1c      	ldr	r3, [pc, #112]	; (4eac <vTaskSuspend+0x100>)
    4e3c:	447b      	add	r3, pc
    4e3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    4e40:	681b      	ldr	r3, [r3, #0]
    4e42:	4293      	cmp	r3, r2
    4e44:	d104      	bne.n	4e50 <vTaskSuspend+0xa4>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4e46:	4b0e      	ldr	r3, [pc, #56]	; (4e80 <vTaskSuspend+0xd4>)
    4e48:	58e3      	ldr	r3, [r4, r3]
    4e4a:	2200      	movs	r2, #0
    4e4c:	601a      	str	r2, [r3, #0]
    4e4e:	e011      	b.n	4e74 <vTaskSuspend+0xc8>
				}
				else
				{
					vTaskSwitchContext();
    4e50:	4b17      	ldr	r3, [pc, #92]	; (4eb0 <vTaskSuspend+0x104>)
    4e52:	58e3      	ldr	r3, [r4, r3]
    4e54:	4798      	blx	r3
    4e56:	e00d      	b.n	4e74 <vTaskSuspend+0xc8>
				}
			}
		}
		else
		{
			if( xSchedulerRunning != pdFALSE )
    4e58:	4b16      	ldr	r3, [pc, #88]	; (4eb4 <vTaskSuspend+0x108>)
    4e5a:	447b      	add	r3, pc
    4e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    4e5e:	2b00      	cmp	r3, #0
    4e60:	d008      	beq.n	4e74 <vTaskSuspend+0xc8>
			{
				/* A task other than the currently running task was suspended,
				reset the next expected unblock time in case it referred to the
				task that is now in the Suspended state. */
				taskENTER_CRITICAL();
    4e62:	4b06      	ldr	r3, [pc, #24]	; (4e7c <vTaskSuspend+0xd0>)
    4e64:	58e3      	ldr	r3, [r4, r3]
    4e66:	4798      	blx	r3
				{
					prvResetNextTaskUnblockTime();
    4e68:	4b13      	ldr	r3, [pc, #76]	; (4eb8 <vTaskSuspend+0x10c>)
    4e6a:	447b      	add	r3, pc
    4e6c:	4798      	blx	r3
				}
				taskEXIT_CRITICAL();
    4e6e:	4b0b      	ldr	r3, [pc, #44]	; (4e9c <vTaskSuspend+0xf0>)
    4e70:	58e3      	ldr	r3, [r4, r3]
    4e72:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    4e74:	b002      	add	sp, #8
    4e76:	bd70      	pop	{r4, r5, r6, pc}
    4e78:	00002f70 	.word	0x00002f70
    4e7c:	000002b4 	.word	0x000002b4
    4e80:	00000050 	.word	0x00000050
    4e84:	00000080 	.word	0x00000080
    4e88:	00000250 	.word	0x00000250
    4e8c:	0000022c 	.word	0x0000022c
    4e90:	00000148 	.word	0x00000148
    4e94:	1fffc720 	.word	0x1fffc720
    4e98:	0000009c 	.word	0x0000009c
    4e9c:	00000014 	.word	0x00000014
    4ea0:	1fffc784 	.word	0x1fffc784
    4ea4:	1fffc77a 	.word	0x1fffc77a
    4ea8:	00000194 	.word	0x00000194
    4eac:	1fffc6e4 	.word	0x1fffc6e4
    4eb0:	0000016c 	.word	0x0000016c
    4eb4:	1fffc746 	.word	0x1fffc746
    4eb8:	fffff40b 	.word	0xfffff40b

00004ebc <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    4ebc:	b570      	push	{r4, r5, r6, lr}
    4ebe:	b082      	sub	sp, #8
    4ec0:	1c0d      	adds	r5, r1, #0
    4ec2:	4c13      	ldr	r4, [pc, #76]	; (4f10 <vTaskPlaceOnEventList+0x54>)
    4ec4:	447c      	add	r4, pc
TickType_t xTimeToWake;

	configASSERT( pxEventList );
    4ec6:	2800      	cmp	r0, #0
    4ec8:	d101      	bne.n	4ece <vTaskPlaceOnEventList+0x12>
    4eca:	b672      	cpsid	i
    4ecc:	e7fe      	b.n	4ecc <vTaskPlaceOnEventList+0x10>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    4ece:	4b11      	ldr	r3, [pc, #68]	; (4f14 <vTaskPlaceOnEventList+0x58>)
    4ed0:	58e6      	ldr	r6, [r4, r3]
    4ed2:	6831      	ldr	r1, [r6, #0]
    4ed4:	3118      	adds	r1, #24
    4ed6:	4b10      	ldr	r3, [pc, #64]	; (4f18 <vTaskPlaceOnEventList+0x5c>)
    4ed8:	58e3      	ldr	r3, [r4, r3]
    4eda:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    4edc:	6830      	ldr	r0, [r6, #0]
    4ede:	3004      	adds	r0, #4
    4ee0:	4b0e      	ldr	r3, [pc, #56]	; (4f1c <vTaskPlaceOnEventList+0x60>)
    4ee2:	58e3      	ldr	r3, [r4, r3]
    4ee4:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    4ee6:	1c6b      	adds	r3, r5, #1
    4ee8:	d109      	bne.n	4efe <vTaskPlaceOnEventList+0x42>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    4eea:	4b0a      	ldr	r3, [pc, #40]	; (4f14 <vTaskPlaceOnEventList+0x58>)
    4eec:	58e3      	ldr	r3, [r4, r3]
    4eee:	6819      	ldr	r1, [r3, #0]
    4ef0:	3104      	adds	r1, #4
    4ef2:	480b      	ldr	r0, [pc, #44]	; (4f20 <vTaskPlaceOnEventList+0x64>)
    4ef4:	4478      	add	r0, pc
    4ef6:	4b0b      	ldr	r3, [pc, #44]	; (4f24 <vTaskPlaceOnEventList+0x68>)
    4ef8:	58e3      	ldr	r3, [r4, r3]
    4efa:	4798      	blx	r3
    4efc:	e006      	b.n	4f0c <vTaskPlaceOnEventList+0x50>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    4efe:	4b0a      	ldr	r3, [pc, #40]	; (4f28 <vTaskPlaceOnEventList+0x6c>)
    4f00:	447b      	add	r3, pc
    4f02:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    4f04:	1828      	adds	r0, r5, r0
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    4f06:	4b09      	ldr	r3, [pc, #36]	; (4f2c <vTaskPlaceOnEventList+0x70>)
    4f08:	447b      	add	r3, pc
    4f0a:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    4f0c:	b002      	add	sp, #8
    4f0e:	bd70      	pop	{r4, r5, r6, pc}
    4f10:	00002e60 	.word	0x00002e60
    4f14:	00000050 	.word	0x00000050
    4f18:	000001bc 	.word	0x000001bc
    4f1c:	00000148 	.word	0x00000148
    4f20:	1fffc62c 	.word	0x1fffc62c
    4f24:	0000009c 	.word	0x0000009c
    4f28:	1fffc620 	.word	0x1fffc620
    4f2c:	fffff3a9 	.word	0xfffff3a9

00004f30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
    4f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f32:	b083      	sub	sp, #12
    4f34:	1c0e      	adds	r6, r1, #0
    4f36:	4c16      	ldr	r4, [pc, #88]	; (4f90 <vTaskPlaceOnEventListRestricted+0x60>)
    4f38:	447c      	add	r4, pc
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
    4f3a:	2800      	cmp	r0, #0
    4f3c:	d101      	bne.n	4f42 <vTaskPlaceOnEventListRestricted+0x12>
    4f3e:	b672      	cpsid	i
    4f40:	e7fe      	b.n	4f40 <vTaskPlaceOnEventListRestricted+0x10>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    4f42:	4b14      	ldr	r3, [pc, #80]	; (4f94 <vTaskPlaceOnEventListRestricted+0x64>)
    4f44:	58e5      	ldr	r5, [r4, r3]
    4f46:	6829      	ldr	r1, [r5, #0]
    4f48:	3118      	adds	r1, #24
    4f4a:	4b13      	ldr	r3, [pc, #76]	; (4f98 <vTaskPlaceOnEventListRestricted+0x68>)
    4f4c:	58e3      	ldr	r3, [r4, r3]
    4f4e:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    4f50:	6828      	ldr	r0, [r5, #0]
    4f52:	3004      	adds	r0, #4
    4f54:	4b11      	ldr	r3, [pc, #68]	; (4f9c <vTaskPlaceOnEventListRestricted+0x6c>)
    4f56:	58e3      	ldr	r3, [r4, r3]
    4f58:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
    4f5a:	4b11      	ldr	r3, [pc, #68]	; (4fa0 <vTaskPlaceOnEventListRestricted+0x70>)
    4f5c:	447b      	add	r3, pc
    4f5e:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    4f60:	19f7      	adds	r7, r6, r7

		traceTASK_DELAY_UNTIL();
    4f62:	2088      	movs	r0, #136	; 0x88
    4f64:	1c39      	adds	r1, r7, #0
    4f66:	4b0f      	ldr	r3, [pc, #60]	; (4fa4 <vTaskPlaceOnEventListRestricted+0x74>)
    4f68:	58e3      	ldr	r3, [r4, r3]
    4f6a:	4798      	blx	r3
    4f6c:	6828      	ldr	r0, [r5, #0]
    4f6e:	4b0e      	ldr	r3, [pc, #56]	; (4fa8 <vTaskPlaceOnEventListRestricted+0x78>)
    4f70:	58e6      	ldr	r6, [r4, r3]
    4f72:	47b0      	blx	r6
    4f74:	4b0d      	ldr	r3, [pc, #52]	; (4fac <vTaskPlaceOnEventListRestricted+0x7c>)
    4f76:	58e5      	ldr	r5, [r4, r3]
    4f78:	47a8      	blx	r5
    4f7a:	4b0d      	ldr	r3, [pc, #52]	; (4fb0 <vTaskPlaceOnEventListRestricted+0x80>)
    4f7c:	58e3      	ldr	r3, [r4, r3]
    4f7e:	4798      	blx	r3
    4f80:	47b0      	blx	r6
    4f82:	47a8      	blx	r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    4f84:	1c38      	adds	r0, r7, #0
    4f86:	4b0b      	ldr	r3, [pc, #44]	; (4fb4 <vTaskPlaceOnEventListRestricted+0x84>)
    4f88:	447b      	add	r3, pc
    4f8a:	4798      	blx	r3
	}
    4f8c:	b003      	add	sp, #12
    4f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f90:	00002dec 	.word	0x00002dec
    4f94:	00000050 	.word	0x00000050
    4f98:	0000009c 	.word	0x0000009c
    4f9c:	00000148 	.word	0x00000148
    4fa0:	1fffc5c4 	.word	0x1fffc5c4
    4fa4:	0000001c 	.word	0x0000001c
    4fa8:	00000080 	.word	0x00000080
    4fac:	0000022c 	.word	0x0000022c
    4fb0:	00000008 	.word	0x00000008
    4fb4:	fffff329 	.word	0xfffff329

00004fb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    4fb8:	b570      	push	{r4, r5, r6, lr}
    4fba:	b082      	sub	sp, #8
    4fbc:	4c24      	ldr	r4, [pc, #144]	; (5050 <xTaskRemoveFromEventList+0x98>)
    4fbe:	447c      	add	r4, pc
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    4fc0:	68c3      	ldr	r3, [r0, #12]
    4fc2:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
    4fc4:	2d00      	cmp	r5, #0
    4fc6:	d101      	bne.n	4fcc <xTaskRemoveFromEventList+0x14>
    4fc8:	b672      	cpsid	i
    4fca:	e7fe      	b.n	4fca <xTaskRemoveFromEventList+0x12>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    4fcc:	1c2e      	adds	r6, r5, #0
    4fce:	3618      	adds	r6, #24
    4fd0:	1c30      	adds	r0, r6, #0
    4fd2:	4b20      	ldr	r3, [pc, #128]	; (5054 <xTaskRemoveFromEventList+0x9c>)
    4fd4:	58e3      	ldr	r3, [r4, r3]
    4fd6:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4fd8:	4b1f      	ldr	r3, [pc, #124]	; (5058 <xTaskRemoveFromEventList+0xa0>)
    4fda:	447b      	add	r3, pc
    4fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4fde:	2b00      	cmp	r3, #0
    4fe0:	d120      	bne.n	5024 <xTaskRemoveFromEventList+0x6c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    4fe2:	1d2e      	adds	r6, r5, #4
    4fe4:	1c30      	adds	r0, r6, #0
    4fe6:	4b1b      	ldr	r3, [pc, #108]	; (5054 <xTaskRemoveFromEventList+0x9c>)
    4fe8:	58e3      	ldr	r3, [r4, r3]
    4fea:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    4fec:	1c28      	adds	r0, r5, #0
    4fee:	4b1b      	ldr	r3, [pc, #108]	; (505c <xTaskRemoveFromEventList+0xa4>)
    4ff0:	58e3      	ldr	r3, [r4, r3]
    4ff2:	4798      	blx	r3
    4ff4:	4b1a      	ldr	r3, [pc, #104]	; (5060 <xTaskRemoveFromEventList+0xa8>)
    4ff6:	58e3      	ldr	r3, [r4, r3]
    4ff8:	4798      	blx	r3
    4ffa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    4ffc:	4a19      	ldr	r2, [pc, #100]	; (5064 <xTaskRemoveFromEventList+0xac>)
    4ffe:	447a      	add	r2, pc
    5000:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    5002:	4293      	cmp	r3, r2
    5004:	d902      	bls.n	500c <xTaskRemoveFromEventList+0x54>
    5006:	4a18      	ldr	r2, [pc, #96]	; (5068 <xTaskRemoveFromEventList+0xb0>)
    5008:	447a      	add	r2, pc
    500a:	65d3      	str	r3, [r2, #92]	; 0x5c
    500c:	009a      	lsls	r2, r3, #2
    500e:	18d3      	adds	r3, r2, r3
    5010:	009b      	lsls	r3, r3, #2
    5012:	4816      	ldr	r0, [pc, #88]	; (506c <xTaskRemoveFromEventList+0xb4>)
    5014:	4478      	add	r0, pc
    5016:	3038      	adds	r0, #56	; 0x38
    5018:	18c0      	adds	r0, r0, r3
    501a:	1c31      	adds	r1, r6, #0
    501c:	4b14      	ldr	r3, [pc, #80]	; (5070 <xTaskRemoveFromEventList+0xb8>)
    501e:	58e3      	ldr	r3, [r4, r3]
    5020:	4798      	blx	r3
    5022:	e006      	b.n	5032 <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    5024:	4813      	ldr	r0, [pc, #76]	; (5074 <xTaskRemoveFromEventList+0xbc>)
    5026:	4478      	add	r0, pc
    5028:	3014      	adds	r0, #20
    502a:	1c31      	adds	r1, r6, #0
    502c:	4b10      	ldr	r3, [pc, #64]	; (5070 <xTaskRemoveFromEventList+0xb8>)
    502e:	58e3      	ldr	r3, [r4, r3]
    5030:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    5032:	4b11      	ldr	r3, [pc, #68]	; (5078 <xTaskRemoveFromEventList+0xc0>)
    5034:	58e3      	ldr	r3, [r4, r3]
    5036:	681b      	ldr	r3, [r3, #0]
    5038:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xReturn = pdFALSE;
    503c:	2000      	movs	r0, #0
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    503e:	429a      	cmp	r2, r3
    5040:	d904      	bls.n	504c <xTaskRemoveFromEventList+0x94>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    5042:	2201      	movs	r2, #1
    5044:	4b0d      	ldr	r3, [pc, #52]	; (507c <xTaskRemoveFromEventList+0xc4>)
    5046:	447b      	add	r3, pc
    5048:	675a      	str	r2, [r3, #116]	; 0x74
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    504a:	2001      	movs	r0, #1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    504c:	b002      	add	sp, #8
    504e:	bd70      	pop	{r4, r5, r6, pc}
    5050:	00002d66 	.word	0x00002d66
    5054:	00000148 	.word	0x00000148
    5058:	1fffc5c6 	.word	0x1fffc5c6
    505c:	00000080 	.word	0x00000080
    5060:	000001d4 	.word	0x000001d4
    5064:	1fffc5a2 	.word	0x1fffc5a2
    5068:	1fffc598 	.word	0x1fffc598
    506c:	1fffc50c 	.word	0x1fffc50c
    5070:	0000009c 	.word	0x0000009c
    5074:	1fffc4fa 	.word	0x1fffc4fa
    5078:	00000050 	.word	0x00000050
    507c:	1fffc55a 	.word	0x1fffc55a

00005080 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
    5080:	2800      	cmp	r0, #0
    5082:	d101      	bne.n	5088 <vTaskSetTimeOutState+0x8>
    5084:	b672      	cpsid	i
    5086:	e7fe      	b.n	5086 <vTaskSetTimeOutState+0x6>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    5088:	4b04      	ldr	r3, [pc, #16]	; (509c <vTaskSetTimeOutState+0x1c>)
    508a:	447b      	add	r3, pc
    508c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    508e:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    5090:	4b03      	ldr	r3, [pc, #12]	; (50a0 <vTaskSetTimeOutState+0x20>)
    5092:	447b      	add	r3, pc
    5094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5096:	6043      	str	r3, [r0, #4]
}
    5098:	4770      	bx	lr
    509a:	46c0      	nop			; (mov r8, r8)
    509c:	1fffc516 	.word	0x1fffc516
    50a0:	1fffc48e 	.word	0x1fffc48e

000050a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    50a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    50a6:	b083      	sub	sp, #12
    50a8:	1c04      	adds	r4, r0, #0
    50aa:	1c0f      	adds	r7, r1, #0
    50ac:	4e18      	ldr	r6, [pc, #96]	; (5110 <xTaskCheckForTimeOut+0x6c>)
    50ae:	447e      	add	r6, pc
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    50b0:	2800      	cmp	r0, #0
    50b2:	d101      	bne.n	50b8 <xTaskCheckForTimeOut+0x14>
    50b4:	b672      	cpsid	i
    50b6:	e7fe      	b.n	50b6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    50b8:	2900      	cmp	r1, #0
    50ba:	d101      	bne.n	50c0 <xTaskCheckForTimeOut+0x1c>
    50bc:	b672      	cpsid	i
    50be:	e7fe      	b.n	50be <xTaskCheckForTimeOut+0x1a>

	taskENTER_CRITICAL();
    50c0:	4b14      	ldr	r3, [pc, #80]	; (5114 <xTaskCheckForTimeOut+0x70>)
    50c2:	58f3      	ldr	r3, [r6, r3]
    50c4:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    50c6:	4b14      	ldr	r3, [pc, #80]	; (5118 <xTaskCheckForTimeOut+0x74>)
    50c8:	447b      	add	r3, pc
    50ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    50cc:	683b      	ldr	r3, [r7, #0]
    50ce:	1c58      	adds	r0, r3, #1
    50d0:	d017      	beq.n	5102 <xTaskCheckForTimeOut+0x5e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    50d2:	4912      	ldr	r1, [pc, #72]	; (511c <xTaskCheckForTimeOut+0x78>)
    50d4:	4479      	add	r1, pc
    50d6:	6f09      	ldr	r1, [r1, #112]	; 0x70
    50d8:	6820      	ldr	r0, [r4, #0]
    50da:	4288      	cmp	r0, r1
    50dc:	d003      	beq.n	50e6 <xTaskCheckForTimeOut+0x42>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    50de:	2501      	movs	r5, #1
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    50e0:	6861      	ldr	r1, [r4, #4]
    50e2:	428a      	cmp	r2, r1
    50e4:	d20e      	bcs.n	5104 <xTaskCheckForTimeOut+0x60>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    50e6:	6861      	ldr	r1, [r4, #4]
    50e8:	1a50      	subs	r0, r2, r1
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    50ea:	2501      	movs	r5, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    50ec:	4283      	cmp	r3, r0
    50ee:	d909      	bls.n	5104 <xTaskCheckForTimeOut+0x60>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    50f0:	1a8a      	subs	r2, r1, r2
    50f2:	18d3      	adds	r3, r2, r3
    50f4:	603b      	str	r3, [r7, #0]
			vTaskSetTimeOutState( pxTimeOut );
    50f6:	1c20      	adds	r0, r4, #0
    50f8:	4b09      	ldr	r3, [pc, #36]	; (5120 <xTaskCheckForTimeOut+0x7c>)
    50fa:	58f3      	ldr	r3, [r6, r3]
    50fc:	4798      	blx	r3
			xReturn = pdFALSE;
    50fe:	2500      	movs	r5, #0
    5100:	e000      	b.n	5104 <xTaskCheckForTimeOut+0x60>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
    5102:	2500      	movs	r5, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    5104:	4b07      	ldr	r3, [pc, #28]	; (5124 <xTaskCheckForTimeOut+0x80>)
    5106:	58f3      	ldr	r3, [r6, r3]
    5108:	4798      	blx	r3

	return xReturn;
}
    510a:	1c28      	adds	r0, r5, #0
    510c:	b003      	add	sp, #12
    510e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5110:	00002c76 	.word	0x00002c76
    5114:	000002b4 	.word	0x000002b4
    5118:	1fffc458 	.word	0x1fffc458
    511c:	1fffc4cc 	.word	0x1fffc4cc
    5120:	000002b0 	.word	0x000002b0
    5124:	00000014 	.word	0x00000014

00005128 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    5128:	2201      	movs	r2, #1
    512a:	4b02      	ldr	r3, [pc, #8]	; (5134 <vTaskMissedYield+0xc>)
    512c:	447b      	add	r3, pc
    512e:	675a      	str	r2, [r3, #116]	; 0x74
}
    5130:	4770      	bx	lr
    5132:	46c0      	nop			; (mov r8, r8)
    5134:	1fffc474 	.word	0x1fffc474

00005138 <uxTaskGetTaskNumber>:
	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
    5138:	2800      	cmp	r0, #0
    513a:	d001      	beq.n	5140 <uxTaskGetTaskNumber+0x8>
		{
			pxTCB = ( TCB_t * ) xTask;
			uxReturn = pxTCB->uxTaskNumber;
    513c:	6c00      	ldr	r0, [r0, #64]	; 0x40
    513e:	e000      	b.n	5142 <uxTaskGetTaskNumber+0xa>
		}
		else
		{
			uxReturn = 0U;
    5140:	2000      	movs	r0, #0
		}

		return uxReturn;
	}
    5142:	4770      	bx	lr

00005144 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    5144:	4b02      	ldr	r3, [pc, #8]	; (5150 <xTaskGetCurrentTaskHandle+0xc>)
    5146:	447b      	add	r3, pc
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    5148:	4a02      	ldr	r2, [pc, #8]	; (5154 <xTaskGetCurrentTaskHandle+0x10>)
    514a:	589b      	ldr	r3, [r3, r2]
    514c:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    514e:	4770      	bx	lr
    5150:	00002bde 	.word	0x00002bde
    5154:	00000050 	.word	0x00000050

00005158 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    5158:	4b06      	ldr	r3, [pc, #24]	; (5174 <xTaskGetSchedulerState+0x1c>)
    515a:	447b      	add	r3, pc
    515c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    515e:	2001      	movs	r0, #1

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    5160:	2b00      	cmp	r3, #0
    5162:	d005      	beq.n	5170 <xTaskGetSchedulerState+0x18>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    5164:	4b04      	ldr	r3, [pc, #16]	; (5178 <xTaskGetSchedulerState+0x20>)
    5166:	447b      	add	r3, pc
    5168:	6e98      	ldr	r0, [r3, #104]	; 0x68
			{
				xReturn = taskSCHEDULER_RUNNING;
    516a:	4243      	negs	r3, r0
    516c:	4158      	adcs	r0, r3
    516e:	0040      	lsls	r0, r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
    5170:	4770      	bx	lr
    5172:	46c0      	nop			; (mov r8, r8)
    5174:	1fffc446 	.word	0x1fffc446
    5178:	1fffc43a 	.word	0x1fffc43a

0000517c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    517c:	b5f0      	push	{r4, r5, r6, r7, lr}
    517e:	b083      	sub	sp, #12
    5180:	1c05      	adds	r5, r0, #0
    5182:	4c35      	ldr	r4, [pc, #212]	; (5258 <vTaskPriorityInherit+0xdc>)
    5184:	447c      	add	r4, pc
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    5186:	2800      	cmp	r0, #0
    5188:	d064      	beq.n	5254 <vTaskPriorityInherit+0xd8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    518a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    518c:	4a33      	ldr	r2, [pc, #204]	; (525c <vTaskPriorityInherit+0xe0>)
    518e:	58a2      	ldr	r2, [r4, r2]
    5190:	6812      	ldr	r2, [r2, #0]
    5192:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    5194:	4293      	cmp	r3, r2
    5196:	d25d      	bcs.n	5254 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    5198:	6982      	ldr	r2, [r0, #24]
    519a:	2a00      	cmp	r2, #0
    519c:	db06      	blt.n	51ac <vTaskPriorityInherit+0x30>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    519e:	4a2f      	ldr	r2, [pc, #188]	; (525c <vTaskPriorityInherit+0xe0>)
    51a0:	58a2      	ldr	r2, [r4, r2]
    51a2:	6812      	ldr	r2, [r2, #0]
    51a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    51a6:	2105      	movs	r1, #5
    51a8:	1a8a      	subs	r2, r1, r2
    51aa:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    51ac:	009a      	lsls	r2, r3, #2
    51ae:	18d3      	adds	r3, r2, r3
    51b0:	009b      	lsls	r3, r3, #2
    51b2:	4a2b      	ldr	r2, [pc, #172]	; (5260 <vTaskPriorityInherit+0xe4>)
    51b4:	447a      	add	r2, pc
    51b6:	3238      	adds	r2, #56	; 0x38
    51b8:	18d3      	adds	r3, r2, r3
    51ba:	696f      	ldr	r7, [r5, #20]
    51bc:	429f      	cmp	r7, r3
    51be:	d125      	bne.n	520c <vTaskPriorityInherit+0x90>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    51c0:	1d2e      	adds	r6, r5, #4
    51c2:	1c30      	adds	r0, r6, #0
    51c4:	4b27      	ldr	r3, [pc, #156]	; (5264 <vTaskPriorityInherit+0xe8>)
    51c6:	58e3      	ldr	r3, [r4, r3]
    51c8:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    51ca:	4b24      	ldr	r3, [pc, #144]	; (525c <vTaskPriorityInherit+0xe0>)
    51cc:	58e3      	ldr	r3, [r4, r3]
    51ce:	681b      	ldr	r3, [r3, #0]
    51d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    51d2:	62eb      	str	r3, [r5, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    51d4:	1c28      	adds	r0, r5, #0
    51d6:	4b24      	ldr	r3, [pc, #144]	; (5268 <vTaskPriorityInherit+0xec>)
    51d8:	58e3      	ldr	r3, [r4, r3]
    51da:	4798      	blx	r3
    51dc:	4b23      	ldr	r3, [pc, #140]	; (526c <vTaskPriorityInherit+0xf0>)
    51de:	58e3      	ldr	r3, [r4, r3]
    51e0:	4798      	blx	r3
    51e2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    51e4:	4a22      	ldr	r2, [pc, #136]	; (5270 <vTaskPriorityInherit+0xf4>)
    51e6:	447a      	add	r2, pc
    51e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    51ea:	4293      	cmp	r3, r2
    51ec:	d902      	bls.n	51f4 <vTaskPriorityInherit+0x78>
    51ee:	4a21      	ldr	r2, [pc, #132]	; (5274 <vTaskPriorityInherit+0xf8>)
    51f0:	447a      	add	r2, pc
    51f2:	65d3      	str	r3, [r2, #92]	; 0x5c
    51f4:	0098      	lsls	r0, r3, #2
    51f6:	18c3      	adds	r3, r0, r3
    51f8:	009b      	lsls	r3, r3, #2
    51fa:	481f      	ldr	r0, [pc, #124]	; (5278 <vTaskPriorityInherit+0xfc>)
    51fc:	4478      	add	r0, pc
    51fe:	3038      	adds	r0, #56	; 0x38
    5200:	18c0      	adds	r0, r0, r3
    5202:	1c31      	adds	r1, r6, #0
    5204:	4b1d      	ldr	r3, [pc, #116]	; (527c <vTaskPriorityInherit+0x100>)
    5206:	58e3      	ldr	r3, [r4, r3]
    5208:	4798      	blx	r3
    520a:	e004      	b.n	5216 <vTaskPriorityInherit+0x9a>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    520c:	4b13      	ldr	r3, [pc, #76]	; (525c <vTaskPriorityInherit+0xe0>)
    520e:	58e3      	ldr	r3, [r4, r3]
    5210:	681b      	ldr	r3, [r3, #0]
    5212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5214:	62eb      	str	r3, [r5, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
    5216:	1c28      	adds	r0, r5, #0
    5218:	4b13      	ldr	r3, [pc, #76]	; (5268 <vTaskPriorityInherit+0xec>)
    521a:	58e6      	ldr	r6, [r4, r3]
    521c:	47b0      	blx	r6
    521e:	1c07      	adds	r7, r0, #0
    5220:	1c28      	adds	r0, r5, #0
    5222:	47b0      	blx	r6
    5224:	1c01      	adds	r1, r0, #0
    5226:	2003      	movs	r0, #3
    5228:	4b15      	ldr	r3, [pc, #84]	; (5280 <vTaskPriorityInherit+0x104>)
    522a:	58e3      	ldr	r3, [r4, r3]
    522c:	4798      	blx	r3
    522e:	1c03      	adds	r3, r0, #0
    5230:	208e      	movs	r0, #142	; 0x8e
    5232:	2103      	movs	r1, #3
    5234:	1c3a      	adds	r2, r7, #0
    5236:	4f13      	ldr	r7, [pc, #76]	; (5284 <vTaskPriorityInherit+0x108>)
    5238:	59e7      	ldr	r7, [r4, r7]
    523a:	47b8      	blx	r7
    523c:	1c28      	adds	r0, r5, #0
    523e:	47b0      	blx	r6
    5240:	1c01      	adds	r1, r0, #0
    5242:	4b06      	ldr	r3, [pc, #24]	; (525c <vTaskPriorityInherit+0xe0>)
    5244:	58e3      	ldr	r3, [r4, r3]
    5246:	681b      	ldr	r3, [r3, #0]
    5248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    524a:	b2d2      	uxtb	r2, r2
    524c:	2003      	movs	r0, #3
    524e:	4b0e      	ldr	r3, [pc, #56]	; (5288 <vTaskPriorityInherit+0x10c>)
    5250:	58e3      	ldr	r3, [r4, r3]
    5252:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    5254:	b003      	add	sp, #12
    5256:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5258:	00002ba0 	.word	0x00002ba0
    525c:	00000050 	.word	0x00000050
    5260:	1fffc36c 	.word	0x1fffc36c
    5264:	00000148 	.word	0x00000148
    5268:	00000080 	.word	0x00000080
    526c:	000001d4 	.word	0x000001d4
    5270:	1fffc3ba 	.word	0x1fffc3ba
    5274:	1fffc3b0 	.word	0x1fffc3b0
    5278:	1fffc324 	.word	0x1fffc324
    527c:	0000009c 	.word	0x0000009c
    5280:	000000d4 	.word	0x000000d4
    5284:	000001f4 	.word	0x000001f4
    5288:	00000270 	.word	0x00000270

0000528c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    528c:	b5f0      	push	{r4, r5, r6, r7, lr}
    528e:	b083      	sub	sp, #12
    5290:	1c04      	adds	r4, r0, #0
    5292:	4d28      	ldr	r5, [pc, #160]	; (5334 <vTaskPriorityDisinherit+0xa8>)
    5294:	447d      	add	r5, pc
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    5296:	2800      	cmp	r0, #0
    5298:	d04a      	beq.n	5330 <vTaskPriorityDisinherit+0xa4>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    529a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    529c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    529e:	429a      	cmp	r2, r3
    52a0:	d046      	beq.n	5330 <vTaskPriorityDisinherit+0xa4>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    52a2:	1d07      	adds	r7, r0, #4
    52a4:	1c38      	adds	r0, r7, #0
    52a6:	4b24      	ldr	r3, [pc, #144]	; (5338 <vTaskPriorityDisinherit+0xac>)
    52a8:	58eb      	ldr	r3, [r5, r3]
    52aa:	4798      	blx	r3
					mtCOVERAGE_TEST_MARKER();
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    52ac:	1c20      	adds	r0, r4, #0
    52ae:	4b23      	ldr	r3, [pc, #140]	; (533c <vTaskPriorityDisinherit+0xb0>)
    52b0:	58eb      	ldr	r3, [r5, r3]
    52b2:	9300      	str	r3, [sp, #0]
    52b4:	4798      	blx	r3
    52b6:	1c06      	adds	r6, r0, #0
    52b8:	1c20      	adds	r0, r4, #0
    52ba:	9a00      	ldr	r2, [sp, #0]
    52bc:	4790      	blx	r2
    52be:	1c01      	adds	r1, r0, #0
    52c0:	2003      	movs	r0, #3
    52c2:	4b1f      	ldr	r3, [pc, #124]	; (5340 <vTaskPriorityDisinherit+0xb4>)
    52c4:	58eb      	ldr	r3, [r5, r3]
    52c6:	4798      	blx	r3
    52c8:	1c03      	adds	r3, r0, #0
    52ca:	208f      	movs	r0, #143	; 0x8f
    52cc:	2103      	movs	r1, #3
    52ce:	1c32      	adds	r2, r6, #0
    52d0:	4e1c      	ldr	r6, [pc, #112]	; (5344 <vTaskPriorityDisinherit+0xb8>)
    52d2:	59ae      	ldr	r6, [r5, r6]
    52d4:	47b0      	blx	r6
    52d6:	1c20      	adds	r0, r4, #0
    52d8:	9e00      	ldr	r6, [sp, #0]
    52da:	47b0      	blx	r6
    52dc:	1c01      	adds	r1, r0, #0
    52de:	6c63      	ldr	r3, [r4, #68]	; 0x44
    52e0:	b2da      	uxtb	r2, r3
    52e2:	2003      	movs	r0, #3
    52e4:	4b18      	ldr	r3, [pc, #96]	; (5348 <vTaskPriorityDisinherit+0xbc>)
    52e6:	58eb      	ldr	r3, [r5, r3]
    52e8:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    52ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
    52ec:	62e3      	str	r3, [r4, #44]	; 0x2c

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    52ee:	69a6      	ldr	r6, [r4, #24]
    52f0:	2e00      	cmp	r6, #0
    52f2:	db02      	blt.n	52fa <vTaskPriorityDisinherit+0x6e>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    52f4:	2205      	movs	r2, #5
    52f6:	1ad3      	subs	r3, r2, r3
    52f8:	61a3      	str	r3, [r4, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
    52fa:	1c20      	adds	r0, r4, #0
    52fc:	4b0f      	ldr	r3, [pc, #60]	; (533c <vTaskPriorityDisinherit+0xb0>)
    52fe:	58eb      	ldr	r3, [r5, r3]
    5300:	4798      	blx	r3
    5302:	4b12      	ldr	r3, [pc, #72]	; (534c <vTaskPriorityDisinherit+0xc0>)
    5304:	58eb      	ldr	r3, [r5, r3]
    5306:	4798      	blx	r3
    5308:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    530a:	4a11      	ldr	r2, [pc, #68]	; (5350 <vTaskPriorityDisinherit+0xc4>)
    530c:	447a      	add	r2, pc
    530e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    5310:	4293      	cmp	r3, r2
    5312:	d902      	bls.n	531a <vTaskPriorityDisinherit+0x8e>
    5314:	4a0f      	ldr	r2, [pc, #60]	; (5354 <vTaskPriorityDisinherit+0xc8>)
    5316:	447a      	add	r2, pc
    5318:	65d3      	str	r3, [r2, #92]	; 0x5c
    531a:	0098      	lsls	r0, r3, #2
    531c:	18c3      	adds	r3, r0, r3
    531e:	009b      	lsls	r3, r3, #2
    5320:	480d      	ldr	r0, [pc, #52]	; (5358 <vTaskPriorityDisinherit+0xcc>)
    5322:	4478      	add	r0, pc
    5324:	3038      	adds	r0, #56	; 0x38
    5326:	18c0      	adds	r0, r0, r3
    5328:	1c39      	adds	r1, r7, #0
    532a:	4b0c      	ldr	r3, [pc, #48]	; (535c <vTaskPriorityDisinherit+0xd0>)
    532c:	58eb      	ldr	r3, [r5, r3]
    532e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    5330:	b003      	add	sp, #12
    5332:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5334:	00002a90 	.word	0x00002a90
    5338:	00000148 	.word	0x00000148
    533c:	00000080 	.word	0x00000080
    5340:	000000d4 	.word	0x000000d4
    5344:	000001f4 	.word	0x000001f4
    5348:	00000270 	.word	0x00000270
    534c:	000001d4 	.word	0x000001d4
    5350:	1fffc294 	.word	0x1fffc294
    5354:	1fffc28a 	.word	0x1fffc28a
    5358:	1fffc1fe 	.word	0x1fffc1fe
    535c:	0000009c 	.word	0x0000009c

00005360 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    5360:	b530      	push	{r4, r5, lr}
    5362:	b083      	sub	sp, #12
    5364:	1c04      	adds	r4, r0, #0
    5366:	4d11      	ldr	r5, [pc, #68]	; (53ac <prvInsertTimerInActiveList+0x4c>)
    5368:	447d      	add	r5, pc
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    536a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    536c:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
    536e:	4291      	cmp	r1, r2
    5370:	d80d      	bhi.n	538e <prvInsertTimerInActiveList+0x2e>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    5372:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    5374:	2001      	movs	r0, #1

	if( xNextExpiryTime <= xTimeNow )
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    5376:	69a3      	ldr	r3, [r4, #24]
    5378:	429a      	cmp	r2, r3
    537a:	d215      	bcs.n	53a8 <prvInsertTimerInActiveList+0x48>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    537c:	4b0c      	ldr	r3, [pc, #48]	; (53b0 <prvInsertTimerInActiveList+0x50>)
    537e:	447b      	add	r3, pc
    5380:	6818      	ldr	r0, [r3, #0]
    5382:	1d21      	adds	r1, r4, #4
    5384:	4b0b      	ldr	r3, [pc, #44]	; (53b4 <prvInsertTimerInActiveList+0x54>)
    5386:	58eb      	ldr	r3, [r5, r3]
    5388:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    538a:	2000      	movs	r0, #0
    538c:	e00c      	b.n	53a8 <prvInsertTimerInActiveList+0x48>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    538e:	429a      	cmp	r2, r3
    5390:	d202      	bcs.n	5398 <prvInsertTimerInActiveList+0x38>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    5392:	2001      	movs	r0, #1
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    5394:	4299      	cmp	r1, r3
    5396:	d207      	bcs.n	53a8 <prvInsertTimerInActiveList+0x48>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    5398:	4b07      	ldr	r3, [pc, #28]	; (53b8 <prvInsertTimerInActiveList+0x58>)
    539a:	447b      	add	r3, pc
    539c:	6858      	ldr	r0, [r3, #4]
    539e:	1d21      	adds	r1, r4, #4
    53a0:	4b04      	ldr	r3, [pc, #16]	; (53b4 <prvInsertTimerInActiveList+0x54>)
    53a2:	58eb      	ldr	r3, [r5, r3]
    53a4:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    53a6:	2000      	movs	r0, #0
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
    53a8:	b003      	add	sp, #12
    53aa:	bd30      	pop	{r4, r5, pc}
    53ac:	000029bc 	.word	0x000029bc
    53b0:	1fffc29e 	.word	0x1fffc29e
    53b4:	000001bc 	.word	0x000001bc
    53b8:	1fffc282 	.word	0x1fffc282

000053bc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    53bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    53be:	b083      	sub	sp, #12
    53c0:	4c16      	ldr	r4, [pc, #88]	; (541c <prvCheckForValidListAndQueue+0x60>)
    53c2:	447c      	add	r4, pc
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    53c4:	4b16      	ldr	r3, [pc, #88]	; (5420 <prvCheckForValidListAndQueue+0x64>)
    53c6:	58e3      	ldr	r3, [r4, r3]
    53c8:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    53ca:	4b16      	ldr	r3, [pc, #88]	; (5424 <prvCheckForValidListAndQueue+0x68>)
    53cc:	447b      	add	r3, pc
    53ce:	689b      	ldr	r3, [r3, #8]
    53d0:	2b00      	cmp	r3, #0
    53d2:	d11d      	bne.n	5410 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
    53d4:	4d14      	ldr	r5, [pc, #80]	; (5428 <prvCheckForValidListAndQueue+0x6c>)
    53d6:	447d      	add	r5, pc
    53d8:	1c2e      	adds	r6, r5, #0
    53da:	360c      	adds	r6, #12
    53dc:	1c30      	adds	r0, r6, #0
    53de:	4b13      	ldr	r3, [pc, #76]	; (542c <prvCheckForValidListAndQueue+0x70>)
    53e0:	58e3      	ldr	r3, [r4, r3]
    53e2:	9301      	str	r3, [sp, #4]
    53e4:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    53e6:	1c2f      	adds	r7, r5, #0
    53e8:	3720      	adds	r7, #32
    53ea:	1c38      	adds	r0, r7, #0
    53ec:	9b01      	ldr	r3, [sp, #4]
    53ee:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    53f0:	606e      	str	r6, [r5, #4]
			pxOverflowTimerList = &xActiveTimerList2;
    53f2:	602f      	str	r7, [r5, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    53f4:	2002      	movs	r0, #2
    53f6:	210c      	movs	r1, #12
    53f8:	2200      	movs	r2, #0
    53fa:	4b0d      	ldr	r3, [pc, #52]	; (5430 <prvCheckForValidListAndQueue+0x74>)
    53fc:	58e3      	ldr	r3, [r4, r3]
    53fe:	4798      	blx	r3
			configASSERT( xTimerQueue );
    5400:	2800      	cmp	r0, #0
    5402:	d003      	beq.n	540c <prvCheckForValidListAndQueue+0x50>
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    5404:	4b0b      	ldr	r3, [pc, #44]	; (5434 <prvCheckForValidListAndQueue+0x78>)
    5406:	447b      	add	r3, pc
    5408:	6098      	str	r0, [r3, #8]
    540a:	e001      	b.n	5410 <prvCheckForValidListAndQueue+0x54>
			configASSERT( xTimerQueue );
    540c:	b672      	cpsid	i
    540e:	e7fe      	b.n	540e <prvCheckForValidListAndQueue+0x52>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    5410:	4b09      	ldr	r3, [pc, #36]	; (5438 <prvCheckForValidListAndQueue+0x7c>)
    5412:	58e3      	ldr	r3, [r4, r3]
    5414:	4798      	blx	r3
}
    5416:	b003      	add	sp, #12
    5418:	bdf0      	pop	{r4, r5, r6, r7, pc}
    541a:	46c0      	nop			; (mov r8, r8)
    541c:	00002962 	.word	0x00002962
    5420:	000002b4 	.word	0x000002b4
    5424:	1fffc250 	.word	0x1fffc250
    5428:	1fffc246 	.word	0x1fffc246
    542c:	000000f4 	.word	0x000000f4
    5430:	000001e0 	.word	0x000001e0
    5434:	1fffc216 	.word	0x1fffc216
    5438:	00000014 	.word	0x00000014

0000543c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    543c:	b530      	push	{r4, r5, lr}
    543e:	b087      	sub	sp, #28
    5440:	4c10      	ldr	r4, [pc, #64]	; (5484 <xTimerCreateTimerTask+0x48>)
    5442:	447c      	add	r4, pc

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    5444:	4b10      	ldr	r3, [pc, #64]	; (5488 <xTimerCreateTimerTask+0x4c>)
    5446:	447b      	add	r3, pc
    5448:	4798      	blx	r3

	if( xTimerQueue != NULL )
    544a:	4b10      	ldr	r3, [pc, #64]	; (548c <xTimerCreateTimerTask+0x50>)
    544c:	447b      	add	r3, pc
    544e:	689b      	ldr	r3, [r3, #8]
    5450:	2b00      	cmp	r3, #0
    5452:	d013      	beq.n	547c <xTimerCreateTimerTask+0x40>
	{
		#if ( INCLUDE_xTimerGetTimerDaemonTaskHandle == 1 )
		{
			/* Create the timer task, storing its handle in xTimerTaskHandle so
			it can be returned by the xTimerGetTimerDaemonTaskHandle() function. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
    5454:	2303      	movs	r3, #3
    5456:	9300      	str	r3, [sp, #0]
    5458:	4b0d      	ldr	r3, [pc, #52]	; (5490 <xTimerCreateTimerTask+0x54>)
    545a:	447b      	add	r3, pc
    545c:	3334      	adds	r3, #52	; 0x34
    545e:	9301      	str	r3, [sp, #4]
    5460:	2300      	movs	r3, #0
    5462:	9302      	str	r3, [sp, #8]
    5464:	9303      	str	r3, [sp, #12]
    5466:	480b      	ldr	r0, [pc, #44]	; (5494 <xTimerCreateTimerTask+0x58>)
    5468:	4478      	add	r0, pc
    546a:	490b      	ldr	r1, [pc, #44]	; (5498 <xTimerCreateTimerTask+0x5c>)
    546c:	4479      	add	r1, pc
    546e:	22aa      	movs	r2, #170	; 0xaa
    5470:	4d0a      	ldr	r5, [pc, #40]	; (549c <xTimerCreateTimerTask+0x60>)
    5472:	5965      	ldr	r5, [r4, r5]
    5474:	9505      	str	r5, [sp, #20]
    5476:	47a8      	blx	r5
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    5478:	2800      	cmp	r0, #0
    547a:	d101      	bne.n	5480 <xTimerCreateTimerTask+0x44>
    547c:	b672      	cpsid	i
    547e:	e7fe      	b.n	547e <xTimerCreateTimerTask+0x42>
	return xReturn;
}
    5480:	b007      	add	sp, #28
    5482:	bd30      	pop	{r4, r5, pc}
    5484:	000028e2 	.word	0x000028e2
    5488:	ffffff73 	.word	0xffffff73
    548c:	1fffc1d0 	.word	0x1fffc1d0
    5490:	1fffc1c2 	.word	0x1fffc1c2
    5494:	000002f1 	.word	0x000002f1
    5498:	00002884 	.word	0x00002884
    549c:	00000070 	.word	0x00000070

000054a0 <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    54a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    54a2:	464f      	mov	r7, r9
    54a4:	4646      	mov	r6, r8
    54a6:	b4c0      	push	{r6, r7}
    54a8:	b083      	sub	sp, #12
    54aa:	4681      	mov	r9, r0
    54ac:	1c0e      	adds	r6, r1, #0
    54ae:	4690      	mov	r8, r2
    54b0:	1c1f      	adds	r7, r3, #0
    54b2:	4d20      	ldr	r5, [pc, #128]	; (5534 <xTimerCreate+0x94>)
    54b4:	447d      	add	r5, pc
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
    54b6:	2900      	cmp	r1, #0
    54b8:	d033      	beq.n	5522 <xTimerCreate+0x82>
	{
		pxNewTimer = NULL;
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    54ba:	202c      	movs	r0, #44	; 0x2c
    54bc:	4b1e      	ldr	r3, [pc, #120]	; (5538 <xTimerCreate+0x98>)
    54be:	58eb      	ldr	r3, [r5, r3]
    54c0:	4798      	blx	r3
    54c2:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
    54c4:	d022      	beq.n	550c <xTimerCreate+0x6c>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
    54c6:	4b1d      	ldr	r3, [pc, #116]	; (553c <xTimerCreate+0x9c>)
    54c8:	447b      	add	r3, pc
    54ca:	4798      	blx	r3

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
    54cc:	464b      	mov	r3, r9
    54ce:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    54d0:	61a6      	str	r6, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
    54d2:	4643      	mov	r3, r8
    54d4:	61e3      	str	r3, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
    54d6:	6227      	str	r7, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    54d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    54da:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    54dc:	1d20      	adds	r0, r4, #4
    54de:	4b18      	ldr	r3, [pc, #96]	; (5540 <xTimerCreate+0xa0>)
    54e0:	58eb      	ldr	r3, [r5, r3]
    54e2:	4798      	blx	r3

			traceTIMER_CREATE( pxNewTimer );
    54e4:	2005      	movs	r0, #5
    54e6:	4b17      	ldr	r3, [pc, #92]	; (5544 <xTimerCreate+0xa4>)
    54e8:	58eb      	ldr	r3, [r5, r3]
    54ea:	4798      	blx	r3
    54ec:	1c01      	adds	r1, r0, #0
    54ee:	62a0      	str	r0, [r4, #40]	; 0x28
    54f0:	2005      	movs	r0, #5
    54f2:	6822      	ldr	r2, [r4, #0]
    54f4:	4b14      	ldr	r3, [pc, #80]	; (5548 <xTimerCreate+0xa8>)
    54f6:	58eb      	ldr	r3, [r5, r3]
    54f8:	4798      	blx	r3
    54fa:	22ff      	movs	r2, #255	; 0xff
    54fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    54fe:	401a      	ands	r2, r3
    5500:	20b0      	movs	r0, #176	; 0xb0
    5502:	2105      	movs	r1, #5
    5504:	4b11      	ldr	r3, [pc, #68]	; (554c <xTimerCreate+0xac>)
    5506:	58eb      	ldr	r3, [r5, r3]
    5508:	4798      	blx	r3
    550a:	e00c      	b.n	5526 <xTimerCreate+0x86>
		}
		else
		{
			traceTIMER_CREATE_FAILED();
    550c:	2300      	movs	r3, #0
    550e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5510:	23ff      	movs	r3, #255	; 0xff
    5512:	401a      	ands	r2, r3
    5514:	20b9      	movs	r0, #185	; 0xb9
    5516:	2105      	movs	r1, #5
    5518:	4b0c      	ldr	r3, [pc, #48]	; (554c <xTimerCreate+0xac>)
    551a:	58eb      	ldr	r3, [r5, r3]
    551c:	4798      	blx	r3
    551e:	e002      	b.n	5526 <xTimerCreate+0x86>
    5520:	e7fe      	b.n	5520 <xTimerCreate+0x80>
		}
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
    5522:	b672      	cpsid	i
    5524:	e7fc      	b.n	5520 <xTimerCreate+0x80>

	return ( TimerHandle_t ) pxNewTimer;
}
    5526:	1c20      	adds	r0, r4, #0
    5528:	b003      	add	sp, #12
    552a:	bc0c      	pop	{r2, r3}
    552c:	4690      	mov	r8, r2
    552e:	4699      	mov	r9, r3
    5530:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5532:	46c0      	nop			; (mov r8, r8)
    5534:	00002870 	.word	0x00002870
    5538:	000000dc 	.word	0x000000dc
    553c:	fffffef1 	.word	0xfffffef1
    5540:	000000b4 	.word	0x000000b4
    5544:	000002bc 	.word	0x000002bc
    5548:	0000014c 	.word	0x0000014c
    554c:	00000250 	.word	0x00000250

00005550 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    5550:	b5f0      	push	{r4, r5, r6, r7, lr}
    5552:	4647      	mov	r7, r8
    5554:	b480      	push	{r7}
    5556:	b086      	sub	sp, #24
    5558:	1c07      	adds	r7, r0, #0
    555a:	1c0c      	adds	r4, r1, #0
    555c:	4690      	mov	r8, r2
    555e:	4d39      	ldr	r5, [pc, #228]	; (5644 <xTimerGenericCommand+0xf4>)
    5560:	447d      	add	r5, pc
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    5562:	4939      	ldr	r1, [pc, #228]	; (5648 <xTimerGenericCommand+0xf8>)
    5564:	4479      	add	r1, pc
    5566:	6888      	ldr	r0, [r1, #8]
    5568:	2800      	cmp	r0, #0
    556a:	d065      	beq.n	5638 <xTimerGenericCommand+0xe8>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    556c:	9403      	str	r4, [sp, #12]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    556e:	9204      	str	r2, [sp, #16]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    5570:	9705      	str	r7, [sp, #20]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    5572:	2c05      	cmp	r4, #5
    5574:	dc1a      	bgt.n	55ac <xTimerGenericCommand+0x5c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    5576:	4b35      	ldr	r3, [pc, #212]	; (564c <xTimerGenericCommand+0xfc>)
    5578:	58eb      	ldr	r3, [r5, r3]
    557a:	4798      	blx	r3
    557c:	2802      	cmp	r0, #2
    557e:	d10a      	bne.n	5596 <xTimerGenericCommand+0x46>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    5580:	4b33      	ldr	r3, [pc, #204]	; (5650 <xTimerGenericCommand+0x100>)
    5582:	447b      	add	r3, pc
    5584:	6898      	ldr	r0, [r3, #8]
    5586:	a903      	add	r1, sp, #12
    5588:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    558a:	2300      	movs	r3, #0
    558c:	4e31      	ldr	r6, [pc, #196]	; (5654 <xTimerGenericCommand+0x104>)
    558e:	59ae      	ldr	r6, [r5, r6]
    5590:	47b0      	blx	r6
    5592:	1c06      	adds	r6, r0, #0
    5594:	e011      	b.n	55ba <xTimerGenericCommand+0x6a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    5596:	4b30      	ldr	r3, [pc, #192]	; (5658 <xTimerGenericCommand+0x108>)
    5598:	447b      	add	r3, pc
    559a:	6898      	ldr	r0, [r3, #8]
    559c:	a903      	add	r1, sp, #12
    559e:	2200      	movs	r2, #0
    55a0:	2300      	movs	r3, #0
    55a2:	4e2c      	ldr	r6, [pc, #176]	; (5654 <xTimerGenericCommand+0x104>)
    55a4:	59ae      	ldr	r6, [r5, r6]
    55a6:	47b0      	blx	r6
    55a8:	1c06      	adds	r6, r0, #0
    55aa:	e006      	b.n	55ba <xTimerGenericCommand+0x6a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    55ac:	a903      	add	r1, sp, #12
    55ae:	1c1a      	adds	r2, r3, #0
    55b0:	2300      	movs	r3, #0
    55b2:	4e2a      	ldr	r6, [pc, #168]	; (565c <xTimerGenericCommand+0x10c>)
    55b4:	59ae      	ldr	r6, [r5, r6]
    55b6:	47b0      	blx	r6
    55b8:	1c06      	adds	r6, r0, #0
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
    55ba:	2c00      	cmp	r4, #0
    55bc:	dd3d      	ble.n	563a <xTimerGenericCommand+0xea>
    55be:	2c04      	cmp	r4, #4
    55c0:	d10c      	bne.n	55dc <xTimerGenericCommand+0x8c>
    55c2:	20bd      	movs	r0, #189	; 0xbd
    55c4:	2e01      	cmp	r6, #1
    55c6:	d100      	bne.n	55ca <xTimerGenericCommand+0x7a>
    55c8:	20b4      	movs	r0, #180	; 0xb4
    55ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
    55cc:	23ff      	movs	r3, #255	; 0xff
    55ce:	401a      	ands	r2, r3
    55d0:	2105      	movs	r1, #5
    55d2:	4643      	mov	r3, r8
    55d4:	4c22      	ldr	r4, [pc, #136]	; (5660 <xTimerGenericCommand+0x110>)
    55d6:	592c      	ldr	r4, [r5, r4]
    55d8:	47a0      	blx	r4
    55da:	e02e      	b.n	563a <xTimerGenericCommand+0xea>
    55dc:	2c05      	cmp	r4, #5
    55de:	d11d      	bne.n	561c <xTimerGenericCommand+0xcc>
    55e0:	24b5      	movs	r4, #181	; 0xb5
    55e2:	2e01      	cmp	r6, #1
    55e4:	d11e      	bne.n	5624 <xTimerGenericCommand+0xd4>
    55e6:	22ff      	movs	r2, #255	; 0xff
    55e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    55ea:	401a      	ands	r2, r3
    55ec:	20b5      	movs	r0, #181	; 0xb5
    55ee:	2105      	movs	r1, #5
    55f0:	4b1c      	ldr	r3, [pc, #112]	; (5664 <xTimerGenericCommand+0x114>)
    55f2:	58eb      	ldr	r3, [r5, r3]
    55f4:	4798      	blx	r3
    55f6:	6abc      	ldr	r4, [r7, #40]	; 0x28
    55f8:	b2e0      	uxtb	r0, r4
    55fa:	2105      	movs	r1, #5
    55fc:	4b1a      	ldr	r3, [pc, #104]	; (5668 <xTimerGenericCommand+0x118>)
    55fe:	58eb      	ldr	r3, [r5, r3]
    5600:	4798      	blx	r3
    5602:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5604:	b2d0      	uxtb	r0, r2
    5606:	2105      	movs	r1, #5
    5608:	4b18      	ldr	r3, [pc, #96]	; (566c <xTimerGenericCommand+0x11c>)
    560a:	58eb      	ldr	r3, [r5, r3]
    560c:	4798      	blx	r3
    560e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    5610:	b2c9      	uxtb	r1, r1
    5612:	2005      	movs	r0, #5
    5614:	4b16      	ldr	r3, [pc, #88]	; (5670 <xTimerGenericCommand+0x120>)
    5616:	58eb      	ldr	r3, [r5, r3]
    5618:	4798      	blx	r3
    561a:	e00e      	b.n	563a <xTimerGenericCommand+0xea>
    561c:	34b0      	adds	r4, #176	; 0xb0
    561e:	2300      	movs	r3, #0
    5620:	2e01      	cmp	r6, #1
    5622:	d000      	beq.n	5626 <xTimerGenericCommand+0xd6>
    5624:	2309      	movs	r3, #9
    5626:	18e0      	adds	r0, r4, r3
    5628:	6aba      	ldr	r2, [r7, #40]	; 0x28
    562a:	23ff      	movs	r3, #255	; 0xff
    562c:	401a      	ands	r2, r3
    562e:	2105      	movs	r1, #5
    5630:	4b0c      	ldr	r3, [pc, #48]	; (5664 <xTimerGenericCommand+0x114>)
    5632:	58eb      	ldr	r3, [r5, r3]
    5634:	4798      	blx	r3
    5636:	e000      	b.n	563a <xTimerGenericCommand+0xea>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    5638:	2600      	movs	r6, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    563a:	1c30      	adds	r0, r6, #0
    563c:	b006      	add	sp, #24
    563e:	bc04      	pop	{r2}
    5640:	4690      	mov	r8, r2
    5642:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5644:	000027c4 	.word	0x000027c4
    5648:	1fffc0b8 	.word	0x1fffc0b8
    564c:	0000027c 	.word	0x0000027c
    5650:	1fffc09a 	.word	0x1fffc09a
    5654:	00000104 	.word	0x00000104
    5658:	1fffc084 	.word	0x1fffc084
    565c:	00000034 	.word	0x00000034
    5660:	000001f4 	.word	0x000001f4
    5664:	00000250 	.word	0x00000250
    5668:	0000007c 	.word	0x0000007c
    566c:	0000008c 	.word	0x0000008c
    5670:	000000a0 	.word	0x000000a0

00005674 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    5674:	b5f0      	push	{r4, r5, r6, r7, lr}
    5676:	465f      	mov	r7, fp
    5678:	4656      	mov	r6, sl
    567a:	464d      	mov	r5, r9
    567c:	4644      	mov	r4, r8
    567e:	b4f0      	push	{r4, r5, r6, r7}
    5680:	b085      	sub	sp, #20
    5682:	4682      	mov	sl, r0
    5684:	4e2b      	ldr	r6, [pc, #172]	; (5734 <prvSampleTimeNow+0xc0>)
    5686:	447e      	add	r6, pc
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    5688:	4b2b      	ldr	r3, [pc, #172]	; (5738 <prvSampleTimeNow+0xc4>)
    568a:	58f3      	ldr	r3, [r6, r3]
    568c:	4798      	blx	r3
    568e:	4681      	mov	r9, r0

	if( xTimeNow < xLastTime )
    5690:	4b2a      	ldr	r3, [pc, #168]	; (573c <prvSampleTimeNow+0xc8>)
    5692:	447b      	add	r3, pc
    5694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5696:	4298      	cmp	r0, r3
    5698:	d23d      	bcs.n	5716 <prvSampleTimeNow+0xa2>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    569a:	4929      	ldr	r1, [pc, #164]	; (5740 <prvSampleTimeNow+0xcc>)
    569c:	4479      	add	r1, pc
    569e:	4688      	mov	r8, r1
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    56a0:	2200      	movs	r2, #0
    56a2:	4693      	mov	fp, r2
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
			if( xReloadTime > xNextExpireTime )
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    56a4:	4c27      	ldr	r4, [pc, #156]	; (5744 <prvSampleTimeNow+0xd0>)
    56a6:	447c      	add	r4, pc
    56a8:	9403      	str	r4, [sp, #12]
    56aa:	e026      	b.n	56fa <prvSampleTimeNow+0x86>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    56ac:	68db      	ldr	r3, [r3, #12]
    56ae:	681f      	ldr	r7, [r3, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    56b0:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    56b2:	1d25      	adds	r5, r4, #4
    56b4:	1c28      	adds	r0, r5, #0
    56b6:	4b24      	ldr	r3, [pc, #144]	; (5748 <prvSampleTimeNow+0xd4>)
    56b8:	58f3      	ldr	r3, [r6, r3]
    56ba:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    56bc:	1c20      	adds	r0, r4, #0
    56be:	6a61      	ldr	r1, [r4, #36]	; 0x24
    56c0:	4788      	blx	r1

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    56c2:	69e2      	ldr	r2, [r4, #28]
    56c4:	2a01      	cmp	r2, #1
    56c6:	d118      	bne.n	56fa <prvSampleTimeNow+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    56c8:	69a1      	ldr	r1, [r4, #24]
    56ca:	187b      	adds	r3, r7, r1
			if( xReloadTime > xNextExpireTime )
    56cc:	42bb      	cmp	r3, r7
    56ce:	d908      	bls.n	56e2 <prvSampleTimeNow+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    56d0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    56d2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    56d4:	9c03      	ldr	r4, [sp, #12]
    56d6:	6860      	ldr	r0, [r4, #4]
    56d8:	1c29      	adds	r1, r5, #0
    56da:	4b1c      	ldr	r3, [pc, #112]	; (574c <prvSampleTimeNow+0xd8>)
    56dc:	58f3      	ldr	r3, [r6, r3]
    56de:	4798      	blx	r3
    56e0:	e00b      	b.n	56fa <prvSampleTimeNow+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    56e2:	4659      	mov	r1, fp
    56e4:	9100      	str	r1, [sp, #0]
    56e6:	1c20      	adds	r0, r4, #0
    56e8:	1c3a      	adds	r2, r7, #0
    56ea:	465b      	mov	r3, fp
    56ec:	4c18      	ldr	r4, [pc, #96]	; (5750 <prvSampleTimeNow+0xdc>)
    56ee:	5934      	ldr	r4, [r6, r4]
    56f0:	47a0      	blx	r4
				configASSERT( xResult );
    56f2:	2800      	cmp	r0, #0
    56f4:	d101      	bne.n	56fa <prvSampleTimeNow+0x86>
    56f6:	b672      	cpsid	i
    56f8:	e7fe      	b.n	56f8 <prvSampleTimeNow+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    56fa:	4642      	mov	r2, r8
    56fc:	6853      	ldr	r3, [r2, #4]
    56fe:	681c      	ldr	r4, [r3, #0]
    5700:	2c00      	cmp	r4, #0
    5702:	d1d3      	bne.n	56ac <prvSampleTimeNow+0x38>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    5704:	4a13      	ldr	r2, [pc, #76]	; (5754 <prvSampleTimeNow+0xe0>)
    5706:	447a      	add	r2, pc
    5708:	6811      	ldr	r1, [r2, #0]
    570a:	6051      	str	r1, [r2, #4]
	pxOverflowTimerList = pxTemp;
    570c:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
    570e:	2301      	movs	r3, #1
    5710:	4652      	mov	r2, sl
    5712:	6013      	str	r3, [r2, #0]
    5714:	e002      	b.n	571c <prvSampleTimeNow+0xa8>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    5716:	2300      	movs	r3, #0
    5718:	4654      	mov	r4, sl
    571a:	6023      	str	r3, [r4, #0]
	}

	xLastTime = xTimeNow;
    571c:	4b0e      	ldr	r3, [pc, #56]	; (5758 <prvSampleTimeNow+0xe4>)
    571e:	447b      	add	r3, pc
    5720:	4649      	mov	r1, r9
    5722:	6399      	str	r1, [r3, #56]	; 0x38

	return xTimeNow;
}
    5724:	4648      	mov	r0, r9
    5726:	b005      	add	sp, #20
    5728:	bc3c      	pop	{r2, r3, r4, r5}
    572a:	4690      	mov	r8, r2
    572c:	4699      	mov	r9, r3
    572e:	46a2      	mov	sl, r4
    5730:	46ab      	mov	fp, r5
    5732:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5734:	0000269e 	.word	0x0000269e
    5738:	00000100 	.word	0x00000100
    573c:	1fffbf8a 	.word	0x1fffbf8a
    5740:	1fffbf80 	.word	0x1fffbf80
    5744:	1fffbf76 	.word	0x1fffbf76
    5748:	00000148 	.word	0x00000148
    574c:	000001bc 	.word	0x000001bc
    5750:	00000184 	.word	0x00000184
    5754:	1fffbf16 	.word	0x1fffbf16
    5758:	1fffbefe 	.word	0x1fffbefe

0000575c <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    575c:	b5f0      	push	{r4, r5, r6, r7, lr}
    575e:	465f      	mov	r7, fp
    5760:	4656      	mov	r6, sl
    5762:	464d      	mov	r5, r9
    5764:	4644      	mov	r4, r8
    5766:	b4f0      	push	{r4, r5, r6, r7}
    5768:	b089      	sub	sp, #36	; 0x24
    576a:	4869      	ldr	r0, [pc, #420]	; (5910 <prvTimerTask+0x1b4>)
    576c:	4478      	add	r0, pc
    576e:	4683      	mov	fp, r0
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    5770:	4968      	ldr	r1, [pc, #416]	; (5914 <prvTimerTask+0x1b8>)
    5772:	4479      	add	r1, pc
    5774:	4689      	mov	r9, r1
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    5776:	ac05      	add	r4, sp, #20
    5778:	4a67      	ldr	r2, [pc, #412]	; (5918 <prvTimerTask+0x1bc>)
    577a:	447a      	add	r2, pc
    577c:	4692      	mov	sl, r2
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    577e:	464d      	mov	r5, r9
    5780:	686b      	ldr	r3, [r5, #4]
	if( *pxListWasEmpty == pdFALSE )
    5782:	681e      	ldr	r6, [r3, #0]
    5784:	2e00      	cmp	r6, #0
    5786:	d100      	bne.n	578a <prvTimerTask+0x2e>
    5788:	e0b5      	b.n	58f6 <prvTimerTask+0x19a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    578a:	68db      	ldr	r3, [r3, #12]
    578c:	681d      	ldr	r5, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    578e:	4b63      	ldr	r3, [pc, #396]	; (591c <prvTimerTask+0x1c0>)
    5790:	465f      	mov	r7, fp
    5792:	58fb      	ldr	r3, [r7, r3]
    5794:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    5796:	1c20      	adds	r0, r4, #0
    5798:	4b61      	ldr	r3, [pc, #388]	; (5920 <prvTimerTask+0x1c4>)
    579a:	447b      	add	r3, pc
    579c:	4798      	blx	r3
    579e:	1c06      	adds	r6, r0, #0
		if( xTimerListsWereSwitched == pdFALSE )
    57a0:	9805      	ldr	r0, [sp, #20]
    57a2:	2800      	cmp	r0, #0
    57a4:	d140      	bne.n	5828 <prvTimerTask+0xcc>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    57a6:	42b5      	cmp	r5, r6
    57a8:	d82d      	bhi.n	5806 <prvTimerTask+0xaa>
			{
				( void ) xTaskResumeAll();
    57aa:	4b5e      	ldr	r3, [pc, #376]	; (5924 <prvTimerTask+0x1c8>)
    57ac:	58fb      	ldr	r3, [r7, r3]
    57ae:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    57b0:	4b5d      	ldr	r3, [pc, #372]	; (5928 <prvTimerTask+0x1cc>)
    57b2:	447b      	add	r3, pc
    57b4:	685b      	ldr	r3, [r3, #4]
    57b6:	68db      	ldr	r3, [r3, #12]
    57b8:	68d9      	ldr	r1, [r3, #12]
    57ba:	4688      	mov	r8, r1

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    57bc:	1c08      	adds	r0, r1, #0
    57be:	3004      	adds	r0, #4
    57c0:	4b5a      	ldr	r3, [pc, #360]	; (592c <prvTimerTask+0x1d0>)
    57c2:	58fb      	ldr	r3, [r7, r3]
    57c4:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    57c6:	4642      	mov	r2, r8
    57c8:	69d2      	ldr	r2, [r2, #28]
    57ca:	2a01      	cmp	r2, #1
    57cc:	d116      	bne.n	57fc <prvTimerTask+0xa0>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    57ce:	4643      	mov	r3, r8
    57d0:	699b      	ldr	r3, [r3, #24]
    57d2:	18e9      	adds	r1, r5, r3
    57d4:	4640      	mov	r0, r8
    57d6:	1c32      	adds	r2, r6, #0
    57d8:	1c2b      	adds	r3, r5, #0
    57da:	4e55      	ldr	r6, [pc, #340]	; (5930 <prvTimerTask+0x1d4>)
    57dc:	447e      	add	r6, pc
    57de:	47b0      	blx	r6
    57e0:	2801      	cmp	r0, #1
    57e2:	d10b      	bne.n	57fc <prvTimerTask+0xa0>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    57e4:	2300      	movs	r3, #0
    57e6:	9300      	str	r3, [sp, #0]
    57e8:	4640      	mov	r0, r8
    57ea:	2100      	movs	r1, #0
    57ec:	1c2a      	adds	r2, r5, #0
    57ee:	4d51      	ldr	r5, [pc, #324]	; (5934 <prvTimerTask+0x1d8>)
    57f0:	597d      	ldr	r5, [r7, r5]
    57f2:	47a8      	blx	r5
			configASSERT( xResult );
    57f4:	2800      	cmp	r0, #0
    57f6:	d101      	bne.n	57fc <prvTimerTask+0xa0>
    57f8:	b672      	cpsid	i
    57fa:	e7fe      	b.n	57fa <prvTimerTask+0x9e>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    57fc:	4645      	mov	r5, r8
    57fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    5800:	4640      	mov	r0, r8
    5802:	4798      	blx	r3
    5804:	e014      	b.n	5830 <prvTimerTask+0xd4>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    5806:	4b4c      	ldr	r3, [pc, #304]	; (5938 <prvTimerTask+0x1dc>)
    5808:	447b      	add	r3, pc
    580a:	6898      	ldr	r0, [r3, #8]
    580c:	1ba9      	subs	r1, r5, r6
    580e:	4b4b      	ldr	r3, [pc, #300]	; (593c <prvTimerTask+0x1e0>)
    5810:	465e      	mov	r6, fp
    5812:	58f3      	ldr	r3, [r6, r3]
    5814:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    5816:	4b43      	ldr	r3, [pc, #268]	; (5924 <prvTimerTask+0x1c8>)
    5818:	58f3      	ldr	r3, [r6, r3]
    581a:	4798      	blx	r3
    581c:	2800      	cmp	r0, #0
    581e:	d107      	bne.n	5830 <prvTimerTask+0xd4>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
    5820:	4b47      	ldr	r3, [pc, #284]	; (5940 <prvTimerTask+0x1e4>)
    5822:	58f3      	ldr	r3, [r6, r3]
    5824:	4798      	blx	r3
    5826:	e003      	b.n	5830 <prvTimerTask+0xd4>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    5828:	4b3e      	ldr	r3, [pc, #248]	; (5924 <prvTimerTask+0x1c8>)
    582a:	465f      	mov	r7, fp
    582c:	58fb      	ldr	r3, [r7, r3]
    582e:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    5830:	4e44      	ldr	r6, [pc, #272]	; (5944 <prvTimerTask+0x1e8>)
    5832:	447e      	add	r6, pc
    5834:	4b44      	ldr	r3, [pc, #272]	; (5948 <prvTimerTask+0x1ec>)
    5836:	4658      	mov	r0, fp
    5838:	58c5      	ldr	r5, [r0, r3]
    583a:	e054      	b.n	58e6 <prvTimerTask+0x18a>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    583c:	6821      	ldr	r1, [r4, #0]
    583e:	2900      	cmp	r1, #0
    5840:	db51      	blt.n	58e6 <prvTimerTask+0x18a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    5842:	68a2      	ldr	r2, [r4, #8]
    5844:	4690      	mov	r8, r2

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    5846:	6953      	ldr	r3, [r2, #20]
    5848:	2b00      	cmp	r3, #0
    584a:	d005      	beq.n	5858 <prvTimerTask+0xfc>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    584c:	1c10      	adds	r0, r2, #0
    584e:	3004      	adds	r0, #4
    5850:	4b36      	ldr	r3, [pc, #216]	; (592c <prvTimerTask+0x1d0>)
    5852:	465f      	mov	r7, fp
    5854:	58fb      	ldr	r3, [r7, r3]
    5856:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    5858:	a804      	add	r0, sp, #16
    585a:	4b3c      	ldr	r3, [pc, #240]	; (594c <prvTimerTask+0x1f0>)
    585c:	447b      	add	r3, pc
    585e:	4798      	blx	r3
    5860:	1c03      	adds	r3, r0, #0

			switch( xMessage.xMessageID )
    5862:	6820      	ldr	r0, [r4, #0]
    5864:	2809      	cmp	r0, #9
    5866:	d83e      	bhi.n	58e6 <prvTimerTask+0x18a>
    5868:	f000 fdf2 	bl	6450 <__gnu_thumb1_case_uqi>
    586c:	3d050505 	.word	0x3d050505
    5870:	0505382a 	.word	0x0505382a
    5874:	2a3d      	.short	0x2a3d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    5876:	6867      	ldr	r7, [r4, #4]
    5878:	4640      	mov	r0, r8
    587a:	6980      	ldr	r0, [r0, #24]
    587c:	1839      	adds	r1, r7, r0
    587e:	4640      	mov	r0, r8
    5880:	1c1a      	adds	r2, r3, #0
    5882:	1c3b      	adds	r3, r7, #0
    5884:	4f32      	ldr	r7, [pc, #200]	; (5950 <prvTimerTask+0x1f4>)
    5886:	447f      	add	r7, pc
    5888:	47b8      	blx	r7
    588a:	2801      	cmp	r0, #1
    588c:	d12b      	bne.n	58e6 <prvTimerTask+0x18a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    588e:	4640      	mov	r0, r8
    5890:	6a41      	ldr	r1, [r0, #36]	; 0x24
    5892:	4788      	blx	r1
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    5894:	4642      	mov	r2, r8
    5896:	69d2      	ldr	r2, [r2, #28]
    5898:	2a01      	cmp	r2, #1
    589a:	d124      	bne.n	58e6 <prvTimerTask+0x18a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    589c:	4643      	mov	r3, r8
    589e:	699b      	ldr	r3, [r3, #24]
    58a0:	6867      	ldr	r7, [r4, #4]
    58a2:	19da      	adds	r2, r3, r7
    58a4:	2300      	movs	r3, #0
    58a6:	9300      	str	r3, [sp, #0]
    58a8:	4640      	mov	r0, r8
    58aa:	2100      	movs	r1, #0
    58ac:	4f21      	ldr	r7, [pc, #132]	; (5934 <prvTimerTask+0x1d8>)
    58ae:	46bc      	mov	ip, r7
    58b0:	465f      	mov	r7, fp
    58b2:	4467      	add	r7, ip
    58b4:	683f      	ldr	r7, [r7, #0]
    58b6:	47b8      	blx	r7
							configASSERT( xResult );
    58b8:	2800      	cmp	r0, #0
    58ba:	d114      	bne.n	58e6 <prvTimerTask+0x18a>
    58bc:	b672      	cpsid	i
    58be:	e7fe      	b.n	58be <prvTimerTask+0x162>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    58c0:	6861      	ldr	r1, [r4, #4]
    58c2:	4640      	mov	r0, r8
    58c4:	6181      	str	r1, [r0, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    58c6:	2900      	cmp	r1, #0
    58c8:	d101      	bne.n	58ce <prvTimerTask+0x172>
    58ca:	b672      	cpsid	i
    58cc:	e7fe      	b.n	58cc <prvTimerTask+0x170>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    58ce:	1859      	adds	r1, r3, r1
    58d0:	4640      	mov	r0, r8
    58d2:	1c1a      	adds	r2, r3, #0
    58d4:	4f1f      	ldr	r7, [pc, #124]	; (5954 <prvTimerTask+0x1f8>)
    58d6:	447f      	add	r7, pc
    58d8:	47b8      	blx	r7
    58da:	e004      	b.n	58e6 <prvTimerTask+0x18a>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    58dc:	4640      	mov	r0, r8
    58de:	4b1e      	ldr	r3, [pc, #120]	; (5958 <prvTimerTask+0x1fc>)
    58e0:	4659      	mov	r1, fp
    58e2:	58cb      	ldr	r3, [r1, r3]
    58e4:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    58e6:	68b0      	ldr	r0, [r6, #8]
    58e8:	1c21      	adds	r1, r4, #0
    58ea:	2200      	movs	r2, #0
    58ec:	2300      	movs	r3, #0
    58ee:	47a8      	blx	r5
    58f0:	2800      	cmp	r0, #0
    58f2:	d1a3      	bne.n	583c <prvTimerTask+0xe0>
    58f4:	e743      	b.n	577e <prvTimerTask+0x22>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    58f6:	4b09      	ldr	r3, [pc, #36]	; (591c <prvTimerTask+0x1c0>)
    58f8:	465a      	mov	r2, fp
    58fa:	58d3      	ldr	r3, [r2, r3]
    58fc:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    58fe:	1c20      	adds	r0, r4, #0
    5900:	47d0      	blx	sl
    5902:	1c06      	adds	r6, r0, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    5904:	2500      	movs	r5, #0
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
    5906:	9b05      	ldr	r3, [sp, #20]
    5908:	42ab      	cmp	r3, r5
    590a:	d100      	bne.n	590e <prvTimerTask+0x1b2>
    590c:	e77b      	b.n	5806 <prvTimerTask+0xaa>
    590e:	e78b      	b.n	5828 <prvTimerTask+0xcc>
    5910:	000025b8 	.word	0x000025b8
    5914:	1fffbeaa 	.word	0x1fffbeaa
    5918:	fffffef7 	.word	0xfffffef7
    591c:	00000138 	.word	0x00000138
    5920:	fffffed7 	.word	0xfffffed7
    5924:	00000200 	.word	0x00000200
    5928:	1fffbe6a 	.word	0x1fffbe6a
    592c:	00000148 	.word	0x00000148
    5930:	fffffb81 	.word	0xfffffb81
    5934:	00000184 	.word	0x00000184
    5938:	1fffbe14 	.word	0x1fffbe14
    593c:	00000020 	.word	0x00000020
    5940:	00000194 	.word	0x00000194
    5944:	1fffbdea 	.word	0x1fffbdea
    5948:	00000240 	.word	0x00000240
    594c:	fffffe15 	.word	0xfffffe15
    5950:	fffffad7 	.word	0xfffffad7
    5954:	fffffa87 	.word	0xfffffa87
    5958:	00000088 	.word	0x00000088

0000595c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    595c:	e7fe      	b.n	595c <Dummy_Handler>
    595e:	46c0      	nop			; (mov r8, r8)

00005960 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    5960:	b5f0      	push	{r4, r5, r6, r7, lr}
    5962:	b083      	sub	sp, #12
    5964:	4c3b      	ldr	r4, [pc, #236]	; (5a54 <Reset_Handler+0xf4>)
    5966:	447c      	add	r4, pc

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    5968:	4b3b      	ldr	r3, [pc, #236]	; (5a58 <Reset_Handler+0xf8>)
    596a:	58e3      	ldr	r3, [r4, r3]
    596c:	9300      	str	r3, [sp, #0]
    596e:	4b3b      	ldr	r3, [pc, #236]	; (5a5c <Reset_Handler+0xfc>)
    5970:	58e3      	ldr	r3, [r4, r3]
    5972:	9800      	ldr	r0, [sp, #0]
    5974:	4298      	cmp	r0, r3
    5976:	d007      	beq.n	5988 <Reset_Handler+0x28>
                for (; pDest < &_erelocate;) {
    5978:	4b38      	ldr	r3, [pc, #224]	; (5a5c <Reset_Handler+0xfc>)
    597a:	58e3      	ldr	r3, [r4, r3]
    597c:	9300      	str	r3, [sp, #0]
    597e:	4b38      	ldr	r3, [pc, #224]	; (5a60 <Reset_Handler+0x100>)
    5980:	58e3      	ldr	r3, [r4, r3]
    5982:	9a00      	ldr	r2, [sp, #0]
    5984:	429a      	cmp	r2, r3
    5986:	d308      	bcc.n	599a <Reset_Handler+0x3a>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5988:	4b36      	ldr	r3, [pc, #216]	; (5a64 <Reset_Handler+0x104>)
    598a:	58e3      	ldr	r3, [r4, r3]
    598c:	9300      	str	r3, [sp, #0]
    598e:	4b36      	ldr	r3, [pc, #216]	; (5a68 <Reset_Handler+0x108>)
    5990:	58e3      	ldr	r3, [r4, r3]
    5992:	9d00      	ldr	r5, [sp, #0]
    5994:	429d      	cmp	r5, r3
    5996:	d318      	bcc.n	59ca <Reset_Handler+0x6a>
    5998:	e026      	b.n	59e8 <Reset_Handler+0x88>
    599a:	4b31      	ldr	r3, [pc, #196]	; (5a60 <Reset_Handler+0x100>)
    599c:	58e3      	ldr	r3, [r4, r3]
    599e:	9300      	str	r3, [sp, #0]
    59a0:	4b2e      	ldr	r3, [pc, #184]	; (5a5c <Reset_Handler+0xfc>)
    59a2:	58e3      	ldr	r3, [r4, r3]
    59a4:	43d9      	mvns	r1, r3
    59a6:	9800      	ldr	r0, [sp, #0]
    59a8:	1809      	adds	r1, r1, r0
    59aa:	0889      	lsrs	r1, r1, #2
    59ac:	3101      	adds	r1, #1
    59ae:	0089      	lsls	r1, r1, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    59b0:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    59b2:	4a2a      	ldr	r2, [pc, #168]	; (5a5c <Reset_Handler+0xfc>)
    59b4:	58a2      	ldr	r2, [r4, r2]
    59b6:	9201      	str	r2, [sp, #4]
    59b8:	4a27      	ldr	r2, [pc, #156]	; (5a58 <Reset_Handler+0xf8>)
    59ba:	58a2      	ldr	r2, [r4, r2]
    59bc:	58d0      	ldr	r0, [r2, r3]
    59be:	9d01      	ldr	r5, [sp, #4]
    59c0:	50e8      	str	r0, [r5, r3]
    59c2:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    59c4:	428b      	cmp	r3, r1
    59c6:	d1f9      	bne.n	59bc <Reset_Handler+0x5c>
    59c8:	e7de      	b.n	5988 <Reset_Handler+0x28>
    59ca:	4b26      	ldr	r3, [pc, #152]	; (5a64 <Reset_Handler+0x104>)
    59cc:	58e3      	ldr	r3, [r4, r3]
    59ce:	1d1a      	adds	r2, r3, #4
    59d0:	4925      	ldr	r1, [pc, #148]	; (5a68 <Reset_Handler+0x108>)
    59d2:	5861      	ldr	r1, [r4, r1]
    59d4:	9100      	str	r1, [sp, #0]
    59d6:	3103      	adds	r1, #3
    59d8:	1a89      	subs	r1, r1, r2
    59da:	0889      	lsrs	r1, r1, #2
    59dc:	0089      	lsls	r1, r1, #2
    59de:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    59e0:	2100      	movs	r1, #0
    59e2:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    59e4:	4293      	cmp	r3, r2
    59e6:	d1fc      	bne.n	59e2 <Reset_Handler+0x82>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    59e8:	4b20      	ldr	r3, [pc, #128]	; (5a6c <Reset_Handler+0x10c>)
    59ea:	58e3      	ldr	r3, [r4, r3]
    59ec:	9300      	str	r3, [sp, #0]
    59ee:	23ff      	movs	r3, #255	; 0xff
    59f0:	9a00      	ldr	r2, [sp, #0]
    59f2:	439a      	bics	r2, r3
    59f4:	4b1e      	ldr	r3, [pc, #120]	; (5a70 <Reset_Handler+0x110>)
    59f6:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    59f8:	2102      	movs	r1, #2
    59fa:	2390      	movs	r3, #144	; 0x90
    59fc:	005b      	lsls	r3, r3, #1
    59fe:	4a1d      	ldr	r2, [pc, #116]	; (5a74 <Reset_Handler+0x114>)
    5a00:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    5a02:	4b1d      	ldr	r3, [pc, #116]	; (5a78 <Reset_Handler+0x118>)
    5a04:	78d8      	ldrb	r0, [r3, #3]
    5a06:	2103      	movs	r1, #3
    5a08:	4388      	bics	r0, r1
    5a0a:	2202      	movs	r2, #2
    5a0c:	4310      	orrs	r0, r2
    5a0e:	70d8      	strb	r0, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    5a10:	78de      	ldrb	r6, [r3, #3]
    5a12:	250c      	movs	r5, #12
    5a14:	43ae      	bics	r6, r5
    5a16:	2008      	movs	r0, #8
    5a18:	4306      	orrs	r6, r0
    5a1a:	70de      	strb	r6, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    5a1c:	4b17      	ldr	r3, [pc, #92]	; (5a7c <Reset_Handler+0x11c>)
    5a1e:	7b9f      	ldrb	r7, [r3, #14]
    5a20:	2630      	movs	r6, #48	; 0x30
    5a22:	43b7      	bics	r7, r6
    5a24:	2620      	movs	r6, #32
    5a26:	433e      	orrs	r6, r7
    5a28:	739e      	strb	r6, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    5a2a:	7b9e      	ldrb	r6, [r3, #14]
    5a2c:	43ae      	bics	r6, r5
    5a2e:	4330      	orrs	r0, r6
    5a30:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    5a32:	7b98      	ldrb	r0, [r3, #14]
    5a34:	4388      	bics	r0, r1
    5a36:	4302      	orrs	r2, r0
    5a38:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    5a3a:	4b11      	ldr	r3, [pc, #68]	; (5a80 <Reset_Handler+0x120>)
    5a3c:	6859      	ldr	r1, [r3, #4]
    5a3e:	2280      	movs	r2, #128	; 0x80
    5a40:	430a      	orrs	r2, r1
    5a42:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    5a44:	4b0f      	ldr	r3, [pc, #60]	; (5a84 <Reset_Handler+0x124>)
    5a46:	58e3      	ldr	r3, [r4, r3]
    5a48:	4798      	blx	r3

        /* Branch to main function */
        main();
    5a4a:	4b0f      	ldr	r3, [pc, #60]	; (5a88 <Reset_Handler+0x128>)
    5a4c:	58e3      	ldr	r3, [r4, r3]
    5a4e:	4798      	blx	r3
    5a50:	e7fe      	b.n	5a50 <Reset_Handler+0xf0>
    5a52:	46c0      	nop			; (mov r8, r8)
    5a54:	000023be 	.word	0x000023be
    5a58:	00000058 	.word	0x00000058
    5a5c:	00000074 	.word	0x00000074
    5a60:	00000258 	.word	0x00000258
    5a64:	0000005c 	.word	0x0000005c
    5a68:	000001cc 	.word	0x000001cc
    5a6c:	00000040 	.word	0x00000040
    5a70:	e000ed00 	.word	0xe000ed00
    5a74:	41007000 	.word	0x41007000
    5a78:	41005000 	.word	0x41005000
    5a7c:	41004800 	.word	0x41004800
    5a80:	41004000 	.word	0x41004000
    5a84:	000000d0 	.word	0x000000d0
    5a88:	000001b4 	.word	0x000001b4

00005a8c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    5a8c:	b500      	push	{lr}
    5a8e:	b083      	sub	sp, #12
    5a90:	4b23      	ldr	r3, [pc, #140]	; (5b20 <system_clock_source_get_hz+0x94>)
    5a92:	447b      	add	r3, pc
	switch (clock_source) {
    5a94:	2808      	cmp	r0, #8
    5a96:	d83e      	bhi.n	5b16 <system_clock_source_get_hz+0x8a>
    5a98:	f000 fcda 	bl	6450 <__gnu_thumb1_case_uqi>
    5a9c:	053d3d08 	.word	0x053d3d08
    5aa0:	180c1405 	.word	0x180c1405
    5aa4:	33          	.byte	0x33
    5aa5:	00          	.byte	0x00

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    5aa6:	2080      	movs	r0, #128	; 0x80
    5aa8:	0200      	lsls	r0, r0, #8
    5aaa:	e037      	b.n	5b1c <system_clock_source_get_hz+0x90>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    5aac:	4b1d      	ldr	r3, [pc, #116]	; (5b24 <system_clock_source_get_hz+0x98>)
    5aae:	447b      	add	r3, pc
    5ab0:	6918      	ldr	r0, [r3, #16]
    5ab2:	e033      	b.n	5b1c <system_clock_source_get_hz+0x90>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    5ab4:	4b1c      	ldr	r3, [pc, #112]	; (5b28 <system_clock_source_get_hz+0x9c>)
    5ab6:	6a18      	ldr	r0, [r3, #32]
    5ab8:	0580      	lsls	r0, r0, #22
    5aba:	0f80      	lsrs	r0, r0, #30
    5abc:	4b1b      	ldr	r3, [pc, #108]	; (5b2c <system_clock_source_get_hz+0xa0>)
    5abe:	40c3      	lsrs	r3, r0
    5ac0:	1c18      	adds	r0, r3, #0
    5ac2:	e02b      	b.n	5b1c <system_clock_source_get_hz+0x90>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    5ac4:	4b1a      	ldr	r3, [pc, #104]	; (5b30 <system_clock_source_get_hz+0xa4>)
    5ac6:	447b      	add	r3, pc
    5ac8:	6958      	ldr	r0, [r3, #20]
    5aca:	e027      	b.n	5b1c <system_clock_source_get_hz+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    5acc:	4a19      	ldr	r2, [pc, #100]	; (5b34 <system_clock_source_get_hz+0xa8>)
    5ace:	447a      	add	r2, pc
    5ad0:	6812      	ldr	r2, [r2, #0]
    5ad2:	2002      	movs	r0, #2
    5ad4:	4010      	ands	r0, r2
    5ad6:	d021      	beq.n	5b1c <system_clock_source_get_hz+0x90>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5ad8:	4813      	ldr	r0, [pc, #76]	; (5b28 <system_clock_source_get_hz+0x9c>)
    5ada:	2110      	movs	r1, #16
    5adc:	68c2      	ldr	r2, [r0, #12]
    5ade:	4211      	tst	r1, r2
    5ae0:	d0fc      	beq.n	5adc <system_clock_source_get_hz+0x50>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    5ae2:	4a15      	ldr	r2, [pc, #84]	; (5b38 <system_clock_source_get_hz+0xac>)
    5ae4:	447a      	add	r2, pc
    5ae6:	6812      	ldr	r2, [r2, #0]
    5ae8:	0751      	lsls	r1, r2, #29
    5aea:	d516      	bpl.n	5b1a <system_clock_source_get_hz+0x8e>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5aec:	2000      	movs	r0, #0
    5aee:	4a13      	ldr	r2, [pc, #76]	; (5b3c <system_clock_source_get_hz+0xb0>)
    5af0:	589a      	ldr	r2, [r3, r2]
    5af2:	4790      	blx	r2
					(_system_clock_inst.dfll.mul & 0xffff);
    5af4:	4b12      	ldr	r3, [pc, #72]	; (5b40 <system_clock_source_get_hz+0xb4>)
    5af6:	447b      	add	r3, pc
    5af8:	689b      	ldr	r3, [r3, #8]
    5afa:	041b      	lsls	r3, r3, #16
    5afc:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5afe:	4358      	muls	r0, r3
    5b00:	e00c      	b.n	5b1c <system_clock_source_get_hz+0x90>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5b02:	2350      	movs	r3, #80	; 0x50
    5b04:	4a08      	ldr	r2, [pc, #32]	; (5b28 <system_clock_source_get_hz+0x9c>)
    5b06:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    5b08:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5b0a:	075a      	lsls	r2, r3, #29
    5b0c:	d506      	bpl.n	5b1c <system_clock_source_get_hz+0x90>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    5b0e:	4b0d      	ldr	r3, [pc, #52]	; (5b44 <system_clock_source_get_hz+0xb8>)
    5b10:	447b      	add	r3, pc
    5b12:	68d8      	ldr	r0, [r3, #12]
    5b14:	e002      	b.n	5b1c <system_clock_source_get_hz+0x90>
#endif

	default:
		return 0;
    5b16:	2000      	movs	r0, #0
    5b18:	e000      	b.n	5b1c <system_clock_source_get_hz+0x90>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    5b1a:	480b      	ldr	r0, [pc, #44]	; (5b48 <system_clock_source_get_hz+0xbc>)
#endif

	default:
		return 0;
	}
}
    5b1c:	b003      	add	sp, #12
    5b1e:	bd00      	pop	{pc}
    5b20:	00002292 	.word	0x00002292
    5b24:	1fffbbaa 	.word	0x1fffbbaa
    5b28:	40000800 	.word	0x40000800
    5b2c:	007a1200 	.word	0x007a1200
    5b30:	1fffbb92 	.word	0x1fffbb92
    5b34:	1fffbb8a 	.word	0x1fffbb8a
    5b38:	1fffbb74 	.word	0x1fffbb74
    5b3c:	00000154 	.word	0x00000154
    5b40:	1fffbb62 	.word	0x1fffbb62
    5b44:	1fffbb48 	.word	0x1fffbb48
    5b48:	02dc6c00 	.word	0x02dc6c00

00005b4c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    5b4c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    5b4e:	4b0c      	ldr	r3, [pc, #48]	; (5b80 <system_clock_source_osc8m_set_config+0x34>)
    5b50:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    5b52:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    5b54:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    5b56:	7840      	ldrb	r0, [r0, #1]
    5b58:	2201      	movs	r2, #1
    5b5a:	4010      	ands	r0, r2
    5b5c:	0180      	lsls	r0, r0, #6
    5b5e:	2640      	movs	r6, #64	; 0x40
    5b60:	43b4      	bics	r4, r6
    5b62:	4304      	orrs	r4, r0
    5b64:	402a      	ands	r2, r5
    5b66:	01d0      	lsls	r0, r2, #7
    5b68:	2280      	movs	r2, #128	; 0x80
    5b6a:	4394      	bics	r4, r2
    5b6c:	1c22      	adds	r2, r4, #0
    5b6e:	4302      	orrs	r2, r0
    5b70:	2003      	movs	r0, #3
    5b72:	4001      	ands	r1, r0
    5b74:	0209      	lsls	r1, r1, #8
    5b76:	4803      	ldr	r0, [pc, #12]	; (5b84 <system_clock_source_osc8m_set_config+0x38>)
    5b78:	4002      	ands	r2, r0
    5b7a:	430a      	orrs	r2, r1
    5b7c:	621a      	str	r2, [r3, #32]
}
    5b7e:	bd70      	pop	{r4, r5, r6, pc}
    5b80:	40000800 	.word	0x40000800
    5b84:	fffffcff 	.word	0xfffffcff

00005b88 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    5b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b8a:	465f      	mov	r7, fp
    5b8c:	4656      	mov	r6, sl
    5b8e:	464d      	mov	r5, r9
    5b90:	4644      	mov	r4, r8
    5b92:	b4f0      	push	{r4, r5, r6, r7}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    5b94:	4a26      	ldr	r2, [pc, #152]	; (5c30 <system_clock_source_xosc32k_set_config+0xa8>)
    5b96:	8a94      	ldrh	r4, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
    5b98:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    5b9a:	7803      	ldrb	r3, [r0, #0]
    5b9c:	4259      	negs	r1, r3
    5b9e:	4159      	adcs	r1, r3
    5ba0:	468a      	mov	sl, r1
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    5ba2:	7883      	ldrb	r3, [r0, #2]
    5ba4:	469c      	mov	ip, r3
	temp.bit.EN1K = config->enable_1khz_output;
    5ba6:	78c1      	ldrb	r1, [r0, #3]
    5ba8:	4688      	mov	r8, r1
	temp.bit.EN32K = config->enable_32khz_output;
    5baa:	7903      	ldrb	r3, [r0, #4]
    5bac:	4699      	mov	r9, r3

	temp.bit.ONDEMAND = config->on_demand;
    5bae:	7b46      	ldrb	r6, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5bb0:	7b07      	ldrb	r7, [r0, #12]
	temp.bit.WRTLOCK  = config->write_once;
    5bb2:	7b81      	ldrb	r1, [r0, #14]
    5bb4:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    5bb6:	6880      	ldr	r0, [r0, #8]
    5bb8:	4b1e      	ldr	r3, [pc, #120]	; (5c34 <system_clock_source_xosc32k_set_config+0xac>)
    5bba:	447b      	add	r3, pc
    5bbc:	6158      	str	r0, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    5bbe:	2301      	movs	r3, #1
    5bc0:	4651      	mov	r1, sl
    5bc2:	0088      	lsls	r0, r1, #2
    5bc4:	2104      	movs	r1, #4
    5bc6:	438c      	bics	r4, r1
    5bc8:	4304      	orrs	r4, r0
    5bca:	4648      	mov	r0, r9
    5bcc:	4018      	ands	r0, r3
    5bce:	00c0      	lsls	r0, r0, #3
    5bd0:	2108      	movs	r1, #8
    5bd2:	438c      	bics	r4, r1
    5bd4:	4304      	orrs	r4, r0
    5bd6:	4640      	mov	r0, r8
    5bd8:	4018      	ands	r0, r3
    5bda:	0100      	lsls	r0, r0, #4
    5bdc:	2110      	movs	r1, #16
    5bde:	438c      	bics	r4, r1
    5be0:	4304      	orrs	r4, r0
    5be2:	4660      	mov	r0, ip
    5be4:	4018      	ands	r0, r3
    5be6:	0140      	lsls	r0, r0, #5
    5be8:	2120      	movs	r1, #32
    5bea:	438c      	bics	r4, r1
    5bec:	4304      	orrs	r4, r0
    5bee:	1c18      	adds	r0, r3, #0
    5bf0:	4038      	ands	r0, r7
    5bf2:	0180      	lsls	r0, r0, #6
    5bf4:	2740      	movs	r7, #64	; 0x40
    5bf6:	43bc      	bics	r4, r7
    5bf8:	4304      	orrs	r4, r0
    5bfa:	1c18      	adds	r0, r3, #0
    5bfc:	4030      	ands	r0, r6
    5bfe:	01c0      	lsls	r0, r0, #7
    5c00:	2680      	movs	r6, #128	; 0x80
    5c02:	43b4      	bics	r4, r6
    5c04:	4304      	orrs	r4, r0
    5c06:	2007      	movs	r0, #7
    5c08:	4028      	ands	r0, r5
    5c0a:	0200      	lsls	r0, r0, #8
    5c0c:	4d0a      	ldr	r5, [pc, #40]	; (5c38 <system_clock_source_xosc32k_set_config+0xb0>)
    5c0e:	402c      	ands	r4, r5
    5c10:	4304      	orrs	r4, r0
    5c12:	4659      	mov	r1, fp
    5c14:	400b      	ands	r3, r1
    5c16:	0319      	lsls	r1, r3, #12
    5c18:	4808      	ldr	r0, [pc, #32]	; (5c3c <system_clock_source_xosc32k_set_config+0xb4>)
    5c1a:	1c23      	adds	r3, r4, #0
    5c1c:	4003      	ands	r3, r0
    5c1e:	430b      	orrs	r3, r1
    5c20:	8293      	strh	r3, [r2, #20]
}
    5c22:	bc3c      	pop	{r2, r3, r4, r5}
    5c24:	4690      	mov	r8, r2
    5c26:	4699      	mov	r9, r3
    5c28:	46a2      	mov	sl, r4
    5c2a:	46ab      	mov	fp, r5
    5c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c2e:	46c0      	nop			; (mov r8, r8)
    5c30:	40000800 	.word	0x40000800
    5c34:	1fffba9e 	.word	0x1fffba9e
    5c38:	fffff8ff 	.word	0xfffff8ff
    5c3c:	ffffefff 	.word	0xffffefff

00005c40 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    5c40:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c42:	b083      	sub	sp, #12
    5c44:	1c04      	adds	r4, r0, #0
    5c46:	4e26      	ldr	r6, [pc, #152]	; (5ce0 <system_clock_source_dpll_set_config+0xa0>)
    5c48:	447e      	add	r6, pc

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    5c4a:	68c5      	ldr	r5, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    5c4c:	7d03      	ldrb	r3, [r0, #20]
    5c4e:	2b01      	cmp	r3, #1
    5c50:	d107      	bne.n	5c62 <system_clock_source_dpll_set_config+0x22>
		refclk = refclk / (2 * (config->reference_divider + 1));
    5c52:	8a01      	ldrh	r1, [r0, #16]
    5c54:	3101      	adds	r1, #1
    5c56:	0049      	lsls	r1, r1, #1
    5c58:	4b22      	ldr	r3, [pc, #136]	; (5ce4 <system_clock_source_dpll_set_config+0xa4>)
    5c5a:	58f3      	ldr	r3, [r6, r3]
    5c5c:	1c28      	adds	r0, r5, #0
    5c5e:	4798      	blx	r3
    5c60:	1c05      	adds	r5, r0, #0
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    5c62:	68a3      	ldr	r3, [r4, #8]
    5c64:	0118      	lsls	r0, r3, #4
    5c66:	4b1f      	ldr	r3, [pc, #124]	; (5ce4 <system_clock_source_dpll_set_config+0xa4>)
    5c68:	58f3      	ldr	r3, [r6, r3]
    5c6a:	1c29      	adds	r1, r5, #0
    5c6c:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    5c6e:	220f      	movs	r2, #15
    5c70:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    5c72:	0900      	lsrs	r0, r0, #4

	SYSCTRL->DPLLCTRLA.reg =
    5c74:	7866      	ldrb	r6, [r4, #1]
    5c76:	01b6      	lsls	r6, r6, #6
    5c78:	7823      	ldrb	r3, [r4, #0]
    5c7a:	01db      	lsls	r3, r3, #7
    5c7c:	431e      	orrs	r6, r3
    5c7e:	b2f6      	uxtb	r6, r6
    5c80:	4b19      	ldr	r3, [pc, #100]	; (5ce8 <system_clock_source_dpll_set_config+0xa8>)
    5c82:	2144      	movs	r1, #68	; 0x44
    5c84:	545e      	strb	r6, [r3, r1]
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    5c86:	0416      	lsls	r6, r2, #16
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
	tmpldrfrac = tmpldr & 0x0f;
	tmpldr = (tmpldr >> 4) - 1;
    5c88:	1e41      	subs	r1, r0, #1
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
    5c8a:	0509      	lsls	r1, r1, #20
    5c8c:	0d09      	lsrs	r1, r1, #20
	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    5c8e:	4331      	orrs	r1, r6

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
    5c90:	6499      	str	r1, [r3, #72]	; 0x48
	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    5c92:	78e6      	ldrb	r6, [r4, #3]
    5c94:	00f6      	lsls	r6, r6, #3
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    5c96:	78a1      	ldrb	r1, [r4, #2]
    5c98:	0309      	lsls	r1, r1, #12
	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    5c9a:	4331      	orrs	r1, r6
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    5c9c:	7926      	ldrb	r6, [r4, #4]
    5c9e:	00b6      	lsls	r6, r6, #2
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    5ca0:	4331      	orrs	r1, r6
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
    5ca2:	7ca6      	ldrb	r6, [r4, #18]
    5ca4:	2703      	movs	r7, #3
    5ca6:	403e      	ands	r6, r7
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    5ca8:	4331      	orrs	r1, r6
	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    5caa:	8a26      	ldrh	r6, [r4, #16]
    5cac:	0436      	lsls	r6, r6, #16
    5cae:	4f0f      	ldr	r7, [pc, #60]	; (5cec <system_clock_source_dpll_set_config+0xac>)
    5cb0:	403e      	ands	r6, r7
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    5cb2:	4331      	orrs	r1, r6
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    5cb4:	7ce7      	ldrb	r7, [r4, #19]
    5cb6:	023f      	lsls	r7, r7, #8
    5cb8:	26e0      	movs	r6, #224	; 0xe0
    5cba:	00f6      	lsls	r6, r6, #3
    5cbc:	403e      	ands	r6, r7
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    5cbe:	4331      	orrs	r1, r6

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    5cc0:	7d24      	ldrb	r4, [r4, #20]
    5cc2:	0124      	lsls	r4, r4, #4
    5cc4:	2630      	movs	r6, #48	; 0x30
    5cc6:	4034      	ands	r4, r6
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    5cc8:	4321      	orrs	r1, r4

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
    5cca:	64d9      	str	r1, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
    5ccc:	0100      	lsls	r0, r0, #4
    5cce:	1812      	adds	r2, r2, r0
    5cd0:	4355      	muls	r5, r2
    5cd2:	092d      	lsrs	r5, r5, #4
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
    5cd4:	4b06      	ldr	r3, [pc, #24]	; (5cf0 <system_clock_source_dpll_set_config+0xb0>)
    5cd6:	447b      	add	r3, pc
    5cd8:	60dd      	str	r5, [r3, #12]
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
}
    5cda:	b003      	add	sp, #12
    5cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5cde:	46c0      	nop			; (mov r8, r8)
    5ce0:	000020dc 	.word	0x000020dc
    5ce4:	000001c0 	.word	0x000001c0
    5ce8:	40000800 	.word	0x40000800
    5cec:	07ff0000 	.word	0x07ff0000
    5cf0:	1fffb982 	.word	0x1fffb982

00005cf4 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    5cf4:	b500      	push	{lr}
	switch (clock_source) {
    5cf6:	2808      	cmp	r0, #8
    5cf8:	d84f      	bhi.n	5d9a <system_clock_source_enable+0xa6>
    5cfa:	f000 fba9 	bl	6450 <__gnu_thumb1_case_uqi>
    5cfe:	4e15      	.short	0x4e15
    5d00:	1c0e054e 	.word	0x1c0e054e
    5d04:	2307      	.short	0x2307
    5d06:	46          	.byte	0x46
    5d07:	00          	.byte	0x00
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    5d08:	2000      	movs	r0, #0
    5d0a:	e047      	b.n	5d9c <system_clock_source_enable+0xa8>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    5d0c:	4b24      	ldr	r3, [pc, #144]	; (5da0 <system_clock_source_enable+0xac>)
    5d0e:	6a19      	ldr	r1, [r3, #32]
    5d10:	2202      	movs	r2, #2
    5d12:	430a      	orrs	r2, r1
    5d14:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    5d16:	2000      	movs	r0, #0
    5d18:	e040      	b.n	5d9c <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    5d1a:	4b21      	ldr	r3, [pc, #132]	; (5da0 <system_clock_source_enable+0xac>)
    5d1c:	6999      	ldr	r1, [r3, #24]
    5d1e:	2202      	movs	r2, #2
    5d20:	430a      	orrs	r2, r1
    5d22:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5d24:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    5d26:	e039      	b.n	5d9c <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    5d28:	4b1d      	ldr	r3, [pc, #116]	; (5da0 <system_clock_source_enable+0xac>)
    5d2a:	8a19      	ldrh	r1, [r3, #16]
    5d2c:	2202      	movs	r2, #2
    5d2e:	430a      	orrs	r2, r1
    5d30:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5d32:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    5d34:	e032      	b.n	5d9c <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    5d36:	4b1a      	ldr	r3, [pc, #104]	; (5da0 <system_clock_source_enable+0xac>)
    5d38:	8a99      	ldrh	r1, [r3, #20]
    5d3a:	2202      	movs	r2, #2
    5d3c:	430a      	orrs	r2, r1
    5d3e:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5d40:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    5d42:	e02b      	b.n	5d9c <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    5d44:	4a17      	ldr	r2, [pc, #92]	; (5da4 <system_clock_source_enable+0xb0>)
    5d46:	447a      	add	r2, pc
    5d48:	6811      	ldr	r1, [r2, #0]
    5d4a:	2302      	movs	r3, #2
    5d4c:	4319      	orrs	r1, r3
    5d4e:	6011      	str	r1, [r2, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    5d50:	4a13      	ldr	r2, [pc, #76]	; (5da0 <system_clock_source_enable+0xac>)
    5d52:	8493      	strh	r3, [r2, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5d54:	1c11      	adds	r1, r2, #0
    5d56:	2210      	movs	r2, #16
    5d58:	68cb      	ldr	r3, [r1, #12]
    5d5a:	421a      	tst	r2, r3
    5d5c:	d0fc      	beq.n	5d58 <system_clock_source_enable+0x64>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    5d5e:	4a12      	ldr	r2, [pc, #72]	; (5da8 <system_clock_source_enable+0xb4>)
    5d60:	447a      	add	r2, pc
    5d62:	6891      	ldr	r1, [r2, #8]
    5d64:	4b0e      	ldr	r3, [pc, #56]	; (5da0 <system_clock_source_enable+0xac>)
    5d66:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5d68:	6852      	ldr	r2, [r2, #4]
    5d6a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    5d6c:	2200      	movs	r2, #0
    5d6e:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5d70:	1c19      	adds	r1, r3, #0
    5d72:	2210      	movs	r2, #16
    5d74:	68cb      	ldr	r3, [r1, #12]
    5d76:	421a      	tst	r2, r3
    5d78:	d0fc      	beq.n	5d74 <system_clock_source_enable+0x80>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5d7a:	4b0c      	ldr	r3, [pc, #48]	; (5dac <system_clock_source_enable+0xb8>)
    5d7c:	447b      	add	r3, pc
    5d7e:	681a      	ldr	r2, [r3, #0]
    5d80:	b292      	uxth	r2, r2
    5d82:	4b07      	ldr	r3, [pc, #28]	; (5da0 <system_clock_source_enable+0xac>)
    5d84:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5d86:	2000      	movs	r0, #0
    5d88:	e008      	b.n	5d9c <system_clock_source_enable+0xa8>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    5d8a:	4a05      	ldr	r2, [pc, #20]	; (5da0 <system_clock_source_enable+0xac>)
    5d8c:	2344      	movs	r3, #68	; 0x44
    5d8e:	5cd0      	ldrb	r0, [r2, r3]
    5d90:	2102      	movs	r1, #2
    5d92:	4301      	orrs	r1, r0
    5d94:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5d96:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    5d98:	e000      	b.n	5d9c <system_clock_source_enable+0xa8>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5d9a:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    5d9c:	bd00      	pop	{pc}
    5d9e:	46c0      	nop			; (mov r8, r8)
    5da0:	40000800 	.word	0x40000800
    5da4:	1fffb912 	.word	0x1fffb912
    5da8:	1fffb8f8 	.word	0x1fffb8f8
    5dac:	1fffb8dc 	.word	0x1fffb8dc

00005db0 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    5db0:	b500      	push	{lr}
	uint32_t mask = 0;

	switch (clock_source) {
    5db2:	2808      	cmp	r0, #8
    5db4:	d823      	bhi.n	5dfe <system_clock_source_is_ready+0x4e>
    5db6:	f000 fb4b 	bl	6450 <__gnu_thumb1_case_uqi>
    5dba:	2207      	.short	0x2207
    5dbc:	09190522 	.word	0x09190522
    5dc0:	0b17      	.short	0x0b17
    5dc2:	0d          	.byte	0x0d
    5dc3:	00          	.byte	0x00
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    5dc4:	2001      	movs	r0, #1
    5dc6:	e01b      	b.n	5e00 <system_clock_source_is_ready+0x50>
	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    5dc8:	2301      	movs	r3, #1
		break;
    5dca:	e010      	b.n	5dee <system_clock_source_is_ready+0x3e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    5dcc:	2302      	movs	r3, #2
		break;
    5dce:	e00e      	b.n	5dee <system_clock_source_is_ready+0x3e>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    5dd0:	2310      	movs	r3, #16
		}
		break;
    5dd2:	e00c      	b.n	5dee <system_clock_source_is_ready+0x3e>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    5dd4:	2350      	movs	r3, #80	; 0x50
    5dd6:	4a0b      	ldr	r2, [pc, #44]	; (5e04 <system_clock_source_is_ready+0x54>)
    5dd8:	5cd0      	ldrb	r0, [r2, r3]
    5dda:	2303      	movs	r3, #3
    5ddc:	4018      	ands	r0, r3
    5dde:	3803      	subs	r0, #3
    5de0:	4243      	negs	r3, r0
    5de2:	4158      	adcs	r0, r3
    5de4:	b2c0      	uxtb	r0, r0
    5de6:	e00b      	b.n	5e00 <system_clock_source_is_ready+0x50>
{
	uint32_t mask = 0;

	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    5de8:	2308      	movs	r3, #8
    5dea:	e000      	b.n	5dee <system_clock_source_is_ready+0x3e>
		break;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    5dec:	2304      	movs	r3, #4

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5dee:	4a05      	ldr	r2, [pc, #20]	; (5e04 <system_clock_source_is_ready+0x54>)
    5df0:	68d0      	ldr	r0, [r2, #12]
    5df2:	4018      	ands	r0, r3
    5df4:	1ac0      	subs	r0, r0, r3
    5df6:	4243      	negs	r3, r0
    5df8:	4158      	adcs	r0, r3
    5dfa:	b2c0      	uxtb	r0, r0
    5dfc:	e000      	b.n	5e00 <system_clock_source_is_ready+0x50>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;

	default:
		return false;
    5dfe:	2000      	movs	r0, #0
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
}
    5e00:	bd00      	pop	{pc}
    5e02:	46c0      	nop			; (mov r8, r8)
    5e04:	40000800 	.word	0x40000800

00005e08 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5e08:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e0a:	b091      	sub	sp, #68	; 0x44
    5e0c:	4f48      	ldr	r7, [pc, #288]	; (5f30 <system_clock_init+0x128>)
    5e0e:	447f      	add	r7, pc
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    5e10:	22c2      	movs	r2, #194	; 0xc2
    5e12:	00d2      	lsls	r2, r2, #3
    5e14:	4b47      	ldr	r3, [pc, #284]	; (5f34 <system_clock_init+0x12c>)
    5e16:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5e18:	4a47      	ldr	r2, [pc, #284]	; (5f38 <system_clock_init+0x130>)
    5e1a:	6851      	ldr	r1, [r2, #4]
    5e1c:	231e      	movs	r3, #30
    5e1e:	4399      	bics	r1, r3
    5e20:	2302      	movs	r3, #2
    5e22:	4319      	orrs	r1, r3
    5e24:	6051      	str	r1, [r2, #4]
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    5e26:	aa02      	add	r2, sp, #8
    5e28:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5e2a:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    5e2c:	1c16      	adds	r6, r2, #0
    5e2e:	4b43      	ldr	r3, [pc, #268]	; (5f3c <system_clock_init+0x134>)
    5e30:	58fd      	ldr	r5, [r7, r3]
    5e32:	b2e0      	uxtb	r0, r4
    5e34:	1c31      	adds	r1, r6, #0
    5e36:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5e38:	3401      	adds	r4, #1
    5e3a:	2c25      	cmp	r4, #37	; 0x25
    5e3c:	d1f9      	bne.n	5e32 <system_clock_init+0x2a>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5e3e:	2300      	movs	r3, #0
    5e40:	a80c      	add	r0, sp, #48	; 0x30
    5e42:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
    5e44:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    5e46:	2280      	movs	r2, #128	; 0x80
    5e48:	0212      	lsls	r2, r2, #8
    5e4a:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    5e4c:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    5e4e:	2201      	movs	r2, #1
    5e50:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    5e52:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    5e54:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    5e56:	2206      	movs	r2, #6
    5e58:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    5e5a:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    5e5c:	4b38      	ldr	r3, [pc, #224]	; (5f40 <system_clock_init+0x138>)
    5e5e:	58fb      	ldr	r3, [r7, r3]
    5e60:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    5e62:	2005      	movs	r0, #5
    5e64:	4b37      	ldr	r3, [pc, #220]	; (5f44 <system_clock_init+0x13c>)
    5e66:	58fb      	ldr	r3, [r7, r3]
    5e68:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    5e6a:	4b37      	ldr	r3, [pc, #220]	; (5f48 <system_clock_init+0x140>)
    5e6c:	58fc      	ldr	r4, [r7, r3]
    5e6e:	2005      	movs	r0, #5
    5e70:	47a0      	blx	r4
    5e72:	2800      	cmp	r0, #0
    5e74:	d0fb      	beq.n	5e6e <system_clock_init+0x66>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    5e76:	4b2f      	ldr	r3, [pc, #188]	; (5f34 <system_clock_init+0x12c>)
    5e78:	8a99      	ldrh	r1, [r3, #20]
    5e7a:	2280      	movs	r2, #128	; 0x80
    5e7c:	430a      	orrs	r2, r1
    5e7e:	829a      	strh	r2, [r3, #20]
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    5e80:	2400      	movs	r4, #0
    5e82:	a80b      	add	r0, sp, #44	; 0x2c
    5e84:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    5e86:	2601      	movs	r6, #1
    5e88:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    5e8a:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    5e8c:	4b2f      	ldr	r3, [pc, #188]	; (5f4c <system_clock_init+0x144>)
    5e8e:	58fb      	ldr	r3, [r7, r3]
    5e90:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    5e92:	2006      	movs	r0, #6
    5e94:	4b2b      	ldr	r3, [pc, #172]	; (5f44 <system_clock_init+0x13c>)
    5e96:	58fd      	ldr	r5, [r7, r3]
    5e98:	47a8      	blx	r5


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    5e9a:	4b2d      	ldr	r3, [pc, #180]	; (5f50 <system_clock_init+0x148>)
    5e9c:	58fb      	ldr	r3, [r7, r3]
    5e9e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    5ea0:	a902      	add	r1, sp, #8
    5ea2:	604e      	str	r6, [r1, #4]
	config->high_when_disabled = false;
    5ea4:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    5ea6:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    5ea8:	724c      	strb	r4, [r1, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    5eaa:	2305      	movs	r3, #5
    5eac:	700b      	strb	r3, [r1, #0]
    5eae:	2001      	movs	r0, #1
    5eb0:	4b28      	ldr	r3, [pc, #160]	; (5f54 <system_clock_init+0x14c>)
    5eb2:	58fb      	ldr	r3, [r7, r3]
    5eb4:	4798      	blx	r3
    5eb6:	2001      	movs	r0, #1
    5eb8:	4b27      	ldr	r3, [pc, #156]	; (5f58 <system_clock_init+0x150>)
    5eba:	58fb      	ldr	r3, [r7, r3]
    5ebc:	4798      	blx	r3
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
	config->on_demand           = true;
	config->run_in_standby      = false;
    5ebe:	a805      	add	r0, sp, #20
    5ec0:	7044      	strb	r4, [r0, #1]
	config->lock_bypass         = false;
    5ec2:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    5ec4:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;
    5ec6:	7104      	strb	r4, [r0, #4]

	config->output_frequency    = 48000000;
    5ec8:	4b24      	ldr	r3, [pc, #144]	; (5f5c <system_clock_init+0x154>)
    5eca:	6083      	str	r3, [r0, #8]
	config->reference_frequency = 32768;
    5ecc:	2380      	movs	r3, #128	; 0x80
    5ece:	021b      	lsls	r3, r3, #8
    5ed0:	60c3      	str	r3, [r0, #12]
	config->reference_divider   = 1;
    5ed2:	8206      	strh	r6, [r0, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
    5ed4:	7504      	strb	r4, [r0, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    5ed6:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    5ed8:	7484      	strb	r4, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    5eda:	7004      	strb	r4, [r0, #0]
	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
    5edc:	4b20      	ldr	r3, [pc, #128]	; (5f60 <system_clock_init+0x158>)
    5ede:	58fb      	ldr	r3, [r7, r3]
    5ee0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    5ee2:	2008      	movs	r0, #8
    5ee4:	47a8      	blx	r5
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    5ee6:	4b18      	ldr	r3, [pc, #96]	; (5f48 <system_clock_init+0x140>)
    5ee8:	58fc      	ldr	r4, [r7, r3]
    5eea:	2008      	movs	r0, #8
    5eec:	47a0      	blx	r4
    5eee:	2800      	cmp	r0, #0
    5ef0:	d0fb      	beq.n	5eea <system_clock_init+0xe2>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    5ef2:	4a10      	ldr	r2, [pc, #64]	; (5f34 <system_clock_init+0x12c>)
    5ef4:	2344      	movs	r3, #68	; 0x44
    5ef6:	5cd0      	ldrb	r0, [r2, r3]
    5ef8:	2180      	movs	r1, #128	; 0x80
    5efa:	4249      	negs	r1, r1
    5efc:	4301      	orrs	r1, r0
    5efe:	54d1      	strb	r1, [r2, r3]
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    5f00:	4a18      	ldr	r2, [pc, #96]	; (5f64 <system_clock_init+0x15c>)
    5f02:	2300      	movs	r3, #0
    5f04:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    5f06:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    5f08:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    5f0a:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    5f0c:	2201      	movs	r2, #1
    5f0e:	a902      	add	r1, sp, #8
    5f10:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    5f12:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    5f14:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    5f16:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    5f18:	2308      	movs	r3, #8
    5f1a:	700b      	strb	r3, [r1, #0]
    5f1c:	2000      	movs	r0, #0
    5f1e:	4b0d      	ldr	r3, [pc, #52]	; (5f54 <system_clock_init+0x14c>)
    5f20:	58fb      	ldr	r3, [r7, r3]
    5f22:	4798      	blx	r3
    5f24:	2000      	movs	r0, #0
    5f26:	4b0c      	ldr	r3, [pc, #48]	; (5f58 <system_clock_init+0x150>)
    5f28:	58fb      	ldr	r3, [r7, r3]
    5f2a:	4798      	blx	r3
#endif
}
    5f2c:	b011      	add	sp, #68	; 0x44
    5f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f30:	00001f16 	.word	0x00001f16
    5f34:	40000800 	.word	0x40000800
    5f38:	41004000 	.word	0x41004000
    5f3c:	00000090 	.word	0x00000090
    5f40:	000001e4 	.word	0x000001e4
    5f44:	00000238 	.word	0x00000238
    5f48:	00000260 	.word	0x00000260
    5f4c:	000000f8 	.word	0x000000f8
    5f50:	000002a0 	.word	0x000002a0
    5f54:	000000c4 	.word	0x000000c4
    5f58:	0000017c 	.word	0x0000017c
    5f5c:	02dc6c00 	.word	0x02dc6c00
    5f60:	00000004 	.word	0x00000004
    5f64:	40000400 	.word	0x40000400

00005f68 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    5f68:	4b06      	ldr	r3, [pc, #24]	; (5f84 <system_gclk_init+0x1c>)
    5f6a:	6999      	ldr	r1, [r3, #24]
    5f6c:	2208      	movs	r2, #8
    5f6e:	430a      	orrs	r2, r1
    5f70:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    5f72:	2201      	movs	r2, #1
    5f74:	4b04      	ldr	r3, [pc, #16]	; (5f88 <system_gclk_init+0x20>)
    5f76:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    5f78:	1c19      	adds	r1, r3, #0
    5f7a:	780b      	ldrb	r3, [r1, #0]
    5f7c:	4213      	tst	r3, r2
    5f7e:	d1fc      	bne.n	5f7a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    5f80:	4770      	bx	lr
    5f82:	46c0      	nop			; (mov r8, r8)
    5f84:	40000400 	.word	0x40000400
    5f88:	40000c00 	.word	0x40000c00

00005f8c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f8e:	4647      	mov	r7, r8
    5f90:	b480      	push	{r7}
    5f92:	b082      	sub	sp, #8
    5f94:	1c07      	adds	r7, r0, #0
    5f96:	4e2d      	ldr	r6, [pc, #180]	; (604c <system_gclk_gen_set_config+0xc0>)
    5f98:	447e      	add	r6, pc
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    5f9a:	4680      	mov	r8, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    5f9c:	780d      	ldrb	r5, [r1, #0]
    5f9e:	022d      	lsls	r5, r5, #8
    5fa0:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5fa2:	784b      	ldrb	r3, [r1, #1]
    5fa4:	2b00      	cmp	r3, #0
    5fa6:	d002      	beq.n	5fae <system_gclk_gen_set_config+0x22>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    5fa8:	2380      	movs	r3, #128	; 0x80
    5faa:	02db      	lsls	r3, r3, #11
    5fac:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    5fae:	7a4b      	ldrb	r3, [r1, #9]
    5fb0:	2b00      	cmp	r3, #0
    5fb2:	d002      	beq.n	5fba <system_gclk_gen_set_config+0x2e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    5fb4:	2380      	movs	r3, #128	; 0x80
    5fb6:	031b      	lsls	r3, r3, #12
    5fb8:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    5fba:	684c      	ldr	r4, [r1, #4]
    5fbc:	2c01      	cmp	r4, #1
    5fbe:	d919      	bls.n	5ff4 <system_gclk_gen_set_config+0x68>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5fc0:	1e63      	subs	r3, r4, #1
    5fc2:	421c      	tst	r4, r3
    5fc4:	d110      	bne.n	5fe8 <system_gclk_gen_set_config+0x5c>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5fc6:	2c02      	cmp	r4, #2
    5fc8:	d906      	bls.n	5fd8 <system_gclk_gen_set_config+0x4c>
    5fca:	2302      	movs	r3, #2
    5fcc:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    5fce:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    5fd0:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5fd2:	429c      	cmp	r4, r3
    5fd4:	d8fb      	bhi.n	5fce <system_gclk_gen_set_config+0x42>
    5fd6:	e000      	b.n	5fda <system_gclk_gen_set_config+0x4e>
    5fd8:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    5fda:	0212      	lsls	r2, r2, #8
    5fdc:	433a      	orrs	r2, r7
    5fde:	4690      	mov	r8, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    5fe0:	2380      	movs	r3, #128	; 0x80
    5fe2:	035b      	lsls	r3, r3, #13
    5fe4:	431d      	orrs	r5, r3
    5fe6:	e005      	b.n	5ff4 <system_gclk_gen_set_config+0x68>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    5fe8:	0224      	lsls	r4, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    5fea:	433c      	orrs	r4, r7
    5fec:	46a0      	mov	r8, r4
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    5fee:	2380      	movs	r3, #128	; 0x80
    5ff0:	029b      	lsls	r3, r3, #10
    5ff2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    5ff4:	7a0b      	ldrb	r3, [r1, #8]
    5ff6:	2b00      	cmp	r3, #0
    5ff8:	d002      	beq.n	6000 <system_gclk_gen_set_config+0x74>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    5ffa:	2380      	movs	r3, #128	; 0x80
    5ffc:	039b      	lsls	r3, r3, #14
    5ffe:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6000:	4a13      	ldr	r2, [pc, #76]	; (6050 <system_gclk_gen_set_config+0xc4>)
    6002:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    6004:	b25b      	sxtb	r3, r3
    6006:	2b00      	cmp	r3, #0
    6008:	dbfb      	blt.n	6002 <system_gclk_gen_set_config+0x76>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    600a:	4b12      	ldr	r3, [pc, #72]	; (6054 <system_gclk_gen_set_config+0xc8>)
    600c:	58f3      	ldr	r3, [r6, r3]
    600e:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6010:	4b11      	ldr	r3, [pc, #68]	; (6058 <system_gclk_gen_set_config+0xcc>)
    6012:	701f      	strb	r7, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6014:	4a0e      	ldr	r2, [pc, #56]	; (6050 <system_gclk_gen_set_config+0xc4>)
    6016:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    6018:	b25b      	sxtb	r3, r3
    601a:	2b00      	cmp	r3, #0
    601c:	dbfb      	blt.n	6016 <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    601e:	4b0c      	ldr	r3, [pc, #48]	; (6050 <system_gclk_gen_set_config+0xc4>)
    6020:	4642      	mov	r2, r8
    6022:	609a      	str	r2, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6024:	1c1a      	adds	r2, r3, #0
    6026:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    6028:	b25b      	sxtb	r3, r3
    602a:	2b00      	cmp	r3, #0
    602c:	dbfb      	blt.n	6026 <system_gclk_gen_set_config+0x9a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    602e:	4b08      	ldr	r3, [pc, #32]	; (6050 <system_gclk_gen_set_config+0xc4>)
    6030:	6859      	ldr	r1, [r3, #4]
    6032:	2280      	movs	r2, #128	; 0x80
    6034:	0252      	lsls	r2, r2, #9
    6036:	400a      	ands	r2, r1
    6038:	4315      	orrs	r5, r2
    603a:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    603c:	4b07      	ldr	r3, [pc, #28]	; (605c <system_gclk_gen_set_config+0xd0>)
    603e:	58f3      	ldr	r3, [r6, r3]
    6040:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6042:	b002      	add	sp, #8
    6044:	bc04      	pop	{r2}
    6046:	4690      	mov	r8, r2
    6048:	bdf0      	pop	{r4, r5, r6, r7, pc}
    604a:	46c0      	nop			; (mov r8, r8)
    604c:	00001d8c 	.word	0x00001d8c
    6050:	40000c00 	.word	0x40000c00
    6054:	000000a8 	.word	0x000000a8
    6058:	40000c08 	.word	0x40000c08
    605c:	0000000c 	.word	0x0000000c

00006060 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6060:	b530      	push	{r4, r5, lr}
    6062:	b083      	sub	sp, #12
    6064:	1c05      	adds	r5, r0, #0
    6066:	4c0e      	ldr	r4, [pc, #56]	; (60a0 <system_gclk_gen_enable+0x40>)
    6068:	447c      	add	r4, pc
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    606a:	4a0e      	ldr	r2, [pc, #56]	; (60a4 <system_gclk_gen_enable+0x44>)
    606c:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    606e:	b25b      	sxtb	r3, r3
    6070:	2b00      	cmp	r3, #0
    6072:	dbfb      	blt.n	606c <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    6074:	4b0c      	ldr	r3, [pc, #48]	; (60a8 <system_gclk_gen_enable+0x48>)
    6076:	58e3      	ldr	r3, [r4, r3]
    6078:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    607a:	4b0c      	ldr	r3, [pc, #48]	; (60ac <system_gclk_gen_enable+0x4c>)
    607c:	701d      	strb	r5, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    607e:	4a09      	ldr	r2, [pc, #36]	; (60a4 <system_gclk_gen_enable+0x44>)
    6080:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    6082:	b25b      	sxtb	r3, r3
    6084:	2b00      	cmp	r3, #0
    6086:	dbfb      	blt.n	6080 <system_gclk_gen_enable+0x20>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    6088:	4b06      	ldr	r3, [pc, #24]	; (60a4 <system_gclk_gen_enable+0x44>)
    608a:	6859      	ldr	r1, [r3, #4]
    608c:	2280      	movs	r2, #128	; 0x80
    608e:	0252      	lsls	r2, r2, #9
    6090:	430a      	orrs	r2, r1
    6092:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    6094:	4b06      	ldr	r3, [pc, #24]	; (60b0 <system_gclk_gen_enable+0x50>)
    6096:	58e3      	ldr	r3, [r4, r3]
    6098:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    609a:	b003      	add	sp, #12
    609c:	bd30      	pop	{r4, r5, pc}
    609e:	46c0      	nop			; (mov r8, r8)
    60a0:	00001cbc 	.word	0x00001cbc
    60a4:	40000c00 	.word	0x40000c00
    60a8:	000000a8 	.word	0x000000a8
    60ac:	40000c04 	.word	0x40000c04
    60b0:	0000000c 	.word	0x0000000c

000060b4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    60b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    60b6:	b083      	sub	sp, #12
    60b8:	1c05      	adds	r5, r0, #0
    60ba:	4c1e      	ldr	r4, [pc, #120]	; (6134 <system_gclk_gen_get_hz+0x80>)
    60bc:	447c      	add	r4, pc
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    60be:	4a1e      	ldr	r2, [pc, #120]	; (6138 <system_gclk_gen_get_hz+0x84>)
    60c0:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    60c2:	b25b      	sxtb	r3, r3
    60c4:	2b00      	cmp	r3, #0
    60c6:	dbfb      	blt.n	60c0 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    60c8:	4b1c      	ldr	r3, [pc, #112]	; (613c <system_gclk_gen_get_hz+0x88>)
    60ca:	58e3      	ldr	r3, [r4, r3]
    60cc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    60ce:	4b1c      	ldr	r3, [pc, #112]	; (6140 <system_gclk_gen_get_hz+0x8c>)
    60d0:	701d      	strb	r5, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    60d2:	4a19      	ldr	r2, [pc, #100]	; (6138 <system_gclk_gen_get_hz+0x84>)
    60d4:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    60d6:	b25b      	sxtb	r3, r3
    60d8:	2b00      	cmp	r3, #0
    60da:	dbfb      	blt.n	60d4 <system_gclk_gen_get_hz+0x20>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    60dc:	4f16      	ldr	r7, [pc, #88]	; (6138 <system_gclk_gen_get_hz+0x84>)
    60de:	6878      	ldr	r0, [r7, #4]
    60e0:	04c0      	lsls	r0, r0, #19
    60e2:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    60e4:	4b17      	ldr	r3, [pc, #92]	; (6144 <system_gclk_gen_get_hz+0x90>)
    60e6:	58e3      	ldr	r3, [r4, r3]
    60e8:	4798      	blx	r3
    60ea:	1c06      	adds	r6, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    60ec:	4b14      	ldr	r3, [pc, #80]	; (6140 <system_gclk_gen_get_hz+0x8c>)
    60ee:	701d      	strb	r5, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    60f0:	687f      	ldr	r7, [r7, #4]
    60f2:	02ff      	lsls	r7, r7, #11
    60f4:	0fff      	lsrs	r7, r7, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    60f6:	4b14      	ldr	r3, [pc, #80]	; (6148 <system_gclk_gen_get_hz+0x94>)
    60f8:	701d      	strb	r5, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    60fa:	4a0f      	ldr	r2, [pc, #60]	; (6138 <system_gclk_gen_get_hz+0x84>)
    60fc:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    60fe:	b25b      	sxtb	r3, r3
    6100:	2b00      	cmp	r3, #0
    6102:	dbfb      	blt.n	60fc <system_gclk_gen_get_hz+0x48>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    6104:	4b0c      	ldr	r3, [pc, #48]	; (6138 <system_gclk_gen_get_hz+0x84>)
    6106:	689d      	ldr	r5, [r3, #8]
    6108:	0a2d      	lsrs	r5, r5, #8
    610a:	b2ad      	uxth	r5, r5
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    610c:	4b0f      	ldr	r3, [pc, #60]	; (614c <system_gclk_gen_get_hz+0x98>)
    610e:	58e3      	ldr	r3, [r4, r3]
    6110:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    6112:	2f00      	cmp	r7, #0
    6114:	d108      	bne.n	6128 <system_gclk_gen_get_hz+0x74>
    6116:	2d01      	cmp	r5, #1
    6118:	d908      	bls.n	612c <system_gclk_gen_get_hz+0x78>
		gen_input_hz /= divider;
    611a:	4b0d      	ldr	r3, [pc, #52]	; (6150 <system_gclk_gen_get_hz+0x9c>)
    611c:	58e3      	ldr	r3, [r4, r3]
    611e:	1c30      	adds	r0, r6, #0
    6120:	1c29      	adds	r1, r5, #0
    6122:	4798      	blx	r3
    6124:	1c06      	adds	r6, r0, #0
    6126:	e001      	b.n	612c <system_gclk_gen_get_hz+0x78>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    6128:	3501      	adds	r5, #1
    612a:	40ee      	lsrs	r6, r5
	}

	return gen_input_hz;
}
    612c:	1c30      	adds	r0, r6, #0
    612e:	b003      	add	sp, #12
    6130:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6132:	46c0      	nop			; (mov r8, r8)
    6134:	00001c68 	.word	0x00001c68
    6138:	40000c00 	.word	0x40000c00
    613c:	000000a8 	.word	0x000000a8
    6140:	40000c04 	.word	0x40000c04
    6144:	0000024c 	.word	0x0000024c
    6148:	40000c08 	.word	0x40000c08
    614c:	0000000c 	.word	0x0000000c
    6150:	000001c0 	.word	0x000001c0

00006154 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6154:	b530      	push	{r4, r5, lr}
    6156:	b083      	sub	sp, #12
    6158:	1c05      	adds	r5, r0, #0
    615a:	4c09      	ldr	r4, [pc, #36]	; (6180 <system_gclk_chan_enable+0x2c>)
    615c:	447c      	add	r4, pc
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    615e:	4b09      	ldr	r3, [pc, #36]	; (6184 <system_gclk_chan_enable+0x30>)
    6160:	58e3      	ldr	r3, [r4, r3]
    6162:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6164:	4b08      	ldr	r3, [pc, #32]	; (6188 <system_gclk_chan_enable+0x34>)
    6166:	701d      	strb	r5, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    6168:	4b08      	ldr	r3, [pc, #32]	; (618c <system_gclk_chan_enable+0x38>)
    616a:	8859      	ldrh	r1, [r3, #2]
    616c:	2280      	movs	r2, #128	; 0x80
    616e:	01d2      	lsls	r2, r2, #7
    6170:	430a      	orrs	r2, r1
    6172:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    6174:	4b06      	ldr	r3, [pc, #24]	; (6190 <system_gclk_chan_enable+0x3c>)
    6176:	58e3      	ldr	r3, [r4, r3]
    6178:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    617a:	b003      	add	sp, #12
    617c:	bd30      	pop	{r4, r5, pc}
    617e:	46c0      	nop			; (mov r8, r8)
    6180:	00001bc8 	.word	0x00001bc8
    6184:	000000a8 	.word	0x000000a8
    6188:	40000c02 	.word	0x40000c02
    618c:	40000c00 	.word	0x40000c00
    6190:	0000000c 	.word	0x0000000c

00006194 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6194:	b530      	push	{r4, r5, lr}
    6196:	b083      	sub	sp, #12
    6198:	1c05      	adds	r5, r0, #0
    619a:	4c12      	ldr	r4, [pc, #72]	; (61e4 <system_gclk_chan_disable+0x50>)
    619c:	447c      	add	r4, pc
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    619e:	4b12      	ldr	r3, [pc, #72]	; (61e8 <system_gclk_chan_disable+0x54>)
    61a0:	58e3      	ldr	r3, [r4, r3]
    61a2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    61a4:	4b11      	ldr	r3, [pc, #68]	; (61ec <system_gclk_chan_disable+0x58>)
    61a6:	701d      	strb	r5, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    61a8:	4b11      	ldr	r3, [pc, #68]	; (61f0 <system_gclk_chan_disable+0x5c>)
    61aa:	8858      	ldrh	r0, [r3, #2]
    61ac:	0500      	lsls	r0, r0, #20
    61ae:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    61b0:	8859      	ldrh	r1, [r3, #2]
    61b2:	4a10      	ldr	r2, [pc, #64]	; (61f4 <system_gclk_chan_disable+0x60>)
    61b4:	400a      	ands	r2, r1
    61b6:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    61b8:	8859      	ldrh	r1, [r3, #2]
    61ba:	4a0f      	ldr	r2, [pc, #60]	; (61f8 <system_gclk_chan_disable+0x64>)
    61bc:	400a      	ands	r2, r1
    61be:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    61c0:	1c19      	adds	r1, r3, #0
    61c2:	2280      	movs	r2, #128	; 0x80
    61c4:	01d2      	lsls	r2, r2, #7
    61c6:	884b      	ldrh	r3, [r1, #2]
    61c8:	4213      	tst	r3, r2
    61ca:	d1fc      	bne.n	61c6 <system_gclk_chan_disable+0x32>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    61cc:	4b08      	ldr	r3, [pc, #32]	; (61f0 <system_gclk_chan_disable+0x5c>)
    61ce:	0201      	lsls	r1, r0, #8
    61d0:	8858      	ldrh	r0, [r3, #2]
    61d2:	4a08      	ldr	r2, [pc, #32]	; (61f4 <system_gclk_chan_disable+0x60>)
    61d4:	4002      	ands	r2, r0
    61d6:	430a      	orrs	r2, r1
    61d8:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    61da:	4b08      	ldr	r3, [pc, #32]	; (61fc <system_gclk_chan_disable+0x68>)
    61dc:	58e3      	ldr	r3, [r4, r3]
    61de:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    61e0:	b003      	add	sp, #12
    61e2:	bd30      	pop	{r4, r5, pc}
    61e4:	00001b88 	.word	0x00001b88
    61e8:	000000a8 	.word	0x000000a8
    61ec:	40000c02 	.word	0x40000c02
    61f0:	40000c00 	.word	0x40000c00
    61f4:	fffff0ff 	.word	0xfffff0ff
    61f8:	ffffbfff 	.word	0xffffbfff
    61fc:	0000000c 	.word	0x0000000c

00006200 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    6200:	b510      	push	{r4, lr}
    6202:	b082      	sub	sp, #8
    6204:	4b06      	ldr	r3, [pc, #24]	; (6220 <system_gclk_chan_set_config+0x20>)
    6206:	447b      	add	r3, pc

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    6208:	780c      	ldrb	r4, [r1, #0]
    620a:	0224      	lsls	r4, r4, #8
    620c:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    620e:	4a05      	ldr	r2, [pc, #20]	; (6224 <system_gclk_chan_set_config+0x24>)
    6210:	589a      	ldr	r2, [r3, r2]
    6212:	9201      	str	r2, [sp, #4]
    6214:	4790      	blx	r2

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    6216:	b2a4      	uxth	r4, r4
    6218:	4b03      	ldr	r3, [pc, #12]	; (6228 <system_gclk_chan_set_config+0x28>)
    621a:	805c      	strh	r4, [r3, #2]
}
    621c:	b002      	add	sp, #8
    621e:	bd10      	pop	{r4, pc}
    6220:	00001b1e 	.word	0x00001b1e
    6224:	0000026c 	.word	0x0000026c
    6228:	40000c00 	.word	0x40000c00

0000622c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    622c:	b530      	push	{r4, r5, lr}
    622e:	b083      	sub	sp, #12
    6230:	1c05      	adds	r5, r0, #0
    6232:	4c0a      	ldr	r4, [pc, #40]	; (625c <system_gclk_chan_get_hz+0x30>)
    6234:	447c      	add	r4, pc
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    6236:	4b0a      	ldr	r3, [pc, #40]	; (6260 <system_gclk_chan_get_hz+0x34>)
    6238:	58e3      	ldr	r3, [r4, r3]
    623a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    623c:	4b09      	ldr	r3, [pc, #36]	; (6264 <system_gclk_chan_get_hz+0x38>)
    623e:	701d      	strb	r5, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6240:	4b09      	ldr	r3, [pc, #36]	; (6268 <system_gclk_chan_get_hz+0x3c>)
    6242:	885d      	ldrh	r5, [r3, #2]
    6244:	052d      	lsls	r5, r5, #20
    6246:	0f2d      	lsrs	r5, r5, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    6248:	4b08      	ldr	r3, [pc, #32]	; (626c <system_gclk_chan_get_hz+0x40>)
    624a:	58e3      	ldr	r3, [r4, r3]
    624c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    624e:	1c28      	adds	r0, r5, #0
    6250:	4b07      	ldr	r3, [pc, #28]	; (6270 <system_gclk_chan_get_hz+0x44>)
    6252:	58e3      	ldr	r3, [r4, r3]
    6254:	4798      	blx	r3
}
    6256:	b003      	add	sp, #12
    6258:	bd30      	pop	{r4, r5, pc}
    625a:	46c0      	nop			; (mov r8, r8)
    625c:	00001af0 	.word	0x00001af0
    6260:	000000a8 	.word	0x000000a8
    6264:	40000c02 	.word	0x40000c02
    6268:	40000c00 	.word	0x40000c00
    626c:	0000000c 	.word	0x0000000c
    6270:	000000ac 	.word	0x000000ac

00006274 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    6274:	4770      	bx	lr
    6276:	46c0      	nop			; (mov r8, r8)

00006278 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6278:	b510      	push	{r4, lr}
    627a:	b082      	sub	sp, #8
    627c:	4c09      	ldr	r4, [pc, #36]	; (62a4 <system_init+0x2c>)
    627e:	447c      	add	r4, pc
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6280:	4b09      	ldr	r3, [pc, #36]	; (62a8 <system_init+0x30>)
    6282:	58e3      	ldr	r3, [r4, r3]
    6284:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6286:	4b09      	ldr	r3, [pc, #36]	; (62ac <system_init+0x34>)
    6288:	58e3      	ldr	r3, [r4, r3]
    628a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    628c:	4b08      	ldr	r3, [pc, #32]	; (62b0 <system_init+0x38>)
    628e:	58e3      	ldr	r3, [r4, r3]
    6290:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6292:	4b08      	ldr	r3, [pc, #32]	; (62b4 <system_init+0x3c>)
    6294:	58e3      	ldr	r3, [r4, r3]
    6296:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6298:	4b07      	ldr	r3, [pc, #28]	; (62b8 <system_init+0x40>)
    629a:	58e3      	ldr	r3, [r4, r3]
    629c:	4798      	blx	r3
}
    629e:	b002      	add	sp, #8
    62a0:	bd10      	pop	{r4, pc}
    62a2:	46c0      	nop			; (mov r8, r8)
    62a4:	00001aa6 	.word	0x00001aa6
    62a8:	00000224 	.word	0x00000224
    62ac:	00000174 	.word	0x00000174
    62b0:	00000220 	.word	0x00000220
    62b4:	0000012c 	.word	0x0000012c
    62b8:	000000a4 	.word	0x000000a4

000062bc <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    62bc:	b082      	sub	sp, #8
    62be:	4b11      	ldr	r3, [pc, #68]	; (6304 <cpu_irq_enter_critical+0x48>)
    62c0:	447b      	add	r3, pc
	if (cpu_irq_critical_section_counter == 0) {
    62c2:	4a11      	ldr	r2, [pc, #68]	; (6308 <cpu_irq_enter_critical+0x4c>)
    62c4:	447a      	add	r2, pc
    62c6:	6812      	ldr	r2, [r2, #0]
    62c8:	2a00      	cmp	r2, #0
    62ca:	d113      	bne.n	62f4 <cpu_irq_enter_critical+0x38>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    62cc:	f3ef 8210 	mrs	r2, PRIMASK
		if (cpu_irq_is_enabled()) {
    62d0:	2a00      	cmp	r2, #0
    62d2:	d10b      	bne.n	62ec <cpu_irq_enter_critical+0x30>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    62d4:	b672      	cpsid	i
    62d6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    62da:	4a0c      	ldr	r2, [pc, #48]	; (630c <cpu_irq_enter_critical+0x50>)
    62dc:	589a      	ldr	r2, [r3, r2]
    62de:	2300      	movs	r3, #0
    62e0:	7013      	strb	r3, [r2, #0]
			cpu_irq_prev_interrupt_state = true;
    62e2:	2201      	movs	r2, #1
    62e4:	4b0a      	ldr	r3, [pc, #40]	; (6310 <cpu_irq_enter_critical+0x54>)
    62e6:	447b      	add	r3, pc
    62e8:	711a      	strb	r2, [r3, #4]
    62ea:	e003      	b.n	62f4 <cpu_irq_enter_critical+0x38>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    62ec:	2200      	movs	r2, #0
    62ee:	4b09      	ldr	r3, [pc, #36]	; (6314 <cpu_irq_enter_critical+0x58>)
    62f0:	447b      	add	r3, pc
    62f2:	711a      	strb	r2, [r3, #4]
		}

	}

	cpu_irq_critical_section_counter++;
    62f4:	4b08      	ldr	r3, [pc, #32]	; (6318 <cpu_irq_enter_critical+0x5c>)
    62f6:	447b      	add	r3, pc
    62f8:	681a      	ldr	r2, [r3, #0]
    62fa:	3201      	adds	r2, #1
    62fc:	601a      	str	r2, [r3, #0]
}
    62fe:	b002      	add	sp, #8
    6300:	4770      	bx	lr
    6302:	46c0      	nop			; (mov r8, r8)
    6304:	00001a64 	.word	0x00001a64
    6308:	1fffb3b4 	.word	0x1fffb3b4
    630c:	000000b8 	.word	0x000000b8
    6310:	1fffb392 	.word	0x1fffb392
    6314:	1fffb388 	.word	0x1fffb388
    6318:	1fffb382 	.word	0x1fffb382

0000631c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    631c:	b082      	sub	sp, #8
    631e:	4a0d      	ldr	r2, [pc, #52]	; (6354 <cpu_irq_leave_critical+0x38>)
    6320:	447a      	add	r2, pc
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    6322:	4b0d      	ldr	r3, [pc, #52]	; (6358 <cpu_irq_leave_critical+0x3c>)
    6324:	447b      	add	r3, pc
    6326:	6819      	ldr	r1, [r3, #0]
    6328:	3901      	subs	r1, #1
    632a:	6019      	str	r1, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    632c:	681b      	ldr	r3, [r3, #0]
    632e:	2b00      	cmp	r3, #0
    6330:	d10d      	bne.n	634e <cpu_irq_leave_critical+0x32>
    6332:	4b0a      	ldr	r3, [pc, #40]	; (635c <cpu_irq_leave_critical+0x40>)
    6334:	447b      	add	r3, pc
    6336:	791b      	ldrb	r3, [r3, #4]
    6338:	2b00      	cmp	r3, #0
    633a:	d008      	beq.n	634e <cpu_irq_leave_critical+0x32>
		cpu_irq_enable();
    633c:	4b08      	ldr	r3, [pc, #32]	; (6360 <cpu_irq_leave_critical+0x44>)
    633e:	58d3      	ldr	r3, [r2, r3]
    6340:	9301      	str	r3, [sp, #4]
    6342:	2301      	movs	r3, #1
    6344:	9a01      	ldr	r2, [sp, #4]
    6346:	7013      	strb	r3, [r2, #0]
    6348:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    634c:	b662      	cpsie	i
	}
}
    634e:	b002      	add	sp, #8
    6350:	4770      	bx	lr
    6352:	46c0      	nop			; (mov r8, r8)
    6354:	00001a04 	.word	0x00001a04
    6358:	1fffb354 	.word	0x1fffb354
    635c:	1fffb344 	.word	0x1fffb344
    6360:	000000b8 	.word	0x000000b8

00006364 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    6364:	b510      	push	{r4, lr}
    6366:	b084      	sub	sp, #16
    6368:	4a08      	ldr	r2, [pc, #32]	; (638c <port_pin_set_config+0x28>)
    636a:	447a      	add	r2, pc
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    636c:	2480      	movs	r4, #128	; 0x80
    636e:	ab03      	add	r3, sp, #12
    6370:	701c      	strb	r4, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    6372:	780c      	ldrb	r4, [r1, #0]
    6374:	705c      	strb	r4, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    6376:	784c      	ldrb	r4, [r1, #1]
    6378:	709c      	strb	r4, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    637a:	7889      	ldrb	r1, [r1, #2]
    637c:	70d9      	strb	r1, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    637e:	1c19      	adds	r1, r3, #0
    6380:	4b03      	ldr	r3, [pc, #12]	; (6390 <port_pin_set_config+0x2c>)
    6382:	58d3      	ldr	r3, [r2, r3]
    6384:	4798      	blx	r3
}
    6386:	b004      	add	sp, #16
    6388:	bd10      	pop	{r4, pc}
    638a:	46c0      	nop			; (mov r8, r8)
    638c:	000019ba 	.word	0x000019ba
    6390:	00000294 	.word	0x00000294

00006394 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6394:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6396:	78d3      	ldrb	r3, [r2, #3]
    6398:	2b00      	cmp	r3, #0
    639a:	d11e      	bne.n	63da <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    639c:	7813      	ldrb	r3, [r2, #0]
    639e:	2b80      	cmp	r3, #128	; 0x80
    63a0:	d004      	beq.n	63ac <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    63a2:	061b      	lsls	r3, r3, #24
    63a4:	2480      	movs	r4, #128	; 0x80
    63a6:	0264      	lsls	r4, r4, #9
    63a8:	4323      	orrs	r3, r4
    63aa:	e000      	b.n	63ae <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    63ac:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    63ae:	7854      	ldrb	r4, [r2, #1]
    63b0:	2502      	movs	r5, #2
    63b2:	43ac      	bics	r4, r5
    63b4:	d10a      	bne.n	63cc <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    63b6:	7894      	ldrb	r4, [r2, #2]
    63b8:	2c00      	cmp	r4, #0
    63ba:	d103      	bne.n	63c4 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    63bc:	2480      	movs	r4, #128	; 0x80
    63be:	02a4      	lsls	r4, r4, #10
    63c0:	4323      	orrs	r3, r4
    63c2:	e002      	b.n	63ca <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    63c4:	24c0      	movs	r4, #192	; 0xc0
    63c6:	02e4      	lsls	r4, r4, #11
    63c8:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    63ca:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    63cc:	7854      	ldrb	r4, [r2, #1]
    63ce:	3c01      	subs	r4, #1
    63d0:	2c01      	cmp	r4, #1
    63d2:	d804      	bhi.n	63de <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    63d4:	4c11      	ldr	r4, [pc, #68]	; (641c <_system_pinmux_config+0x88>)
    63d6:	4023      	ands	r3, r4
    63d8:	e001      	b.n	63de <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    63da:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    63dc:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    63de:	040d      	lsls	r5, r1, #16
    63e0:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    63e2:	24a0      	movs	r4, #160	; 0xa0
    63e4:	05e4      	lsls	r4, r4, #23
    63e6:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    63e8:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    63ea:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    63ec:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    63ee:	24d0      	movs	r4, #208	; 0xd0
    63f0:	0624      	lsls	r4, r4, #24
    63f2:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    63f4:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    63f6:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    63f8:	78d4      	ldrb	r4, [r2, #3]
    63fa:	2c00      	cmp	r4, #0
    63fc:	d10c      	bne.n	6418 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    63fe:	035c      	lsls	r4, r3, #13
    6400:	d505      	bpl.n	640e <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6402:	7893      	ldrb	r3, [r2, #2]
    6404:	2b01      	cmp	r3, #1
    6406:	d101      	bne.n	640c <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    6408:	6181      	str	r1, [r0, #24]
    640a:	e000      	b.n	640e <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    640c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    640e:	7853      	ldrb	r3, [r2, #1]
    6410:	3b01      	subs	r3, #1
    6412:	2b01      	cmp	r3, #1
    6414:	d800      	bhi.n	6418 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    6416:	6081      	str	r1, [r0, #8]
		}
	}
}
    6418:	bd30      	pop	{r4, r5, pc}
    641a:	46c0      	nop			; (mov r8, r8)
    641c:	fffbffff 	.word	0xfffbffff

00006420 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6420:	b508      	push	{r3, lr}
    6422:	1c03      	adds	r3, r0, #0
    6424:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    6426:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    6428:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    642a:	2900      	cmp	r1, #0
    642c:	d103      	bne.n	6436 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    642e:	0958      	lsrs	r0, r3, #5
    6430:	01c0      	lsls	r0, r0, #7
    6432:	4905      	ldr	r1, [pc, #20]	; (6448 <system_pinmux_pin_set_config+0x28>)
    6434:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6436:	211f      	movs	r1, #31
    6438:	400b      	ands	r3, r1
    643a:	2101      	movs	r1, #1
    643c:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    643e:	4b03      	ldr	r3, [pc, #12]	; (644c <system_pinmux_pin_set_config+0x2c>)
    6440:	447b      	add	r3, pc
    6442:	4798      	blx	r3
}
    6444:	bd08      	pop	{r3, pc}
    6446:	46c0      	nop			; (mov r8, r8)
    6448:	41004400 	.word	0x41004400
    644c:	ffffff51 	.word	0xffffff51

00006450 <__gnu_thumb1_case_uqi>:
    6450:	b402      	push	{r1}
    6452:	4671      	mov	r1, lr
    6454:	0849      	lsrs	r1, r1, #1
    6456:	0049      	lsls	r1, r1, #1
    6458:	5c09      	ldrb	r1, [r1, r0]
    645a:	0049      	lsls	r1, r1, #1
    645c:	448e      	add	lr, r1
    645e:	bc02      	pop	{r1}
    6460:	4770      	bx	lr
    6462:	46c0      	nop			; (mov r8, r8)

00006464 <__gnu_thumb1_case_uhi>:
    6464:	b403      	push	{r0, r1}
    6466:	4671      	mov	r1, lr
    6468:	0849      	lsrs	r1, r1, #1
    646a:	0040      	lsls	r0, r0, #1
    646c:	0049      	lsls	r1, r1, #1
    646e:	5a09      	ldrh	r1, [r1, r0]
    6470:	0049      	lsls	r1, r1, #1
    6472:	448e      	add	lr, r1
    6474:	bc03      	pop	{r0, r1}
    6476:	4770      	bx	lr

00006478 <__udivsi3>:
    6478:	2900      	cmp	r1, #0
    647a:	d034      	beq.n	64e6 <.udivsi3_skip_div0_test+0x6a>

0000647c <.udivsi3_skip_div0_test>:
    647c:	2301      	movs	r3, #1
    647e:	2200      	movs	r2, #0
    6480:	b410      	push	{r4}
    6482:	4288      	cmp	r0, r1
    6484:	d32c      	bcc.n	64e0 <.udivsi3_skip_div0_test+0x64>
    6486:	2401      	movs	r4, #1
    6488:	0724      	lsls	r4, r4, #28
    648a:	42a1      	cmp	r1, r4
    648c:	d204      	bcs.n	6498 <.udivsi3_skip_div0_test+0x1c>
    648e:	4281      	cmp	r1, r0
    6490:	d202      	bcs.n	6498 <.udivsi3_skip_div0_test+0x1c>
    6492:	0109      	lsls	r1, r1, #4
    6494:	011b      	lsls	r3, r3, #4
    6496:	e7f8      	b.n	648a <.udivsi3_skip_div0_test+0xe>
    6498:	00e4      	lsls	r4, r4, #3
    649a:	42a1      	cmp	r1, r4
    649c:	d204      	bcs.n	64a8 <.udivsi3_skip_div0_test+0x2c>
    649e:	4281      	cmp	r1, r0
    64a0:	d202      	bcs.n	64a8 <.udivsi3_skip_div0_test+0x2c>
    64a2:	0049      	lsls	r1, r1, #1
    64a4:	005b      	lsls	r3, r3, #1
    64a6:	e7f8      	b.n	649a <.udivsi3_skip_div0_test+0x1e>
    64a8:	4288      	cmp	r0, r1
    64aa:	d301      	bcc.n	64b0 <.udivsi3_skip_div0_test+0x34>
    64ac:	1a40      	subs	r0, r0, r1
    64ae:	431a      	orrs	r2, r3
    64b0:	084c      	lsrs	r4, r1, #1
    64b2:	42a0      	cmp	r0, r4
    64b4:	d302      	bcc.n	64bc <.udivsi3_skip_div0_test+0x40>
    64b6:	1b00      	subs	r0, r0, r4
    64b8:	085c      	lsrs	r4, r3, #1
    64ba:	4322      	orrs	r2, r4
    64bc:	088c      	lsrs	r4, r1, #2
    64be:	42a0      	cmp	r0, r4
    64c0:	d302      	bcc.n	64c8 <.udivsi3_skip_div0_test+0x4c>
    64c2:	1b00      	subs	r0, r0, r4
    64c4:	089c      	lsrs	r4, r3, #2
    64c6:	4322      	orrs	r2, r4
    64c8:	08cc      	lsrs	r4, r1, #3
    64ca:	42a0      	cmp	r0, r4
    64cc:	d302      	bcc.n	64d4 <.udivsi3_skip_div0_test+0x58>
    64ce:	1b00      	subs	r0, r0, r4
    64d0:	08dc      	lsrs	r4, r3, #3
    64d2:	4322      	orrs	r2, r4
    64d4:	2800      	cmp	r0, #0
    64d6:	d003      	beq.n	64e0 <.udivsi3_skip_div0_test+0x64>
    64d8:	091b      	lsrs	r3, r3, #4
    64da:	d001      	beq.n	64e0 <.udivsi3_skip_div0_test+0x64>
    64dc:	0909      	lsrs	r1, r1, #4
    64de:	e7e3      	b.n	64a8 <.udivsi3_skip_div0_test+0x2c>
    64e0:	1c10      	adds	r0, r2, #0
    64e2:	bc10      	pop	{r4}
    64e4:	4770      	bx	lr
    64e6:	2800      	cmp	r0, #0
    64e8:	d001      	beq.n	64ee <.udivsi3_skip_div0_test+0x72>
    64ea:	2000      	movs	r0, #0
    64ec:	43c0      	mvns	r0, r0
    64ee:	b407      	push	{r0, r1, r2}
    64f0:	4802      	ldr	r0, [pc, #8]	; (64fc <.udivsi3_skip_div0_test+0x80>)
    64f2:	a102      	add	r1, pc, #8	; (adr r1, 64fc <.udivsi3_skip_div0_test+0x80>)
    64f4:	1840      	adds	r0, r0, r1
    64f6:	9002      	str	r0, [sp, #8]
    64f8:	bd03      	pop	{r0, r1, pc}
    64fa:	46c0      	nop			; (mov r8, r8)
    64fc:	00000019 	.word	0x00000019

00006500 <__aeabi_uidivmod>:
    6500:	2900      	cmp	r1, #0
    6502:	d0f0      	beq.n	64e6 <.udivsi3_skip_div0_test+0x6a>
    6504:	b503      	push	{r0, r1, lr}
    6506:	f7ff ffb9 	bl	647c <.udivsi3_skip_div0_test>
    650a:	bc0e      	pop	{r1, r2, r3}
    650c:	4342      	muls	r2, r0
    650e:	1a89      	subs	r1, r1, r2
    6510:	4718      	bx	r3
    6512:	46c0      	nop			; (mov r8, r8)

00006514 <__aeabi_idiv0>:
    6514:	4770      	bx	lr
    6516:	46c0      	nop			; (mov r8, r8)

00006518 <__muldi3>:
    6518:	469c      	mov	ip, r3
    651a:	0403      	lsls	r3, r0, #16
    651c:	b5f0      	push	{r4, r5, r6, r7, lr}
    651e:	0c1b      	lsrs	r3, r3, #16
    6520:	0417      	lsls	r7, r2, #16
    6522:	0c3f      	lsrs	r7, r7, #16
    6524:	0c15      	lsrs	r5, r2, #16
    6526:	1c1e      	adds	r6, r3, #0
    6528:	1c04      	adds	r4, r0, #0
    652a:	0c00      	lsrs	r0, r0, #16
    652c:	437e      	muls	r6, r7
    652e:	436b      	muls	r3, r5
    6530:	4347      	muls	r7, r0
    6532:	4345      	muls	r5, r0
    6534:	18fb      	adds	r3, r7, r3
    6536:	0c30      	lsrs	r0, r6, #16
    6538:	1818      	adds	r0, r3, r0
    653a:	4287      	cmp	r7, r0
    653c:	d902      	bls.n	6544 <__muldi3+0x2c>
    653e:	2380      	movs	r3, #128	; 0x80
    6540:	025b      	lsls	r3, r3, #9
    6542:	18ed      	adds	r5, r5, r3
    6544:	0c03      	lsrs	r3, r0, #16
    6546:	18ed      	adds	r5, r5, r3
    6548:	4663      	mov	r3, ip
    654a:	435c      	muls	r4, r3
    654c:	434a      	muls	r2, r1
    654e:	0436      	lsls	r6, r6, #16
    6550:	0c36      	lsrs	r6, r6, #16
    6552:	18a1      	adds	r1, r4, r2
    6554:	0400      	lsls	r0, r0, #16
    6556:	1980      	adds	r0, r0, r6
    6558:	1949      	adds	r1, r1, r5
    655a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000655c <__aeabi_d2f>:
    655c:	b5f0      	push	{r4, r5, r6, r7, lr}
    655e:	004b      	lsls	r3, r1, #1
    6560:	030d      	lsls	r5, r1, #12
    6562:	0f42      	lsrs	r2, r0, #29
    6564:	0d5b      	lsrs	r3, r3, #21
    6566:	0a6d      	lsrs	r5, r5, #9
    6568:	4315      	orrs	r5, r2
    656a:	1c5a      	adds	r2, r3, #1
    656c:	0552      	lsls	r2, r2, #21
    656e:	0fcc      	lsrs	r4, r1, #31
    6570:	00c6      	lsls	r6, r0, #3
    6572:	0d52      	lsrs	r2, r2, #21
    6574:	2a01      	cmp	r2, #1
    6576:	dd27      	ble.n	65c8 <__aeabi_d2f+0x6c>
    6578:	4f39      	ldr	r7, [pc, #228]	; (6660 <__aeabi_d2f+0x104>)
    657a:	19da      	adds	r2, r3, r7
    657c:	2afe      	cmp	r2, #254	; 0xfe
    657e:	dc1a      	bgt.n	65b6 <__aeabi_d2f+0x5a>
    6580:	2a00      	cmp	r2, #0
    6582:	dd35      	ble.n	65f0 <__aeabi_d2f+0x94>
    6584:	0180      	lsls	r0, r0, #6
    6586:	00ed      	lsls	r5, r5, #3
    6588:	1e43      	subs	r3, r0, #1
    658a:	4198      	sbcs	r0, r3
    658c:	4328      	orrs	r0, r5
    658e:	0f76      	lsrs	r6, r6, #29
    6590:	4330      	orrs	r0, r6
    6592:	0743      	lsls	r3, r0, #29
    6594:	d004      	beq.n	65a0 <__aeabi_d2f+0x44>
    6596:	230f      	movs	r3, #15
    6598:	4003      	ands	r3, r0
    659a:	2b04      	cmp	r3, #4
    659c:	d000      	beq.n	65a0 <__aeabi_d2f+0x44>
    659e:	3004      	adds	r0, #4
    65a0:	2180      	movs	r1, #128	; 0x80
    65a2:	04c9      	lsls	r1, r1, #19
    65a4:	4001      	ands	r1, r0
    65a6:	d027      	beq.n	65f8 <__aeabi_d2f+0x9c>
    65a8:	3201      	adds	r2, #1
    65aa:	2aff      	cmp	r2, #255	; 0xff
    65ac:	d01d      	beq.n	65ea <__aeabi_d2f+0x8e>
    65ae:	0183      	lsls	r3, r0, #6
    65b0:	0a5b      	lsrs	r3, r3, #9
    65b2:	b2d1      	uxtb	r1, r2
    65b4:	e001      	b.n	65ba <__aeabi_d2f+0x5e>
    65b6:	21ff      	movs	r1, #255	; 0xff
    65b8:	2300      	movs	r3, #0
    65ba:	0258      	lsls	r0, r3, #9
    65bc:	05c9      	lsls	r1, r1, #23
    65be:	0a40      	lsrs	r0, r0, #9
    65c0:	07e4      	lsls	r4, r4, #31
    65c2:	4308      	orrs	r0, r1
    65c4:	4320      	orrs	r0, r4
    65c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    65c8:	2b00      	cmp	r3, #0
    65ca:	d106      	bne.n	65da <__aeabi_d2f+0x7e>
    65cc:	4335      	orrs	r5, r6
    65ce:	d111      	bne.n	65f4 <__aeabi_d2f+0x98>
    65d0:	2100      	movs	r1, #0
    65d2:	2000      	movs	r0, #0
    65d4:	0243      	lsls	r3, r0, #9
    65d6:	0a5b      	lsrs	r3, r3, #9
    65d8:	e7ef      	b.n	65ba <__aeabi_d2f+0x5e>
    65da:	432e      	orrs	r6, r5
    65dc:	d0eb      	beq.n	65b6 <__aeabi_d2f+0x5a>
    65de:	2080      	movs	r0, #128	; 0x80
    65e0:	00ed      	lsls	r5, r5, #3
    65e2:	0480      	lsls	r0, r0, #18
    65e4:	4328      	orrs	r0, r5
    65e6:	22ff      	movs	r2, #255	; 0xff
    65e8:	e7d3      	b.n	6592 <__aeabi_d2f+0x36>
    65ea:	21ff      	movs	r1, #255	; 0xff
    65ec:	2300      	movs	r3, #0
    65ee:	e7e4      	b.n	65ba <__aeabi_d2f+0x5e>
    65f0:	3217      	adds	r2, #23
    65f2:	da0d      	bge.n	6610 <__aeabi_d2f+0xb4>
    65f4:	2005      	movs	r0, #5
    65f6:	2200      	movs	r2, #0
    65f8:	08c0      	lsrs	r0, r0, #3
    65fa:	b2d1      	uxtb	r1, r2
    65fc:	2aff      	cmp	r2, #255	; 0xff
    65fe:	d1e9      	bne.n	65d4 <__aeabi_d2f+0x78>
    6600:	2800      	cmp	r0, #0
    6602:	d0d9      	beq.n	65b8 <__aeabi_d2f+0x5c>
    6604:	2380      	movs	r3, #128	; 0x80
    6606:	03db      	lsls	r3, r3, #15
    6608:	4303      	orrs	r3, r0
    660a:	025b      	lsls	r3, r3, #9
    660c:	0a5b      	lsrs	r3, r3, #9
    660e:	e7d4      	b.n	65ba <__aeabi_d2f+0x5e>
    6610:	2280      	movs	r2, #128	; 0x80
    6612:	4914      	ldr	r1, [pc, #80]	; (6664 <__aeabi_d2f+0x108>)
    6614:	0412      	lsls	r2, r2, #16
    6616:	4315      	orrs	r5, r2
    6618:	1ac9      	subs	r1, r1, r3
    661a:	291f      	cmp	r1, #31
    661c:	dc0d      	bgt.n	663a <__aeabi_d2f+0xde>
    661e:	4a12      	ldr	r2, [pc, #72]	; (6668 <__aeabi_d2f+0x10c>)
    6620:	1c37      	adds	r7, r6, #0
    6622:	189b      	adds	r3, r3, r2
    6624:	1c28      	adds	r0, r5, #0
    6626:	409f      	lsls	r7, r3
    6628:	4098      	lsls	r0, r3
    662a:	1c3b      	adds	r3, r7, #0
    662c:	1e5a      	subs	r2, r3, #1
    662e:	4193      	sbcs	r3, r2
    6630:	4318      	orrs	r0, r3
    6632:	40ce      	lsrs	r6, r1
    6634:	4330      	orrs	r0, r6
    6636:	2200      	movs	r2, #0
    6638:	e7ab      	b.n	6592 <__aeabi_d2f+0x36>
    663a:	4f0c      	ldr	r7, [pc, #48]	; (666c <__aeabi_d2f+0x110>)
    663c:	1c2a      	adds	r2, r5, #0
    663e:	1aff      	subs	r7, r7, r3
    6640:	40fa      	lsrs	r2, r7
    6642:	1c17      	adds	r7, r2, #0
    6644:	2920      	cmp	r1, #32
    6646:	d009      	beq.n	665c <__aeabi_d2f+0x100>
    6648:	4a09      	ldr	r2, [pc, #36]	; (6670 <__aeabi_d2f+0x114>)
    664a:	1898      	adds	r0, r3, r2
    664c:	4085      	lsls	r5, r0
    664e:	1c28      	adds	r0, r5, #0
    6650:	4330      	orrs	r0, r6
    6652:	1e46      	subs	r6, r0, #1
    6654:	41b0      	sbcs	r0, r6
    6656:	4338      	orrs	r0, r7
    6658:	2200      	movs	r2, #0
    665a:	e79a      	b.n	6592 <__aeabi_d2f+0x36>
    665c:	2000      	movs	r0, #0
    665e:	e7f7      	b.n	6650 <__aeabi_d2f+0xf4>
    6660:	fffffc80 	.word	0xfffffc80
    6664:	0000039e 	.word	0x0000039e
    6668:	fffffc82 	.word	0xfffffc82
    666c:	0000037e 	.word	0x0000037e
    6670:	fffffca2 	.word	0xfffffca2

00006674 <__libc_init_array>:
    6674:	b570      	push	{r4, r5, r6, lr}
    6676:	4e0d      	ldr	r6, [pc, #52]	; (66ac <__libc_init_array+0x38>)
    6678:	4d0d      	ldr	r5, [pc, #52]	; (66b0 <__libc_init_array+0x3c>)
    667a:	2400      	movs	r4, #0
    667c:	1bad      	subs	r5, r5, r6
    667e:	10ad      	asrs	r5, r5, #2
    6680:	d005      	beq.n	668e <__libc_init_array+0x1a>
    6682:	00a3      	lsls	r3, r4, #2
    6684:	58f3      	ldr	r3, [r6, r3]
    6686:	3401      	adds	r4, #1
    6688:	4798      	blx	r3
    668a:	42a5      	cmp	r5, r4
    668c:	d1f9      	bne.n	6682 <__libc_init_array+0xe>
    668e:	f001 fb39 	bl	7d04 <_init>
    6692:	4e08      	ldr	r6, [pc, #32]	; (66b4 <__libc_init_array+0x40>)
    6694:	4d08      	ldr	r5, [pc, #32]	; (66b8 <__libc_init_array+0x44>)
    6696:	2400      	movs	r4, #0
    6698:	1bad      	subs	r5, r5, r6
    669a:	10ad      	asrs	r5, r5, #2
    669c:	d005      	beq.n	66aa <__libc_init_array+0x36>
    669e:	00a3      	lsls	r3, r4, #2
    66a0:	58f3      	ldr	r3, [r6, r3]
    66a2:	3401      	adds	r4, #1
    66a4:	4798      	blx	r3
    66a6:	42a5      	cmp	r5, r4
    66a8:	d1f9      	bne.n	669e <__libc_init_array+0x2a>
    66aa:	bd70      	pop	{r4, r5, r6, pc}
    66ac:	00007d10 	.word	0x00007d10
    66b0:	00007d10 	.word	0x00007d10
    66b4:	00007d10 	.word	0x00007d10
    66b8:	00007d18 	.word	0x00007d18

000066bc <memcpy>:
    66bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    66be:	2a0f      	cmp	r2, #15
    66c0:	d935      	bls.n	672e <memcpy+0x72>
    66c2:	1c03      	adds	r3, r0, #0
    66c4:	430b      	orrs	r3, r1
    66c6:	079c      	lsls	r4, r3, #30
    66c8:	d135      	bne.n	6736 <memcpy+0x7a>
    66ca:	1c16      	adds	r6, r2, #0
    66cc:	3e10      	subs	r6, #16
    66ce:	0936      	lsrs	r6, r6, #4
    66d0:	0135      	lsls	r5, r6, #4
    66d2:	1945      	adds	r5, r0, r5
    66d4:	3510      	adds	r5, #16
    66d6:	1c0c      	adds	r4, r1, #0
    66d8:	1c03      	adds	r3, r0, #0
    66da:	6827      	ldr	r7, [r4, #0]
    66dc:	601f      	str	r7, [r3, #0]
    66de:	6867      	ldr	r7, [r4, #4]
    66e0:	605f      	str	r7, [r3, #4]
    66e2:	68a7      	ldr	r7, [r4, #8]
    66e4:	609f      	str	r7, [r3, #8]
    66e6:	68e7      	ldr	r7, [r4, #12]
    66e8:	3410      	adds	r4, #16
    66ea:	60df      	str	r7, [r3, #12]
    66ec:	3310      	adds	r3, #16
    66ee:	42ab      	cmp	r3, r5
    66f0:	d1f3      	bne.n	66da <memcpy+0x1e>
    66f2:	1c73      	adds	r3, r6, #1
    66f4:	011b      	lsls	r3, r3, #4
    66f6:	18c5      	adds	r5, r0, r3
    66f8:	18c9      	adds	r1, r1, r3
    66fa:	230f      	movs	r3, #15
    66fc:	4013      	ands	r3, r2
    66fe:	2b03      	cmp	r3, #3
    6700:	d91b      	bls.n	673a <memcpy+0x7e>
    6702:	1f1c      	subs	r4, r3, #4
    6704:	08a4      	lsrs	r4, r4, #2
    6706:	3401      	adds	r4, #1
    6708:	00a4      	lsls	r4, r4, #2
    670a:	2300      	movs	r3, #0
    670c:	58ce      	ldr	r6, [r1, r3]
    670e:	50ee      	str	r6, [r5, r3]
    6710:	3304      	adds	r3, #4
    6712:	42a3      	cmp	r3, r4
    6714:	d1fa      	bne.n	670c <memcpy+0x50>
    6716:	18ed      	adds	r5, r5, r3
    6718:	18c9      	adds	r1, r1, r3
    671a:	2303      	movs	r3, #3
    671c:	401a      	ands	r2, r3
    671e:	d005      	beq.n	672c <memcpy+0x70>
    6720:	2300      	movs	r3, #0
    6722:	5ccc      	ldrb	r4, [r1, r3]
    6724:	54ec      	strb	r4, [r5, r3]
    6726:	3301      	adds	r3, #1
    6728:	4293      	cmp	r3, r2
    672a:	d1fa      	bne.n	6722 <memcpy+0x66>
    672c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    672e:	1c05      	adds	r5, r0, #0
    6730:	2a00      	cmp	r2, #0
    6732:	d1f5      	bne.n	6720 <memcpy+0x64>
    6734:	e7fa      	b.n	672c <memcpy+0x70>
    6736:	1c05      	adds	r5, r0, #0
    6738:	e7f2      	b.n	6720 <memcpy+0x64>
    673a:	1c1a      	adds	r2, r3, #0
    673c:	e7f8      	b.n	6730 <memcpy+0x74>
    673e:	46c0      	nop			; (mov r8, r8)

00006740 <memset>:
    6740:	b5f0      	push	{r4, r5, r6, r7, lr}
    6742:	0783      	lsls	r3, r0, #30
    6744:	d046      	beq.n	67d4 <memset+0x94>
    6746:	1e54      	subs	r4, r2, #1
    6748:	2a00      	cmp	r2, #0
    674a:	d042      	beq.n	67d2 <memset+0x92>
    674c:	b2ce      	uxtb	r6, r1
    674e:	1c03      	adds	r3, r0, #0
    6750:	2503      	movs	r5, #3
    6752:	e003      	b.n	675c <memset+0x1c>
    6754:	1e62      	subs	r2, r4, #1
    6756:	2c00      	cmp	r4, #0
    6758:	d03b      	beq.n	67d2 <memset+0x92>
    675a:	1c14      	adds	r4, r2, #0
    675c:	3301      	adds	r3, #1
    675e:	1e5a      	subs	r2, r3, #1
    6760:	7016      	strb	r6, [r2, #0]
    6762:	422b      	tst	r3, r5
    6764:	d1f6      	bne.n	6754 <memset+0x14>
    6766:	2c03      	cmp	r4, #3
    6768:	d92b      	bls.n	67c2 <memset+0x82>
    676a:	25ff      	movs	r5, #255	; 0xff
    676c:	400d      	ands	r5, r1
    676e:	022a      	lsls	r2, r5, #8
    6770:	4315      	orrs	r5, r2
    6772:	042a      	lsls	r2, r5, #16
    6774:	4315      	orrs	r5, r2
    6776:	2c0f      	cmp	r4, #15
    6778:	d915      	bls.n	67a6 <memset+0x66>
    677a:	1c27      	adds	r7, r4, #0
    677c:	3f10      	subs	r7, #16
    677e:	093f      	lsrs	r7, r7, #4
    6780:	1c1e      	adds	r6, r3, #0
    6782:	013a      	lsls	r2, r7, #4
    6784:	3610      	adds	r6, #16
    6786:	18b6      	adds	r6, r6, r2
    6788:	1c1a      	adds	r2, r3, #0
    678a:	6015      	str	r5, [r2, #0]
    678c:	6055      	str	r5, [r2, #4]
    678e:	6095      	str	r5, [r2, #8]
    6790:	60d5      	str	r5, [r2, #12]
    6792:	3210      	adds	r2, #16
    6794:	42b2      	cmp	r2, r6
    6796:	d1f8      	bne.n	678a <memset+0x4a>
    6798:	3701      	adds	r7, #1
    679a:	013f      	lsls	r7, r7, #4
    679c:	220f      	movs	r2, #15
    679e:	19db      	adds	r3, r3, r7
    67a0:	4014      	ands	r4, r2
    67a2:	2c03      	cmp	r4, #3
    67a4:	d90d      	bls.n	67c2 <memset+0x82>
    67a6:	1f27      	subs	r7, r4, #4
    67a8:	08bf      	lsrs	r7, r7, #2
    67aa:	00ba      	lsls	r2, r7, #2
    67ac:	1d1e      	adds	r6, r3, #4
    67ae:	18b6      	adds	r6, r6, r2
    67b0:	1c1a      	adds	r2, r3, #0
    67b2:	c220      	stmia	r2!, {r5}
    67b4:	42b2      	cmp	r2, r6
    67b6:	d1fc      	bne.n	67b2 <memset+0x72>
    67b8:	3701      	adds	r7, #1
    67ba:	00bf      	lsls	r7, r7, #2
    67bc:	2203      	movs	r2, #3
    67be:	19db      	adds	r3, r3, r7
    67c0:	4014      	ands	r4, r2
    67c2:	2c00      	cmp	r4, #0
    67c4:	d005      	beq.n	67d2 <memset+0x92>
    67c6:	191c      	adds	r4, r3, r4
    67c8:	b2c9      	uxtb	r1, r1
    67ca:	7019      	strb	r1, [r3, #0]
    67cc:	3301      	adds	r3, #1
    67ce:	42a3      	cmp	r3, r4
    67d0:	d1fb      	bne.n	67ca <memset+0x8a>
    67d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67d4:	1c14      	adds	r4, r2, #0
    67d6:	1c03      	adds	r3, r0, #0
    67d8:	e7c5      	b.n	6766 <memset+0x26>
    67da:	46c0      	nop			; (mov r8, r8)

000067dc <strncmp>:
    67dc:	b570      	push	{r4, r5, r6, lr}
    67de:	1c05      	adds	r5, r0, #0
    67e0:	2000      	movs	r0, #0
    67e2:	2a00      	cmp	r2, #0
    67e4:	d02c      	beq.n	6840 <strncmp+0x64>
    67e6:	1c2b      	adds	r3, r5, #0
    67e8:	430b      	orrs	r3, r1
    67ea:	079c      	lsls	r4, r3, #30
    67ec:	d129      	bne.n	6842 <strncmp+0x66>
    67ee:	2a03      	cmp	r2, #3
    67f0:	d927      	bls.n	6842 <strncmp+0x66>
    67f2:	682c      	ldr	r4, [r5, #0]
    67f4:	680e      	ldr	r6, [r1, #0]
    67f6:	42b4      	cmp	r4, r6
    67f8:	d123      	bne.n	6842 <strncmp+0x66>
    67fa:	1f13      	subs	r3, r2, #4
    67fc:	2b00      	cmp	r3, #0
    67fe:	d01f      	beq.n	6840 <strncmp+0x64>
    6800:	4e22      	ldr	r6, [pc, #136]	; (688c <strncmp+0xb0>)
    6802:	19a2      	adds	r2, r4, r6
    6804:	4e22      	ldr	r6, [pc, #136]	; (6890 <strncmp+0xb4>)
    6806:	43a2      	bics	r2, r4
    6808:	4232      	tst	r2, r6
    680a:	d00e      	beq.n	682a <strncmp+0x4e>
    680c:	e018      	b.n	6840 <strncmp+0x64>
    680e:	686a      	ldr	r2, [r5, #4]
    6810:	6849      	ldr	r1, [r1, #4]
    6812:	428a      	cmp	r2, r1
    6814:	d12e      	bne.n	6874 <strncmp+0x98>
    6816:	3b04      	subs	r3, #4
    6818:	2b00      	cmp	r3, #0
    681a:	d010      	beq.n	683e <strncmp+0x62>
    681c:	4d1b      	ldr	r5, [pc, #108]	; (688c <strncmp+0xb0>)
    681e:	1951      	adds	r1, r2, r5
    6820:	4391      	bics	r1, r2
    6822:	4231      	tst	r1, r6
    6824:	d10b      	bne.n	683e <strncmp+0x62>
    6826:	1c21      	adds	r1, r4, #0
    6828:	1c05      	adds	r5, r0, #0
    682a:	1d28      	adds	r0, r5, #4
    682c:	1d0c      	adds	r4, r1, #4
    682e:	2b03      	cmp	r3, #3
    6830:	d8ed      	bhi.n	680e <strncmp+0x32>
    6832:	1e5a      	subs	r2, r3, #1
    6834:	2b00      	cmp	r3, #0
    6836:	d021      	beq.n	687c <strncmp+0xa0>
    6838:	1c21      	adds	r1, r4, #0
    683a:	1c05      	adds	r5, r0, #0
    683c:	e002      	b.n	6844 <strncmp+0x68>
    683e:	2000      	movs	r0, #0
    6840:	bd70      	pop	{r4, r5, r6, pc}
    6842:	3a01      	subs	r2, #1
    6844:	782c      	ldrb	r4, [r5, #0]
    6846:	7808      	ldrb	r0, [r1, #0]
    6848:	4284      	cmp	r4, r0
    684a:	d11b      	bne.n	6884 <strncmp+0xa8>
    684c:	2a00      	cmp	r2, #0
    684e:	d0f6      	beq.n	683e <strncmp+0x62>
    6850:	2c00      	cmp	r4, #0
    6852:	d0f4      	beq.n	683e <strncmp+0x62>
    6854:	1c6b      	adds	r3, r5, #1
    6856:	3101      	adds	r1, #1
    6858:	18ad      	adds	r5, r5, r2
    685a:	e005      	b.n	6868 <strncmp+0x8c>
    685c:	42ab      	cmp	r3, r5
    685e:	d0ee      	beq.n	683e <strncmp+0x62>
    6860:	2c00      	cmp	r4, #0
    6862:	d0ec      	beq.n	683e <strncmp+0x62>
    6864:	3301      	adds	r3, #1
    6866:	3101      	adds	r1, #1
    6868:	781c      	ldrb	r4, [r3, #0]
    686a:	780a      	ldrb	r2, [r1, #0]
    686c:	4294      	cmp	r4, r2
    686e:	d0f5      	beq.n	685c <strncmp+0x80>
    6870:	1aa0      	subs	r0, r4, r2
    6872:	e7e5      	b.n	6840 <strncmp+0x64>
    6874:	1e5a      	subs	r2, r3, #1
    6876:	1c21      	adds	r1, r4, #0
    6878:	1c05      	adds	r5, r0, #0
    687a:	e7e3      	b.n	6844 <strncmp+0x68>
    687c:	792c      	ldrb	r4, [r5, #4]
    687e:	790a      	ldrb	r2, [r1, #4]
    6880:	1aa0      	subs	r0, r4, r2
    6882:	e7dd      	b.n	6840 <strncmp+0x64>
    6884:	1c02      	adds	r2, r0, #0
    6886:	1aa0      	subs	r0, r4, r2
    6888:	e7da      	b.n	6840 <strncmp+0x64>
    688a:	46c0      	nop			; (mov r8, r8)
    688c:	fefefeff 	.word	0xfefefeff
    6890:	80808080 	.word	0x80808080

00006894 <strncpy>:
    6894:	1c03      	adds	r3, r0, #0
    6896:	430b      	orrs	r3, r1
    6898:	b5f0      	push	{r4, r5, r6, r7, lr}
    689a:	1c04      	adds	r4, r0, #0
    689c:	079d      	lsls	r5, r3, #30
    689e:	d101      	bne.n	68a4 <strncpy+0x10>
    68a0:	2a03      	cmp	r2, #3
    68a2:	d815      	bhi.n	68d0 <strncpy+0x3c>
    68a4:	2a00      	cmp	r2, #0
    68a6:	d012      	beq.n	68ce <strncpy+0x3a>
    68a8:	780d      	ldrb	r5, [r1, #0]
    68aa:	3a01      	subs	r2, #1
    68ac:	1c63      	adds	r3, r4, #1
    68ae:	1c4e      	adds	r6, r1, #1
    68b0:	7025      	strb	r5, [r4, #0]
    68b2:	2d00      	cmp	r5, #0
    68b4:	d01b      	beq.n	68ee <strncpy+0x5a>
    68b6:	1c31      	adds	r1, r6, #0
    68b8:	e007      	b.n	68ca <strncpy+0x36>
    68ba:	780c      	ldrb	r4, [r1, #0]
    68bc:	3301      	adds	r3, #1
    68be:	1e5d      	subs	r5, r3, #1
    68c0:	3a01      	subs	r2, #1
    68c2:	702c      	strb	r4, [r5, #0]
    68c4:	3101      	adds	r1, #1
    68c6:	2c00      	cmp	r4, #0
    68c8:	d011      	beq.n	68ee <strncpy+0x5a>
    68ca:	2a00      	cmp	r2, #0
    68cc:	d1f5      	bne.n	68ba <strncpy+0x26>
    68ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68d0:	4e0b      	ldr	r6, [pc, #44]	; (6900 <strncpy+0x6c>)
    68d2:	680b      	ldr	r3, [r1, #0]
    68d4:	4f0b      	ldr	r7, [pc, #44]	; (6904 <strncpy+0x70>)
    68d6:	19dd      	adds	r5, r3, r7
    68d8:	439d      	bics	r5, r3
    68da:	4235      	tst	r5, r6
    68dc:	d1e2      	bne.n	68a4 <strncpy+0x10>
    68de:	3404      	adds	r4, #4
    68e0:	1f25      	subs	r5, r4, #4
    68e2:	3a04      	subs	r2, #4
    68e4:	3104      	adds	r1, #4
    68e6:	602b      	str	r3, [r5, #0]
    68e8:	2a03      	cmp	r2, #3
    68ea:	d8f2      	bhi.n	68d2 <strncpy+0x3e>
    68ec:	e7da      	b.n	68a4 <strncpy+0x10>
    68ee:	189c      	adds	r4, r3, r2
    68f0:	2100      	movs	r1, #0
    68f2:	2a00      	cmp	r2, #0
    68f4:	d0eb      	beq.n	68ce <strncpy+0x3a>
    68f6:	7019      	strb	r1, [r3, #0]
    68f8:	3301      	adds	r3, #1
    68fa:	42a3      	cmp	r3, r4
    68fc:	d1fb      	bne.n	68f6 <strncpy+0x62>
    68fe:	e7e6      	b.n	68ce <strncpy+0x3a>
    6900:	80808080 	.word	0x80808080
    6904:	fefefeff 	.word	0xfefefeff

00006908 <register_fini>:
    6908:	b508      	push	{r3, lr}
    690a:	4b03      	ldr	r3, [pc, #12]	; (6918 <register_fini+0x10>)
    690c:	2b00      	cmp	r3, #0
    690e:	d002      	beq.n	6916 <register_fini+0xe>
    6910:	4802      	ldr	r0, [pc, #8]	; (691c <register_fini+0x14>)
    6912:	f000 f805 	bl	6920 <atexit>
    6916:	bd08      	pop	{r3, pc}
    6918:	00000000 	.word	0x00000000
    691c:	00006931 	.word	0x00006931

00006920 <atexit>:
    6920:	b508      	push	{r3, lr}
    6922:	1c01      	adds	r1, r0, #0
    6924:	2200      	movs	r2, #0
    6926:	2000      	movs	r0, #0
    6928:	2300      	movs	r3, #0
    692a:	f000 f819 	bl	6960 <__register_exitproc>
    692e:	bd08      	pop	{r3, pc}

00006930 <__libc_fini_array>:
    6930:	b538      	push	{r3, r4, r5, lr}
    6932:	4b09      	ldr	r3, [pc, #36]	; (6958 <__libc_fini_array+0x28>)
    6934:	4d09      	ldr	r5, [pc, #36]	; (695c <__libc_fini_array+0x2c>)
    6936:	1aed      	subs	r5, r5, r3
    6938:	10ad      	asrs	r5, r5, #2
    693a:	d009      	beq.n	6950 <__libc_fini_array+0x20>
    693c:	3d01      	subs	r5, #1
    693e:	00ac      	lsls	r4, r5, #2
    6940:	18e4      	adds	r4, r4, r3
    6942:	e000      	b.n	6946 <__libc_fini_array+0x16>
    6944:	3d01      	subs	r5, #1
    6946:	6823      	ldr	r3, [r4, #0]
    6948:	4798      	blx	r3
    694a:	3c04      	subs	r4, #4
    694c:	2d00      	cmp	r5, #0
    694e:	d1f9      	bne.n	6944 <__libc_fini_array+0x14>
    6950:	f001 f9e2 	bl	7d18 <_fini>
    6954:	bd38      	pop	{r3, r4, r5, pc}
    6956:	46c0      	nop			; (mov r8, r8)
    6958:	00007d24 	.word	0x00007d24
    695c:	00007d28 	.word	0x00007d28

00006960 <__register_exitproc>:
    6960:	b5f0      	push	{r4, r5, r6, r7, lr}
    6962:	464f      	mov	r7, r9
    6964:	4646      	mov	r6, r8
    6966:	b4c0      	push	{r6, r7}
    6968:	4698      	mov	r8, r3
    696a:	4b2b      	ldr	r3, [pc, #172]	; (6a18 <__register_exitproc+0xb8>)
    696c:	25a4      	movs	r5, #164	; 0xa4
    696e:	681b      	ldr	r3, [r3, #0]
    6970:	006d      	lsls	r5, r5, #1
    6972:	595c      	ldr	r4, [r3, r5]
    6974:	b083      	sub	sp, #12
    6976:	1c06      	adds	r6, r0, #0
    6978:	1c0f      	adds	r7, r1, #0
    697a:	4691      	mov	r9, r2
    697c:	9301      	str	r3, [sp, #4]
    697e:	2c00      	cmp	r4, #0
    6980:	d044      	beq.n	6a0c <__register_exitproc+0xac>
    6982:	6865      	ldr	r5, [r4, #4]
    6984:	2d1f      	cmp	r5, #31
    6986:	dd1a      	ble.n	69be <__register_exitproc+0x5e>
    6988:	4b24      	ldr	r3, [pc, #144]	; (6a1c <__register_exitproc+0xbc>)
    698a:	2b00      	cmp	r3, #0
    698c:	d102      	bne.n	6994 <__register_exitproc+0x34>
    698e:	2001      	movs	r0, #1
    6990:	4240      	negs	r0, r0
    6992:	e01c      	b.n	69ce <__register_exitproc+0x6e>
    6994:	20c8      	movs	r0, #200	; 0xc8
    6996:	0040      	lsls	r0, r0, #1
    6998:	e000      	b.n	699c <__register_exitproc+0x3c>
    699a:	bf00      	nop
    699c:	1e04      	subs	r4, r0, #0
    699e:	d0f6      	beq.n	698e <__register_exitproc+0x2e>
    69a0:	2500      	movs	r5, #0
    69a2:	6045      	str	r5, [r0, #4]
    69a4:	23a4      	movs	r3, #164	; 0xa4
    69a6:	9801      	ldr	r0, [sp, #4]
    69a8:	005b      	lsls	r3, r3, #1
    69aa:	58c0      	ldr	r0, [r0, r3]
    69ac:	9901      	ldr	r1, [sp, #4]
    69ae:	6020      	str	r0, [r4, #0]
    69b0:	50cc      	str	r4, [r1, r3]
    69b2:	23c4      	movs	r3, #196	; 0xc4
    69b4:	005b      	lsls	r3, r3, #1
    69b6:	50e5      	str	r5, [r4, r3]
    69b8:	23c6      	movs	r3, #198	; 0xc6
    69ba:	005b      	lsls	r3, r3, #1
    69bc:	50e5      	str	r5, [r4, r3]
    69be:	2e00      	cmp	r6, #0
    69c0:	d10a      	bne.n	69d8 <__register_exitproc+0x78>
    69c2:	1c6b      	adds	r3, r5, #1
    69c4:	3502      	adds	r5, #2
    69c6:	00ad      	lsls	r5, r5, #2
    69c8:	6063      	str	r3, [r4, #4]
    69ca:	2000      	movs	r0, #0
    69cc:	512f      	str	r7, [r5, r4]
    69ce:	b003      	add	sp, #12
    69d0:	bc0c      	pop	{r2, r3}
    69d2:	4690      	mov	r8, r2
    69d4:	4699      	mov	r9, r3
    69d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69d8:	00ab      	lsls	r3, r5, #2
    69da:	18e3      	adds	r3, r4, r3
    69dc:	2288      	movs	r2, #136	; 0x88
    69de:	4648      	mov	r0, r9
    69e0:	5098      	str	r0, [r3, r2]
    69e2:	20c4      	movs	r0, #196	; 0xc4
    69e4:	0040      	lsls	r0, r0, #1
    69e6:	1822      	adds	r2, r4, r0
    69e8:	6810      	ldr	r0, [r2, #0]
    69ea:	2101      	movs	r1, #1
    69ec:	40a9      	lsls	r1, r5
    69ee:	4308      	orrs	r0, r1
    69f0:	6010      	str	r0, [r2, #0]
    69f2:	2284      	movs	r2, #132	; 0x84
    69f4:	0052      	lsls	r2, r2, #1
    69f6:	4640      	mov	r0, r8
    69f8:	5098      	str	r0, [r3, r2]
    69fa:	2e02      	cmp	r6, #2
    69fc:	d1e1      	bne.n	69c2 <__register_exitproc+0x62>
    69fe:	22c6      	movs	r2, #198	; 0xc6
    6a00:	0052      	lsls	r2, r2, #1
    6a02:	18a3      	adds	r3, r4, r2
    6a04:	6818      	ldr	r0, [r3, #0]
    6a06:	4301      	orrs	r1, r0
    6a08:	6019      	str	r1, [r3, #0]
    6a0a:	e7da      	b.n	69c2 <__register_exitproc+0x62>
    6a0c:	1c1c      	adds	r4, r3, #0
    6a0e:	344d      	adds	r4, #77	; 0x4d
    6a10:	34ff      	adds	r4, #255	; 0xff
    6a12:	515c      	str	r4, [r3, r5]
    6a14:	e7b5      	b.n	6982 <__register_exitproc+0x22>
    6a16:	46c0      	nop			; (mov r8, r8)
    6a18:	00007d00 	.word	0x00007d00
    6a1c:	00000000 	.word	0x00000000
    6a20:	676e6950 	.word	0x676e6950
    6a24:	214f5420 	.word	0x214f5420
    6a28:	00000000 	.word	0x00000000
    6a2c:	75626544 	.word	0x75626544
    6a30:	00000067 	.word	0x00000067
    6a34:	41447249 	.word	0x41447249
    6a38:	00000000 	.word	0x00000000
    6a3c:	676e6950 	.word	0x676e6950
    6a40:	00000000 	.word	0x00000000
    6a44:	636e7953 	.word	0x636e7953
    6a48:	00000000 	.word	0x00000000
    6a4c:	42000800 	.word	0x42000800
    6a50:	42000c00 	.word	0x42000c00
    6a54:	42001000 	.word	0x42001000
    6a58:	42001400 	.word	0x42001400
    6a5c:	6c656959 	.word	0x6c656959
    6a60:	53492064 	.word	0x53492064
    6a64:	00002152 	.word	0x00002152
    6a68:	59206f4e 	.word	0x59206f4e
    6a6c:	646c6569 	.word	0x646c6569
    6a70:	68432021 	.word	0x68432021
    6a74:	65676e61 	.word	0x65676e61
    6a78:	6f742064 	.word	0x6f742064
    6a7c:	4e495020 	.word	0x4e495020
    6a80:	00000047 	.word	0x00000047
    6a84:	6e6f7257 	.word	0x6e6f7257
    6a88:	61442067 	.word	0x61442067
    6a8c:	00216174 	.word	0x00216174
    6a90:	0c0b0a09 	.word	0x0c0b0a09
    6a94:	43415254 	.word	0x43415254
    6a98:	53415f45 	.word	0x53415f45
    6a9c:	54524553 	.word	0x54524553
    6aa0:	5476203a 	.word	0x5476203a
    6aa4:	65636172 	.word	0x65636172
    6aa8:	6f727245 	.word	0x6f727245
    6aac:	6d203a72 	.word	0x6d203a72
    6ab0:	3d206773 	.word	0x3d206773
    6ab4:	554e203d 	.word	0x554e203d
    6ab8:	00004c4c 	.word	0x00004c4c
    6abc:	43415254 	.word	0x43415254
    6ac0:	53415f45 	.word	0x53415f45
    6ac4:	54524553 	.word	0x54524553
    6ac8:	5476203a 	.word	0x5476203a
    6acc:	65636172 	.word	0x65636172
    6ad0:	6f727245 	.word	0x6f727245
    6ad4:	52203a72 	.word	0x52203a72
    6ad8:	726f6365 	.word	0x726f6365
    6adc:	44726564 	.word	0x44726564
    6ae0:	50617461 	.word	0x50617461
    6ae4:	3d207274 	.word	0x3d207274
    6ae8:	554e203d 	.word	0x554e203d
    6aec:	00004c4c 	.word	0x00004c4c
    6af0:	63617254 	.word	0x63617254
    6af4:	65522065 	.word	0x65522065
    6af8:	64726f63 	.word	0x64726f63
    6afc:	44207265 	.word	0x44207265
    6b00:	006f6d65 	.word	0x006f6d65
    6b04:	63617254 	.word	0x63617254
    6b08:	74732065 	.word	0x74732065
    6b0c:	20747261 	.word	0x20747261
    6b10:	6b72616d 	.word	0x6b72616d
    6b14:	20737265 	.word	0x20737265
    6b18:	65726c61 	.word	0x65726c61
    6b1c:	20796461 	.word	0x20796461
    6b20:	74696e69 	.word	0x74696e69
    6b24:	696c6169 	.word	0x696c6169
    6b28:	2164657a 	.word	0x2164657a
    6b2c:	00000000 	.word	0x00000000
    6b30:	65747441 	.word	0x65747441
    6b34:	2074706d 	.word	0x2074706d
    6b38:	69206f74 	.word	0x69206f74
    6b3c:	7865646e 	.word	0x7865646e
    6b40:	74756f20 	.word	0x74756f20
    6b44:	65646973 	.word	0x65646973
    6b48:	65766520 	.word	0x65766520
    6b4c:	6220746e 	.word	0x6220746e
    6b50:	65666675 	.word	0x65666675
    6b54:	00002172 	.word	0x00002172
    6b58:	43415254 	.word	0x43415254
    6b5c:	53415f45 	.word	0x53415f45
    6b60:	54524553 	.word	0x54524553
    6b64:	6975203a 	.word	0x6975203a
    6b68:	65646e49 	.word	0x65646e49
    6b6c:	4f664f78 	.word	0x4f664f78
    6b70:	63656a62 	.word	0x63656a62
    6b74:	49203a74 	.word	0x49203a74
    6b78:	6c61766e 	.word	0x6c61766e
    6b7c:	76206469 	.word	0x76206469
    6b80:	65756c61 	.word	0x65756c61
    6b84:	726f6620 	.word	0x726f6620
    6b88:	6a626f20 	.word	0x6a626f20
    6b8c:	63746365 	.word	0x63746365
    6b90:	7373616c 	.word	0x7373616c
    6b94:	00000000 	.word	0x00000000
    6b98:	43415254 	.word	0x43415254
    6b9c:	53415f45 	.word	0x53415f45
    6ba0:	54524553 	.word	0x54524553
    6ba4:	6975203a 	.word	0x6975203a
    6ba8:	65646e49 	.word	0x65646e49
    6bac:	4f664f78 	.word	0x4f664f78
    6bb0:	63656a62 	.word	0x63656a62
    6bb4:	49203a74 	.word	0x49203a74
    6bb8:	6c61766e 	.word	0x6c61766e
    6bbc:	76206469 	.word	0x76206469
    6bc0:	65756c61 	.word	0x65756c61
    6bc4:	726f6620 	.word	0x726f6620
    6bc8:	6a626f20 	.word	0x6a626f20
    6bcc:	68746365 	.word	0x68746365
    6bd0:	6c646e61 	.word	0x6c646e61
    6bd4:	00000065 	.word	0x00000065
    6bd8:	43415254 	.word	0x43415254
    6bdc:	53415f45 	.word	0x53415f45
    6be0:	54524553 	.word	0x54524553
    6be4:	5478203a 	.word	0x5478203a
    6be8:	65636172 	.word	0x65636172
    6bec:	4f746547 	.word	0x4f746547
    6bf0:	63656a62 	.word	0x63656a62
    6bf4:	6e614874 	.word	0x6e614874
    6bf8:	3a656c64 	.word	0x3a656c64
    6bfc:	766e4920 	.word	0x766e4920
    6c00:	64696c61 	.word	0x64696c61
    6c04:	6c617620 	.word	0x6c617620
    6c08:	66206575 	.word	0x66206575
    6c0c:	6f20726f 	.word	0x6f20726f
    6c10:	63656a62 	.word	0x63656a62
    6c14:	616c6374 	.word	0x616c6374
    6c18:	00007373 	.word	0x00007373
    6c1c:	43415254 	.word	0x43415254
    6c20:	53415f45 	.word	0x53415f45
    6c24:	54524553 	.word	0x54524553
    6c28:	5476203a 	.word	0x5476203a
    6c2c:	65636172 	.word	0x65636172
    6c30:	65657246 	.word	0x65657246
    6c34:	656a624f 	.word	0x656a624f
    6c38:	61487463 	.word	0x61487463
    6c3c:	656c646e 	.word	0x656c646e
    6c40:	6e49203a 	.word	0x6e49203a
    6c44:	696c6176 	.word	0x696c6176
    6c48:	61762064 	.word	0x61762064
    6c4c:	2065756c 	.word	0x2065756c
    6c50:	20726f66 	.word	0x20726f66
    6c54:	656a626f 	.word	0x656a626f
    6c58:	6c637463 	.word	0x6c637463
    6c5c:	00737361 	.word	0x00737361
    6c60:	43415254 	.word	0x43415254
    6c64:	53415f45 	.word	0x53415f45
    6c68:	54524553 	.word	0x54524553
    6c6c:	5476203a 	.word	0x5476203a
    6c70:	65636172 	.word	0x65636172
    6c74:	65657246 	.word	0x65657246
    6c78:	656a624f 	.word	0x656a624f
    6c7c:	61487463 	.word	0x61487463
    6c80:	656c646e 	.word	0x656c646e
    6c84:	6e49203a 	.word	0x6e49203a
    6c88:	696c6176 	.word	0x696c6176
    6c8c:	61762064 	.word	0x61762064
    6c90:	2065756c 	.word	0x2065756c
    6c94:	20726f66 	.word	0x20726f66
    6c98:	646e6168 	.word	0x646e6168
    6c9c:	0000656c 	.word	0x0000656c
    6ca0:	65747441 	.word	0x65747441
    6ca4:	2074706d 	.word	0x2074706d
    6ca8:	66206f74 	.word	0x66206f74
    6cac:	20656572 	.word	0x20656572
    6cb0:	65726f6d 	.word	0x65726f6d
    6cb4:	6e616820 	.word	0x6e616820
    6cb8:	73656c64 	.word	0x73656c64
    6cbc:	61687420 	.word	0x61687420
    6cc0:	6c61206e 	.word	0x6c61206e
    6cc4:	61636f6c 	.word	0x61636f6c
    6cc8:	21646574 	.word	0x21646574
    6ccc:	00000000 	.word	0x00000000
    6cd0:	43415254 	.word	0x43415254
    6cd4:	53415f45 	.word	0x53415f45
    6cd8:	54524553 	.word	0x54524553
    6cdc:	5476203a 	.word	0x5476203a
    6ce0:	65636172 	.word	0x65636172
    6ce4:	4f746553 	.word	0x4f746553
    6ce8:	63656a62 	.word	0x63656a62
    6cec:	6d614e74 	.word	0x6d614e74
    6cf0:	6e203a65 	.word	0x6e203a65
    6cf4:	20656d61 	.word	0x20656d61
    6cf8:	4e203d3d 	.word	0x4e203d3d
    6cfc:	004c4c55 	.word	0x004c4c55
    6d00:	656c6c49 	.word	0x656c6c49
    6d04:	206c6167 	.word	0x206c6167
    6d08:	656a626f 	.word	0x656a626f
    6d0c:	63207463 	.word	0x63207463
    6d10:	7373616c 	.word	0x7373616c
    6d14:	206e6920 	.word	0x206e6920
    6d18:	61725476 	.word	0x61725476
    6d1c:	65536563 	.word	0x65536563
    6d20:	6a624f74 	.word	0x6a624f74
    6d24:	4e746365 	.word	0x4e746365
    6d28:	00656d61 	.word	0x00656d61
    6d2c:	656c6c49 	.word	0x656c6c49
    6d30:	206c6167 	.word	0x206c6167
    6d34:	646e6168 	.word	0x646e6168
    6d38:	2820656c 	.word	0x2820656c
    6d3c:	69202930 	.word	0x69202930
    6d40:	5476206e 	.word	0x5476206e
    6d44:	65636172 	.word	0x65636172
    6d48:	4f746553 	.word	0x4f746553
    6d4c:	63656a62 	.word	0x63656a62
    6d50:	6d614e74 	.word	0x6d614e74
    6d54:	00002e65 	.word	0x00002e65
    6d58:	43415254 	.word	0x43415254
    6d5c:	53415f45 	.word	0x53415f45
    6d60:	54524553 	.word	0x54524553
    6d64:	7270203a 	.word	0x7270203a
    6d68:	65684376 	.word	0x65684376
    6d6c:	61446b63 	.word	0x61446b63
    6d70:	6f546174 	.word	0x6f546174
    6d74:	764f6542 	.word	0x764f6542
    6d78:	72777265 	.word	0x72777265
    6d7c:	65747469 	.word	0x65747469
    6d80:	726f466e 	.word	0x726f466e
    6d84:	746c754d 	.word	0x746c754d
    6d88:	746e4569 	.word	0x746e4569
    6d8c:	76457972 	.word	0x76457972
    6d90:	73746e65 	.word	0x73746e65
    6d94:	6f6e203a 	.word	0x6f6e203a
    6d98:	746e4566 	.word	0x746e4566
    6d9c:	73656972 	.word	0x73656972
    6da0:	68436f54 	.word	0x68436f54
    6da4:	206b6365 	.word	0x206b6365
    6da8:	30203d3d 	.word	0x30203d3d
    6dac:	00000000 	.word	0x00000000
    6db0:	43415254 	.word	0x43415254
    6db4:	53415f45 	.word	0x53415f45
    6db8:	54524553 	.word	0x54524553
    6dbc:	7270203a 	.word	0x7270203a
    6dc0:	61725476 	.word	0x61725476
    6dc4:	65476563 	.word	0x65476563
    6dc8:	53544474 	.word	0x53544474
    6dcc:	6e49203a 	.word	0x6e49203a
    6dd0:	696c6176 	.word	0x696c6176
    6dd4:	61762064 	.word	0x61762064
    6dd8:	2065756c 	.word	0x2065756c
    6ddc:	20726f66 	.word	0x20726f66
    6de0:	61726170 	.word	0x61726170
    6de4:	616d5f6d 	.word	0x616d5f6d
    6de8:	53544478 	.word	0x53544478
    6dec:	00000000 	.word	0x00000000
    6df0:	20646142 	.word	0x20646142
    6df4:	61726170 	.word	0x61726170
    6df8:	616d5f6d 	.word	0x616d5f6d
    6dfc:	53544478 	.word	0x53544478
    6e00:	206e6920 	.word	0x206e6920
    6e04:	54767270 	.word	0x54767270
    6e08:	65636172 	.word	0x65636172
    6e0c:	44746547 	.word	0x44746547
    6e10:	00005354 	.word	0x00005354
    6e14:	43415254 	.word	0x43415254
    6e18:	53415f45 	.word	0x53415f45
    6e1c:	54524553 	.word	0x54524553
    6e20:	7270203a 	.word	0x7270203a
    6e24:	61725476 	.word	0x61725476
    6e28:	6f4c6563 	.word	0x6f4c6563
    6e2c:	70756b6f 	.word	0x70756b6f
    6e30:	626d7953 	.word	0x626d7953
    6e34:	61546c6f 	.word	0x61546c6f
    6e38:	45656c62 	.word	0x45656c62
    6e3c:	7972746e 	.word	0x7972746e
    6e40:	616e203a 	.word	0x616e203a
    6e44:	3d20656d 	.word	0x3d20656d
    6e48:	554e203d 	.word	0x554e203d
    6e4c:	00004c4c 	.word	0x00004c4c
    6e50:	43415254 	.word	0x43415254
    6e54:	53415f45 	.word	0x53415f45
    6e58:	54524553 	.word	0x54524553
    6e5c:	7270203a 	.word	0x7270203a
    6e60:	61725476 	.word	0x61725476
    6e64:	6f4c6563 	.word	0x6f4c6563
    6e68:	70756b6f 	.word	0x70756b6f
    6e6c:	626d7953 	.word	0x626d7953
    6e70:	61546c6f 	.word	0x61546c6f
    6e74:	45656c62 	.word	0x45656c62
    6e78:	7972746e 	.word	0x7972746e
    6e7c:	656c203a 	.word	0x656c203a
    6e80:	3d3d206e 	.word	0x3d3d206e
    6e84:	00003020 	.word	0x00003020
    6e88:	43415254 	.word	0x43415254
    6e8c:	53415f45 	.word	0x53415f45
    6e90:	54524553 	.word	0x54524553
    6e94:	7270203a 	.word	0x7270203a
    6e98:	61725476 	.word	0x61725476
    6e9c:	72436563 	.word	0x72436563
    6ea0:	65746165 	.word	0x65746165
    6ea4:	626d7953 	.word	0x626d7953
    6ea8:	61546c6f 	.word	0x61546c6f
    6eac:	45656c62 	.word	0x45656c62
    6eb0:	7972746e 	.word	0x7972746e
    6eb4:	616e203a 	.word	0x616e203a
    6eb8:	3d20656d 	.word	0x3d20656d
    6ebc:	554e203d 	.word	0x554e203d
    6ec0:	00004c4c 	.word	0x00004c4c
    6ec4:	43415254 	.word	0x43415254
    6ec8:	53415f45 	.word	0x53415f45
    6ecc:	54524553 	.word	0x54524553
    6ed0:	7270203a 	.word	0x7270203a
    6ed4:	61725476 	.word	0x61725476
    6ed8:	72436563 	.word	0x72436563
    6edc:	65746165 	.word	0x65746165
    6ee0:	626d7953 	.word	0x626d7953
    6ee4:	61546c6f 	.word	0x61546c6f
    6ee8:	45656c62 	.word	0x45656c62
    6eec:	7972746e 	.word	0x7972746e
    6ef0:	656c203a 	.word	0x656c203a
    6ef4:	3d3d206e 	.word	0x3d3d206e
    6ef8:	00003020 	.word	0x00003020
    6efc:	626d7953 	.word	0x626d7953
    6f00:	74206c6f 	.word	0x74206c6f
    6f04:	656c6261 	.word	0x656c6261
    6f08:	6c756620 	.word	0x6c756620
    6f0c:	49202e6c 	.word	0x49202e6c
    6f10:	6572636e 	.word	0x6572636e
    6f14:	20657361 	.word	0x20657361
    6f18:	424d5953 	.word	0x424d5953
    6f1c:	545f4c4f 	.word	0x545f4c4f
    6f20:	454c4241 	.word	0x454c4241
    6f24:	5a49535f 	.word	0x5a49535f
    6f28:	6e692045 	.word	0x6e692045
    6f2c:	63727420 	.word	0x63727420
    6f30:	666e6f43 	.word	0x666e6f43
    6f34:	682e6769 	.word	0x682e6769
    6f38:	00000000 	.word	0x00000000
    6f3c:	43415254 	.word	0x43415254
    6f40:	53415f45 	.word	0x53415f45
    6f44:	54524553 	.word	0x54524553
    6f48:	7270203a 	.word	0x7270203a
    6f4c:	61725476 	.word	0x61725476
    6f50:	65476563 	.word	0x65476563
    6f54:	65684374 	.word	0x65684374
    6f58:	75736b63 	.word	0x75736b63
    6f5c:	70203a6d 	.word	0x70203a6d
    6f60:	656d616e 	.word	0x656d616e
    6f64:	203d3d20 	.word	0x203d3d20
    6f68:	4c4c554e 	.word	0x4c4c554e
    6f6c:	00000000 	.word	0x00000000
    6f70:	43415254 	.word	0x43415254
    6f74:	53415f45 	.word	0x53415f45
    6f78:	54524553 	.word	0x54524553
    6f7c:	7270203a 	.word	0x7270203a
    6f80:	61725476 	.word	0x61725476
    6f84:	65476563 	.word	0x65476563
    6f88:	65684374 	.word	0x65684374
    6f8c:	75736b63 	.word	0x75736b63
    6f90:	70203a6d 	.word	0x70203a6d
    6f94:	20637263 	.word	0x20637263
    6f98:	4e203d3d 	.word	0x4e203d3d
    6f9c:	004c4c55 	.word	0x004c4c55
    6fa0:	43415254 	.word	0x43415254
    6fa4:	53415f45 	.word	0x53415f45
    6fa8:	54524553 	.word	0x54524553
    6fac:	7270203a 	.word	0x7270203a
    6fb0:	61725476 	.word	0x61725476
    6fb4:	65476563 	.word	0x65476563
    6fb8:	65684374 	.word	0x65684374
    6fbc:	75736b63 	.word	0x75736b63
    6fc0:	70203a6d 	.word	0x70203a6d
    6fc4:	676e656c 	.word	0x676e656c
    6fc8:	3d206874 	.word	0x3d206874
    6fcc:	554e203d 	.word	0x554e203d
    6fd0:	00004c4c 	.word	0x00004c4c
    6fd4:	43415254 	.word	0x43415254
    6fd8:	53415f45 	.word	0x53415f45
    6fdc:	54524553 	.word	0x54524553
    6fe0:	7270203a 	.word	0x7270203a
    6fe4:	61725476 	.word	0x61725476
    6fe8:	704f6563 	.word	0x704f6563
    6fec:	79536e65 	.word	0x79536e65
    6ff0:	6c6f626d 	.word	0x6c6f626d
    6ff4:	616e203a 	.word	0x616e203a
    6ff8:	3d20656d 	.word	0x3d20656d
    6ffc:	554e203d 	.word	0x554e203d
    7000:	00004c4c 	.word	0x00004c4c
    7004:	43415254 	.word	0x43415254
    7008:	53415f45 	.word	0x53415f45
    700c:	54524553 	.word	0x54524553
    7010:	5476203a 	.word	0x5476203a
    7014:	65636172 	.word	0x65636172
    7018:	726f7453 	.word	0x726f7453
    701c:	73615465 	.word	0x73615465
    7020:	6165526b 	.word	0x6165526b
    7024:	203a7964 	.word	0x203a7964
    7028:	61766e49 	.word	0x61766e49
    702c:	2064696c 	.word	0x2064696c
    7030:	756c6176 	.word	0x756c6176
    7034:	6f662065 	.word	0x6f662065
    7038:	61682072 	.word	0x61682072
    703c:	656c646e 	.word	0x656c646e
    7040:	00000000 	.word	0x00000000
    7044:	6f636552 	.word	0x6f636552
    7048:	72656472 	.word	0x72656472
    704c:	73756220 	.word	0x73756220
    7050:	202d2079 	.word	0x202d2079
    7054:	68676968 	.word	0x68676968
    7058:	69727020 	.word	0x69727020
    705c:	7469726f 	.word	0x7469726f
    7060:	53492079 	.word	0x53492079
    7064:	73752052 	.word	0x73752052
    7068:	20676e69 	.word	0x20676e69
    706c:	63737973 	.word	0x63737973
    7070:	3f6c6c61 	.word	0x3f6c6c61
    7074:	29312820 	.word	0x29312820
    7078:	00000000 	.word	0x00000000
    707c:	43415254 	.word	0x43415254
    7080:	53415f45 	.word	0x53415f45
    7084:	54524553 	.word	0x54524553
    7088:	5476203a 	.word	0x5476203a
    708c:	65636172 	.word	0x65636172
    7090:	726f7453 	.word	0x726f7453
    7094:	776f4c65 	.word	0x776f4c65
    7098:	65776f50 	.word	0x65776f50
    709c:	49203a72 	.word	0x49203a72
    70a0:	6c61766e 	.word	0x6c61766e
    70a4:	66206469 	.word	0x66206469
    70a8:	2067616c 	.word	0x2067616c
    70ac:	756c6176 	.word	0x756c6176
    70b0:	00000065 	.word	0x00000065
    70b4:	43415254 	.word	0x43415254
    70b8:	53415f45 	.word	0x53415f45
    70bc:	54524553 	.word	0x54524553
    70c0:	5476203a 	.word	0x5476203a
    70c4:	65636172 	.word	0x65636172
    70c8:	726f7453 	.word	0x726f7453
    70cc:	72654b65 	.word	0x72654b65
    70d0:	436c656e 	.word	0x436c656e
    70d4:	3a6c6c61 	.word	0x3a6c6c61
    70d8:	6f636520 	.word	0x6f636520
    70dc:	3e206564 	.word	0x3e206564
    70e0:	7830203d 	.word	0x7830203d
    70e4:	00004646 	.word	0x00004646
    70e8:	43415254 	.word	0x43415254
    70ec:	53415f45 	.word	0x53415f45
    70f0:	54524553 	.word	0x54524553
    70f4:	5476203a 	.word	0x5476203a
    70f8:	65636172 	.word	0x65636172
    70fc:	726f7453 	.word	0x726f7453
    7100:	72654b65 	.word	0x72654b65
    7104:	436c656e 	.word	0x436c656e
    7108:	3a6c6c61 	.word	0x3a6c6c61
    710c:	6a626f20 	.word	0x6a626f20
    7110:	43746365 	.word	0x43746365
    7114:	7373616c 	.word	0x7373616c
    7118:	203d3e20 	.word	0x203d3e20
    711c:	43415254 	.word	0x43415254
    7120:	434e5f45 	.word	0x434e5f45
    7124:	5353414c 	.word	0x5353414c
    7128:	00005345 	.word	0x00005345
    712c:	43415254 	.word	0x43415254
    7130:	53415f45 	.word	0x53415f45
    7134:	54524553 	.word	0x54524553
    7138:	5476203a 	.word	0x5476203a
    713c:	65636172 	.word	0x65636172
    7140:	726f7453 	.word	0x726f7453
    7144:	72654b65 	.word	0x72654b65
    7148:	436c656e 	.word	0x436c656e
    714c:	3a6c6c61 	.word	0x3a6c6c61
    7150:	766e4920 	.word	0x766e4920
    7154:	64696c61 	.word	0x64696c61
    7158:	6c617620 	.word	0x6c617620
    715c:	66206575 	.word	0x66206575
    7160:	6f20726f 	.word	0x6f20726f
    7164:	63656a62 	.word	0x63656a62
    7168:	6d754e74 	.word	0x6d754e74
    716c:	00726562 	.word	0x00726562
    7170:	6f636552 	.word	0x6f636552
    7174:	72656472 	.word	0x72656472
    7178:	73756220 	.word	0x73756220
    717c:	202d2079 	.word	0x202d2079
    7180:	68676968 	.word	0x68676968
    7184:	69727020 	.word	0x69727020
    7188:	7469726f 	.word	0x7469726f
    718c:	53492079 	.word	0x53492079
    7190:	73752052 	.word	0x73752052
    7194:	20676e69 	.word	0x20676e69
    7198:	63737973 	.word	0x63737973
    719c:	3f6c6c61 	.word	0x3f6c6c61
    71a0:	29322820 	.word	0x29322820
    71a4:	00000000 	.word	0x00000000
    71a8:	43415254 	.word	0x43415254
    71ac:	53415f45 	.word	0x53415f45
    71b0:	54524553 	.word	0x54524553
    71b4:	5476203a 	.word	0x5476203a
    71b8:	65636172 	.word	0x65636172
    71bc:	726f7453 	.word	0x726f7453
    71c0:	72654b65 	.word	0x72654b65
    71c4:	436c656e 	.word	0x436c656e
    71c8:	3a6c6c61 	.word	0x3a6c6c61
    71cc:	74766520 	.word	0x74766520
    71d0:	65646f63 	.word	0x65646f63
    71d4:	203d3e20 	.word	0x203d3e20
    71d8:	46467830 	.word	0x46467830
    71dc:	00000000 	.word	0x00000000
    71e0:	43415254 	.word	0x43415254
    71e4:	53415f45 	.word	0x53415f45
    71e8:	54524553 	.word	0x54524553
    71ec:	5476203a 	.word	0x5476203a
    71f0:	65636172 	.word	0x65636172
    71f4:	726f7453 	.word	0x726f7453
    71f8:	72654b65 	.word	0x72654b65
    71fc:	436c656e 	.word	0x436c656e
    7200:	576c6c61 	.word	0x576c6c61
    7204:	50687469 	.word	0x50687469
    7208:	6d617261 	.word	0x6d617261
    720c:	626f203a 	.word	0x626f203a
    7210:	7463656a 	.word	0x7463656a
    7214:	73616c43 	.word	0x73616c43
    7218:	3d3e2073 	.word	0x3d3e2073
    721c:	41525420 	.word	0x41525420
    7220:	4e5f4543 	.word	0x4e5f4543
    7224:	53414c43 	.word	0x53414c43
    7228:	00534553 	.word	0x00534553
    722c:	43415254 	.word	0x43415254
    7230:	53415f45 	.word	0x53415f45
    7234:	54524553 	.word	0x54524553
    7238:	5476203a 	.word	0x5476203a
    723c:	65636172 	.word	0x65636172
    7240:	726f7453 	.word	0x726f7453
    7244:	72654b65 	.word	0x72654b65
    7248:	436c656e 	.word	0x436c656e
    724c:	576c6c61 	.word	0x576c6c61
    7250:	50687469 	.word	0x50687469
    7254:	6d617261 	.word	0x6d617261
    7258:	6e49203a 	.word	0x6e49203a
    725c:	696c6176 	.word	0x696c6176
    7260:	61762064 	.word	0x61762064
    7264:	2065756c 	.word	0x2065756c
    7268:	20726f66 	.word	0x20726f66
    726c:	656a626f 	.word	0x656a626f
    7270:	754e7463 	.word	0x754e7463
    7274:	7265626d 	.word	0x7265626d
    7278:	00000000 	.word	0x00000000
    727c:	6f636552 	.word	0x6f636552
    7280:	72656472 	.word	0x72656472
    7284:	73756220 	.word	0x73756220
    7288:	202d2079 	.word	0x202d2079
    728c:	68676968 	.word	0x68676968
    7290:	69727020 	.word	0x69727020
    7294:	7469726f 	.word	0x7469726f
    7298:	53492079 	.word	0x53492079
    729c:	73752052 	.word	0x73752052
    72a0:	20676e69 	.word	0x20676e69
    72a4:	63737973 	.word	0x63737973
    72a8:	3f6c6c61 	.word	0x3f6c6c61
    72ac:	29332820 	.word	0x29332820
    72b0:	00000000 	.word	0x00000000
    72b4:	43415254 	.word	0x43415254
    72b8:	53415f45 	.word	0x53415f45
    72bc:	54524553 	.word	0x54524553
    72c0:	5476203a 	.word	0x5476203a
    72c4:	65636172 	.word	0x65636172
    72c8:	726f7453 	.word	0x726f7453
    72cc:	72654b65 	.word	0x72654b65
    72d0:	436c656e 	.word	0x436c656e
    72d4:	576c6c61 	.word	0x576c6c61
    72d8:	4e687469 	.word	0x4e687469
    72dc:	72656d75 	.word	0x72656d75
    72e0:	61506369 	.word	0x61506369
    72e4:	4f6d6172 	.word	0x4f6d6172
    72e8:	3a796c6e 	.word	0x3a796c6e
    72ec:	766e4920 	.word	0x766e4920
    72f0:	64696c61 	.word	0x64696c61
    72f4:	6c617620 	.word	0x6c617620
    72f8:	66206575 	.word	0x66206575
    72fc:	6520726f 	.word	0x6520726f
    7300:	6f637476 	.word	0x6f637476
    7304:	00006564 	.word	0x00006564
    7308:	6f636552 	.word	0x6f636552
    730c:	72656472 	.word	0x72656472
    7310:	73756220 	.word	0x73756220
    7314:	202d2079 	.word	0x202d2079
    7318:	68676968 	.word	0x68676968
    731c:	69727020 	.word	0x69727020
    7320:	7469726f 	.word	0x7469726f
    7324:	53492079 	.word	0x53492079
    7328:	73752052 	.word	0x73752052
    732c:	20676e69 	.word	0x20676e69
    7330:	63737973 	.word	0x63737973
    7334:	3f6c6c61 	.word	0x3f6c6c61
    7338:	29342820 	.word	0x29342820
    733c:	00000000 	.word	0x00000000
    7340:	43415254 	.word	0x43415254
    7344:	53415f45 	.word	0x53415f45
    7348:	54524553 	.word	0x54524553
    734c:	5476203a 	.word	0x5476203a
    7350:	65636172 	.word	0x65636172
    7354:	726f7453 	.word	0x726f7453
    7358:	6a624f65 	.word	0x6a624f65
    735c:	4e746365 	.word	0x4e746365
    7360:	4f656d61 	.word	0x4f656d61
    7364:	6f6c436e 	.word	0x6f6c436e
    7368:	76456573 	.word	0x76456573
    736c:	3a746e65 	.word	0x3a746e65
    7370:	6a626f20 	.word	0x6a626f20
    7374:	63746365 	.word	0x63746365
    7378:	7373616c 	.word	0x7373616c
    737c:	203d3e20 	.word	0x203d3e20
    7380:	43415254 	.word	0x43415254
    7384:	434e5f45 	.word	0x434e5f45
    7388:	5353414c 	.word	0x5353414c
    738c:	00005345 	.word	0x00005345
    7390:	43415254 	.word	0x43415254
    7394:	53415f45 	.word	0x53415f45
    7398:	54524553 	.word	0x54524553
    739c:	5476203a 	.word	0x5476203a
    73a0:	65636172 	.word	0x65636172
    73a4:	726f7453 	.word	0x726f7453
    73a8:	6a624f65 	.word	0x6a624f65
    73ac:	4e746365 	.word	0x4e746365
    73b0:	4f656d61 	.word	0x4f656d61
    73b4:	6f6c436e 	.word	0x6f6c436e
    73b8:	76456573 	.word	0x76456573
    73bc:	3a746e65 	.word	0x3a746e65
    73c0:	766e4920 	.word	0x766e4920
    73c4:	64696c61 	.word	0x64696c61
    73c8:	6c617620 	.word	0x6c617620
    73cc:	66206575 	.word	0x66206575
    73d0:	6820726f 	.word	0x6820726f
    73d4:	6c646e61 	.word	0x6c646e61
    73d8:	00000065 	.word	0x00000065
    73dc:	43415254 	.word	0x43415254
    73e0:	53415f45 	.word	0x53415f45
    73e4:	54524553 	.word	0x54524553
    73e8:	5476203a 	.word	0x5476203a
    73ec:	65636172 	.word	0x65636172
    73f0:	726f7453 	.word	0x726f7453
    73f4:	6a624f65 	.word	0x6a624f65
    73f8:	50746365 	.word	0x50746365
    73fc:	65706f72 	.word	0x65706f72
    7400:	65697472 	.word	0x65697472
    7404:	436e4f73 	.word	0x436e4f73
    7408:	65736f6c 	.word	0x65736f6c
    740c:	6e657645 	.word	0x6e657645
    7410:	6f203a74 	.word	0x6f203a74
    7414:	63656a62 	.word	0x63656a62
    7418:	616c6374 	.word	0x616c6374
    741c:	3e207373 	.word	0x3e207373
    7420:	5254203d 	.word	0x5254203d
    7424:	5f454341 	.word	0x5f454341
    7428:	414c434e 	.word	0x414c434e
    742c:	53455353 	.word	0x53455353
    7430:	00000000 	.word	0x00000000
    7434:	43415254 	.word	0x43415254
    7438:	53415f45 	.word	0x53415f45
    743c:	54524553 	.word	0x54524553
    7440:	5476203a 	.word	0x5476203a
    7444:	65636172 	.word	0x65636172
    7448:	726f7453 	.word	0x726f7453
    744c:	6a624f65 	.word	0x6a624f65
    7450:	50746365 	.word	0x50746365
    7454:	65706f72 	.word	0x65706f72
    7458:	65697472 	.word	0x65697472
    745c:	436e4f73 	.word	0x436e4f73
    7460:	65736f6c 	.word	0x65736f6c
    7464:	6e657645 	.word	0x6e657645
    7468:	49203a74 	.word	0x49203a74
    746c:	6c61766e 	.word	0x6c61766e
    7470:	76206469 	.word	0x76206469
    7474:	65756c61 	.word	0x65756c61
    7478:	726f6620 	.word	0x726f6620
    747c:	6e616820 	.word	0x6e616820
    7480:	00656c64 	.word	0x00656c64
    7484:	43415254 	.word	0x43415254
    7488:	53415f45 	.word	0x53415f45
    748c:	54524553 	.word	0x54524553
    7490:	5476203a 	.word	0x5476203a
    7494:	65636172 	.word	0x65636172
    7498:	50746553 	.word	0x50746553
    749c:	726f6972 	.word	0x726f6972
    74a0:	50797469 	.word	0x50797469
    74a4:	65706f72 	.word	0x65706f72
    74a8:	3a797472 	.word	0x3a797472
    74ac:	6a626f20 	.word	0x6a626f20
    74b0:	63746365 	.word	0x63746365
    74b4:	7373616c 	.word	0x7373616c
    74b8:	203d3e20 	.word	0x203d3e20
    74bc:	43415254 	.word	0x43415254
    74c0:	434e5f45 	.word	0x434e5f45
    74c4:	5353414c 	.word	0x5353414c
    74c8:	00005345 	.word	0x00005345
    74cc:	43415254 	.word	0x43415254
    74d0:	53415f45 	.word	0x53415f45
    74d4:	54524553 	.word	0x54524553
    74d8:	5476203a 	.word	0x5476203a
    74dc:	65636172 	.word	0x65636172
    74e0:	50746553 	.word	0x50746553
    74e4:	726f6972 	.word	0x726f6972
    74e8:	50797469 	.word	0x50797469
    74ec:	65706f72 	.word	0x65706f72
    74f0:	3a797472 	.word	0x3a797472
    74f4:	766e4920 	.word	0x766e4920
    74f8:	64696c61 	.word	0x64696c61
    74fc:	6c617620 	.word	0x6c617620
    7500:	66206575 	.word	0x66206575
    7504:	6920726f 	.word	0x6920726f
    7508:	00000064 	.word	0x00000064
    750c:	43415254 	.word	0x43415254
    7510:	53415f45 	.word	0x53415f45
    7514:	54524553 	.word	0x54524553
    7518:	6975203a 	.word	0x6975203a
    751c:	63617254 	.word	0x63617254
    7520:	74654765 	.word	0x74654765
    7524:	6f697250 	.word	0x6f697250
    7528:	79746972 	.word	0x79746972
    752c:	706f7250 	.word	0x706f7250
    7530:	79747265 	.word	0x79747265
    7534:	626f203a 	.word	0x626f203a
    7538:	7463656a 	.word	0x7463656a
    753c:	73616c63 	.word	0x73616c63
    7540:	3d3e2073 	.word	0x3d3e2073
    7544:	41525420 	.word	0x41525420
    7548:	4e5f4543 	.word	0x4e5f4543
    754c:	53414c43 	.word	0x53414c43
    7550:	00534553 	.word	0x00534553
    7554:	43415254 	.word	0x43415254
    7558:	53415f45 	.word	0x53415f45
    755c:	54524553 	.word	0x54524553
    7560:	6975203a 	.word	0x6975203a
    7564:	63617254 	.word	0x63617254
    7568:	74654765 	.word	0x74654765
    756c:	6f697250 	.word	0x6f697250
    7570:	79746972 	.word	0x79746972
    7574:	706f7250 	.word	0x706f7250
    7578:	79747265 	.word	0x79747265
    757c:	6e49203a 	.word	0x6e49203a
    7580:	696c6176 	.word	0x696c6176
    7584:	61762064 	.word	0x61762064
    7588:	2065756c 	.word	0x2065756c
    758c:	20726f66 	.word	0x20726f66
    7590:	00006469 	.word	0x00006469
    7594:	43415254 	.word	0x43415254
    7598:	53415f45 	.word	0x53415f45
    759c:	54524553 	.word	0x54524553
    75a0:	5476203a 	.word	0x5476203a
    75a4:	65636172 	.word	0x65636172
    75a8:	4f746553 	.word	0x4f746553
    75ac:	63656a62 	.word	0x63656a62
    75b0:	61745374 	.word	0x61745374
    75b4:	203a6574 	.word	0x203a6574
    75b8:	656a626f 	.word	0x656a626f
    75bc:	6c637463 	.word	0x6c637463
    75c0:	20737361 	.word	0x20737361
    75c4:	54203d3e 	.word	0x54203d3e
    75c8:	45434152 	.word	0x45434152
    75cc:	4c434e5f 	.word	0x4c434e5f
    75d0:	45535341 	.word	0x45535341
    75d4:	00000053 	.word	0x00000053
    75d8:	43415254 	.word	0x43415254
    75dc:	53415f45 	.word	0x53415f45
    75e0:	54524553 	.word	0x54524553
    75e4:	5476203a 	.word	0x5476203a
    75e8:	65636172 	.word	0x65636172
    75ec:	4f746553 	.word	0x4f746553
    75f0:	63656a62 	.word	0x63656a62
    75f4:	61745374 	.word	0x61745374
    75f8:	203a6574 	.word	0x203a6574
    75fc:	61766e49 	.word	0x61766e49
    7600:	2064696c 	.word	0x2064696c
    7604:	756c6176 	.word	0x756c6176
    7608:	6f662065 	.word	0x6f662065
    760c:	64692072 	.word	0x64692072
    7610:	00000000 	.word	0x00000000
    7614:	43415254 	.word	0x43415254
    7618:	53415f45 	.word	0x53415f45
    761c:	54524553 	.word	0x54524553
    7620:	6975203a 	.word	0x6975203a
    7624:	63617254 	.word	0x63617254
    7628:	74654765 	.word	0x74654765
    762c:	656a624f 	.word	0x656a624f
    7630:	74537463 	.word	0x74537463
    7634:	3a657461 	.word	0x3a657461
    7638:	6a626f20 	.word	0x6a626f20
    763c:	63746365 	.word	0x63746365
    7640:	7373616c 	.word	0x7373616c
    7644:	203d3e20 	.word	0x203d3e20
    7648:	43415254 	.word	0x43415254
    764c:	434e5f45 	.word	0x434e5f45
    7650:	5353414c 	.word	0x5353414c
    7654:	00005345 	.word	0x00005345
    7658:	43415254 	.word	0x43415254
    765c:	53415f45 	.word	0x53415f45
    7660:	54524553 	.word	0x54524553
    7664:	6975203a 	.word	0x6975203a
    7668:	63617254 	.word	0x63617254
    766c:	74654765 	.word	0x74654765
    7670:	656a624f 	.word	0x656a624f
    7674:	74537463 	.word	0x74537463
    7678:	3a657461 	.word	0x3a657461
    767c:	766e4920 	.word	0x766e4920
    7680:	64696c61 	.word	0x64696c61
    7684:	6c617620 	.word	0x6c617620
    7688:	66206575 	.word	0x66206575
    768c:	6920726f 	.word	0x6920726f
    7690:	00000064 	.word	0x00000064
    7694:	43415254 	.word	0x43415254
    7698:	53415f45 	.word	0x53415f45
    769c:	54524553 	.word	0x54524553
    76a0:	5476203a 	.word	0x5476203a
    76a4:	65636172 	.word	0x65636172
    76a8:	726f7453 	.word	0x726f7453
    76ac:	73615465 	.word	0x73615465
    76b0:	6977736b 	.word	0x6977736b
    76b4:	3a686374 	.word	0x3a686374
    76b8:	766e4920 	.word	0x766e4920
    76bc:	64696c61 	.word	0x64696c61
    76c0:	6c617620 	.word	0x6c617620
    76c4:	66206575 	.word	0x66206575
    76c8:	7420726f 	.word	0x7420726f
    76cc:	5f6b7361 	.word	0x5f6b7361
    76d0:	646e6168 	.word	0x646e6168
    76d4:	0000656c 	.word	0x0000656c
    76d8:	43415254 	.word	0x43415254
    76dc:	53415f45 	.word	0x53415f45
    76e0:	54524553 	.word	0x54524553
    76e4:	5476203a 	.word	0x5476203a
    76e8:	65636172 	.word	0x65636172
    76ec:	54746553 	.word	0x54746553
    76f0:	496b7361 	.word	0x496b7361
    76f4:	6174736e 	.word	0x6174736e
    76f8:	4665636e 	.word	0x4665636e
    76fc:	73696e69 	.word	0x73696e69
    7700:	3a646568 	.word	0x3a646568
    7704:	766e4920 	.word	0x766e4920
    7708:	64696c61 	.word	0x64696c61
    770c:	6c617620 	.word	0x6c617620
    7710:	66206575 	.word	0x66206575
    7714:	6820726f 	.word	0x6820726f
    7718:	6c646e61 	.word	0x6c646e61
    771c:	00000065 	.word	0x00000065
    7720:	20746f4e 	.word	0x20746f4e
    7724:	756f6e65 	.word	0x756f6e65
    7728:	54206867 	.word	0x54206867
    772c:	204b5341 	.word	0x204b5341
    7730:	646e6168 	.word	0x646e6168
    7734:	2073656c 	.word	0x2073656c
    7738:	6e69202d 	.word	0x6e69202d
    773c:	61657263 	.word	0x61657263
    7740:	4e206573 	.word	0x4e206573
    7744:	6b736154 	.word	0x6b736154
    7748:	206e6920 	.word	0x206e6920
    774c:	43637274 	.word	0x43637274
    7750:	69666e6f 	.word	0x69666e6f
    7754:	00682e67 	.word	0x00682e67
    7758:	20746f4e 	.word	0x20746f4e
    775c:	756f6e65 	.word	0x756f6e65
    7760:	49206867 	.word	0x49206867
    7764:	68205253 	.word	0x68205253
    7768:	6c646e61 	.word	0x6c646e61
    776c:	2d207365 	.word	0x2d207365
    7770:	636e6920 	.word	0x636e6920
    7774:	73616572 	.word	0x73616572
    7778:	494e2065 	.word	0x494e2065
    777c:	69205253 	.word	0x69205253
    7780:	7274206e 	.word	0x7274206e
    7784:	6e6f4363 	.word	0x6e6f4363
    7788:	2e676966 	.word	0x2e676966
    778c:	00000068 	.word	0x00000068
    7790:	20746f4e 	.word	0x20746f4e
    7794:	756f6e65 	.word	0x756f6e65
    7798:	53206867 	.word	0x53206867
    779c:	50414d45 	.word	0x50414d45
    77a0:	45524f48 	.word	0x45524f48
    77a4:	6e616820 	.word	0x6e616820
    77a8:	73656c64 	.word	0x73656c64
    77ac:	69202d20 	.word	0x69202d20
    77b0:	6572636e 	.word	0x6572636e
    77b4:	20657361 	.word	0x20657361
    77b8:	6d65534e 	.word	0x6d65534e
    77bc:	6f687061 	.word	0x6f687061
    77c0:	69206572 	.word	0x69206572
    77c4:	7274206e 	.word	0x7274206e
    77c8:	6e6f4363 	.word	0x6e6f4363
    77cc:	2e676966 	.word	0x2e676966
    77d0:	00000068 	.word	0x00000068
    77d4:	20746f4e 	.word	0x20746f4e
    77d8:	756f6e65 	.word	0x756f6e65
    77dc:	4d206867 	.word	0x4d206867
    77e0:	58455455 	.word	0x58455455
    77e4:	6e616820 	.word	0x6e616820
    77e8:	73656c64 	.word	0x73656c64
    77ec:	69202d20 	.word	0x69202d20
    77f0:	6572636e 	.word	0x6572636e
    77f4:	20657361 	.word	0x20657361
    77f8:	74754d4e 	.word	0x74754d4e
    77fc:	69207865 	.word	0x69207865
    7800:	7274206e 	.word	0x7274206e
    7804:	6e6f4363 	.word	0x6e6f4363
    7808:	2e676966 	.word	0x2e676966
    780c:	00000068 	.word	0x00000068
    7810:	20746f4e 	.word	0x20746f4e
    7814:	756f6e65 	.word	0x756f6e65
    7818:	51206867 	.word	0x51206867
    781c:	45554555 	.word	0x45554555
    7820:	6e616820 	.word	0x6e616820
    7824:	73656c64 	.word	0x73656c64
    7828:	69202d20 	.word	0x69202d20
    782c:	6572636e 	.word	0x6572636e
    7830:	20657361 	.word	0x20657361
    7834:	6575514e 	.word	0x6575514e
    7838:	69206575 	.word	0x69206575
    783c:	7274206e 	.word	0x7274206e
    7840:	6e6f4363 	.word	0x6e6f4363
    7844:	2e676966 	.word	0x2e676966
    7848:	00000068 	.word	0x00000068
    784c:	20746f4e 	.word	0x20746f4e
    7850:	756f6e65 	.word	0x756f6e65
    7854:	54206867 	.word	0x54206867
    7858:	52454d49 	.word	0x52454d49
    785c:	6e616820 	.word	0x6e616820
    7860:	73656c64 	.word	0x73656c64
    7864:	69202d20 	.word	0x69202d20
    7868:	6572636e 	.word	0x6572636e
    786c:	20657361 	.word	0x20657361
    7870:	6d69544e 	.word	0x6d69544e
    7874:	69207265 	.word	0x69207265
    7878:	7274206e 	.word	0x7274206e
    787c:	6e6f4363 	.word	0x6e6f4363
    7880:	2e676966 	.word	0x2e676966
    7884:	00000068 	.word	0x00000068
    7888:	20746f4e 	.word	0x20746f4e
    788c:	756f6e65 	.word	0x756f6e65
    7890:	45206867 	.word	0x45206867
    7894:	544e4556 	.word	0x544e4556
    7898:	554f5247 	.word	0x554f5247
    789c:	61682050 	.word	0x61682050
    78a0:	656c646e 	.word	0x656c646e
    78a4:	202d2073 	.word	0x202d2073
    78a8:	72636e69 	.word	0x72636e69
    78ac:	65736165 	.word	0x65736165
    78b0:	76454e20 	.word	0x76454e20
    78b4:	47746e65 	.word	0x47746e65
    78b8:	70756f72 	.word	0x70756f72
    78bc:	206e6920 	.word	0x206e6920
    78c0:	43637274 	.word	0x43637274
    78c4:	69666e6f 	.word	0x69666e6f
    78c8:	00682e67 	.word	0x00682e67
    78cc:	547a7370 	.word	0x547a7370
    78d0:	65636172 	.word	0x65636172
    78d4:	45746547 	.word	0x45746547
    78d8:	726f7272 	.word	0x726f7272
    78dc:	646e6148 	.word	0x646e6148
    78e0:	3a73656c 	.word	0x3a73656c
    78e4:	766e4920 	.word	0x766e4920
    78e8:	64696c61 	.word	0x64696c61
    78ec:	6a626f20 	.word	0x6a626f20
    78f0:	63746365 	.word	0x63746365
    78f4:	7373616c 	.word	0x7373616c
    78f8:	00000021 	.word	0x00000021
    78fc:	43415254 	.word	0x43415254
    7900:	53415f45 	.word	0x53415f45
    7904:	54524553 	.word	0x54524553
    7908:	7270203a 	.word	0x7270203a
    790c:	61725476 	.word	0x61725476
    7910:	73496563 	.word	0x73496563
    7914:	656a624f 	.word	0x656a624f
    7918:	78457463 	.word	0x78457463
    791c:	64756c63 	.word	0x64756c63
    7920:	203a6465 	.word	0x203a6465
    7924:	656a626f 	.word	0x656a626f
    7928:	6c637463 	.word	0x6c637463
    792c:	20737361 	.word	0x20737361
    7930:	54203d3e 	.word	0x54203d3e
    7934:	45434152 	.word	0x45434152
    7938:	4c434e5f 	.word	0x4c434e5f
    793c:	45535341 	.word	0x45535341
    7940:	00000053 	.word	0x00000053
    7944:	43415254 	.word	0x43415254
    7948:	53415f45 	.word	0x53415f45
    794c:	54524553 	.word	0x54524553
    7950:	6975203a 	.word	0x6975203a
    7954:	63617254 	.word	0x63617254
    7958:	4f734965 	.word	0x4f734965
    795c:	63656a62 	.word	0x63656a62
    7960:	63784574 	.word	0x63784574
    7964:	6564756c 	.word	0x6564756c
    7968:	49203a64 	.word	0x49203a64
    796c:	6c61766e 	.word	0x6c61766e
    7970:	76206469 	.word	0x76206469
    7974:	65756c61 	.word	0x65756c61
    7978:	726f6620 	.word	0x726f6620
    797c:	6e616820 	.word	0x6e616820
    7980:	00656c64 	.word	0x00656c64
    7984:	61766e49 	.word	0x61766e49
    7988:	2064696c 	.word	0x2064696c
    798c:	656a626f 	.word	0x656a626f
    7990:	63207463 	.word	0x63207463
    7994:	7373616c 	.word	0x7373616c
    7998:	20444920 	.word	0x20444920
    799c:	75206e69 	.word	0x75206e69
    79a0:	61725469 	.word	0x61725469
    79a4:	73496563 	.word	0x73496563
    79a8:	656a624f 	.word	0x656a624f
    79ac:	78457463 	.word	0x78457463
    79b0:	64756c63 	.word	0x64756c63
    79b4:	00216465 	.word	0x00216465
    79b8:	43415254 	.word	0x43415254
    79bc:	53415f45 	.word	0x53415f45
    79c0:	54524553 	.word	0x54524553
    79c4:	7277203a 	.word	0x7277203a
    79c8:	49657469 	.word	0x49657469
    79cc:	3233746e 	.word	0x3233746e
    79d0:	7562203a 	.word	0x7562203a
    79d4:	72656666 	.word	0x72656666
    79d8:	203d3d20 	.word	0x203d3d20
    79dc:	4c4c554e 	.word	0x4c4c554e
    79e0:	00000000 	.word	0x00000000
    79e4:	43415254 	.word	0x43415254
    79e8:	53415f45 	.word	0x53415f45
    79ec:	54524553 	.word	0x54524553
    79f0:	7277203a 	.word	0x7277203a
    79f4:	49657469 	.word	0x49657469
    79f8:	3631746e 	.word	0x3631746e
    79fc:	7562203a 	.word	0x7562203a
    7a00:	72656666 	.word	0x72656666
    7a04:	203d3d20 	.word	0x203d3d20
    7a08:	4c4c554e 	.word	0x4c4c554e
    7a0c:	00000000 	.word	0x00000000
    7a10:	6f636552 	.word	0x6f636552
    7a14:	72656472 	.word	0x72656472
    7a18:	61746144 	.word	0x61746144
    7a1c:	20727450 	.word	0x20727450
    7a20:	4e207369 	.word	0x4e207369
    7a24:	2e4c4c55 	.word	0x2e4c4c55
    7a28:	6c614320 	.word	0x6c614320
    7a2c:	5476206c 	.word	0x5476206c
    7a30:	65636172 	.word	0x65636172
    7a34:	74696e49 	.word	0x74696e49
    7a38:	63617254 	.word	0x63617254
    7a3c:	74614465 	.word	0x74614465
    7a40:	20292861 	.word	0x20292861
    7a44:	6f666562 	.word	0x6f666562
    7a48:	73206572 	.word	0x73206572
    7a4c:	74726174 	.word	0x74726174
    7a50:	20676e69 	.word	0x20676e69
    7a54:	63617274 	.word	0x63617274
    7a58:	00002e65 	.word	0x00002e65
    7a5c:	61747328 	.word	0x61747328
    7a60:	70757472 	.word	0x70757472
    7a64:	00000029 	.word	0x00000029
    7a68:	43415254 	.word	0x43415254
    7a6c:	53415f45 	.word	0x53415f45
    7a70:	54524553 	.word	0x54524553
    7a74:	5476203a 	.word	0x5476203a
    7a78:	65636172 	.word	0x65636172
    7a7c:	49746553 	.word	0x49746553
    7a80:	72505253 	.word	0x72505253
    7a84:	7265706f 	.word	0x7265706f
    7a88:	73656974 	.word	0x73656974
    7a8c:	6e49203a 	.word	0x6e49203a
    7a90:	696c6176 	.word	0x696c6176
    7a94:	61762064 	.word	0x61762064
    7a98:	2065756c 	.word	0x2065756c
    7a9c:	20726f66 	.word	0x20726f66
    7aa0:	646e6168 	.word	0x646e6168
    7aa4:	0000656c 	.word	0x0000656c
    7aa8:	43415254 	.word	0x43415254
    7aac:	53415f45 	.word	0x53415f45
    7ab0:	54524553 	.word	0x54524553
    7ab4:	5476203a 	.word	0x5476203a
    7ab8:	65636172 	.word	0x65636172
    7abc:	49746553 	.word	0x49746553
    7ac0:	72505253 	.word	0x72505253
    7ac4:	7265706f 	.word	0x7265706f
    7ac8:	73656974 	.word	0x73656974
    7acc:	616e203a 	.word	0x616e203a
    7ad0:	3d20656d 	.word	0x3d20656d
    7ad4:	554e203d 	.word	0x554e203d
    7ad8:	00004c4c 	.word	0x00004c4c
    7adc:	656c6c49 	.word	0x656c6c49
    7ae0:	206c6167 	.word	0x206c6167
    7ae4:	6c6c6163 	.word	0x6c6c6163
    7ae8:	206f7420 	.word	0x206f7420
    7aec:	61725476 	.word	0x61725476
    7af0:	74536563 	.word	0x74536563
    7af4:	4965726f 	.word	0x4965726f
    7af8:	65425253 	.word	0x65425253
    7afc:	2c6e6967 	.word	0x2c6e6967
    7b00:	63657220 	.word	0x63657220
    7b04:	6564726f 	.word	0x6564726f
    7b08:	75622072 	.word	0x75622072
    7b0c:	00217973 	.word	0x00217973
    7b10:	43415254 	.word	0x43415254
    7b14:	53415f45 	.word	0x53415f45
    7b18:	54524553 	.word	0x54524553
    7b1c:	5476203a 	.word	0x5476203a
    7b20:	65636172 	.word	0x65636172
    7b24:	726f7453 	.word	0x726f7453
    7b28:	52534965 	.word	0x52534965
    7b2c:	69676542 	.word	0x69676542
    7b30:	49203a6e 	.word	0x49203a6e
    7b34:	6c61766e 	.word	0x6c61766e
    7b38:	76206469 	.word	0x76206469
    7b3c:	65756c61 	.word	0x65756c61
    7b40:	726f6620 	.word	0x726f6620
    7b44:	6e616820 	.word	0x6e616820
    7b48:	00656c64 	.word	0x00656c64
    7b4c:	206f6f54 	.word	0x206f6f54
    7b50:	796e616d 	.word	0x796e616d
    7b54:	73656e20 	.word	0x73656e20
    7b58:	20646574 	.word	0x20646574
    7b5c:	65746e69 	.word	0x65746e69
    7b60:	70757272 	.word	0x70757272
    7b64:	00217374 	.word	0x00217374
    7b68:	656c6c49 	.word	0x656c6c49
    7b6c:	206c6167 	.word	0x206c6167
    7b70:	6c6c6163 	.word	0x6c6c6163
    7b74:	206f7420 	.word	0x206f7420
    7b78:	61725476 	.word	0x61725476
    7b7c:	74536563 	.word	0x74536563
    7b80:	4965726f 	.word	0x4965726f
    7b84:	6e455253 	.word	0x6e455253
    7b88:	72202c64 	.word	0x72202c64
    7b8c:	726f6365 	.word	0x726f6365
    7b90:	20726564 	.word	0x20726564
    7b94:	79737562 	.word	0x79737562
    7b98:	00000021 	.word	0x00000021
    7b9c:	616d6e55 	.word	0x616d6e55
    7ba0:	65686374 	.word	0x65686374
    7ba4:	61632064 	.word	0x61632064
    7ba8:	74206c6c 	.word	0x74206c6c
    7bac:	5476206f 	.word	0x5476206f
    7bb0:	65636172 	.word	0x65636172
    7bb4:	726f7453 	.word	0x726f7453
    7bb8:	52534965 	.word	0x52534965
    7bbc:	20646e45 	.word	0x20646e45
    7bc0:	53496e28 	.word	0x53496e28
    7bc4:	74636152 	.word	0x74636152
    7bc8:	20657669 	.word	0x20657669
    7bcc:	30203d3d 	.word	0x30203d3d
    7bd0:	7865202c 	.word	0x7865202c
    7bd4:	74636570 	.word	0x74636570
    7bd8:	3e206465 	.word	0x3e206465
    7bdc:	00293020 	.word	0x00293020
    7be0:	43415254 	.word	0x43415254
    7be4:	53415f45 	.word	0x53415f45
    7be8:	54524553 	.word	0x54524553
    7bec:	5476203a 	.word	0x5476203a
    7bf0:	65636172 	.word	0x65636172
    7bf4:	72657355 	.word	0x72657355
    7bf8:	6e657645 	.word	0x6e657645
    7bfc:	49203a74 	.word	0x49203a74
    7c00:	6c61766e 	.word	0x6c61766e
    7c04:	76206469 	.word	0x76206469
    7c08:	65756c61 	.word	0x65756c61
    7c0c:	726f6620 	.word	0x726f6620
    7c10:	65766520 	.word	0x65766520
    7c14:	614c746e 	.word	0x614c746e
    7c18:	006c6562 	.word	0x006c6562
    7c1c:	43415254 	.word	0x43415254
    7c20:	53415f45 	.word	0x53415f45
    7c24:	54524553 	.word	0x54524553
    7c28:	5478203a 	.word	0x5478203a
    7c2c:	65636172 	.word	0x65636172
    7c30:	6e65704f 	.word	0x6e65704f
    7c34:	6562614c 	.word	0x6562614c
    7c38:	6c203a6c 	.word	0x6c203a6c
    7c3c:	6c656261 	.word	0x6c656261
    7c40:	203d3d20 	.word	0x203d3d20
    7c44:	4c4c554e 	.word	0x4c4c554e
    7c48:	00000000 	.word	0x00000000
    7c4c:	43415254 	.word	0x43415254
    7c50:	53415f45 	.word	0x53415f45
    7c54:	54524553 	.word	0x54524553
    7c58:	5476203a 	.word	0x5476203a
    7c5c:	65636172 	.word	0x65636172
    7c60:	6e697250 	.word	0x6e697250
    7c64:	203a4674 	.word	0x203a4674
    7c68:	6d726f66 	.word	0x6d726f66
    7c6c:	74537461 	.word	0x74537461
    7c70:	3d3d2072 	.word	0x3d3d2072
    7c74:	4c554e20 	.word	0x4c554e20
    7c78:	0000004c 	.word	0x0000004c
    7c7c:	61725476 	.word	0x61725476
    7c80:	72506563 	.word	0x72506563
    7c84:	46746e69 	.word	0x46746e69
    7c88:	54202d20 	.word	0x54202d20
    7c8c:	6d206f6f 	.word	0x6d206f6f
    7c90:	20796e61 	.word	0x20796e61
    7c94:	75677261 	.word	0x75677261
    7c98:	746e656d 	.word	0x746e656d
    7c9c:	6d202c73 	.word	0x6d202c73
    7ca0:	31207861 	.word	0x31207861
    7ca4:	6c612035 	.word	0x6c612035
    7ca8:	65776f6c 	.word	0x65776f6c
    7cac:	00002164 	.word	0x00002164
    7cb0:	61725476 	.word	0x61725476
    7cb4:	72506563 	.word	0x72506563
    7cb8:	46746e69 	.word	0x46746e69
    7cbc:	54202d20 	.word	0x54202d20
    7cc0:	6c206f6f 	.word	0x6c206f6f
    7cc4:	65677261 	.word	0x65677261
    7cc8:	67726120 	.word	0x67726120
    7ccc:	6e656d75 	.word	0x6e656d75
    7cd0:	202c7374 	.word	0x202c7374
    7cd4:	2078616d 	.word	0x2078616d
    7cd8:	62203233 	.word	0x62203233
    7cdc:	20657479 	.word	0x20657479
    7ce0:	6f6c6c61 	.word	0x6f6c6c61
    7ce4:	21646577 	.word	0x21646577
    7ce8:	00000000 	.word	0x00000000
    7cec:	454c4449 	.word	0x454c4449
    7cf0:	00000000 	.word	0x00000000
    7cf4:	20726d54 	.word	0x20726d54
    7cf8:	00637653 	.word	0x00637653
    7cfc:	00000043 	.word	0x00000043

00007d00 <_global_impure_ptr>:
    7d00:	20000020                                 .. 

00007d04 <_init>:
    7d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d06:	46c0      	nop			; (mov r8, r8)
    7d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7d0a:	bc08      	pop	{r3}
    7d0c:	469e      	mov	lr, r3
    7d0e:	4770      	bx	lr

00007d10 <__init_array_start>:
    7d10:	00006909 	.word	0x00006909

00007d14 <__frame_dummy_init_array_entry>:
    7d14:	000000d9                                ....

00007d18 <_fini>:
    7d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d1a:	46c0      	nop			; (mov r8, r8)
    7d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7d1e:	bc08      	pop	{r3}
    7d20:	469e      	mov	lr, r3
    7d22:	4770      	bx	lr

00007d24 <__fini_array_start>:
    7d24:	000000b1 	.word	0x000000b1
