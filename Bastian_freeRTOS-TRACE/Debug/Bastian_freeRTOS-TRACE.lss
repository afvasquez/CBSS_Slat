
Bastian_freeRTOS-TRACE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007e08  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .got          000002cc  00007e08  00007e08  0000fe08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .got.plt      0000000c  000080d4  000080d4  000100d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .relocate     00000448  20000000  000080e0  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00002ab0  20000448  00008528  00018448  2**2
                  ALLOC
  5 .stack        00002000  20002ef8  0000afd8  00018448  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00018448  2**0
                  CONTENTS, READONLY
  7 .comment      0000005b  00000000  00000000  00018470  2**0
                  CONTENTS, READONLY
  8 .debug_info   00025646  00000000  00000000  000184cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003b68  00000000  00000000  0003db11  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000b45b  00000000  00000000  00041679  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000009d8  00000000  00000000  0004cad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000aa0  00000000  00000000  0004d4ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00019cb0  00000000  00000000  0004df4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000100ed  00000000  00000000  00067bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00090a23  00000000  00000000  00077ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001e04  00000000  00000000  0010870c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20004ef8 	.word	0x20004ef8
       4:	00005a49 	.word	0x00005a49
       8:	00005a45 	.word	0x00005a45
       c:	00005a45 	.word	0x00005a45
	...
      2c:	000034cd 	.word	0x000034cd
	...
      38:	00003541 	.word	0x00003541
      3c:	00003585 	.word	0x00003585
      40:	00005a45 	.word	0x00005a45
      44:	00005a45 	.word	0x00005a45
      48:	00005a45 	.word	0x00005a45
      4c:	00005a45 	.word	0x00005a45
      50:	00005a45 	.word	0x00005a45
      54:	00005a45 	.word	0x00005a45
      58:	00005a45 	.word	0x00005a45
      5c:	00005a45 	.word	0x00005a45
      60:	00005a45 	.word	0x00005a45
      64:	00000eb9 	.word	0x00000eb9
      68:	00000ecd 	.word	0x00000ecd
      6c:	00000ee1 	.word	0x00000ee1
      70:	00000ef5 	.word	0x00000ef5
	...
      7c:	00005a45 	.word	0x00005a45
      80:	00005a45 	.word	0x00005a45
      84:	00005a45 	.word	0x00005a45
      88:	00005a45 	.word	0x00005a45
      8c:	00005a45 	.word	0x00005a45
      90:	00005a45 	.word	0x00005a45
	...
      9c:	00005a45 	.word	0x00005a45
      a0:	00005a45 	.word	0x00005a45
      a4:	00005a45 	.word	0x00005a45
      a8:	00005a45 	.word	0x00005a45
      ac:	00005a45 	.word	0x00005a45

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000448 	.word	0x20000448
      d0:	00000000 	.word	0x00000000
      d4:	00007e08 	.word	0x00007e08

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	00007e08 	.word	0x00007e08
     104:	2000044c 	.word	0x2000044c
     108:	00007e08 	.word	0x00007e08
     10c:	00000000 	.word	0x00000000

00000110 <irda_communication_task>:

//#define IRDA_BEACON_PING	(( uint8_t ) 0x01 )		// This is the 
uint8_t irda_comm_state;
uint8_t irda_tx_array[6] = { 0 };
uint8_t irda_rx_array[6] = { 0 };
void irda_communication_task(void) {
     110:	b5f0      	push	{r4, r5, r6, r7, lr}
     112:	4657      	mov	r7, sl
     114:	464e      	mov	r6, r9
     116:	4645      	mov	r5, r8
     118:	b4e0      	push	{r5, r6, r7}
     11a:	b084      	sub	sp, #16
     11c:	4c54      	ldr	r4, [pc, #336]	; (270 <irda_communication_task+0x160>)
     11e:	447c      	add	r4, pc
	
	// Start this task by pinging out
	irda_comm_state = IRDA_SLAT_PING;
     120:	4b54      	ldr	r3, [pc, #336]	; (274 <irda_communication_task+0x164>)
     122:	58e3      	ldr	r3, [r4, r3]
     124:	9302      	str	r3, [sp, #8]
     126:	2301      	movs	r3, #1
     128:	9902      	ldr	r1, [sp, #8]
     12a:	700b      	strb	r3, [r1, #0]
	
	while (1) {
		//port_pin_toggle_output_level(LED_BUSY);
		//vTracePrintF(event_channel, "IRDA: %d", irda_comm_state);
		switch( irda_comm_state )
     12c:	4b51      	ldr	r3, [pc, #324]	; (274 <irda_communication_task+0x164>)
     12e:	58e2      	ldr	r2, [r4, r3]
     130:	4690      	mov	r8, r2
				usart_read_buffer_job( &irda_master, irda_rx_array, 3 );	// Try to get the 3-Byte ping
			break;
			case IRDA_SLAT_FIRST:  // Send the response back and reset
				
				// Send out the ping and wait
				irda_tx_array[0] = 0xBB;
     132:	23bb      	movs	r3, #187	; 0xbb
     134:	469a      	mov	sl, r3
				crc_generate(&irda_tx_array, 4);	// Generate the CRC byte for this packet
				
				//vTracePrintF(event_channel, "Send Resp.");
				
				// Send this data now
				xTimerReset( timer_IrDA_Ping, 0 );
     136:	2500      	movs	r5, #0
	irda_comm_state = IRDA_SLAT_PING;
	
	while (1) {
		//port_pin_toggle_output_level(LED_BUSY);
		//vTracePrintF(event_channel, "IRDA: %d", irda_comm_state);
		switch( irda_comm_state )
     138:	4646      	mov	r6, r8
     13a:	7833      	ldrb	r3, [r6, #0]
     13c:	2b02      	cmp	r3, #2
     13e:	d03d      	beq.n	1bc <irda_communication_task+0xac>
     140:	2b05      	cmp	r3, #5
     142:	d060      	beq.n	206 <irda_communication_task+0xf6>
     144:	2b01      	cmp	r3, #1
     146:	d000      	beq.n	14a <irda_communication_task+0x3a>
     148:	e081      	b.n	24e <irda_communication_task+0x13e>
		{
			case IRDA_SLAT_PING:
				irda_timed_out = pdFALSE;
     14a:	4b4b      	ldr	r3, [pc, #300]	; (278 <irda_communication_task+0x168>)
     14c:	58e3      	ldr	r3, [r4, r3]
     14e:	601d      	str	r5, [r3, #0]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     150:	4b4a      	ldr	r3, [pc, #296]	; (27c <irda_communication_task+0x16c>)
     152:	2280      	movs	r2, #128	; 0x80
     154:	0492      	lsls	r2, r2, #18
     156:	615a      	str	r2, [r3, #20]
     158:	2280      	movs	r2, #128	; 0x80
     15a:	0512      	lsls	r2, r2, #20
     15c:	615a      	str	r2, [r3, #20]
				port_pin_set_output_level(LED_ERROR, pdFALSE);
				port_pin_set_output_level(LED_BUSY, pdFALSE);
				
				// Start the necessary timers 
				//vTracePrintF(event_channel, "Rx Request.");
				xTimerReset( timer_IrDA_Ping, 0 );
     15e:	4b48      	ldr	r3, [pc, #288]	; (280 <irda_communication_task+0x170>)
     160:	58e3      	ldr	r3, [r4, r3]
     162:	681e      	ldr	r6, [r3, #0]
     164:	4b47      	ldr	r3, [pc, #284]	; (284 <irda_communication_task+0x174>)
     166:	58e3      	ldr	r3, [r4, r3]
     168:	4798      	blx	r3
     16a:	1c02      	adds	r2, r0, #0
     16c:	9500      	str	r5, [sp, #0]
     16e:	1c30      	adds	r0, r6, #0
     170:	2102      	movs	r1, #2
     172:	1c2b      	adds	r3, r5, #0
     174:	4e44      	ldr	r6, [pc, #272]	; (288 <irda_communication_task+0x178>)
     176:	59a6      	ldr	r6, [r4, r6]
     178:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     17a:	4b44      	ldr	r3, [pc, #272]	; (28c <irda_communication_task+0x17c>)
     17c:	58e3      	ldr	r3, [r4, r3]
     17e:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     180:	69d1      	ldr	r1, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     182:	2900      	cmp	r1, #0
     184:	d1fc      	bne.n	180 <irda_communication_task+0x70>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
     186:	6851      	ldr	r1, [r2, #4]
     188:	2380      	movs	r3, #128	; 0x80
     18a:	029b      	lsls	r3, r3, #10
     18c:	430b      	orrs	r3, r1
     18e:	6053      	str	r3, [r2, #4]
			module->receiver_enabled = true;
     190:	4b3e      	ldr	r3, [pc, #248]	; (28c <irda_communication_task+0x17c>)
     192:	58e3      	ldr	r3, [r4, r3]
     194:	9302      	str	r3, [sp, #8]
     196:	2301      	movs	r3, #1
     198:	9f02      	ldr	r7, [sp, #8]
     19a:	71bb      	strb	r3, [r7, #6]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     19c:	69d1      	ldr	r1, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     19e:	2900      	cmp	r1, #0
     1a0:	d1fc      	bne.n	19c <irda_communication_task+0x8c>
				//xTimerReset( timer_IrDA_Sync, 0 );	// Reset, immediately, the syncing timers
				
				usart_enable_transceiver( &irda_master, USART_TRANSCEIVER_RX );	// Enable Receiving Transceiver
				usart_read_buffer_job( &irda_master, irda_rx_array, 3 );	// Try to get the 3-Byte ping
     1a2:	4b3a      	ldr	r3, [pc, #232]	; (28c <irda_communication_task+0x17c>)
     1a4:	58e3      	ldr	r3, [r4, r3]
     1a6:	9302      	str	r3, [sp, #8]
     1a8:	4b39      	ldr	r3, [pc, #228]	; (290 <irda_communication_task+0x180>)
     1aa:	58e3      	ldr	r3, [r4, r3]
     1ac:	9303      	str	r3, [sp, #12]
     1ae:	9802      	ldr	r0, [sp, #8]
     1b0:	1c19      	adds	r1, r3, #0
     1b2:	2203      	movs	r2, #3
     1b4:	4b37      	ldr	r3, [pc, #220]	; (294 <irda_communication_task+0x184>)
     1b6:	58e3      	ldr	r3, [r4, r3]
     1b8:	4798      	blx	r3
			break;
     1ba:	e048      	b.n	24e <irda_communication_task+0x13e>
			case IRDA_SLAT_FIRST:  // Send the response back and reset
				
				// Send out the ping and wait
				irda_tx_array[0] = 0xBB;
     1bc:	4b36      	ldr	r3, [pc, #216]	; (298 <irda_communication_task+0x188>)
     1be:	58e6      	ldr	r6, [r4, r3]
     1c0:	4651      	mov	r1, sl
     1c2:	7031      	strb	r1, [r6, #0]
				irda_tx_array[1] = 0xBB;
     1c4:	7071      	strb	r1, [r6, #1]
				irda_tx_array[2] = 0xBB;
     1c6:	70b1      	strb	r1, [r6, #2]
				irda_tx_array[3] = 0xBB;
     1c8:	70f1      	strb	r1, [r6, #3]
				//irda_tx_array[4] = 0xBB;
				
				crc_generate(&irda_tx_array, 4);	// Generate the CRC byte for this packet
     1ca:	1c30      	adds	r0, r6, #0
     1cc:	2104      	movs	r1, #4
     1ce:	4b33      	ldr	r3, [pc, #204]	; (29c <irda_communication_task+0x18c>)
     1d0:	58e3      	ldr	r3, [r4, r3]
     1d2:	4798      	blx	r3
				
				//vTracePrintF(event_channel, "Send Resp.");
				
				// Send this data now
				xTimerReset( timer_IrDA_Ping, 0 );
     1d4:	4b2a      	ldr	r3, [pc, #168]	; (280 <irda_communication_task+0x170>)
     1d6:	58e3      	ldr	r3, [r4, r3]
     1d8:	681a      	ldr	r2, [r3, #0]
     1da:	4691      	mov	r9, r2
     1dc:	4b29      	ldr	r3, [pc, #164]	; (284 <irda_communication_task+0x174>)
     1de:	58e3      	ldr	r3, [r4, r3]
     1e0:	4798      	blx	r3
     1e2:	1c02      	adds	r2, r0, #0
     1e4:	9500      	str	r5, [sp, #0]
     1e6:	4648      	mov	r0, r9
     1e8:	2102      	movs	r1, #2
     1ea:	1c2b      	adds	r3, r5, #0
     1ec:	4f26      	ldr	r7, [pc, #152]	; (288 <irda_communication_task+0x178>)
     1ee:	59e7      	ldr	r7, [r4, r7]
     1f0:	47b8      	blx	r7
				usart_write_buffer_job(&irda_master, irda_tx_array, 5);
     1f2:	4b26      	ldr	r3, [pc, #152]	; (28c <irda_communication_task+0x17c>)
     1f4:	58e3      	ldr	r3, [r4, r3]
     1f6:	9302      	str	r3, [sp, #8]
     1f8:	1c18      	adds	r0, r3, #0
     1fa:	1c31      	adds	r1, r6, #0
     1fc:	2205      	movs	r2, #5
     1fe:	4b28      	ldr	r3, [pc, #160]	; (2a0 <irda_communication_task+0x190>)
     200:	58e3      	ldr	r3, [r4, r3]
     202:	4798      	blx	r3
			break;
     204:	e023      	b.n	24e <irda_communication_task+0x13e>
			case IRDA_SLAT_STAGE_7A:
				// Post r010716-1818:: This stage sends the next message 0xDD
				// Send out the ping and wait
				irda_tx_array[0] = 0xDD;
     206:	4b24      	ldr	r3, [pc, #144]	; (298 <irda_communication_task+0x188>)
     208:	58e6      	ldr	r6, [r4, r3]
     20a:	23dd      	movs	r3, #221	; 0xdd
     20c:	7033      	strb	r3, [r6, #0]
				irda_tx_array[1] = 0xDD;
     20e:	7073      	strb	r3, [r6, #1]
				irda_tx_array[2] = 0xDD;
     210:	70b3      	strb	r3, [r6, #2]
				irda_tx_array[3] = 0xDD;
     212:	70f3      	strb	r3, [r6, #3]
				//irda_tx_array[4] = 0xDD;
				
				crc_generate(&irda_tx_array, 4);	// Generate the CRC byte for this packet
     214:	1c30      	adds	r0, r6, #0
     216:	2104      	movs	r1, #4
     218:	4b20      	ldr	r3, [pc, #128]	; (29c <irda_communication_task+0x18c>)
     21a:	58e3      	ldr	r3, [r4, r3]
     21c:	4798      	blx	r3
				
				//vTracePrintF(event_channel, "Send Resp.");
				
				// Send this data now
				xTimerReset( timer_IrDA_Ping, 0 );
     21e:	4b18      	ldr	r3, [pc, #96]	; (280 <irda_communication_task+0x170>)
     220:	58e3      	ldr	r3, [r4, r3]
     222:	6819      	ldr	r1, [r3, #0]
     224:	4689      	mov	r9, r1
     226:	4b17      	ldr	r3, [pc, #92]	; (284 <irda_communication_task+0x174>)
     228:	58e3      	ldr	r3, [r4, r3]
     22a:	4798      	blx	r3
     22c:	1c02      	adds	r2, r0, #0
     22e:	9500      	str	r5, [sp, #0]
     230:	4648      	mov	r0, r9
     232:	2102      	movs	r1, #2
     234:	1c2b      	adds	r3, r5, #0
     236:	4f14      	ldr	r7, [pc, #80]	; (288 <irda_communication_task+0x178>)
     238:	59e7      	ldr	r7, [r4, r7]
     23a:	47b8      	blx	r7
				usart_write_buffer_job(&irda_master, irda_tx_array, 5);
     23c:	4b13      	ldr	r3, [pc, #76]	; (28c <irda_communication_task+0x17c>)
     23e:	58e3      	ldr	r3, [r4, r3]
     240:	9302      	str	r3, [sp, #8]
     242:	1c18      	adds	r0, r3, #0
     244:	1c31      	adds	r1, r6, #0
     246:	2205      	movs	r2, #5
     248:	4b15      	ldr	r3, [pc, #84]	; (2a0 <irda_communication_task+0x190>)
     24a:	58e3      	ldr	r3, [r4, r3]
     24c:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     24e:	4b15      	ldr	r3, [pc, #84]	; (2a4 <irda_communication_task+0x194>)
     250:	58e6      	ldr	r6, [r4, r3]
     252:	2301      	movs	r3, #1
     254:	7033      	strb	r3, [r6, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     256:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     25a:	b662      	cpsie	i
			break;
		}
		
		system_interrupt_enable_global();
		vTaskSuspend( NULL );
     25c:	1c28      	adds	r0, r5, #0
     25e:	4b12      	ldr	r3, [pc, #72]	; (2a8 <irda_communication_task+0x198>)
     260:	58e3      	ldr	r3, [r4, r3]
     262:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     264:	b672      	cpsid	i
     266:	f3bf 8f5f 	dmb	sy
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
	cpu_irq_disable();
     26a:	7035      	strb	r5, [r6, #0]
     26c:	e764      	b.n	138 <irda_communication_task+0x28>
     26e:	46c0      	nop			; (mov r8, r8)
     270:	00007ce6 	.word	0x00007ce6
     274:	0000010c 	.word	0x0000010c
     278:	000001b0 	.word	0x000001b0
     27c:	41004400 	.word	0x41004400
     280:	00000198 	.word	0x00000198
     284:	00000104 	.word	0x00000104
     288:	00000184 	.word	0x00000184
     28c:	00000188 	.word	0x00000188
     290:	00000040 	.word	0x00000040
     294:	00000218 	.word	0x00000218
     298:	000000cc 	.word	0x000000cc
     29c:	000001d0 	.word	0x000001d0
     2a0:	00000290 	.word	0x00000290
     2a4:	000000bc 	.word	0x000000bc
     2a8:	0000018c 	.word	0x0000018c

000002ac <timer_irda_ping_callback>:
}


// vTracePrintF(event_channel, "IrDA Reset!");
void timer_irda_ping_callback(TimerHandle_t pxTimer) 
{
     2ac:	b510      	push	{r4, lr}
     2ae:	b082      	sub	sp, #8
     2b0:	4c25      	ldr	r4, [pc, #148]	; (348 <timer_irda_ping_callback+0x9c>)
     2b2:	447c      	add	r4, pc
     2b4:	b672      	cpsid	i
     2b6:	f3bf 8f5f 	dmb	sy
     2ba:	4b24      	ldr	r3, [pc, #144]	; (34c <timer_irda_ping_callback+0xa0>)
     2bc:	58e3      	ldr	r3, [r4, r3]
     2be:	9301      	str	r3, [sp, #4]
     2c0:	2300      	movs	r3, #0
     2c2:	9a01      	ldr	r2, [sp, #4]
     2c4:	7013      	strb	r3, [r2, #0]
	system_interrupt_disable_global();
	
	configASSERT( pxTimer );
     2c6:	2800      	cmp	r0, #0
     2c8:	d101      	bne.n	2ce <timer_irda_ping_callback+0x22>
     2ca:	b672      	cpsid	i
     2cc:	e7fe      	b.n	2cc <timer_irda_ping_callback+0x20>
	
	switch ( irda_comm_state ) {
     2ce:	4b20      	ldr	r3, [pc, #128]	; (350 <timer_irda_ping_callback+0xa4>)
     2d0:	58e3      	ldr	r3, [r4, r3]
     2d2:	7818      	ldrb	r0, [r3, #0]
     2d4:	3801      	subs	r0, #1
     2d6:	2805      	cmp	r0, #5
     2d8:	d82b      	bhi.n	332 <timer_irda_ping_callback+0x86>
     2da:	f006 f92d 	bl	6538 <__gnu_thumb1_case_uqi>
     2de:	2a09      	.short	0x2a09
     2e0:	03032a03 	.word	0x03032a03
			// r010716-1608: IRDA_SLAT_FIRST_RESPONSE T.O. code
		case IRDA_SLAT_FIRST_RESPONSE:
		case IRDA_SLAT_STAGE_7A:
		case IRDA_SLAT_STAGE_7B:
			irda_comm_state = IRDA_SLAT_PING;	// Go back to the Ping Mode
     2e4:	4b1a      	ldr	r3, [pc, #104]	; (350 <timer_irda_ping_callback+0xa4>)
     2e6:	58e3      	ldr	r3, [r4, r3]
     2e8:	9301      	str	r3, [sp, #4]
     2ea:	2301      	movs	r3, #1
     2ec:	9a01      	ldr	r2, [sp, #4]
     2ee:	7013      	strb	r3, [r2, #0]
		case IRDA_SLAT_PING:
			irda_timed_out = pdTRUE;
     2f0:	4b18      	ldr	r3, [pc, #96]	; (354 <timer_irda_ping_callback+0xa8>)
     2f2:	58e3      	ldr	r3, [r4, r3]
     2f4:	2201      	movs	r2, #1
     2f6:	601a      	str	r2, [r3, #0]
			
			vTracePrintF(event_channel, "Ping TO!");
     2f8:	4b17      	ldr	r3, [pc, #92]	; (358 <timer_irda_ping_callback+0xac>)
     2fa:	58e3      	ldr	r3, [r4, r3]
     2fc:	8818      	ldrh	r0, [r3, #0]
     2fe:	4917      	ldr	r1, [pc, #92]	; (35c <timer_irda_ping_callback+0xb0>)
     300:	4479      	add	r1, pc
     302:	4b17      	ldr	r3, [pc, #92]	; (360 <timer_irda_ping_callback+0xb4>)
     304:	58e3      	ldr	r3, [r4, r3]
     306:	4798      	blx	r3
     308:	4b16      	ldr	r3, [pc, #88]	; (364 <timer_irda_ping_callback+0xb8>)
     30a:	2280      	movs	r2, #128	; 0x80
     30c:	0492      	lsls	r2, r2, #18
     30e:	615a      	str	r2, [r3, #20]
     310:	2280      	movs	r2, #128	; 0x80
     312:	0512      	lsls	r2, r2, #20
     314:	615a      	str	r2, [r3, #20]
			port_pin_set_output_level(LED_ERROR, pdFALSE);
			
			port_pin_set_output_level(LED_BUSY, pdFALSE);
			// There was no significant response to the ping,
			// Reset accordingly
			usart_abort_job( &irda_master, USART_TRANSCEIVER_RX );
     316:	4b14      	ldr	r3, [pc, #80]	; (368 <timer_irda_ping_callback+0xbc>)
     318:	58e3      	ldr	r3, [r4, r3]
     31a:	9301      	str	r3, [sp, #4]
     31c:	1c18      	adds	r0, r3, #0
     31e:	2100      	movs	r1, #0
     320:	4b12      	ldr	r3, [pc, #72]	; (36c <timer_irda_ping_callback+0xc0>)
     322:	58e3      	ldr	r3, [r4, r3]
     324:	4798      	blx	r3
			
			// The IrDA task is now to reset and ping again
			vTaskResume( irda_task_handler );
     326:	4b12      	ldr	r3, [pc, #72]	; (370 <timer_irda_ping_callback+0xc4>)
     328:	58e3      	ldr	r3, [r4, r3]
     32a:	6818      	ldr	r0, [r3, #0]
     32c:	4b11      	ldr	r3, [pc, #68]	; (374 <timer_irda_ping_callback+0xc8>)
     32e:	58e3      	ldr	r3, [r4, r3]
     330:	4798      	blx	r3
     332:	b672      	cpsid	i
     334:	f3bf 8f5f 	dmb	sy
     338:	4b04      	ldr	r3, [pc, #16]	; (34c <timer_irda_ping_callback+0xa0>)
     33a:	58e3      	ldr	r3, [r4, r3]
     33c:	9301      	str	r3, [sp, #4]
     33e:	2300      	movs	r3, #0
     340:	9a01      	ldr	r2, [sp, #4]
     342:	7013      	strb	r3, [r2, #0]
		break;
	}	
	
	system_interrupt_disable_global();
}
     344:	b002      	add	sp, #8
     346:	bd10      	pop	{r4, pc}
     348:	00007b52 	.word	0x00007b52
     34c:	000000bc 	.word	0x000000bc
     350:	0000010c 	.word	0x0000010c
     354:	000001b0 	.word	0x000001b0
     358:	000000f0 	.word	0x000000f0
     35c:	00006804 	.word	0x00006804
     360:	000002c0 	.word	0x000002c0
     364:	41004400 	.word	0x41004400
     368:	00000188 	.word	0x00000188
     36c:	00000048 	.word	0x00000048
     370:	000001d8 	.word	0x000001d8
     374:	00000168 	.word	0x00000168

00000378 <get_system_address>:
	configASSERT( pxTimer );
	
	
}

void get_system_address(void) {
     378:	b082      	sub	sp, #8
     37a:	4b2d      	ldr	r3, [pc, #180]	; (430 <get_system_address+0xb8>)
     37c:	447b      	add	r3, pc
	slat.system_address = 0x00;
     37e:	4a2d      	ldr	r2, [pc, #180]	; (434 <get_system_address+0xbc>)
     380:	589a      	ldr	r2, [r3, r2]
     382:	9201      	str	r2, [sp, #4]
     384:	2200      	movs	r2, #0
     386:	9901      	ldr	r1, [sp, #4]
     388:	700a      	strb	r2, [r1, #0]
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     38a:	4a2b      	ldr	r2, [pc, #172]	; (438 <get_system_address+0xc0>)
     38c:	6a12      	ldr	r2, [r2, #32]
	
	if ( port_pin_get_input_level(ADDR_BIT_7) ) {
     38e:	0411      	lsls	r1, r2, #16
     390:	d505      	bpl.n	39e <get_system_address+0x26>
		slat.system_address = slat.system_address | 0b10000000;
     392:	4a28      	ldr	r2, [pc, #160]	; (434 <get_system_address+0xbc>)
     394:	589a      	ldr	r2, [r3, r2]
     396:	7810      	ldrb	r0, [r2, #0]
     398:	2180      	movs	r1, #128	; 0x80
     39a:	4301      	orrs	r1, r0
     39c:	7011      	strb	r1, [r2, #0]
     39e:	4a26      	ldr	r2, [pc, #152]	; (438 <get_system_address+0xc0>)
     3a0:	6a12      	ldr	r2, [r2, #32]
	}
	
	if ( port_pin_get_input_level(ADDR_BIT_6) ) {
     3a2:	0751      	lsls	r1, r2, #29
     3a4:	d505      	bpl.n	3b2 <get_system_address+0x3a>
		slat.system_address = slat.system_address | 0b01000000;
     3a6:	4a23      	ldr	r2, [pc, #140]	; (434 <get_system_address+0xbc>)
     3a8:	589a      	ldr	r2, [r3, r2]
     3aa:	7810      	ldrb	r0, [r2, #0]
     3ac:	2140      	movs	r1, #64	; 0x40
     3ae:	4301      	orrs	r1, r0
     3b0:	7011      	strb	r1, [r2, #0]
     3b2:	4a21      	ldr	r2, [pc, #132]	; (438 <get_system_address+0xc0>)
     3b4:	6a12      	ldr	r2, [r2, #32]
	}
	
	if ( port_pin_get_input_level(ADDR_BIT_5) ) {
     3b6:	0711      	lsls	r1, r2, #28
     3b8:	d505      	bpl.n	3c6 <get_system_address+0x4e>
		slat.system_address = slat.system_address | 0b00100000;
     3ba:	4a1e      	ldr	r2, [pc, #120]	; (434 <get_system_address+0xbc>)
     3bc:	589a      	ldr	r2, [r3, r2]
     3be:	7810      	ldrb	r0, [r2, #0]
     3c0:	2120      	movs	r1, #32
     3c2:	4301      	orrs	r1, r0
     3c4:	7011      	strb	r1, [r2, #0]
     3c6:	4a1c      	ldr	r2, [pc, #112]	; (438 <get_system_address+0xc0>)
     3c8:	6a12      	ldr	r2, [r2, #32]
	}
	
	if ( port_pin_get_input_level(ADDR_BIT_4) ) {
     3ca:	06d1      	lsls	r1, r2, #27
     3cc:	d505      	bpl.n	3da <get_system_address+0x62>
		slat.system_address = slat.system_address | 0b00010000;
     3ce:	4a19      	ldr	r2, [pc, #100]	; (434 <get_system_address+0xbc>)
     3d0:	589a      	ldr	r2, [r3, r2]
     3d2:	7810      	ldrb	r0, [r2, #0]
     3d4:	2110      	movs	r1, #16
     3d6:	4301      	orrs	r1, r0
     3d8:	7011      	strb	r1, [r2, #0]
     3da:	4a17      	ldr	r2, [pc, #92]	; (438 <get_system_address+0xc0>)
     3dc:	6a12      	ldr	r2, [r2, #32]
	}
	
	if ( port_pin_get_input_level(ADDR_BIT_3) ) {
     3de:	0691      	lsls	r1, r2, #26
     3e0:	d505      	bpl.n	3ee <get_system_address+0x76>
		slat.system_address = slat.system_address | 0b00001000;
     3e2:	4a14      	ldr	r2, [pc, #80]	; (434 <get_system_address+0xbc>)
     3e4:	589a      	ldr	r2, [r3, r2]
     3e6:	7810      	ldrb	r0, [r2, #0]
     3e8:	2108      	movs	r1, #8
     3ea:	4301      	orrs	r1, r0
     3ec:	7011      	strb	r1, [r2, #0]
     3ee:	4a12      	ldr	r2, [pc, #72]	; (438 <get_system_address+0xc0>)
     3f0:	6a12      	ldr	r2, [r2, #32]
	}
	
	if ( port_pin_get_input_level(ADDR_BIT_2) ) {
     3f2:	0651      	lsls	r1, r2, #25
     3f4:	d505      	bpl.n	402 <get_system_address+0x8a>
		slat.system_address = slat.system_address | 0b00000100;
     3f6:	4a0f      	ldr	r2, [pc, #60]	; (434 <get_system_address+0xbc>)
     3f8:	589a      	ldr	r2, [r3, r2]
     3fa:	7810      	ldrb	r0, [r2, #0]
     3fc:	2104      	movs	r1, #4
     3fe:	4301      	orrs	r1, r0
     400:	7011      	strb	r1, [r2, #0]
     402:	4a0d      	ldr	r2, [pc, #52]	; (438 <get_system_address+0xc0>)
     404:	6a12      	ldr	r2, [r2, #32]
	}
	
	if ( port_pin_get_input_level(ADDR_BIT_1) ) {
     406:	0611      	lsls	r1, r2, #24
     408:	d505      	bpl.n	416 <get_system_address+0x9e>
		slat.system_address = slat.system_address | 0b00000010;
     40a:	4a0a      	ldr	r2, [pc, #40]	; (434 <get_system_address+0xbc>)
     40c:	589a      	ldr	r2, [r3, r2]
     40e:	7810      	ldrb	r0, [r2, #0]
     410:	2102      	movs	r1, #2
     412:	4301      	orrs	r1, r0
     414:	7011      	strb	r1, [r2, #0]
     416:	4a08      	ldr	r2, [pc, #32]	; (438 <get_system_address+0xc0>)
     418:	6a12      	ldr	r2, [r2, #32]
	}
	
	if ( port_pin_get_input_level(ADDR_BIT_0) ) {
     41a:	00d1      	lsls	r1, r2, #3
     41c:	d505      	bpl.n	42a <get_system_address+0xb2>
		slat.system_address = slat.system_address | 0b00000001;
     41e:	4a05      	ldr	r2, [pc, #20]	; (434 <get_system_address+0xbc>)
     420:	589b      	ldr	r3, [r3, r2]
     422:	7819      	ldrb	r1, [r3, #0]
     424:	2201      	movs	r2, #1
     426:	430a      	orrs	r2, r1
     428:	701a      	strb	r2, [r3, #0]
	}
     42a:	b002      	add	sp, #8
     42c:	4770      	bx	lr
     42e:	46c0      	nop			; (mov r8, r8)
     430:	00007a88 	.word	0x00007a88
     434:	00000034 	.word	0x00000034
     438:	41004400 	.word	0x41004400

0000043c <main>:
traceLabel event_channel;

//struct tc_module tc_instance;

int main(void)
{
     43c:	b5f0      	push	{r4, r5, r6, r7, lr}
     43e:	4647      	mov	r7, r8
     440:	b480      	push	{r7}
     442:	b088      	sub	sp, #32
     444:	4c3e      	ldr	r4, [pc, #248]	; (540 <main+0x104>)
     446:	447c      	add	r4, pc
    /* Initialize the SAM system */
	system_init();
     448:	4b3e      	ldr	r3, [pc, #248]	; (544 <main+0x108>)
     44a:	58e3      	ldr	r3, [r4, r3]
     44c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     44e:	2201      	movs	r2, #1
     450:	4690      	mov	r8, r2
     452:	ad07      	add	r5, sp, #28
     454:	706a      	strb	r2, [r5, #1]
	config->powersave  = false;
     456:	2700      	movs	r7, #0
     458:	70af      	strb	r7, [r5, #2]
	//////////////////////////////////////////////////////////////////////////
	// Set the LED outputs for this board.
	struct port_config led_out;
	port_get_config_defaults(&led_out);
	
	led_out.direction = PORT_PIN_DIR_OUTPUT;
     45a:	702a      	strb	r2, [r5, #0]
	port_pin_set_config(LED_BUSY, &led_out);
     45c:	201b      	movs	r0, #27
     45e:	1c29      	adds	r1, r5, #0
     460:	4b39      	ldr	r3, [pc, #228]	; (548 <main+0x10c>)
     462:	58e6      	ldr	r6, [r4, r3]
     464:	47b0      	blx	r6
	port_pin_set_config(LED_ERROR, &led_out);
     466:	2019      	movs	r0, #25
     468:	1c29      	adds	r1, r5, #0
     46a:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     46c:	ad06      	add	r5, sp, #24
     46e:	702f      	strb	r7, [r5, #0]
	config->input_pull = PORT_PIN_PULL_UP;
	config->powersave  = false;
     470:	70af      	strb	r7, [r5, #2]
	
	struct port_config sw_input;
	port_get_config_defaults(&sw_input);
	
	sw_input.direction = PORT_PIN_DIR_INPUT;
	sw_input.input_pull = PORT_PIN_PULL_DOWN;
     472:	2302      	movs	r3, #2
     474:	706b      	strb	r3, [r5, #1]
	
	// Set the pins for determining the address of the slat
	port_pin_set_config(ADDR_BIT_0, &sw_input);
     476:	201c      	movs	r0, #28
     478:	1c29      	adds	r1, r5, #0
     47a:	47b0      	blx	r6
	port_pin_set_config(ADDR_BIT_1, &sw_input);
     47c:	2007      	movs	r0, #7
     47e:	1c29      	adds	r1, r5, #0
     480:	47b0      	blx	r6
	port_pin_set_config(ADDR_BIT_2, &sw_input);
     482:	2006      	movs	r0, #6
     484:	1c29      	adds	r1, r5, #0
     486:	47b0      	blx	r6
	port_pin_set_config(ADDR_BIT_3, &sw_input);
     488:	2005      	movs	r0, #5
     48a:	1c29      	adds	r1, r5, #0
     48c:	47b0      	blx	r6
	port_pin_set_config(ADDR_BIT_4, &sw_input);
     48e:	2004      	movs	r0, #4
     490:	1c29      	adds	r1, r5, #0
     492:	47b0      	blx	r6
	port_pin_set_config(ADDR_BIT_5, &sw_input);
     494:	2003      	movs	r0, #3
     496:	1c29      	adds	r1, r5, #0
     498:	47b0      	blx	r6
	port_pin_set_config(ADDR_BIT_6, &sw_input);
     49a:	2002      	movs	r0, #2
     49c:	1c29      	adds	r1, r5, #0
     49e:	47b0      	blx	r6
	port_pin_set_config(ADDR_BIT_7, &sw_input);
     4a0:	200f      	movs	r0, #15
     4a2:	1c29      	adds	r1, r5, #0
     4a4:	47b0      	blx	r6
	port_pin_set_config(ADDR_BIT_8, &sw_input);
     4a6:	200e      	movs	r0, #14
     4a8:	1c29      	adds	r1, r5, #0
     4aa:	47b0      	blx	r6
	//////////////////////////////////////////////////////////////////////////
	//	Obtain the slat address
	get_system_address();
     4ac:	4b27      	ldr	r3, [pc, #156]	; (54c <main+0x110>)
     4ae:	58e3      	ldr	r3, [r4, r3]
     4b0:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	// Start the IrDA communication port
	bastian_IrDA_configuration();
     4b2:	4b27      	ldr	r3, [pc, #156]	; (550 <main+0x114>)
     4b4:	58e3      	ldr	r3, [r4, r3]
     4b6:	4798      	blx	r3
	
	// Start the trace logger
	vTraceInitTraceData();
     4b8:	4b26      	ldr	r3, [pc, #152]	; (554 <main+0x118>)
     4ba:	58e3      	ldr	r3, [r4, r3]
     4bc:	4798      	blx	r3
	
	
	
	/* Initialization code - create the channel label for a VTracePrintF*/
	event_channel = xTraceOpenLabel("Debug");
     4be:	4826      	ldr	r0, [pc, #152]	; (558 <main+0x11c>)
     4c0:	4478      	add	r0, pc
     4c2:	4b26      	ldr	r3, [pc, #152]	; (55c <main+0x120>)
     4c4:	58e3      	ldr	r3, [r4, r3]
     4c6:	4798      	blx	r3
     4c8:	4b25      	ldr	r3, [pc, #148]	; (560 <main+0x124>)
     4ca:	58e3      	ldr	r3, [r4, r3]
     4cc:	8018      	strh	r0, [r3, #0]

	
	
	// Create the task
	xTaskCreate(irda_communication_task,
     4ce:	4b25      	ldr	r3, [pc, #148]	; (564 <main+0x128>)
     4d0:	58e3      	ldr	r3, [r4, r3]
     4d2:	9304      	str	r3, [sp, #16]
     4d4:	2303      	movs	r3, #3
     4d6:	9300      	str	r3, [sp, #0]
     4d8:	4b23      	ldr	r3, [pc, #140]	; (568 <main+0x12c>)
     4da:	58e3      	ldr	r3, [r4, r3]
     4dc:	9301      	str	r3, [sp, #4]
     4de:	9702      	str	r7, [sp, #8]
     4e0:	9703      	str	r7, [sp, #12]
     4e2:	9804      	ldr	r0, [sp, #16]
     4e4:	4921      	ldr	r1, [pc, #132]	; (56c <main+0x130>)
     4e6:	4479      	add	r1, pc
     4e8:	22d2      	movs	r2, #210	; 0xd2
     4ea:	0052      	lsls	r2, r2, #1
     4ec:	2300      	movs	r3, #0
     4ee:	4d20      	ldr	r5, [pc, #128]	; (570 <main+0x134>)
     4f0:	5965      	ldr	r5, [r4, r5]
     4f2:	47a8      	blx	r5
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     4f4:	4b1f      	ldr	r3, [pc, #124]	; (574 <main+0x138>)
     4f6:	58e3      	ldr	r3, [r4, r3]
     4f8:	4642      	mov	r2, r8
     4fa:	701a      	strb	r2, [r3, #0]
     4fc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     500:	b662      	cpsie	i
	
	// Enable global interrupts
	system_interrupt_enable_global();
	
	// Create the necessary timer
	timer_IrDA_Ping = xTimerCreate("Ping", 2, pdFALSE, 0, timer_irda_ping_callback);
     502:	4b1d      	ldr	r3, [pc, #116]	; (578 <main+0x13c>)
     504:	58e3      	ldr	r3, [r4, r3]
     506:	9300      	str	r3, [sp, #0]
     508:	481c      	ldr	r0, [pc, #112]	; (57c <main+0x140>)
     50a:	4478      	add	r0, pc
     50c:	2102      	movs	r1, #2
     50e:	2200      	movs	r2, #0
     510:	2300      	movs	r3, #0
     512:	4d1b      	ldr	r5, [pc, #108]	; (580 <main+0x144>)
     514:	5965      	ldr	r5, [r4, r5]
     516:	47a8      	blx	r5
     518:	1c05      	adds	r5, r0, #0
     51a:	4b1a      	ldr	r3, [pc, #104]	; (584 <main+0x148>)
     51c:	58e3      	ldr	r3, [r4, r3]
     51e:	6018      	str	r0, [r3, #0]
	xTimerStart(timer_IrDA_Ping, 0);	// Start timer that keeps track of Linking
     520:	4b19      	ldr	r3, [pc, #100]	; (588 <main+0x14c>)
     522:	58e3      	ldr	r3, [r4, r3]
     524:	4798      	blx	r3
     526:	1c02      	adds	r2, r0, #0
     528:	9700      	str	r7, [sp, #0]
     52a:	1c28      	adds	r0, r5, #0
     52c:	2101      	movs	r1, #1
     52e:	2300      	movs	r3, #0
     530:	4d16      	ldr	r5, [pc, #88]	; (58c <main+0x150>)
     532:	5965      	ldr	r5, [r4, r5]
     534:	47a8      	blx	r5
	
	// ..and let FreeRTOS run tasks!
	vTaskStartScheduler();
     536:	4b16      	ldr	r3, [pc, #88]	; (590 <main+0x154>)
     538:	58e3      	ldr	r3, [r4, r3]
     53a:	4798      	blx	r3
     53c:	e7fe      	b.n	53c <main+0x100>
     53e:	46c0      	nop			; (mov r8, r8)
     540:	000079be 	.word	0x000079be
     544:	0000003c 	.word	0x0000003c
     548:	000001f8 	.word	0x000001f8
     54c:	00000254 	.word	0x00000254
     550:	000001b8 	.word	0x000001b8
     554:	00000278 	.word	0x00000278
     558:	00006650 	.word	0x00006650
     55c:	00000144 	.word	0x00000144
     560:	000000f0 	.word	0x000000f0
     564:	00000210 	.word	0x00000210
     568:	000001d8 	.word	0x000001d8
     56c:	00006632 	.word	0x00006632
     570:	00000074 	.word	0x00000074
     574:	000000bc 	.word	0x000000bc
     578:	000001f0 	.word	0x000001f0
     57c:	00006616 	.word	0x00006616
     580:	00000018 	.word	0x00000018
     584:	00000198 	.word	0x00000198
     588:	00000104 	.word	0x00000104
     58c:	00000184 	.word	0x00000184
     590:	0000020c 	.word	0x0000020c

00000594 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     594:	b510      	push	{r4, lr}
     596:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     598:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     59a:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     59c:	4299      	cmp	r1, r3
     59e:	d30c      	bcc.n	5ba <_sercom_get_sync_baud_val+0x26>
     5a0:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     5a2:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     5a4:	1c60      	adds	r0, r4, #1
     5a6:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     5a8:	428b      	cmp	r3, r1
     5aa:	d801      	bhi.n	5b0 <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     5ac:	1c04      	adds	r4, r0, #0
     5ae:	e7f8      	b.n	5a2 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5b0:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     5b2:	2cff      	cmp	r4, #255	; 0xff
     5b4:	d801      	bhi.n	5ba <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     5b6:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     5b8:	2000      	movs	r0, #0
	}
}
     5ba:	bd10      	pop	{r4, pc}
     5bc:	0000      	movs	r0, r0
	...

000005c0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     5c2:	465f      	mov	r7, fp
     5c4:	4656      	mov	r6, sl
     5c6:	464d      	mov	r5, r9
     5c8:	4644      	mov	r4, r8
     5ca:	b4f0      	push	{r4, r5, r6, r7}
     5cc:	b087      	sub	sp, #28
     5ce:	1c06      	adds	r6, r0, #0
     5d0:	1c0d      	adds	r5, r1, #0
     5d2:	9204      	str	r2, [sp, #16]
     5d4:	aa10      	add	r2, sp, #64	; 0x40
     5d6:	7810      	ldrb	r0, [r2, #0]
     5d8:	4a67      	ldr	r2, [pc, #412]	; (778 <_sercom_get_async_baud_val+0x1b8>)
     5da:	447a      	add	r2, pc
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     5dc:	1c31      	adds	r1, r6, #0
     5de:	4341      	muls	r1, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5e0:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     5e2:	42a9      	cmp	r1, r5
     5e4:	d900      	bls.n	5e8 <_sercom_get_async_baud_val+0x28>
     5e6:	e0ba      	b.n	75e <_sercom_get_async_baud_val+0x19e>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     5e8:	2b00      	cmp	r3, #0
     5ea:	d14f      	bne.n	68c <_sercom_get_async_baud_val+0xcc>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     5ec:	4b63      	ldr	r3, [pc, #396]	; (77c <_sercom_get_async_baud_val+0x1bc>)
     5ee:	58d3      	ldr	r3, [r2, r3]
     5f0:	9302      	str	r3, [sp, #8]
     5f2:	2100      	movs	r1, #0
     5f4:	1c32      	adds	r2, r6, #0
     5f6:	2300      	movs	r3, #0
     5f8:	9c02      	ldr	r4, [sp, #8]
     5fa:	47a0      	blx	r4
     5fc:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     5fe:	1c2e      	adds	r6, r5, #0
     600:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     602:	2000      	movs	r0, #0
     604:	2100      	movs	r1, #0
     606:	2200      	movs	r2, #0
     608:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     60a:	253f      	movs	r5, #63	; 0x3f
     60c:	46ac      	mov	ip, r5
		bit_shift = (uint64_t)1 << i;
     60e:	2401      	movs	r4, #1
     610:	46a0      	mov	r8, r4
     612:	9002      	str	r0, [sp, #8]
     614:	9103      	str	r1, [sp, #12]
     616:	4661      	mov	r1, ip
     618:	3920      	subs	r1, #32
     61a:	d403      	bmi.n	624 <_sercom_get_async_baud_val+0x64>
     61c:	4645      	mov	r5, r8
     61e:	408d      	lsls	r5, r1
     620:	46a9      	mov	r9, r5
     622:	e005      	b.n	630 <_sercom_get_async_baud_val+0x70>
     624:	2020      	movs	r0, #32
     626:	4661      	mov	r1, ip
     628:	1a44      	subs	r4, r0, r1
     62a:	4645      	mov	r5, r8
     62c:	40e5      	lsrs	r5, r4
     62e:	46a9      	mov	r9, r5
     630:	4640      	mov	r0, r8
     632:	4661      	mov	r1, ip
     634:	4088      	lsls	r0, r1
     636:	4682      	mov	sl, r0

		r = r << 1;
     638:	1c10      	adds	r0, r2, #0
     63a:	1c19      	adds	r1, r3, #0
     63c:	1880      	adds	r0, r0, r2
     63e:	4159      	adcs	r1, r3
     640:	1c02      	adds	r2, r0, #0
     642:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     644:	465c      	mov	r4, fp
     646:	464d      	mov	r5, r9
     648:	422c      	tst	r4, r5
     64a:	d002      	beq.n	652 <_sercom_get_async_baud_val+0x92>
			r |= 0x01;
     64c:	4642      	mov	r2, r8
     64e:	4302      	orrs	r2, r0
     650:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     652:	429f      	cmp	r7, r3
     654:	d80c      	bhi.n	670 <_sercom_get_async_baud_val+0xb0>
     656:	d101      	bne.n	65c <_sercom_get_async_baud_val+0x9c>
     658:	4296      	cmp	r6, r2
     65a:	d809      	bhi.n	670 <_sercom_get_async_baud_val+0xb0>
			r = r - d;
     65c:	1b92      	subs	r2, r2, r6
     65e:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     660:	4650      	mov	r0, sl
     662:	9902      	ldr	r1, [sp, #8]
     664:	4308      	orrs	r0, r1
     666:	4649      	mov	r1, r9
     668:	9c03      	ldr	r4, [sp, #12]
     66a:	4321      	orrs	r1, r4
     66c:	9002      	str	r0, [sp, #8]
     66e:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     670:	4665      	mov	r5, ip
     672:	3d01      	subs	r5, #1
     674:	46ac      	mov	ip, r5
     676:	d2ce      	bcs.n	616 <_sercom_get_async_baud_val+0x56>
     678:	9802      	ldr	r0, [sp, #8]
     67a:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     67c:	4b3d      	ldr	r3, [pc, #244]	; (774 <_sercom_get_async_baud_val+0x1b4>)
     67e:	4a3c      	ldr	r2, [pc, #240]	; (770 <_sercom_get_async_baud_val+0x1b0>)
     680:	1a12      	subs	r2, r2, r0
     682:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     684:	0c11      	lsrs	r1, r2, #16
     686:	041b      	lsls	r3, r3, #16
     688:	4319      	orrs	r1, r3
     68a:	e065      	b.n	758 <_sercom_get_async_baud_val+0x198>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     68c:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     68e:	2b01      	cmp	r3, #1
     690:	d162      	bne.n	758 <_sercom_get_async_baud_val+0x198>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     692:	0f6c      	lsrs	r4, r5, #29
     694:	00ed      	lsls	r5, r5, #3
     696:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     698:	4b38      	ldr	r3, [pc, #224]	; (77c <_sercom_get_async_baud_val+0x1bc>)
     69a:	58d3      	ldr	r3, [r2, r3]
     69c:	9302      	str	r3, [sp, #8]
     69e:	1c32      	adds	r2, r6, #0
     6a0:	2300      	movs	r3, #0
     6a2:	9e02      	ldr	r6, [sp, #8]
     6a4:	47b0      	blx	r6
     6a6:	1c06      	adds	r6, r0, #0
     6a8:	1c0f      	adds	r7, r1, #0
     6aa:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     6ac:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     6ae:	9602      	str	r6, [sp, #8]
     6b0:	9703      	str	r7, [sp, #12]
     6b2:	469a      	mov	sl, r3
     6b4:	46a1      	mov	r9, r4
     6b6:	4657      	mov	r7, sl
     6b8:	b2ff      	uxtb	r7, r7
     6ba:	9705      	str	r7, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     6bc:	2000      	movs	r0, #0
     6be:	4680      	mov	r8, r0
     6c0:	2200      	movs	r2, #0
     6c2:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     6c4:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     6c6:	1c27      	adds	r7, r4, #0
     6c8:	3f20      	subs	r7, #32
     6ca:	d403      	bmi.n	6d4 <_sercom_get_async_baud_val+0x114>
     6cc:	1c29      	adds	r1, r5, #0
     6ce:	40b9      	lsls	r1, r7
     6d0:	9101      	str	r1, [sp, #4]
     6d2:	e004      	b.n	6de <_sercom_get_async_baud_val+0x11e>
     6d4:	2620      	movs	r6, #32
     6d6:	1b37      	subs	r7, r6, r4
     6d8:	1c28      	adds	r0, r5, #0
     6da:	40f8      	lsrs	r0, r7
     6dc:	9001      	str	r0, [sp, #4]
     6de:	1c29      	adds	r1, r5, #0
     6e0:	40a1      	lsls	r1, r4
     6e2:	9100      	str	r1, [sp, #0]

		r = r << 1;
     6e4:	1c10      	adds	r0, r2, #0
     6e6:	1c19      	adds	r1, r3, #0
     6e8:	1880      	adds	r0, r0, r2
     6ea:	4159      	adcs	r1, r3
     6ec:	1c02      	adds	r2, r0, #0
     6ee:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     6f0:	465e      	mov	r6, fp
     6f2:	9f00      	ldr	r7, [sp, #0]
     6f4:	403e      	ands	r6, r7
     6f6:	46b4      	mov	ip, r6
     6f8:	9e01      	ldr	r6, [sp, #4]
     6fa:	464f      	mov	r7, r9
     6fc:	403e      	ands	r6, r7
     6fe:	4667      	mov	r7, ip
     700:	433e      	orrs	r6, r7
     702:	d002      	beq.n	70a <_sercom_get_async_baud_val+0x14a>
			r |= 0x01;
     704:	1c2a      	adds	r2, r5, #0
     706:	4302      	orrs	r2, r0
     708:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     70a:	9803      	ldr	r0, [sp, #12]
     70c:	4298      	cmp	r0, r3
     70e:	d80b      	bhi.n	728 <_sercom_get_async_baud_val+0x168>
     710:	d102      	bne.n	718 <_sercom_get_async_baud_val+0x158>
     712:	9902      	ldr	r1, [sp, #8]
     714:	4291      	cmp	r1, r2
     716:	d807      	bhi.n	728 <_sercom_get_async_baud_val+0x168>
			r = r - d;
     718:	9e02      	ldr	r6, [sp, #8]
     71a:	9f03      	ldr	r7, [sp, #12]
     71c:	1b92      	subs	r2, r2, r6
     71e:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     720:	4647      	mov	r7, r8
     722:	9800      	ldr	r0, [sp, #0]
     724:	4307      	orrs	r7, r0
     726:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     728:	3c01      	subs	r4, #1
     72a:	d2cc      	bcs.n	6c6 <_sercom_get_async_baud_val+0x106>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     72c:	4641      	mov	r1, r8
     72e:	4652      	mov	r2, sl
     730:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     732:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     734:	4c12      	ldr	r4, [pc, #72]	; (780 <_sercom_get_async_baud_val+0x1c0>)
     736:	42a3      	cmp	r3, r4
     738:	d908      	bls.n	74c <_sercom_get_async_baud_val+0x18c>
     73a:	9a05      	ldr	r2, [sp, #20]
     73c:	3201      	adds	r2, #1
     73e:	b2d2      	uxtb	r2, r2
     740:	9205      	str	r2, [sp, #20]
     742:	2601      	movs	r6, #1
     744:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     746:	4657      	mov	r7, sl
     748:	2f08      	cmp	r7, #8
     74a:	d1b4      	bne.n	6b6 <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     74c:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     74e:	9805      	ldr	r0, [sp, #20]
     750:	2808      	cmp	r0, #8
     752:	d004      	beq.n	75e <_sercom_get_async_baud_val+0x19e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     754:	0341      	lsls	r1, r0, #13
     756:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
     758:	9c04      	ldr	r4, [sp, #16]
     75a:	8021      	strh	r1, [r4, #0]
	return STATUS_OK;
     75c:	2400      	movs	r4, #0
}
     75e:	1c20      	adds	r0, r4, #0
     760:	b007      	add	sp, #28
     762:	bc3c      	pop	{r2, r3, r4, r5}
     764:	4690      	mov	r8, r2
     766:	4699      	mov	r9, r3
     768:	46a2      	mov	sl, r4
     76a:	46ab      	mov	fp, r5
     76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     76e:	46c0      	nop			; (mov r8, r8)
     770:	00000000 	.word	0x00000000
     774:	00000001 	.word	0x00000001
     778:	0000782a 	.word	0x0000782a
     77c:	000000d0 	.word	0x000000d0
     780:	00001fff 	.word	0x00001fff
     784:	46c0      	nop			; (mov r8, r8)
     786:	46c0      	nop			; (mov r8, r8)

00000788 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     788:	b530      	push	{r4, r5, lr}
     78a:	b085      	sub	sp, #20
     78c:	1c05      	adds	r5, r0, #0
     78e:	4c12      	ldr	r4, [pc, #72]	; (7d8 <sercom_set_gclk_generator+0x50>)
     790:	447c      	add	r4, pc
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     792:	4b12      	ldr	r3, [pc, #72]	; (7dc <sercom_set_gclk_generator+0x54>)
     794:	447b      	add	r3, pc
     796:	781b      	ldrb	r3, [r3, #0]
     798:	2b00      	cmp	r3, #0
     79a:	d001      	beq.n	7a0 <sercom_set_gclk_generator+0x18>
     79c:	2900      	cmp	r1, #0
     79e:	d010      	beq.n	7c2 <sercom_set_gclk_generator+0x3a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     7a0:	a903      	add	r1, sp, #12
     7a2:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     7a4:	2013      	movs	r0, #19
     7a6:	4b0e      	ldr	r3, [pc, #56]	; (7e0 <sercom_set_gclk_generator+0x58>)
     7a8:	58e3      	ldr	r3, [r4, r3]
     7aa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     7ac:	2013      	movs	r0, #19
     7ae:	4b0d      	ldr	r3, [pc, #52]	; (7e4 <sercom_set_gclk_generator+0x5c>)
     7b0:	58e3      	ldr	r3, [r4, r3]
     7b2:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     7b4:	4b0c      	ldr	r3, [pc, #48]	; (7e8 <sercom_set_gclk_generator+0x60>)
     7b6:	447b      	add	r3, pc
     7b8:	705d      	strb	r5, [r3, #1]
		_sercom_config.generator_is_set = true;
     7ba:	2201      	movs	r2, #1
     7bc:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     7be:	2000      	movs	r0, #0
     7c0:	e008      	b.n	7d4 <sercom_set_gclk_generator+0x4c>
	} else if (generator_source == _sercom_config.generator_source) {
     7c2:	4b0a      	ldr	r3, [pc, #40]	; (7ec <sercom_set_gclk_generator+0x64>)
     7c4:	447b      	add	r3, pc
     7c6:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     7c8:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     7ca:	1b55      	subs	r5, r2, r5
     7cc:	1e6a      	subs	r2, r5, #1
     7ce:	4195      	sbcs	r5, r2
     7d0:	426d      	negs	r5, r5
     7d2:	4028      	ands	r0, r5
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     7d4:	b005      	add	sp, #20
     7d6:	bd30      	pop	{r4, r5, pc}
     7d8:	00007674 	.word	0x00007674
     7dc:	1ffffce0 	.word	0x1ffffce0
     7e0:	00000094 	.word	0x00000094
     7e4:	000001ec 	.word	0x000001ec
     7e8:	1ffffcbe 	.word	0x1ffffcbe
     7ec:	1ffffcb0 	.word	0x1ffffcb0

000007f0 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     7f0:	b500      	push	{lr}
	switch ((uintptr_t)sercom_module) {
     7f2:	4b28      	ldr	r3, [pc, #160]	; (894 <_sercom_get_default_pad+0xa4>)
     7f4:	4298      	cmp	r0, r3
     7f6:	d019      	beq.n	82c <_sercom_get_default_pad+0x3c>
     7f8:	d803      	bhi.n	802 <_sercom_get_default_pad+0x12>
     7fa:	4b27      	ldr	r3, [pc, #156]	; (898 <_sercom_get_default_pad+0xa8>)
     7fc:	4298      	cmp	r0, r3
     7fe:	d007      	beq.n	810 <_sercom_get_default_pad+0x20>
     800:	e03e      	b.n	880 <_sercom_get_default_pad+0x90>
     802:	4b26      	ldr	r3, [pc, #152]	; (89c <_sercom_get_default_pad+0xac>)
     804:	4298      	cmp	r0, r3
     806:	d01f      	beq.n	848 <_sercom_get_default_pad+0x58>
     808:	4b25      	ldr	r3, [pc, #148]	; (8a0 <_sercom_get_default_pad+0xb0>)
     80a:	4298      	cmp	r0, r3
     80c:	d02a      	beq.n	864 <_sercom_get_default_pad+0x74>
     80e:	e037      	b.n	880 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     810:	2000      	movs	r0, #0
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     812:	2903      	cmp	r1, #3
     814:	d83d      	bhi.n	892 <_sercom_get_default_pad+0xa2>
     816:	1c08      	adds	r0, r1, #0
     818:	f005 fe8e 	bl	6538 <__gnu_thumb1_case_uqi>
     81c:	06043402 	.word	0x06043402
     820:	4820      	ldr	r0, [pc, #128]	; (8a4 <_sercom_get_default_pad+0xb4>)
     822:	e036      	b.n	892 <_sercom_get_default_pad+0xa2>
     824:	4820      	ldr	r0, [pc, #128]	; (8a8 <_sercom_get_default_pad+0xb8>)
     826:	e034      	b.n	892 <_sercom_get_default_pad+0xa2>
     828:	4820      	ldr	r0, [pc, #128]	; (8ac <_sercom_get_default_pad+0xbc>)
     82a:	e032      	b.n	892 <_sercom_get_default_pad+0xa2>
	}

	Assert(false);
	return 0;
     82c:	2000      	movs	r0, #0
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     82e:	2903      	cmp	r1, #3
     830:	d82f      	bhi.n	892 <_sercom_get_default_pad+0xa2>
     832:	1c08      	adds	r0, r1, #0
     834:	f005 fe80 	bl	6538 <__gnu_thumb1_case_uqi>
     838:	06042802 	.word	0x06042802
     83c:	2003      	movs	r0, #3
     83e:	e028      	b.n	892 <_sercom_get_default_pad+0xa2>
     840:	481b      	ldr	r0, [pc, #108]	; (8b0 <_sercom_get_default_pad+0xc0>)
     842:	e026      	b.n	892 <_sercom_get_default_pad+0xa2>
     844:	481b      	ldr	r0, [pc, #108]	; (8b4 <_sercom_get_default_pad+0xc4>)
     846:	e024      	b.n	892 <_sercom_get_default_pad+0xa2>
	}

	Assert(false);
	return 0;
     848:	2000      	movs	r0, #0
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     84a:	2903      	cmp	r1, #3
     84c:	d821      	bhi.n	892 <_sercom_get_default_pad+0xa2>
     84e:	1c08      	adds	r0, r1, #0
     850:	f005 fe72 	bl	6538 <__gnu_thumb1_case_uqi>
     854:	06041c02 	.word	0x06041c02
     858:	4817      	ldr	r0, [pc, #92]	; (8b8 <_sercom_get_default_pad+0xc8>)
     85a:	e01a      	b.n	892 <_sercom_get_default_pad+0xa2>
     85c:	4817      	ldr	r0, [pc, #92]	; (8bc <_sercom_get_default_pad+0xcc>)
     85e:	e018      	b.n	892 <_sercom_get_default_pad+0xa2>
     860:	4817      	ldr	r0, [pc, #92]	; (8c0 <_sercom_get_default_pad+0xd0>)
     862:	e016      	b.n	892 <_sercom_get_default_pad+0xa2>
	}

	Assert(false);
	return 0;
     864:	2000      	movs	r0, #0
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     866:	2903      	cmp	r1, #3
     868:	d813      	bhi.n	892 <_sercom_get_default_pad+0xa2>
     86a:	1c08      	adds	r0, r1, #0
     86c:	f005 fe64 	bl	6538 <__gnu_thumb1_case_uqi>
     870:	06041002 	.word	0x06041002
     874:	4813      	ldr	r0, [pc, #76]	; (8c4 <_sercom_get_default_pad+0xd4>)
     876:	e00c      	b.n	892 <_sercom_get_default_pad+0xa2>
     878:	4813      	ldr	r0, [pc, #76]	; (8c8 <_sercom_get_default_pad+0xd8>)
     87a:	e00a      	b.n	892 <_sercom_get_default_pad+0xa2>
     87c:	4813      	ldr	r0, [pc, #76]	; (8cc <_sercom_get_default_pad+0xdc>)
     87e:	e008      	b.n	892 <_sercom_get_default_pad+0xa2>
	}

	Assert(false);
	return 0;
     880:	2000      	movs	r0, #0
     882:	e006      	b.n	892 <_sercom_get_default_pad+0xa2>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     884:	4812      	ldr	r0, [pc, #72]	; (8d0 <_sercom_get_default_pad+0xe0>)
     886:	e004      	b.n	892 <_sercom_get_default_pad+0xa2>
     888:	4812      	ldr	r0, [pc, #72]	; (8d4 <_sercom_get_default_pad+0xe4>)
     88a:	e002      	b.n	892 <_sercom_get_default_pad+0xa2>
     88c:	4812      	ldr	r0, [pc, #72]	; (8d8 <_sercom_get_default_pad+0xe8>)
     88e:	e000      	b.n	892 <_sercom_get_default_pad+0xa2>
     890:	4812      	ldr	r0, [pc, #72]	; (8dc <_sercom_get_default_pad+0xec>)
	}

	Assert(false);
	return 0;
}
     892:	bd00      	pop	{pc}
     894:	42000c00 	.word	0x42000c00
     898:	42000800 	.word	0x42000800
     89c:	42001000 	.word	0x42001000
     8a0:	42001400 	.word	0x42001400
     8a4:	00040003 	.word	0x00040003
     8a8:	00060003 	.word	0x00060003
     8ac:	00070003 	.word	0x00070003
     8b0:	001e0003 	.word	0x001e0003
     8b4:	001f0003 	.word	0x001f0003
     8b8:	00080003 	.word	0x00080003
     8bc:	000a0003 	.word	0x000a0003
     8c0:	000b0003 	.word	0x000b0003
     8c4:	00100003 	.word	0x00100003
     8c8:	00120003 	.word	0x00120003
     8cc:	00130003 	.word	0x00130003
     8d0:	00050003 	.word	0x00050003
     8d4:	00010003 	.word	0x00010003
     8d8:	00090003 	.word	0x00090003
     8dc:	00110003 	.word	0x00110003

000008e0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     8e0:	b570      	push	{r4, r5, r6, lr}
     8e2:	b084      	sub	sp, #16
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     8e4:	4a0f      	ldr	r2, [pc, #60]	; (924 <_sercom_get_sercom_inst_index+0x44>)
     8e6:	447a      	add	r2, pc
     8e8:	4669      	mov	r1, sp
     8ea:	ca70      	ldmia	r2!, {r4, r5, r6}
     8ec:	c170      	stmia	r1!, {r4, r5, r6}
     8ee:	6812      	ldr	r2, [r2, #0]
     8f0:	600a      	str	r2, [r1, #0]

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     8f2:	1c03      	adds	r3, r0, #0
     8f4:	9a00      	ldr	r2, [sp, #0]
     8f6:	4282      	cmp	r2, r0
     8f8:	d00f      	beq.n	91a <_sercom_get_sercom_inst_index+0x3a>
     8fa:	9c01      	ldr	r4, [sp, #4]
     8fc:	4284      	cmp	r4, r0
     8fe:	d008      	beq.n	912 <_sercom_get_sercom_inst_index+0x32>
     900:	9d02      	ldr	r5, [sp, #8]
     902:	4285      	cmp	r5, r0
     904:	d007      	beq.n	916 <_sercom_get_sercom_inst_index+0x36>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     906:	2000      	movs	r0, #0
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     908:	9e03      	ldr	r6, [sp, #12]
     90a:	429e      	cmp	r6, r3
     90c:	d107      	bne.n	91e <_sercom_get_sercom_inst_index+0x3e>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     90e:	2003      	movs	r0, #3
     910:	e004      	b.n	91c <_sercom_get_sercom_inst_index+0x3c>
     912:	2001      	movs	r0, #1
     914:	e002      	b.n	91c <_sercom_get_sercom_inst_index+0x3c>
     916:	2002      	movs	r0, #2
     918:	e000      	b.n	91c <_sercom_get_sercom_inst_index+0x3c>
     91a:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     91c:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
     91e:	b004      	add	sp, #16
     920:	bd70      	pop	{r4, r5, r6, pc}
     922:	46c0      	nop			; (mov r8, r8)
     924:	00006242 	.word	0x00006242

00000928 <irda_master_callback_received>:
BaseType_t lock_allow_main_discovery = pdTRUE;
TickType_t lock_main_discovery_count;
BaseType_t lock_trace = pdFALSE;
TickType_t unlock_count;
BaseType_t irda_timed_out = pdFALSE;
static void irda_master_callback_received(const struct usart_module *const module) {
     928:	b530      	push	{r4, r5, lr}
     92a:	b085      	sub	sp, #20
     92c:	4c88      	ldr	r4, [pc, #544]	; (b50 <irda_master_callback_received+0x228>)
     92e:	447c      	add	r4, pc
	
	BaseType_t xYieldRequired; 
	
	if ( !irda_timed_out ) {
     930:	4b88      	ldr	r3, [pc, #544]	; (b54 <irda_master_callback_received+0x22c>)
     932:	58e3      	ldr	r3, [r4, r3]
     934:	681b      	ldr	r3, [r3, #0]
     936:	2b00      	cmp	r3, #0
     938:	d000      	beq.n	93c <irda_master_callback_received+0x14>
     93a:	e106      	b.n	b4a <irda_master_callback_received+0x222>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     93c:	4b86      	ldr	r3, [pc, #536]	; (b58 <irda_master_callback_received+0x230>)
     93e:	58e3      	ldr	r3, [r4, r3]
     940:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     942:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     944:	2b00      	cmp	r3, #0
     946:	d1fc      	bne.n	942 <irda_master_callback_received+0x1a>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Disable RX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
     948:	6851      	ldr	r1, [r2, #4]
     94a:	4b84      	ldr	r3, [pc, #528]	; (b5c <irda_master_callback_received+0x234>)
     94c:	400b      	ands	r3, r1
     94e:	6053      	str	r3, [r2, #4]
			module->receiver_enabled = false;
     950:	4b81      	ldr	r3, [pc, #516]	; (b58 <irda_master_callback_received+0x230>)
     952:	58e3      	ldr	r3, [r4, r3]
     954:	9303      	str	r3, [sp, #12]
     956:	2300      	movs	r3, #0
     958:	9903      	ldr	r1, [sp, #12]
     95a:	718b      	strb	r3, [r1, #6]
		usart_disable_transceiver(&irda_master, USART_TRANSCEIVER_RX);
	
		switch ( irda_comm_state )
     95c:	4b80      	ldr	r3, [pc, #512]	; (b60 <irda_master_callback_received+0x238>)
     95e:	58e3      	ldr	r3, [r4, r3]
     960:	9303      	str	r3, [sp, #12]
     962:	781b      	ldrb	r3, [r3, #0]
     964:	2b03      	cmp	r3, #3
     966:	d100      	bne.n	96a <irda_master_callback_received+0x42>
     968:	e073      	b.n	a52 <irda_master_callback_received+0x12a>
     96a:	2b06      	cmp	r3, #6
     96c:	d100      	bne.n	970 <irda_master_callback_received+0x48>
     96e:	e0bb      	b.n	ae8 <irda_master_callback_received+0x1c0>
     970:	2b01      	cmp	r3, #1
     972:	d000      	beq.n	976 <irda_master_callback_received+0x4e>
     974:	e0e9      	b.n	b4a <irda_master_callback_received+0x222>
		{
			case IRDA_SLAT_PING:
						// Check if main discovery is allowed
				if ( lock_allow_main_discovery == pdFALSE ) {
     976:	4b7b      	ldr	r3, [pc, #492]	; (b64 <irda_master_callback_received+0x23c>)
     978:	58e3      	ldr	r3, [r4, r3]
     97a:	681b      	ldr	r3, [r3, #0]
     97c:	2b00      	cmp	r3, #0
     97e:	d10e      	bne.n	99e <irda_master_callback_received+0x76>
					unlock_count = xTaskGetTickCountFromISR();
     980:	4b79      	ldr	r3, [pc, #484]	; (b68 <irda_master_callback_received+0x240>)
     982:	58e3      	ldr	r3, [r4, r3]
     984:	4798      	blx	r3
     986:	4b79      	ldr	r3, [pc, #484]	; (b6c <irda_master_callback_received+0x244>)
     988:	58e3      	ldr	r3, [r4, r3]
     98a:	6018      	str	r0, [r3, #0]
				
					if ( unlock_count >= lock_main_discovery_count ) {
     98c:	4b78      	ldr	r3, [pc, #480]	; (b70 <irda_master_callback_received+0x248>)
     98e:	58e3      	ldr	r3, [r4, r3]
     990:	681b      	ldr	r3, [r3, #0]
     992:	4298      	cmp	r0, r3
     994:	d303      	bcc.n	99e <irda_master_callback_received+0x76>
						lock_allow_main_discovery = pdTRUE;
     996:	4b73      	ldr	r3, [pc, #460]	; (b64 <irda_master_callback_received+0x23c>)
     998:	58e3      	ldr	r3, [r4, r3]
     99a:	2201      	movs	r2, #1
     99c:	601a      	str	r2, [r3, #0]
					}
				}
	
				if ( irda_rx_array[0] == irda_rx_array[1] && irda_rx_array[1] == irda_rx_array[2] && 
     99e:	4b75      	ldr	r3, [pc, #468]	; (b74 <irda_master_callback_received+0x24c>)
     9a0:	58e3      	ldr	r3, [r4, r3]
     9a2:	781a      	ldrb	r2, [r3, #0]
     9a4:	785b      	ldrb	r3, [r3, #1]
     9a6:	4293      	cmp	r3, r2
     9a8:	d140      	bne.n	a2c <irda_master_callback_received+0x104>
     9aa:	4b72      	ldr	r3, [pc, #456]	; (b74 <irda_master_callback_received+0x24c>)
     9ac:	58e3      	ldr	r3, [r4, r3]
     9ae:	9303      	str	r3, [sp, #12]
     9b0:	789b      	ldrb	r3, [r3, #2]
     9b2:	4293      	cmp	r3, r2
     9b4:	d13a      	bne.n	a2c <irda_master_callback_received+0x104>
     9b6:	2aaa      	cmp	r2, #170	; 0xaa
     9b8:	d138      	bne.n	a2c <irda_master_callback_received+0x104>
						irda_rx_array[0] == 0xAA )
				{	
					if ( lock_allow_main_discovery ) {
     9ba:	4b6a      	ldr	r3, [pc, #424]	; (b64 <irda_master_callback_received+0x23c>)
     9bc:	58e3      	ldr	r3, [r4, r3]
     9be:	681b      	ldr	r3, [r3, #0]
     9c0:	2b00      	cmp	r3, #0
     9c2:	d100      	bne.n	9c6 <irda_master_callback_received+0x9e>
     9c4:	e0c1      	b.n	b4a <irda_master_callback_received+0x222>
						if ( lock_trace == pdFALSE ) {
     9c6:	4b6c      	ldr	r3, [pc, #432]	; (b78 <irda_master_callback_received+0x250>)
     9c8:	58e3      	ldr	r3, [r4, r3]
     9ca:	681b      	ldr	r3, [r3, #0]
     9cc:	2b00      	cmp	r3, #0
     9ce:	d103      	bne.n	9d8 <irda_master_callback_received+0xb0>
							lock_trace = pdTRUE;
     9d0:	4b69      	ldr	r3, [pc, #420]	; (b78 <irda_master_callback_received+0x250>)
     9d2:	58e3      	ldr	r3, [r4, r3]
     9d4:	2201      	movs	r2, #1
     9d6:	601a      	str	r2, [r3, #0]
 						//port_pin_set_output_level(LED_ERROR, pdFALSE);

 						//vTracePrintF(event_channel, "Rxd Header!"); 					

							//port_pin_toggle_output_level(LED_BUSY);
 						irda_comm_state = IRDA_SLAT_FIRST;	// Change state to send first response
     9d8:	4b61      	ldr	r3, [pc, #388]	; (b60 <irda_master_callback_received+0x238>)
     9da:	58e3      	ldr	r3, [r4, r3]
     9dc:	9303      	str	r3, [sp, #12]
     9de:	2302      	movs	r3, #2
     9e0:	9a03      	ldr	r2, [sp, #12]
     9e2:	7013      	strb	r3, [r2, #0]

 						// The board has been discovered, note so that 0xAA is ignored next pass
 						//lock_allow_main_discovery = pdFALSE;
 						//lock_main_discovery_count = xTaskGetTickCountFromISR();
 						//lock_main_discovery_count += 16;	// Wait half-a-second
						xYieldRequired = xTaskResumeFromISR( irda_task_handler );
     9e4:	4b65      	ldr	r3, [pc, #404]	; (b7c <irda_master_callback_received+0x254>)
     9e6:	58e3      	ldr	r3, [r4, r3]
     9e8:	6818      	ldr	r0, [r3, #0]
     9ea:	4b65      	ldr	r3, [pc, #404]	; (b80 <irda_master_callback_received+0x258>)
     9ec:	58e3      	ldr	r3, [r4, r3]
     9ee:	4798      	blx	r3
					
						if( xYieldRequired == pdTRUE )
     9f0:	2801      	cmp	r0, #1
     9f2:	d10c      	bne.n	a0e <irda_master_callback_received+0xe6>
						{
							// We should switch context so the ISR returns to a different task.
							// NOTE:  How this is done depends on the port you are using.  Check
							// the documentation and examples for your port.
							vTracePrintF(event_channel, "Yield ISR!");
     9f4:	4b63      	ldr	r3, [pc, #396]	; (b84 <irda_master_callback_received+0x25c>)
     9f6:	58e3      	ldr	r3, [r4, r3]
     9f8:	8818      	ldrh	r0, [r3, #0]
     9fa:	4963      	ldr	r1, [pc, #396]	; (b88 <irda_master_callback_received+0x260>)
     9fc:	4479      	add	r1, pc
     9fe:	4b63      	ldr	r3, [pc, #396]	; (b8c <irda_master_callback_received+0x264>)
     a00:	58e3      	ldr	r3, [r4, r3]
     a02:	4798      	blx	r3
							portYIELD_FROM_ISR(xYieldRequired);
     a04:	2280      	movs	r2, #128	; 0x80
     a06:	0552      	lsls	r2, r2, #21
     a08:	4b61      	ldr	r3, [pc, #388]	; (b90 <irda_master_callback_received+0x268>)
     a0a:	601a      	str	r2, [r3, #0]
     a0c:	e09d      	b.n	b4a <irda_master_callback_received+0x222>
						} else {
							irda_comm_state = IRDA_SLAT_PING;
     a0e:	4b54      	ldr	r3, [pc, #336]	; (b60 <irda_master_callback_received+0x238>)
     a10:	58e3      	ldr	r3, [r4, r3]
     a12:	9303      	str	r3, [sp, #12]
     a14:	2301      	movs	r3, #1
     a16:	9d03      	ldr	r5, [sp, #12]
     a18:	702b      	strb	r3, [r5, #0]
							vTracePrintF(event_channel, "No Yield! Changed to PING");
     a1a:	4b5a      	ldr	r3, [pc, #360]	; (b84 <irda_master_callback_received+0x25c>)
     a1c:	58e3      	ldr	r3, [r4, r3]
     a1e:	8818      	ldrh	r0, [r3, #0]
     a20:	495c      	ldr	r1, [pc, #368]	; (b94 <irda_master_callback_received+0x26c>)
     a22:	4479      	add	r1, pc
     a24:	4b59      	ldr	r3, [pc, #356]	; (b8c <irda_master_callback_received+0x264>)
     a26:	58e3      	ldr	r3, [r4, r3]
     a28:	4798      	blx	r3
     a2a:	e08e      	b.n	b4a <irda_master_callback_received+0x222>
						}
					}
				} else {
					irda_comm_state = IRDA_SLAT_PING;
     a2c:	4b4c      	ldr	r3, [pc, #304]	; (b60 <irda_master_callback_received+0x238>)
     a2e:	58e3      	ldr	r3, [r4, r3]
     a30:	9303      	str	r3, [sp, #12]
     a32:	2301      	movs	r3, #1
     a34:	9903      	ldr	r1, [sp, #12]
     a36:	700b      	strb	r3, [r1, #0]
					vTracePrintF(event_channel, "Wrong Data!");
     a38:	4b52      	ldr	r3, [pc, #328]	; (b84 <irda_master_callback_received+0x25c>)
     a3a:	58e3      	ldr	r3, [r4, r3]
     a3c:	8818      	ldrh	r0, [r3, #0]
     a3e:	4956      	ldr	r1, [pc, #344]	; (b98 <irda_master_callback_received+0x270>)
     a40:	4479      	add	r1, pc
     a42:	4b52      	ldr	r3, [pc, #328]	; (b8c <irda_master_callback_received+0x264>)
     a44:	58e3      	ldr	r3, [r4, r3]
     a46:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     a48:	2280      	movs	r2, #128	; 0x80
     a4a:	0492      	lsls	r2, r2, #18
     a4c:	4b53      	ldr	r3, [pc, #332]	; (b9c <irda_master_callback_received+0x274>)
     a4e:	619a      	str	r2, [r3, #24]
     a50:	e07b      	b.n	b4a <irda_master_callback_received+0x222>
					//irda_comm_state = IRDA_SLAT_PING;
				}
			break;
			case IRDA_SLAT_FIRST_RESPONSE:	// r010716-1608: This the code to execute when we get 0xCC. Stage 6
						// If this is correct, this board can be safely assumed to be synchronized
				if ( crc_check(&irda_rx_array, 4) )
     a52:	4b48      	ldr	r3, [pc, #288]	; (b74 <irda_master_callback_received+0x24c>)
     a54:	58e3      	ldr	r3, [r4, r3]
     a56:	9303      	str	r3, [sp, #12]
     a58:	1c18      	adds	r0, r3, #0
     a5a:	2104      	movs	r1, #4
     a5c:	4b50      	ldr	r3, [pc, #320]	; (ba0 <irda_master_callback_received+0x278>)
     a5e:	58e3      	ldr	r3, [r4, r3]
     a60:	4798      	blx	r3
     a62:	2800      	cmp	r0, #0
     a64:	d035      	beq.n	ad2 <irda_master_callback_received+0x1aa>
					

					//vTracePrintF(event_channel, "Rxd Header!");

					//port_pin_toggle_output_level(LED_BUSY);
					irda_comm_state = IRDA_SLAT_STAGE_7A;	// Change state to send first response
     a66:	4b3e      	ldr	r3, [pc, #248]	; (b60 <irda_master_callback_received+0x238>)
     a68:	58e3      	ldr	r3, [r4, r3]
     a6a:	9303      	str	r3, [sp, #12]
     a6c:	2305      	movs	r3, #5
     a6e:	9a03      	ldr	r2, [sp, #12]
     a70:	7013      	strb	r3, [r2, #0]
     a72:	2280      	movs	r2, #128	; 0x80
     a74:	0512      	lsls	r2, r2, #20
     a76:	4b49      	ldr	r3, [pc, #292]	; (b9c <irda_master_callback_received+0x274>)
     a78:	619a      	str	r2, [r3, #24]
						// The slat card has been synched at this point.
					port_pin_set_output_level(LED_BUSY, pdTRUE);
					
					// Resetting the timer
					xTimerResetFromISR ( timer_IrDA_Ping, 0 );
     a7a:	4b4a      	ldr	r3, [pc, #296]	; (ba4 <irda_master_callback_received+0x27c>)
     a7c:	58e3      	ldr	r3, [r4, r3]
     a7e:	681d      	ldr	r5, [r3, #0]
     a80:	4b39      	ldr	r3, [pc, #228]	; (b68 <irda_master_callback_received+0x240>)
     a82:	58e3      	ldr	r3, [r4, r3]
     a84:	4798      	blx	r3
     a86:	1c02      	adds	r2, r0, #0
     a88:	2300      	movs	r3, #0
     a8a:	9300      	str	r3, [sp, #0]
     a8c:	1c28      	adds	r0, r5, #0
     a8e:	2107      	movs	r1, #7
     a90:	4d45      	ldr	r5, [pc, #276]	; (ba8 <irda_master_callback_received+0x280>)
     a92:	5965      	ldr	r5, [r4, r5]
     a94:	47a8      	blx	r5
					
					xYieldRequired = xTaskResumeFromISR( irda_task_handler );
     a96:	4b39      	ldr	r3, [pc, #228]	; (b7c <irda_master_callback_received+0x254>)
     a98:	58e3      	ldr	r3, [r4, r3]
     a9a:	6818      	ldr	r0, [r3, #0]
     a9c:	4b38      	ldr	r3, [pc, #224]	; (b80 <irda_master_callback_received+0x258>)
     a9e:	58e3      	ldr	r3, [r4, r3]
     aa0:	4798      	blx	r3
					
					if( xYieldRequired == pdTRUE )
     aa2:	2801      	cmp	r0, #1
     aa4:	d10c      	bne.n	ac0 <irda_master_callback_received+0x198>
					{
						// We should switch context so the ISR returns to a different task.
						// NOTE:  How this is done depends on the port you are using.  Check
						// the documentation and examples for your port.
						vTracePrintF(event_channel, "Yield ISR!");
     aa6:	4b37      	ldr	r3, [pc, #220]	; (b84 <irda_master_callback_received+0x25c>)
     aa8:	58e3      	ldr	r3, [r4, r3]
     aaa:	8818      	ldrh	r0, [r3, #0]
     aac:	493f      	ldr	r1, [pc, #252]	; (bac <irda_master_callback_received+0x284>)
     aae:	4479      	add	r1, pc
     ab0:	4b36      	ldr	r3, [pc, #216]	; (b8c <irda_master_callback_received+0x264>)
     ab2:	58e3      	ldr	r3, [r4, r3]
     ab4:	4798      	blx	r3
						portYIELD_FROM_ISR(xYieldRequired);
     ab6:	2280      	movs	r2, #128	; 0x80
     ab8:	0552      	lsls	r2, r2, #21
     aba:	4b35      	ldr	r3, [pc, #212]	; (b90 <irda_master_callback_received+0x268>)
     abc:	601a      	str	r2, [r3, #0]
     abe:	e044      	b.n	b4a <irda_master_callback_received+0x222>
					} else {
						vTracePrintF(event_channel, "No Yield! Changed to PING");
     ac0:	4b30      	ldr	r3, [pc, #192]	; (b84 <irda_master_callback_received+0x25c>)
     ac2:	58e3      	ldr	r3, [r4, r3]
     ac4:	8818      	ldrh	r0, [r3, #0]
     ac6:	493a      	ldr	r1, [pc, #232]	; (bb0 <irda_master_callback_received+0x288>)
     ac8:	4479      	add	r1, pc
     aca:	4b30      	ldr	r3, [pc, #192]	; (b8c <irda_master_callback_received+0x264>)
     acc:	58e3      	ldr	r3, [r4, r3]
     ace:	4798      	blx	r3
     ad0:	e03b      	b.n	b4a <irda_master_callback_received+0x222>
     ad2:	2280      	movs	r2, #128	; 0x80
     ad4:	0492      	lsls	r2, r2, #18
     ad6:	4b31      	ldr	r3, [pc, #196]	; (b9c <irda_master_callback_received+0x274>)
     ad8:	619a      	str	r2, [r3, #24]
					}
				} else {
					//vTracePrintF(event_channel, "Wrong Data!");
					port_pin_set_output_level(LED_ERROR, pdTRUE);
					irda_comm_state = IRDA_SLAT_PING;
     ada:	4b21      	ldr	r3, [pc, #132]	; (b60 <irda_master_callback_received+0x238>)
     adc:	58e3      	ldr	r3, [r4, r3]
     ade:	9303      	str	r3, [sp, #12]
     ae0:	2301      	movs	r3, #1
     ae2:	9c03      	ldr	r4, [sp, #12]
     ae4:	7023      	strb	r3, [r4, #0]
     ae6:	e030      	b.n	b4a <irda_master_callback_received+0x222>
				}
			break;
			case IRDA_SLAT_STAGE_7B:	// r010716-1608: This the code to execute when we get 0xCC. Stage 6
				// If this is correct, this board can be safely assumed to be synchronized
				if ( crc_check(&irda_rx_array, 4) )
     ae8:	4b22      	ldr	r3, [pc, #136]	; (b74 <irda_master_callback_received+0x24c>)
     aea:	58e3      	ldr	r3, [r4, r3]
     aec:	9303      	str	r3, [sp, #12]
     aee:	1c18      	adds	r0, r3, #0
     af0:	2104      	movs	r1, #4
     af2:	4b2b      	ldr	r3, [pc, #172]	; (ba0 <irda_master_callback_received+0x278>)
     af4:	58e3      	ldr	r3, [r4, r3]
     af6:	4798      	blx	r3
     af8:	2800      	cmp	r0, #0
     afa:	d014      	beq.n	b26 <irda_master_callback_received+0x1fe>
				{
					irda_comm_state = IRDA_SLAT_PING;	// Change state to send first response
     afc:	4b18      	ldr	r3, [pc, #96]	; (b60 <irda_master_callback_received+0x238>)
     afe:	58e3      	ldr	r3, [r4, r3]
     b00:	9303      	str	r3, [sp, #12]
     b02:	2301      	movs	r3, #1
     b04:	9d03      	ldr	r5, [sp, #12]
     b06:	702b      	strb	r3, [r5, #0]
					// The slat card has been synched at this point.
					//port_pin_set_output_level(LED_BUSY, pdTRUE);
				
					// Resetting the timer
					xTimerResetFromISR ( timer_IrDA_Ping, 0 );
     b08:	4b26      	ldr	r3, [pc, #152]	; (ba4 <irda_master_callback_received+0x27c>)
     b0a:	58e3      	ldr	r3, [r4, r3]
     b0c:	681d      	ldr	r5, [r3, #0]
     b0e:	4b16      	ldr	r3, [pc, #88]	; (b68 <irda_master_callback_received+0x240>)
     b10:	58e3      	ldr	r3, [r4, r3]
     b12:	4798      	blx	r3
     b14:	1c02      	adds	r2, r0, #0
     b16:	2300      	movs	r3, #0
     b18:	9300      	str	r3, [sp, #0]
     b1a:	1c28      	adds	r0, r5, #0
     b1c:	2107      	movs	r1, #7
     b1e:	4d22      	ldr	r5, [pc, #136]	; (ba8 <irda_master_callback_received+0x280>)
     b20:	5965      	ldr	r5, [r4, r5]
     b22:	47a8      	blx	r5
     b24:	e011      	b.n	b4a <irda_master_callback_received+0x222>
				} else {
					vTracePrintF(event_channel, "Wrong Data!");
     b26:	4b17      	ldr	r3, [pc, #92]	; (b84 <irda_master_callback_received+0x25c>)
     b28:	58e3      	ldr	r3, [r4, r3]
     b2a:	8818      	ldrh	r0, [r3, #0]
     b2c:	4921      	ldr	r1, [pc, #132]	; (bb4 <irda_master_callback_received+0x28c>)
     b2e:	4479      	add	r1, pc
     b30:	4b16      	ldr	r3, [pc, #88]	; (b8c <irda_master_callback_received+0x264>)
     b32:	58e3      	ldr	r3, [r4, r3]
     b34:	4798      	blx	r3
     b36:	2280      	movs	r2, #128	; 0x80
     b38:	0492      	lsls	r2, r2, #18
     b3a:	4b18      	ldr	r3, [pc, #96]	; (b9c <irda_master_callback_received+0x274>)
     b3c:	619a      	str	r2, [r3, #24]
					port_pin_set_output_level(LED_ERROR, pdTRUE);
					irda_comm_state = IRDA_SLAT_PING;
     b3e:	4b08      	ldr	r3, [pc, #32]	; (b60 <irda_master_callback_received+0x238>)
     b40:	58e3      	ldr	r3, [r4, r3]
     b42:	9303      	str	r3, [sp, #12]
     b44:	2301      	movs	r3, #1
     b46:	9903      	ldr	r1, [sp, #12]
     b48:	700b      	strb	r3, [r1, #0]
				}
			break;
		}	
	}
}
     b4a:	b005      	add	sp, #20
     b4c:	bd30      	pop	{r4, r5, pc}
     b4e:	46c0      	nop			; (mov r8, r8)
     b50:	000074d6 	.word	0x000074d6
     b54:	000001b0 	.word	0x000001b0
     b58:	00000188 	.word	0x00000188
     b5c:	fffdffff 	.word	0xfffdffff
     b60:	0000010c 	.word	0x0000010c
     b64:	00000000 	.word	0x00000000
     b68:	00000140 	.word	0x00000140
     b6c:	0000004c 	.word	0x0000004c
     b70:	0000013c 	.word	0x0000013c
     b74:	00000040 	.word	0x00000040
     b78:	00000114 	.word	0x00000114
     b7c:	000001d8 	.word	0x000001d8
     b80:	000000b4 	.word	0x000000b4
     b84:	000000f0 	.word	0x000000f0
     b88:	0000613c 	.word	0x0000613c
     b8c:	000002c0 	.word	0x000002c0
     b90:	e000ed04 	.word	0xe000ed04
     b94:	00006122 	.word	0x00006122
     b98:	00006120 	.word	0x00006120
     b9c:	41004400 	.word	0x41004400
     ba0:	00000268 	.word	0x00000268
     ba4:	00000198 	.word	0x00000198
     ba8:	00000184 	.word	0x00000184
     bac:	0000608a 	.word	0x0000608a
     bb0:	0000607c 	.word	0x0000607c
     bb4:	00006032 	.word	0x00006032

00000bb8 <irda_master_callback_transmitted>:
// IrDA Tx Callback Function
static void irda_master_callback_transmitted(const struct usart_module *const module) {
     bb8:	b530      	push	{r4, r5, lr}
     bba:	b085      	sub	sp, #20
     bbc:	4c3a      	ldr	r4, [pc, #232]	; (ca8 <irda_master_callback_transmitted+0xf0>)
     bbe:	447c      	add	r4, pc
	// Update post r010716-1608
		// ** In this update, the machine state is changed so that we can continue receiving data
		// Change::: IRDA_SLAT_PING to IRDA_SLAT_FIRST_RESPONSE
		// ** In this update, we also queue the Rx job for 0xCC
	
	switch ( irda_comm_state ) {
     bc0:	4b3a      	ldr	r3, [pc, #232]	; (cac <irda_master_callback_transmitted+0xf4>)
     bc2:	58e3      	ldr	r3, [r4, r3]
     bc4:	9302      	str	r3, [sp, #8]
     bc6:	781b      	ldrb	r3, [r3, #0]
     bc8:	2b02      	cmp	r3, #2
     bca:	d002      	beq.n	bd2 <irda_master_callback_transmitted+0x1a>
     bcc:	2b05      	cmp	r3, #5
     bce:	d035      	beq.n	c3c <irda_master_callback_transmitted+0x84>
     bd0:	e068      	b.n	ca4 <irda_master_callback_transmitted+0xec>
		case IRDA_SLAT_FIRST:	// This is the case where the first Response has been sent
			// r010716-1608: Change the machine state accordingly
			irda_comm_state = IRDA_SLAT_FIRST_RESPONSE;	// Go back to the First Response mode
     bd2:	4b36      	ldr	r3, [pc, #216]	; (cac <irda_master_callback_transmitted+0xf4>)
     bd4:	58e3      	ldr	r3, [r4, r3]
     bd6:	9302      	str	r3, [sp, #8]
     bd8:	2303      	movs	r3, #3
     bda:	9902      	ldr	r1, [sp, #8]
     bdc:	700b      	strb	r3, [r1, #0]
			
			
			
				// Make sure to reset the timer
			xTimerResetFromISR ( timer_IrDA_Ping, 0 );
     bde:	4b34      	ldr	r3, [pc, #208]	; (cb0 <irda_master_callback_transmitted+0xf8>)
     be0:	58e3      	ldr	r3, [r4, r3]
     be2:	681d      	ldr	r5, [r3, #0]
     be4:	4b33      	ldr	r3, [pc, #204]	; (cb4 <irda_master_callback_transmitted+0xfc>)
     be6:	58e3      	ldr	r3, [r4, r3]
     be8:	4798      	blx	r3
     bea:	1c02      	adds	r2, r0, #0
     bec:	2300      	movs	r3, #0
     bee:	9300      	str	r3, [sp, #0]
     bf0:	1c28      	adds	r0, r5, #0
     bf2:	2107      	movs	r1, #7
     bf4:	4d30      	ldr	r5, [pc, #192]	; (cb8 <irda_master_callback_transmitted+0x100>)
     bf6:	5965      	ldr	r5, [r4, r5]
     bf8:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     bfa:	4b30      	ldr	r3, [pc, #192]	; (cbc <irda_master_callback_transmitted+0x104>)
     bfc:	58e3      	ldr	r3, [r4, r3]
     bfe:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     c00:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     c02:	2a00      	cmp	r2, #0
     c04:	d1fc      	bne.n	c00 <irda_master_callback_transmitted+0x48>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
     c06:	6859      	ldr	r1, [r3, #4]
     c08:	2280      	movs	r2, #128	; 0x80
     c0a:	0292      	lsls	r2, r2, #10
     c0c:	430a      	orrs	r2, r1
     c0e:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
     c10:	4a2a      	ldr	r2, [pc, #168]	; (cbc <irda_master_callback_transmitted+0x104>)
     c12:	58a2      	ldr	r2, [r4, r2]
     c14:	9202      	str	r2, [sp, #8]
     c16:	2201      	movs	r2, #1
     c18:	9d02      	ldr	r5, [sp, #8]
     c1a:	71aa      	strb	r2, [r5, #6]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     c1c:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     c1e:	2a00      	cmp	r2, #0
     c20:	d1fc      	bne.n	c1c <irda_master_callback_transmitted+0x64>
			
			// r010716-1608: Request the 0xCC data reception right away
			usart_enable_transceiver( &irda_master, USART_TRANSCEIVER_RX );	// Enable Receiving Transceiver
			
			
			usart_read_buffer_job( &irda_master, irda_rx_array, 5 );	// Try to get the 3-Byte ping
     c22:	4b26      	ldr	r3, [pc, #152]	; (cbc <irda_master_callback_transmitted+0x104>)
     c24:	58e3      	ldr	r3, [r4, r3]
     c26:	9302      	str	r3, [sp, #8]
     c28:	4b25      	ldr	r3, [pc, #148]	; (cc0 <irda_master_callback_transmitted+0x108>)
     c2a:	58e3      	ldr	r3, [r4, r3]
     c2c:	9303      	str	r3, [sp, #12]
     c2e:	9802      	ldr	r0, [sp, #8]
     c30:	1c19      	adds	r1, r3, #0
     c32:	2205      	movs	r2, #5
     c34:	4b23      	ldr	r3, [pc, #140]	; (cc4 <irda_master_callback_transmitted+0x10c>)
     c36:	58e3      	ldr	r3, [r4, r3]
     c38:	4798      	blx	r3
				// We should switch context so the ISR returns to a different task.
				// NOTE:  How this is done depends on the port you are using.  Check
				// the documentation and examples for your port.
			//	portYIELD_FROM_ISR(xYieldRequired);
			//}
		break;
     c3a:	e033      	b.n	ca4 <irda_master_callback_transmitted+0xec>
		case IRDA_SLAT_STAGE_7A:
			// Post: r010716-1818: Change the machine state accordingly
			irda_comm_state = IRDA_SLAT_STAGE_7B;	// Go back to the First Response mode
     c3c:	4b1b      	ldr	r3, [pc, #108]	; (cac <irda_master_callback_transmitted+0xf4>)
     c3e:	58e3      	ldr	r3, [r4, r3]
     c40:	9302      	str	r3, [sp, #8]
     c42:	2306      	movs	r3, #6
     c44:	9902      	ldr	r1, [sp, #8]
     c46:	700b      	strb	r3, [r1, #0]
			
			
			
			// Make sure to reset the timer
			xTimerResetFromISR ( timer_IrDA_Ping, 0 );
     c48:	4b19      	ldr	r3, [pc, #100]	; (cb0 <irda_master_callback_transmitted+0xf8>)
     c4a:	58e3      	ldr	r3, [r4, r3]
     c4c:	681d      	ldr	r5, [r3, #0]
     c4e:	4b19      	ldr	r3, [pc, #100]	; (cb4 <irda_master_callback_transmitted+0xfc>)
     c50:	58e3      	ldr	r3, [r4, r3]
     c52:	4798      	blx	r3
     c54:	1c02      	adds	r2, r0, #0
     c56:	2300      	movs	r3, #0
     c58:	9300      	str	r3, [sp, #0]
     c5a:	1c28      	adds	r0, r5, #0
     c5c:	2107      	movs	r1, #7
     c5e:	4d16      	ldr	r5, [pc, #88]	; (cb8 <irda_master_callback_transmitted+0x100>)
     c60:	5965      	ldr	r5, [r4, r5]
     c62:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     c64:	4b15      	ldr	r3, [pc, #84]	; (cbc <irda_master_callback_transmitted+0x104>)
     c66:	58e3      	ldr	r3, [r4, r3]
     c68:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     c6a:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     c6c:	2a00      	cmp	r2, #0
     c6e:	d1fc      	bne.n	c6a <irda_master_callback_transmitted+0xb2>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
     c70:	6859      	ldr	r1, [r3, #4]
     c72:	2280      	movs	r2, #128	; 0x80
     c74:	0292      	lsls	r2, r2, #10
     c76:	430a      	orrs	r2, r1
     c78:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
     c7a:	4a10      	ldr	r2, [pc, #64]	; (cbc <irda_master_callback_transmitted+0x104>)
     c7c:	58a2      	ldr	r2, [r4, r2]
     c7e:	9202      	str	r2, [sp, #8]
     c80:	2201      	movs	r2, #1
     c82:	9d02      	ldr	r5, [sp, #8]
     c84:	71aa      	strb	r2, [r5, #6]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     c86:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     c88:	2a00      	cmp	r2, #0
     c8a:	d1fc      	bne.n	c86 <irda_master_callback_transmitted+0xce>
			
			
			// Post: r010716-1818: Request the 0xCC data reception right away
			usart_enable_transceiver( &irda_master, USART_TRANSCEIVER_RX );	// Enable Receiving Transceiver
			usart_read_buffer_job( &irda_master, irda_rx_array, 5 );	// Try to get the 3-Byte ping
     c8c:	4b0b      	ldr	r3, [pc, #44]	; (cbc <irda_master_callback_transmitted+0x104>)
     c8e:	58e3      	ldr	r3, [r4, r3]
     c90:	9302      	str	r3, [sp, #8]
     c92:	4b0b      	ldr	r3, [pc, #44]	; (cc0 <irda_master_callback_transmitted+0x108>)
     c94:	58e3      	ldr	r3, [r4, r3]
     c96:	9303      	str	r3, [sp, #12]
     c98:	9802      	ldr	r0, [sp, #8]
     c9a:	1c19      	adds	r1, r3, #0
     c9c:	2205      	movs	r2, #5
     c9e:	4b09      	ldr	r3, [pc, #36]	; (cc4 <irda_master_callback_transmitted+0x10c>)
     ca0:	58e3      	ldr	r3, [r4, r3]
     ca2:	4798      	blx	r3
		break;
	}
}
     ca4:	b005      	add	sp, #20
     ca6:	bd30      	pop	{r4, r5, pc}
     ca8:	00007246 	.word	0x00007246
     cac:	0000010c 	.word	0x0000010c
     cb0:	00000198 	.word	0x00000198
     cb4:	00000140 	.word	0x00000140
     cb8:	00000184 	.word	0x00000184
     cbc:	00000188 	.word	0x00000188
     cc0:	00000040 	.word	0x00000040
     cc4:	00000218 	.word	0x00000218

00000cc8 <bastian_IrDA_configuration>:
static void irda_master_callback_received(const struct usart_module *const module);
static void irda_master_callback_transmitted(const struct usart_module *const module);

//////////////////////////////////////////////////////////////////////////
// IrDA Port COnfiguration
void bastian_IrDA_configuration (void){
     cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
     cca:	b093      	sub	sp, #76	; 0x4c
     ccc:	4d31      	ldr	r5, [pc, #196]	; (d94 <bastian_IrDA_configuration+0xcc>)
     cce:	447d      	add	r5, pc
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     cd0:	2380      	movs	r3, #128	; 0x80
     cd2:	05db      	lsls	r3, r3, #23
     cd4:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     cd6:	2300      	movs	r3, #0
     cd8:	aa02      	add	r2, sp, #8
     cda:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
	config->stopbits         = USART_STOPBITS_1;
     cdc:	2100      	movs	r1, #0
     cde:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     ce0:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     ce2:	2401      	movs	r4, #1
     ce4:	2024      	movs	r0, #36	; 0x24
     ce6:	5414      	strb	r4, [r2, r0]
	config->transmitter_enable = true;
     ce8:	2025      	movs	r0, #37	; 0x25
     cea:	5414      	strb	r4, [r2, r0]
	config->clock_polarity_inverted = false;
     cec:	2026      	movs	r0, #38	; 0x26
     cee:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
     cf0:	2027      	movs	r0, #39	; 0x27
     cf2:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
     cf4:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     cf6:	202c      	movs	r0, #44	; 0x2c
     cf8:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
     cfa:	202d      	movs	r0, #45	; 0x2d
     cfc:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     cfe:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     d00:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     d02:	2000      	movs	r0, #0
     d04:	76d0      	strb	r0, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     d06:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     d08:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
     d0a:	2013      	movs	r0, #19
     d0c:	7690      	strb	r0, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     d0e:	7751      	strb	r1, [r2, #29]
	usart_get_config_defaults(&irda_conf);
	
	// Port Configuration
	irda_conf.transfer_mode = USART_TRANSFER_ASYNCHRONOUSLY;	// Asynchronous Communication Mode
	irda_conf.generator_source = GCLK_GENERATOR_0;				// Use the Generic Clock 0 as source
	irda_conf.baudrate = 115200;								// IrDA Baudrate
     d10:	21e1      	movs	r1, #225	; 0xe1
     d12:	0249      	lsls	r1, r1, #9
     d14:	6211      	str	r1, [r2, #32]
	irda_conf.character_size = USART_CHARACTER_SIZE_8BIT;
	irda_conf.stopbits = USART_STOPBITS_1;
	irda_conf.parity = USART_PARITY_EVEN;
     d16:	8113      	strh	r3, [r2, #8]
	irda_conf.encoding_format_enable = true;	// Enable IrDA Encoding
     d18:	7654      	strb	r4, [r2, #25]
	
	// Pin Multiplexer Settings
	irda_conf.mux_setting = USART_RX_1_TX_0_XCK_1;
     d1a:	2380      	movs	r3, #128	; 0x80
     d1c:	035b      	lsls	r3, r3, #13
     d1e:	60d3      	str	r3, [r2, #12]
	irda_conf.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
     d20:	4b1d      	ldr	r3, [pc, #116]	; (d98 <bastian_IrDA_configuration+0xd0>)
     d22:	6313      	str	r3, [r2, #48]	; 0x30
	irda_conf.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
     d24:	4b1d      	ldr	r3, [pc, #116]	; (d9c <bastian_IrDA_configuration+0xd4>)
     d26:	6353      	str	r3, [r2, #52]	; 0x34
	irda_conf.pinmux_pad2 = PINMUX_UNUSED;
     d28:	2301      	movs	r3, #1
     d2a:	425b      	negs	r3, r3
     d2c:	6393      	str	r3, [r2, #56]	; 0x38
	irda_conf.pinmux_pad3 = PINMUX_UNUSED;
     d2e:	63d3      	str	r3, [r2, #60]	; 0x3c

	// Initialize the previous settings
	usart_init((struct usart_module*) &irda_master, SERCOM3, &irda_conf);
     d30:	4b1b      	ldr	r3, [pc, #108]	; (da0 <bastian_IrDA_configuration+0xd8>)
     d32:	58ef      	ldr	r7, [r5, r3]
     d34:	1c38      	adds	r0, r7, #0
     d36:	491b      	ldr	r1, [pc, #108]	; (da4 <bastian_IrDA_configuration+0xdc>)
     d38:	4b1b      	ldr	r3, [pc, #108]	; (da8 <bastian_IrDA_configuration+0xe0>)
     d3a:	58eb      	ldr	r3, [r5, r3]
     d3c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     d3e:	683e      	ldr	r6, [r7, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     d40:	1c30      	adds	r0, r6, #0
     d42:	4b1a      	ldr	r3, [pc, #104]	; (dac <bastian_IrDA_configuration+0xe4>)
     d44:	58eb      	ldr	r3, [r5, r3]
     d46:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d48:	231f      	movs	r3, #31
     d4a:	4018      	ands	r0, r3
     d4c:	4084      	lsls	r4, r0
     d4e:	4b18      	ldr	r3, [pc, #96]	; (db0 <bastian_IrDA_configuration+0xe8>)
     d50:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     d52:	683a      	ldr	r2, [r7, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     d54:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     d56:	2b00      	cmp	r3, #0
     d58:	d1fc      	bne.n	d54 <bastian_IrDA_configuration+0x8c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     d5a:	6832      	ldr	r2, [r6, #0]
     d5c:	2302      	movs	r3, #2
     d5e:	4313      	orrs	r3, r2
     d60:	6033      	str	r3, [r6, #0]

	// Enable the module
	usart_enable((struct usart_module*) &irda_master);

	// ******** Callback setup
	usart_register_callback((struct usart_module*) &irda_master, (usart_callback_t)irda_master_callback_received, USART_CALLBACK_BUFFER_RECEIVED);
     d62:	4b0f      	ldr	r3, [pc, #60]	; (da0 <bastian_IrDA_configuration+0xd8>)
     d64:	58ec      	ldr	r4, [r5, r3]
     d66:	1c20      	adds	r0, r4, #0
     d68:	4912      	ldr	r1, [pc, #72]	; (db4 <bastian_IrDA_configuration+0xec>)
     d6a:	4479      	add	r1, pc
     d6c:	2201      	movs	r2, #1
     d6e:	4b12      	ldr	r3, [pc, #72]	; (db8 <bastian_IrDA_configuration+0xf0>)
     d70:	58ee      	ldr	r6, [r5, r3]
     d72:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     d74:	2531      	movs	r5, #49	; 0x31
     d76:	5d62      	ldrb	r2, [r4, r5]
     d78:	2302      	movs	r3, #2
     d7a:	4313      	orrs	r3, r2
     d7c:	5563      	strb	r3, [r4, r5]
	usart_enable_callback((struct usart_module*) &irda_master, USART_CALLBACK_BUFFER_RECEIVED);

	usart_register_callback((struct usart_module*) &irda_master, (usart_callback_t)irda_master_callback_transmitted, USART_CALLBACK_BUFFER_TRANSMITTED);
     d7e:	1c20      	adds	r0, r4, #0
     d80:	490e      	ldr	r1, [pc, #56]	; (dbc <bastian_IrDA_configuration+0xf4>)
     d82:	4479      	add	r1, pc
     d84:	2200      	movs	r2, #0
     d86:	47b0      	blx	r6
     d88:	5d62      	ldrb	r2, [r4, r5]
     d8a:	2301      	movs	r3, #1
     d8c:	4313      	orrs	r3, r2
     d8e:	5563      	strb	r3, [r4, r5]
	usart_enable_callback((struct usart_module*) &irda_master, USART_CALLBACK_BUFFER_TRANSMITTED);
}
     d90:	b013      	add	sp, #76	; 0x4c
     d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d94:	00007136 	.word	0x00007136
     d98:	00160002 	.word	0x00160002
     d9c:	00170002 	.word	0x00170002
     da0:	00000188 	.word	0x00000188
     da4:	42001400 	.word	0x42001400
     da8:	000001a0 	.word	0x000001a0
     dac:	00000088 	.word	0x00000088
     db0:	e000e100 	.word	0xe000e100
     db4:	fffffbbb 	.word	0xfffffbbb
     db8:	00000010 	.word	0x00000010
     dbc:	fffffe33 	.word	0xfffffe33

00000dc0 <crc_check>:
#include "asf.h"
#include "bastian_sercom.h"

// This is the function that will check the validity of the crc byte as received
BaseType_t crc_check( uint8_t* data, uint8_t size ) {
     dc0:	b530      	push	{r4, r5, lr}
	uint8_t i;
	uint8_t crc_result = 0;
	
	// Add all the contents of the packet
	for( i=0; i<size; i++) crc_result += *( data + i );
     dc2:	2900      	cmp	r1, #0
     dc4:	d00c      	beq.n	de0 <crc_check+0x20>
     dc6:	1c03      	adds	r3, r0, #0
     dc8:	1c42      	adds	r2, r0, #1
     dca:	1e4c      	subs	r4, r1, #1
     dcc:	b2e4      	uxtb	r4, r4
     dce:	1915      	adds	r5, r2, r4
#include "bastian_sercom.h"

// This is the function that will check the validity of the crc byte as received
BaseType_t crc_check( uint8_t* data, uint8_t size ) {
	uint8_t i;
	uint8_t crc_result = 0;
     dd0:	2200      	movs	r2, #0
	
	// Add all the contents of the packet
	for( i=0; i<size; i++) crc_result += *( data + i );
     dd2:	781c      	ldrb	r4, [r3, #0]
     dd4:	1912      	adds	r2, r2, r4
     dd6:	b2d2      	uxtb	r2, r2
     dd8:	3301      	adds	r3, #1
     dda:	42ab      	cmp	r3, r5
     ddc:	d1f9      	bne.n	dd2 <crc_check+0x12>
     dde:	e000      	b.n	de2 <crc_check+0x22>
#include "bastian_sercom.h"

// This is the function that will check the validity of the crc byte as received
BaseType_t crc_check( uint8_t* data, uint8_t size ) {
	uint8_t i;
	uint8_t crc_result = 0;
     de0:	2200      	movs	r2, #0
	
	// Add all the contents of the packet
	for( i=0; i<size; i++) crc_result += *( data + i );
	crc_result |= 0x55;	// OR the result and get our crc
     de2:	2355      	movs	r3, #85	; 0x55
     de4:	431a      	orrs	r2, r3
	
	// Return result as boolean
	// pdTRUE  -> CRC Checks Out
	// pdFALSE -> CRC does NOT check out
	*( data + 5 ) = crc_result;
     de6:	7142      	strb	r2, [r0, #5]
	if ( crc_result == *(data + size) ) return pdTRUE;
     de8:	5c40      	ldrb	r0, [r0, r1]
     dea:	1a82      	subs	r2, r0, r2
     dec:	4250      	negs	r0, r2
     dee:	4150      	adcs	r0, r2
	else return pdFALSE;
}
     df0:	bd30      	pop	{r4, r5, pc}
     df2:	46c0      	nop			; (mov r8, r8)

00000df4 <crc_generate>:

// This is the function that generates the CRC byte
// The size does not include the spot for the CRC byte
void crc_generate( uint8_t* data, uint8_t size ) {
     df4:	b510      	push	{r4, lr}
	uint8_t i;
	*( data + size ) = 0;
     df6:	1842      	adds	r2, r0, r1
     df8:	2300      	movs	r3, #0
     dfa:	7013      	strb	r3, [r2, #0]
	
	// Add all the contents of the packet
	for( i=0; i<size; i++) *( data + size ) += *( data + i );
     dfc:	2900      	cmp	r1, #0
     dfe:	d00b      	beq.n	e18 <crc_generate+0x24>
     e00:	1c03      	adds	r3, r0, #0
     e02:	3001      	adds	r0, #1
     e04:	3901      	subs	r1, #1
     e06:	b2c9      	uxtb	r1, r1
     e08:	1840      	adds	r0, r0, r1
     e0a:	781c      	ldrb	r4, [r3, #0]
     e0c:	7811      	ldrb	r1, [r2, #0]
     e0e:	1861      	adds	r1, r4, r1
     e10:	7011      	strb	r1, [r2, #0]
     e12:	3301      	adds	r3, #1
     e14:	4283      	cmp	r3, r0
     e16:	d1f8      	bne.n	e0a <crc_generate+0x16>
	
	*( data + size ) |= 0x55;	// OR the CRC byte
     e18:	7811      	ldrb	r1, [r2, #0]
     e1a:	2355      	movs	r3, #85	; 0x55
     e1c:	430b      	orrs	r3, r1
     e1e:	7013      	strb	r3, [r2, #0]
}
     e20:	bd10      	pop	{r4, pc}
     e22:	46c0      	nop			; (mov r8, r8)

00000e24 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     e24:	4770      	bx	lr
     e26:	46c0      	nop			; (mov r8, r8)

00000e28 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     e28:	b530      	push	{r4, r5, lr}
     e2a:	4a0f      	ldr	r2, [pc, #60]	; (e68 <_sercom_set_handler+0x40>)
     e2c:	447a      	add	r2, pc
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     e2e:	4b0f      	ldr	r3, [pc, #60]	; (e6c <_sercom_set_handler+0x44>)
     e30:	447b      	add	r3, pc
     e32:	781b      	ldrb	r3, [r3, #0]
     e34:	2b00      	cmp	r3, #0
     e36:	d110      	bne.n	e5a <_sercom_set_handler+0x32>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     e38:	4b0d      	ldr	r3, [pc, #52]	; (e70 <_sercom_set_handler+0x48>)
     e3a:	447b      	add	r3, pc
     e3c:	4d0d      	ldr	r5, [pc, #52]	; (e74 <_sercom_set_handler+0x4c>)
     e3e:	447d      	add	r5, pc
     e40:	605d      	str	r5, [r3, #4]
			_sercom_instances[i] = NULL;
     e42:	4c0d      	ldr	r4, [pc, #52]	; (e78 <_sercom_set_handler+0x50>)
     e44:	5912      	ldr	r2, [r2, r4]
     e46:	2400      	movs	r4, #0
     e48:	6014      	str	r4, [r2, #0]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     e4a:	609d      	str	r5, [r3, #8]
			_sercom_instances[i] = NULL;
     e4c:	6054      	str	r4, [r2, #4]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     e4e:	60dd      	str	r5, [r3, #12]
			_sercom_instances[i] = NULL;
     e50:	6094      	str	r4, [r2, #8]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     e52:	611d      	str	r5, [r3, #16]
			_sercom_instances[i] = NULL;
     e54:	60d4      	str	r4, [r2, #12]
		}

		_handler_table_initialized = true;
     e56:	2201      	movs	r2, #1
     e58:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     e5a:	0080      	lsls	r0, r0, #2
     e5c:	4b07      	ldr	r3, [pc, #28]	; (e7c <_sercom_set_handler+0x54>)
     e5e:	447b      	add	r3, pc
     e60:	1818      	adds	r0, r3, r0
     e62:	6041      	str	r1, [r0, #4]
}
     e64:	bd30      	pop	{r4, r5, pc}
     e66:	46c0      	nop			; (mov r8, r8)
     e68:	00006fd8 	.word	0x00006fd8
     e6c:	1ffff65c 	.word	0x1ffff65c
     e70:	1ffff652 	.word	0x1ffff652
     e74:	ffffffe3 	.word	0xffffffe3
     e78:	00000118 	.word	0x00000118
     e7c:	1ffff62e 	.word	0x1ffff62e

00000e80 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     e80:	b570      	push	{r4, r5, r6, lr}
     e82:	b084      	sub	sp, #16
     e84:	1c06      	adds	r6, r0, #0
     e86:	4c08      	ldr	r4, [pc, #32]	; (ea8 <_sercom_get_interrupt_vector+0x28>)
     e88:	447c      	add	r4, pc
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     e8a:	ad03      	add	r5, sp, #12
     e8c:	1c28      	adds	r0, r5, #0
     e8e:	4907      	ldr	r1, [pc, #28]	; (eac <_sercom_get_interrupt_vector+0x2c>)
     e90:	4479      	add	r1, pc
     e92:	2204      	movs	r2, #4
     e94:	4b06      	ldr	r3, [pc, #24]	; (eb0 <_sercom_get_interrupt_vector+0x30>)
     e96:	58e3      	ldr	r3, [r4, r3]
     e98:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     e9a:	1c30      	adds	r0, r6, #0
     e9c:	4b05      	ldr	r3, [pc, #20]	; (eb4 <_sercom_get_interrupt_vector+0x34>)
     e9e:	58e3      	ldr	r3, [r4, r3]
     ea0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     ea2:	5628      	ldrsb	r0, [r5, r0]
}
     ea4:	b004      	add	sp, #16
     ea6:	bd70      	pop	{r4, r5, r6, pc}
     ea8:	00006f7c 	.word	0x00006f7c
     eac:	00005cdc 	.word	0x00005cdc
     eb0:	00000068 	.word	0x00000068
     eb4:	00000288 	.word	0x00000288

00000eb8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     eb8:	b508      	push	{r3, lr}
     eba:	4b03      	ldr	r3, [pc, #12]	; (ec8 <SERCOM0_Handler+0x10>)
     ebc:	447b      	add	r3, pc
     ebe:	685b      	ldr	r3, [r3, #4]
     ec0:	2000      	movs	r0, #0
     ec2:	4798      	blx	r3
     ec4:	bd08      	pop	{r3, pc}
     ec6:	46c0      	nop			; (mov r8, r8)
     ec8:	1ffff5d0 	.word	0x1ffff5d0

00000ecc <SERCOM1_Handler>:
     ecc:	b508      	push	{r3, lr}
     ece:	4b03      	ldr	r3, [pc, #12]	; (edc <SERCOM1_Handler+0x10>)
     ed0:	447b      	add	r3, pc
     ed2:	689b      	ldr	r3, [r3, #8]
     ed4:	2001      	movs	r0, #1
     ed6:	4798      	blx	r3
     ed8:	bd08      	pop	{r3, pc}
     eda:	46c0      	nop			; (mov r8, r8)
     edc:	1ffff5bc 	.word	0x1ffff5bc

00000ee0 <SERCOM2_Handler>:
     ee0:	b508      	push	{r3, lr}
     ee2:	4b03      	ldr	r3, [pc, #12]	; (ef0 <SERCOM2_Handler+0x10>)
     ee4:	447b      	add	r3, pc
     ee6:	68db      	ldr	r3, [r3, #12]
     ee8:	2002      	movs	r0, #2
     eea:	4798      	blx	r3
     eec:	bd08      	pop	{r3, pc}
     eee:	46c0      	nop			; (mov r8, r8)
     ef0:	1ffff5a8 	.word	0x1ffff5a8

00000ef4 <SERCOM3_Handler>:
     ef4:	b508      	push	{r3, lr}
     ef6:	4b03      	ldr	r3, [pc, #12]	; (f04 <SERCOM3_Handler+0x10>)
     ef8:	447b      	add	r3, pc
     efa:	691b      	ldr	r3, [r3, #16]
     efc:	2003      	movs	r0, #3
     efe:	4798      	blx	r3
     f00:	bd08      	pop	{r3, pc}
     f02:	46c0      	nop			; (mov r8, r8)
     f04:	1ffff594 	.word	0x1ffff594

00000f08 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     f08:	b5f0      	push	{r4, r5, r6, r7, lr}
     f0a:	465f      	mov	r7, fp
     f0c:	4656      	mov	r6, sl
     f0e:	464d      	mov	r5, r9
     f10:	4644      	mov	r4, r8
     f12:	b4f0      	push	{r4, r5, r6, r7}
     f14:	b09b      	sub	sp, #108	; 0x6c
     f16:	1c06      	adds	r6, r0, #0
     f18:	1c0c      	adds	r4, r1, #0
     f1a:	9208      	str	r2, [sp, #32]
     f1c:	4dc6      	ldr	r5, [pc, #792]	; (1238 <usart_init+0x330>)
     f1e:	447d      	add	r5, pc
     f20:	9509      	str	r5, [sp, #36]	; 0x24
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     f22:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f24:	1c08      	adds	r0, r1, #0
     f26:	4bc5      	ldr	r3, [pc, #788]	; (123c <usart_init+0x334>)
     f28:	58eb      	ldr	r3, [r5, r3]
     f2a:	4798      	blx	r3
     f2c:	1c02      	adds	r2, r0, #0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     f2e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     f30:	2005      	movs	r0, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     f32:	07df      	lsls	r7, r3, #31
     f34:	d500      	bpl.n	f38 <usart_init+0x30>
     f36:	e177      	b.n	1228 <usart_init+0x320>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     f38:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     f3a:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     f3c:	0799      	lsls	r1, r3, #30
     f3e:	d500      	bpl.n	f42 <usart_init+0x3a>
     f40:	e172      	b.n	1228 <usart_init+0x320>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     f42:	4bbf      	ldr	r3, [pc, #764]	; (1240 <usart_init+0x338>)
     f44:	6a18      	ldr	r0, [r3, #32]
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     f46:	1c95      	adds	r5, r2, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     f48:	2701      	movs	r7, #1
     f4a:	1c39      	adds	r1, r7, #0
     f4c:	40a9      	lsls	r1, r5
     f4e:	4301      	orrs	r1, r0
     f50:	6219      	str	r1, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     f52:	232d      	movs	r3, #45	; 0x2d
     f54:	9d08      	ldr	r5, [sp, #32]
     f56:	1c1f      	adds	r7, r3, #0
     f58:	5ceb      	ldrb	r3, [r5, r3]
     f5a:	a919      	add	r1, sp, #100	; 0x64
     f5c:	700b      	strb	r3, [r1, #0]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f5e:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     f60:	b2d2      	uxtb	r2, r2
     f62:	4691      	mov	r9, r2
     f64:	1c10      	adds	r0, r2, #0
     f66:	4bb7      	ldr	r3, [pc, #732]	; (1244 <usart_init+0x33c>)
     f68:	9d09      	ldr	r5, [sp, #36]	; 0x24
     f6a:	58eb      	ldr	r3, [r5, r3]
     f6c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     f6e:	4648      	mov	r0, r9
     f70:	4bb5      	ldr	r3, [pc, #724]	; (1248 <usart_init+0x340>)
     f72:	58eb      	ldr	r3, [r5, r3]
     f74:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     f76:	9d08      	ldr	r5, [sp, #32]
     f78:	5de8      	ldrb	r0, [r5, r7]
     f7a:	2100      	movs	r1, #0
     f7c:	4bb3      	ldr	r3, [pc, #716]	; (124c <usart_init+0x344>)
     f7e:	9d09      	ldr	r5, [sp, #36]	; 0x24
     f80:	58eb      	ldr	r3, [r5, r3]
     f82:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     f84:	9d08      	ldr	r5, [sp, #32]
     f86:	7aeb      	ldrb	r3, [r5, #11]
     f88:	7173      	strb	r3, [r6, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     f8a:	2324      	movs	r3, #36	; 0x24
     f8c:	5ceb      	ldrb	r3, [r5, r3]
     f8e:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
     f90:	2325      	movs	r3, #37	; 0x25
     f92:	5ceb      	ldrb	r3, [r5, r3]
     f94:	71f3      	strb	r3, [r6, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     f96:	7eeb      	ldrb	r3, [r5, #27]
     f98:	7233      	strb	r3, [r6, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     f9a:	7f2b      	ldrb	r3, [r5, #28]
     f9c:	7273      	strb	r3, [r6, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     f9e:	6837      	ldr	r7, [r6, #0]
     fa0:	46b9      	mov	r9, r7

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     fa2:	1c38      	adds	r0, r7, #0
     fa4:	4ba5      	ldr	r3, [pc, #660]	; (123c <usart_init+0x334>)
     fa6:	9d09      	ldr	r5, [sp, #36]	; 0x24
     fa8:	58eb      	ldr	r3, [r5, r3]
     faa:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     fac:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     fae:	2200      	movs	r2, #0
     fb0:	466b      	mov	r3, sp
     fb2:	334e      	adds	r3, #78	; 0x4e
     fb4:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     fb6:	9d08      	ldr	r5, [sp, #32]
     fb8:	8a2d      	ldrh	r5, [r5, #16]
     fba:	46a8      	mov	r8, r5
     fbc:	2380      	movs	r3, #128	; 0x80
     fbe:	01db      	lsls	r3, r3, #7
     fc0:	429d      	cmp	r5, r3
     fc2:	d01c      	beq.n	ffe <usart_init+0xf6>
     fc4:	2380      	movs	r3, #128	; 0x80
     fc6:	01db      	lsls	r3, r3, #7
     fc8:	429d      	cmp	r5, r3
     fca:	d804      	bhi.n	fd6 <usart_init+0xce>
     fcc:	2380      	movs	r3, #128	; 0x80
     fce:	019b      	lsls	r3, r3, #6
     fd0:	429d      	cmp	r5, r3
     fd2:	d00e      	beq.n	ff2 <usart_init+0xea>
     fd4:	e007      	b.n	fe6 <usart_init+0xde>
     fd6:	23c0      	movs	r3, #192	; 0xc0
     fd8:	01db      	lsls	r3, r3, #7
     fda:	429d      	cmp	r5, r3
     fdc:	d00c      	beq.n	ff8 <usart_init+0xf0>
     fde:	2380      	movs	r3, #128	; 0x80
     fe0:	021b      	lsls	r3, r3, #8
     fe2:	429d      	cmp	r5, r3
     fe4:	d002      	beq.n	fec <usart_init+0xe4>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     fe6:	2710      	movs	r7, #16
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     fe8:	2500      	movs	r5, #0
     fea:	e00a      	b.n	1002 <usart_init+0xfa>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     fec:	2703      	movs	r7, #3
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     fee:	2500      	movs	r5, #0
     ff0:	e007      	b.n	1002 <usart_init+0xfa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     ff2:	2710      	movs	r7, #16
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     ff4:	2501      	movs	r5, #1
     ff6:	e004      	b.n	1002 <usart_init+0xfa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     ff8:	2708      	movs	r7, #8
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     ffa:	2501      	movs	r5, #1
     ffc:	e001      	b.n	1002 <usart_init+0xfa>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     ffe:	2708      	movs	r7, #8
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1000:	2500      	movs	r5, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1002:	9908      	ldr	r1, [sp, #32]
    1004:	6809      	ldr	r1, [r1, #0]
    1006:	910a      	str	r1, [sp, #40]	; 0x28
		(uint32_t)config->mux_setting |
    1008:	9a08      	ldr	r2, [sp, #32]
    100a:	68d2      	ldr	r2, [r2, #12]
    100c:	920c      	str	r2, [sp, #48]	; 0x30
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    100e:	9b08      	ldr	r3, [sp, #32]
    1010:	695b      	ldr	r3, [r3, #20]
    1012:	930d      	str	r3, [sp, #52]	; 0x34
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1014:	9908      	ldr	r1, [sp, #32]
    1016:	7e09      	ldrb	r1, [r1, #24]
    1018:	910e      	str	r1, [sp, #56]	; 0x38
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    101a:	2326      	movs	r3, #38	; 0x26
    101c:	9a08      	ldr	r2, [sp, #32]
    101e:	5cd3      	ldrb	r3, [r2, r3]
    1020:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1022:	6853      	ldr	r3, [r2, #4]
    1024:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1026:	2b00      	cmp	r3, #0
    1028:	d017      	beq.n	105a <usart_init+0x152>
    102a:	2380      	movs	r3, #128	; 0x80
    102c:	055b      	lsls	r3, r3, #21
    102e:	459a      	cmp	sl, r3
    1030:	d13c      	bne.n	10ac <usart_init+0x1a4>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    1032:	2327      	movs	r3, #39	; 0x27
    1034:	5cd3      	ldrb	r3, [r2, r3]
    1036:	2b00      	cmp	r3, #0
    1038:	d13c      	bne.n	10b4 <usart_init+0x1ac>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    103a:	6a15      	ldr	r5, [r2, #32]
    103c:	b2c0      	uxtb	r0, r0
    103e:	4b84      	ldr	r3, [pc, #528]	; (1250 <usart_init+0x348>)
    1040:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1042:	58d3      	ldr	r3, [r2, r3]
    1044:	4798      	blx	r3
    1046:	1c01      	adds	r1, r0, #0
    1048:	1c28      	adds	r0, r5, #0
    104a:	466a      	mov	r2, sp
    104c:	324e      	adds	r2, #78	; 0x4e
    104e:	4b81      	ldr	r3, [pc, #516]	; (1254 <usart_init+0x34c>)
    1050:	9d09      	ldr	r5, [sp, #36]	; 0x24
    1052:	58eb      	ldr	r3, [r5, r3]
    1054:	4798      	blx	r3
    1056:	1c03      	adds	r3, r0, #0
    1058:	e029      	b.n	10ae <usart_init+0x1a6>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    105a:	2327      	movs	r3, #39	; 0x27
    105c:	9908      	ldr	r1, [sp, #32]
    105e:	5ccb      	ldrb	r3, [r1, r3]
    1060:	2b00      	cmp	r3, #0
    1062:	d00f      	beq.n	1084 <usart_init+0x17c>
				status_code =
    1064:	6a0a      	ldr	r2, [r1, #32]
    1066:	9207      	str	r2, [sp, #28]
    1068:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    106a:	9306      	str	r3, [sp, #24]
    106c:	9700      	str	r7, [sp, #0]
    106e:	1c10      	adds	r0, r2, #0
    1070:	1c19      	adds	r1, r3, #0
    1072:	466a      	mov	r2, sp
    1074:	324e      	adds	r2, #78	; 0x4e
    1076:	1c2b      	adds	r3, r5, #0
    1078:	4d77      	ldr	r5, [pc, #476]	; (1258 <usart_init+0x350>)
    107a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    107c:	597f      	ldr	r7, [r7, r5]
    107e:	47b8      	blx	r7
    1080:	1c03      	adds	r3, r0, #0
    1082:	e014      	b.n	10ae <usart_init+0x1a6>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1084:	9908      	ldr	r1, [sp, #32]
    1086:	6a09      	ldr	r1, [r1, #32]
    1088:	9110      	str	r1, [sp, #64]	; 0x40
    108a:	b2c0      	uxtb	r0, r0
    108c:	4b70      	ldr	r3, [pc, #448]	; (1250 <usart_init+0x348>)
    108e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1090:	58d3      	ldr	r3, [r2, r3]
    1092:	4798      	blx	r3
    1094:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    1096:	9700      	str	r7, [sp, #0]
    1098:	9810      	ldr	r0, [sp, #64]	; 0x40
    109a:	466a      	mov	r2, sp
    109c:	324e      	adds	r2, #78	; 0x4e
    109e:	1c2b      	adds	r3, r5, #0
    10a0:	4d6d      	ldr	r5, [pc, #436]	; (1258 <usart_init+0x350>)
    10a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    10a4:	597f      	ldr	r7, [r7, r5]
    10a6:	47b8      	blx	r7
    10a8:	1c03      	adds	r3, r0, #0
    10aa:	e000      	b.n	10ae <usart_init+0x1a6>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    10ac:	2300      	movs	r3, #0
    10ae:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    10b0:	d000      	beq.n	10b4 <usart_init+0x1ac>
    10b2:	e0b9      	b.n	1228 <usart_init+0x320>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    10b4:	9d08      	ldr	r5, [sp, #32]
    10b6:	7e6b      	ldrb	r3, [r5, #25]
    10b8:	2b00      	cmp	r3, #0
    10ba:	d002      	beq.n	10c2 <usart_init+0x1ba>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    10bc:	7eab      	ldrb	r3, [r5, #26]
    10be:	464f      	mov	r7, r9
    10c0:	73bb      	strb	r3, [r7, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    10c2:	6832      	ldr	r2, [r6, #0]
    10c4:	9f08      	ldr	r7, [sp, #32]
    10c6:	9d09      	ldr	r5, [sp, #36]	; 0x24

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    10c8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    10ca:	2b00      	cmp	r3, #0
    10cc:	d1fc      	bne.n	10c8 <usart_init+0x1c0>
    10ce:	9708      	str	r7, [sp, #32]
    10d0:	9509      	str	r5, [sp, #36]	; 0x24

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    10d2:	466b      	mov	r3, sp
    10d4:	334e      	adds	r3, #78	; 0x4e
    10d6:	881b      	ldrh	r3, [r3, #0]
    10d8:	4648      	mov	r0, r9
    10da:	8183      	strh	r3, [r0, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    10dc:	990c      	ldr	r1, [sp, #48]	; 0x30
    10de:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    10e0:	4329      	orrs	r1, r5
		(uint32_t)config->mux_setting |
    10e2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    10e4:	4339      	orrs	r1, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    10e6:	4650      	mov	r0, sl
    10e8:	4301      	orrs	r1, r0
		config->sample_rate |
    10ea:	4642      	mov	r2, r8
    10ec:	4311      	orrs	r1, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    10ee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    10f0:	022b      	lsls	r3, r5, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    10f2:	4319      	orrs	r1, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    10f4:	465f      	mov	r7, fp
    10f6:	077b      	lsls	r3, r7, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
    10f8:	4319      	orrs	r1, r3

	if (config->use_external_clock == false) {
    10fa:	2327      	movs	r3, #39	; 0x27
    10fc:	9d08      	ldr	r5, [sp, #32]
    10fe:	5ceb      	ldrb	r3, [r5, r3]
    1100:	2b00      	cmp	r3, #0
    1102:	d101      	bne.n	1108 <usart_init+0x200>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1104:	2304      	movs	r3, #4
    1106:	4319      	orrs	r1, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1108:	9d08      	ldr	r5, [sp, #32]
    110a:	7f28      	ldrb	r0, [r5, #28]
    110c:	0240      	lsls	r0, r0, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    110e:	7e6b      	ldrb	r3, [r5, #25]
    1110:	029b      	lsls	r3, r3, #10
    1112:	4318      	orrs	r0, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1114:	7f6b      	ldrb	r3, [r5, #29]
    1116:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1118:	4318      	orrs	r0, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    111a:	2324      	movs	r3, #36	; 0x24
    111c:	5ceb      	ldrb	r3, [r5, r3]
    111e:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1120:	4318      	orrs	r0, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1122:	2325      	movs	r3, #37	; 0x25
    1124:	5ceb      	ldrb	r3, [r5, r3]
    1126:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1128:	4318      	orrs	r0, r3
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    112a:	7aeb      	ldrb	r3, [r5, #11]
    112c:	4318      	orrs	r0, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    112e:	892b      	ldrh	r3, [r5, #8]
    1130:	2bff      	cmp	r3, #255	; 0xff
    1132:	d004      	beq.n	113e <usart_init+0x236>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1134:	2280      	movs	r2, #128	; 0x80
    1136:	0452      	lsls	r2, r2, #17
    1138:	4311      	orrs	r1, r2
		ctrlb |= config->parity;
    113a:	4318      	orrs	r0, r3
    113c:	e006      	b.n	114c <usart_init+0x244>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    113e:	9d08      	ldr	r5, [sp, #32]
    1140:	7eeb      	ldrb	r3, [r5, #27]
    1142:	2b00      	cmp	r3, #0
    1144:	d002      	beq.n	114c <usart_init+0x244>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1146:	2380      	movs	r3, #128	; 0x80
    1148:	04db      	lsls	r3, r3, #19
    114a:	4319      	orrs	r1, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    114c:	232c      	movs	r3, #44	; 0x2c
    114e:	9d08      	ldr	r5, [sp, #32]
    1150:	5ceb      	ldrb	r3, [r5, r3]
    1152:	2b00      	cmp	r3, #0
    1154:	d103      	bne.n	115e <usart_init+0x256>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1156:	4b41      	ldr	r3, [pc, #260]	; (125c <usart_init+0x354>)
    1158:	789b      	ldrb	r3, [r3, #2]
    115a:	079f      	lsls	r7, r3, #30
    115c:	d501      	bpl.n	1162 <usart_init+0x25a>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    115e:	2380      	movs	r3, #128	; 0x80
    1160:	4319      	orrs	r1, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1162:	6832      	ldr	r2, [r6, #0]
    1164:	9f08      	ldr	r7, [sp, #32]
    1166:	9d09      	ldr	r5, [sp, #36]	; 0x24

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1168:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    116a:	2b00      	cmp	r3, #0
    116c:	d1fc      	bne.n	1168 <usart_init+0x260>
    116e:	9708      	str	r7, [sp, #32]
    1170:	9509      	str	r5, [sp, #36]	; 0x24

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1172:	464a      	mov	r2, r9
    1174:	6050      	str	r0, [r2, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1176:	6832      	ldr	r2, [r6, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1178:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    117a:	2b00      	cmp	r3, #0
    117c:	d1fc      	bne.n	1178 <usart_init+0x270>
    117e:	9708      	str	r7, [sp, #32]
    1180:	9509      	str	r5, [sp, #36]	; 0x24

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    1182:	464b      	mov	r3, r9
    1184:	6019      	str	r1, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1186:	2280      	movs	r2, #128	; 0x80
    1188:	ab18      	add	r3, sp, #96	; 0x60
    118a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    118c:	2200      	movs	r2, #0
    118e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1190:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1192:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    1194:	6b3d      	ldr	r5, [r7, #48]	; 0x30
    1196:	9514      	str	r5, [sp, #80]	; 0x50
    1198:	6b7f      	ldr	r7, [r7, #52]	; 0x34
    119a:	9715      	str	r7, [sp, #84]	; 0x54
    119c:	9808      	ldr	r0, [sp, #32]
    119e:	6b80      	ldr	r0, [r0, #56]	; 0x38
    11a0:	9016      	str	r0, [sp, #88]	; 0x58
    11a2:	9908      	ldr	r1, [sp, #32]
    11a4:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    11a6:	9117      	str	r1, [sp, #92]	; 0x5c
    11a8:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    11aa:	aa18      	add	r2, sp, #96	; 0x60
    11ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
    11ae:	46a0      	mov	r8, r4
    11b0:	1c14      	adds	r4, r2, #0
    11b2:	b2f9      	uxtb	r1, r7
    11b4:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    11b6:	aa14      	add	r2, sp, #80	; 0x50
    11b8:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    11ba:	2800      	cmp	r0, #0
    11bc:	d103      	bne.n	11c6 <usart_init+0x2be>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    11be:	4640      	mov	r0, r8
    11c0:	4b27      	ldr	r3, [pc, #156]	; (1260 <usart_init+0x358>)
    11c2:	58eb      	ldr	r3, [r5, r3]
    11c4:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    11c6:	1c43      	adds	r3, r0, #1
    11c8:	d006      	beq.n	11d8 <usart_init+0x2d0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    11ca:	7020      	strb	r0, [r4, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    11cc:	0c00      	lsrs	r0, r0, #16
    11ce:	b2c0      	uxtb	r0, r0
    11d0:	1c21      	adds	r1, r4, #0
    11d2:	4b24      	ldr	r3, [pc, #144]	; (1264 <usart_init+0x35c>)
    11d4:	58eb      	ldr	r3, [r5, r3]
    11d6:	4798      	blx	r3
    11d8:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    11da:	2f04      	cmp	r7, #4
    11dc:	d1e9      	bne.n	11b2 <usart_init+0x2aa>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    11de:	2300      	movs	r3, #0
    11e0:	60f3      	str	r3, [r6, #12]
    11e2:	6133      	str	r3, [r6, #16]
    11e4:	6173      	str	r3, [r6, #20]
    11e6:	61b3      	str	r3, [r6, #24]
    11e8:	61f3      	str	r3, [r6, #28]
    11ea:	6233      	str	r3, [r6, #32]
	}

	module->tx_buffer_ptr              = NULL;
    11ec:	62b3      	str	r3, [r6, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    11ee:	6273      	str	r3, [r6, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    11f0:	2200      	movs	r2, #0
    11f2:	85f3      	strh	r3, [r6, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    11f4:	85b3      	strh	r3, [r6, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    11f6:	2330      	movs	r3, #48	; 0x30
    11f8:	54f2      	strb	r2, [r6, r3]
	module->callback_enable_mask       = 0x00;
    11fa:	2331      	movs	r3, #49	; 0x31
    11fc:	54f2      	strb	r2, [r6, r3]
	module->rx_status                  = STATUS_OK;
    11fe:	2332      	movs	r3, #50	; 0x32
    1200:	54f2      	strb	r2, [r6, r3]
	module->tx_status                  = STATUS_OK;
    1202:	2333      	movs	r3, #51	; 0x33
    1204:	54f2      	strb	r2, [r6, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1206:	6830      	ldr	r0, [r6, #0]
    1208:	4b0c      	ldr	r3, [pc, #48]	; (123c <usart_init+0x334>)
    120a:	58eb      	ldr	r3, [r5, r3]
    120c:	4798      	blx	r3
    120e:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1210:	4b15      	ldr	r3, [pc, #84]	; (1268 <usart_init+0x360>)
    1212:	58eb      	ldr	r3, [r5, r3]
    1214:	930a      	str	r3, [sp, #40]	; 0x28
    1216:	1c19      	adds	r1, r3, #0
    1218:	4b14      	ldr	r3, [pc, #80]	; (126c <usart_init+0x364>)
    121a:	58eb      	ldr	r3, [r5, r3]
    121c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    121e:	4b14      	ldr	r3, [pc, #80]	; (1270 <usart_init+0x368>)
    1220:	58eb      	ldr	r3, [r5, r3]
    1222:	00a4      	lsls	r4, r4, #2
    1224:	50e6      	str	r6, [r4, r3]
#endif

	return status_code;
    1226:	2000      	movs	r0, #0
}
    1228:	b01b      	add	sp, #108	; 0x6c
    122a:	bc3c      	pop	{r2, r3, r4, r5}
    122c:	4690      	mov	r8, r2
    122e:	4699      	mov	r9, r3
    1230:	46a2      	mov	sl, r4
    1232:	46ab      	mov	fp, r5
    1234:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1236:	46c0      	nop			; (mov r8, r8)
    1238:	00006ee6 	.word	0x00006ee6
    123c:	00000288 	.word	0x00000288
    1240:	40000400 	.word	0x40000400
    1244:	00000094 	.word	0x00000094
    1248:	000001ec 	.word	0x000001ec
    124c:	000001e8 	.word	0x000001e8
    1250:	00000154 	.word	0x00000154
    1254:	000000e4 	.word	0x000000e4
    1258:	00000024 	.word	0x00000024
    125c:	41002000 	.word	0x41002000
    1260:	000002ac 	.word	0x000002ac
    1264:	00000294 	.word	0x00000294
    1268:	000001fc 	.word	0x000001fc
    126c:	00000128 	.word	0x00000128
    1270:	00000118 	.word	0x00000118

00001274 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1274:	b5f0      	push	{r4, r5, r6, r7, lr}
    1276:	4647      	mov	r7, r8
    1278:	b480      	push	{r7}
    127a:	b082      	sub	sp, #8
    127c:	1c05      	adds	r5, r0, #0
    127e:	1c0f      	adds	r7, r1, #0
    1280:	4690      	mov	r8, r2
    1282:	4c0f      	ldr	r4, [pc, #60]	; (12c0 <_usart_write_buffer+0x4c>)
    1284:	447c      	add	r4, pc
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1286:	6806      	ldr	r6, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1288:	4b0e      	ldr	r3, [pc, #56]	; (12c4 <_usart_write_buffer+0x50>)
    128a:	58e3      	ldr	r3, [r4, r3]
    128c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    128e:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1290:	b29b      	uxth	r3, r3
    1292:	2b00      	cmp	r3, #0
    1294:	d004      	beq.n	12a0 <_usart_write_buffer+0x2c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1296:	4b0c      	ldr	r3, [pc, #48]	; (12c8 <_usart_write_buffer+0x54>)
    1298:	58e3      	ldr	r3, [r4, r3]
    129a:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    129c:	2005      	movs	r0, #5
    129e:	e00b      	b.n	12b8 <_usart_write_buffer+0x44>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    12a0:	4643      	mov	r3, r8
    12a2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    12a4:	4b08      	ldr	r3, [pc, #32]	; (12c8 <_usart_write_buffer+0x54>)
    12a6:	58e3      	ldr	r3, [r4, r3]
    12a8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->tx_buffer_ptr              = tx_data;
    12aa:	62af      	str	r7, [r5, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    12ac:	2205      	movs	r2, #5
    12ae:	2333      	movs	r3, #51	; 0x33
    12b0:	54ea      	strb	r2, [r5, r3]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    12b2:	2301      	movs	r3, #1
    12b4:	75b3      	strb	r3, [r6, #22]

	return STATUS_OK;
    12b6:	2000      	movs	r0, #0
}
    12b8:	b002      	add	sp, #8
    12ba:	bc04      	pop	{r2}
    12bc:	4690      	mov	r8, r2
    12be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12c0:	00006b80 	.word	0x00006b80
    12c4:	000000ac 	.word	0x000000ac
    12c8:	0000000c 	.word	0x0000000c

000012cc <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    12cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    12ce:	4647      	mov	r7, r8
    12d0:	b480      	push	{r7}
    12d2:	b082      	sub	sp, #8
    12d4:	1c04      	adds	r4, r0, #0
    12d6:	1c0f      	adds	r7, r1, #0
    12d8:	4690      	mov	r8, r2
    12da:	4d14      	ldr	r5, [pc, #80]	; (132c <_usart_read_buffer+0x60>)
    12dc:	447d      	add	r5, pc
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    12de:	6806      	ldr	r6, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    12e0:	4b13      	ldr	r3, [pc, #76]	; (1330 <_usart_read_buffer+0x64>)
    12e2:	58eb      	ldr	r3, [r5, r3]
    12e4:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    12e6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    12e8:	b29b      	uxth	r3, r3
    12ea:	2b00      	cmp	r3, #0
    12ec:	d004      	beq.n	12f8 <_usart_read_buffer+0x2c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    12ee:	4b11      	ldr	r3, [pc, #68]	; (1334 <_usart_read_buffer+0x68>)
    12f0:	58eb      	ldr	r3, [r5, r3]
    12f2:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    12f4:	2005      	movs	r0, #5
    12f6:	e015      	b.n	1324 <_usart_read_buffer+0x58>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    12f8:	4643      	mov	r3, r8
    12fa:	85a3      	strh	r3, [r4, #44]	; 0x2c
    12fc:	4b0d      	ldr	r3, [pc, #52]	; (1334 <_usart_read_buffer+0x68>)
    12fe:	58eb      	ldr	r3, [r5, r3]
    1300:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->rx_buffer_ptr              = rx_data;
    1302:	6267      	str	r7, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    1304:	2205      	movs	r2, #5
    1306:	2332      	movs	r3, #50	; 0x32
    1308:	54e2      	strb	r2, [r4, r3]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    130a:	2304      	movs	r3, #4
    130c:	75b3      	strb	r3, [r6, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    130e:	7a23      	ldrb	r3, [r4, #8]
    1310:	2b00      	cmp	r3, #0
    1312:	d001      	beq.n	1318 <_usart_read_buffer+0x4c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    1314:	2320      	movs	r3, #32
    1316:	75b3      	strb	r3, [r6, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    1318:	7a63      	ldrb	r3, [r4, #9]
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
    131a:	2000      	movs	r0, #0
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    131c:	2b00      	cmp	r3, #0
    131e:	d001      	beq.n	1324 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    1320:	2308      	movs	r3, #8
    1322:	75b3      	strb	r3, [r6, #22]
	}
#endif

	return STATUS_OK;
}
    1324:	b002      	add	sp, #8
    1326:	bc04      	pop	{r2}
    1328:	4690      	mov	r8, r2
    132a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    132c:	00006b28 	.word	0x00006b28
    1330:	000000ac 	.word	0x000000ac
    1334:	0000000c 	.word	0x0000000c

00001338 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1338:	1c93      	adds	r3, r2, #2
    133a:	009b      	lsls	r3, r3, #2
    133c:	18c3      	adds	r3, r0, r3
    133e:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    1340:	2301      	movs	r3, #1
    1342:	4093      	lsls	r3, r2
    1344:	1c1a      	adds	r2, r3, #0
    1346:	2330      	movs	r3, #48	; 0x30
    1348:	5cc1      	ldrb	r1, [r0, r3]
    134a:	430a      	orrs	r2, r1
    134c:	54c2      	strb	r2, [r0, r3]
}
    134e:	4770      	bx	lr

00001350 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1350:	b530      	push	{r4, r5, lr}
    1352:	b083      	sub	sp, #12
    1354:	4c07      	ldr	r4, [pc, #28]	; (1374 <usart_write_buffer_job+0x24>)
    1356:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1358:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    135a:	2a00      	cmp	r2, #0
    135c:	d007      	beq.n	136e <usart_write_buffer_job+0x1e>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    135e:	79c5      	ldrb	r5, [r0, #7]
		return STATUS_ERR_DENIED;
    1360:	231c      	movs	r3, #28
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    1362:	2d00      	cmp	r5, #0
    1364:	d003      	beq.n	136e <usart_write_buffer_job+0x1e>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    1366:	4b04      	ldr	r3, [pc, #16]	; (1378 <usart_write_buffer_job+0x28>)
    1368:	58e3      	ldr	r3, [r4, r3]
    136a:	4798      	blx	r3
    136c:	1c03      	adds	r3, r0, #0
}
    136e:	1c18      	adds	r0, r3, #0
    1370:	b003      	add	sp, #12
    1372:	bd30      	pop	{r4, r5, pc}
    1374:	00006aae 	.word	0x00006aae
    1378:	000000c4 	.word	0x000000c4

0000137c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    137c:	b530      	push	{r4, r5, lr}
    137e:	b083      	sub	sp, #12
    1380:	4c07      	ldr	r4, [pc, #28]	; (13a0 <usart_read_buffer_job+0x24>)
    1382:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1384:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    1386:	2a00      	cmp	r2, #0
    1388:	d007      	beq.n	139a <usart_read_buffer_job+0x1e>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    138a:	7985      	ldrb	r5, [r0, #6]
		return STATUS_ERR_DENIED;
    138c:	231c      	movs	r3, #28
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    138e:	2d00      	cmp	r5, #0
    1390:	d003      	beq.n	139a <usart_read_buffer_job+0x1e>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    1392:	4b04      	ldr	r3, [pc, #16]	; (13a4 <usart_read_buffer_job+0x28>)
    1394:	58e3      	ldr	r3, [r4, r3]
    1396:	4798      	blx	r3
    1398:	1c03      	adds	r3, r0, #0
}
    139a:	1c18      	adds	r0, r3, #0
    139c:	b003      	add	sp, #12
    139e:	bd30      	pop	{r4, r5, pc}
    13a0:	00006a82 	.word	0x00006a82
    13a4:	000000dc 	.word	0x000000dc

000013a8 <usart_abort_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    13a8:	6803      	ldr	r3, [r0, #0]

	switch(transceiver_type) {
    13aa:	2900      	cmp	r1, #0
    13ac:	d002      	beq.n	13b4 <usart_abort_job+0xc>
    13ae:	2901      	cmp	r1, #1
    13b0:	d005      	beq.n	13be <usart_abort_job+0x16>
    13b2:	e008      	b.n	13c6 <usart_abort_job+0x1e>
		case USART_TRANSCEIVER_RX:
			/* Clear the interrupt flag in order to prevent the receive
			 * complete callback to fire */
			usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
    13b4:	2204      	movs	r2, #4
    13b6:	761a      	strb	r2, [r3, #24]

			/* Clear the software reception buffer */
			module->remaining_rx_buffer_length = 0;
    13b8:	2300      	movs	r3, #0
    13ba:	8583      	strh	r3, [r0, #44]	; 0x2c

			break;
    13bc:	e003      	b.n	13c6 <usart_abort_job+0x1e>

		case USART_TRANSCEIVER_TX:
			/* Clear the interrupt flag in order to prevent the receive
			 * complete callback to fire */
			usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
    13be:	2202      	movs	r2, #2
    13c0:	761a      	strb	r2, [r3, #24]

			/* Clear the software reception buffer */
			module->remaining_tx_buffer_length = 0;
    13c2:	2300      	movs	r3, #0
    13c4:	85c3      	strh	r3, [r0, #46]	; 0x2e

			break;
	}
}
    13c6:	4770      	bx	lr

000013c8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    13c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13ca:	b083      	sub	sp, #12
    13cc:	4b66      	ldr	r3, [pc, #408]	; (1568 <_usart_interrupt_handler+0x1a0>)
    13ce:	447b      	add	r3, pc
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    13d0:	4a66      	ldr	r2, [pc, #408]	; (156c <_usart_interrupt_handler+0x1a4>)
    13d2:	589a      	ldr	r2, [r3, r2]
    13d4:	0080      	lsls	r0, r0, #2
    13d6:	5885      	ldr	r5, [r0, r2]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    13d8:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    13da:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    13dc:	2b00      	cmp	r3, #0
    13de:	d1fc      	bne.n	13da <_usart_interrupt_handler+0x12>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    13e0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    13e2:	7da6      	ldrb	r6, [r4, #22]
    13e4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    13e6:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    13e8:	5ceb      	ldrb	r3, [r5, r3]
    13ea:	2230      	movs	r2, #48	; 0x30
    13ec:	5caf      	ldrb	r7, [r5, r2]
    13ee:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    13f0:	07f1      	lsls	r1, r6, #31
    13f2:	d520      	bpl.n	1436 <_usart_interrupt_handler+0x6e>
		if (module->remaining_tx_buffer_length) {
    13f4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    13f6:	b29b      	uxth	r3, r3
    13f8:	2b00      	cmp	r3, #0
    13fa:	d01a      	beq.n	1432 <_usart_interrupt_handler+0x6a>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    13fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    13fe:	781a      	ldrb	r2, [r3, #0]
    1400:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1402:	1c59      	adds	r1, r3, #1
    1404:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1406:	7969      	ldrb	r1, [r5, #5]
    1408:	2901      	cmp	r1, #1
    140a:	d104      	bne.n	1416 <_usart_interrupt_handler+0x4e>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    140c:	7859      	ldrb	r1, [r3, #1]
    140e:	0209      	lsls	r1, r1, #8
    1410:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1412:	3302      	adds	r3, #2
    1414:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1416:	05d3      	lsls	r3, r2, #23
    1418:	0ddb      	lsrs	r3, r3, #23
    141a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    141c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    141e:	3b01      	subs	r3, #1
    1420:	b29b      	uxth	r3, r3
    1422:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1424:	2b00      	cmp	r3, #0
    1426:	d106      	bne.n	1436 <_usart_interrupt_handler+0x6e>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1428:	2301      	movs	r3, #1
    142a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    142c:	2302      	movs	r3, #2
    142e:	75a3      	strb	r3, [r4, #22]
    1430:	e001      	b.n	1436 <_usart_interrupt_handler+0x6e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1432:	2301      	movs	r3, #1
    1434:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1436:	07b2      	lsls	r2, r6, #30
    1438:	d509      	bpl.n	144e <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    143a:	2302      	movs	r3, #2
    143c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    143e:	2200      	movs	r2, #0
    1440:	2333      	movs	r3, #51	; 0x33
    1442:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1444:	07fb      	lsls	r3, r7, #31
    1446:	d502      	bpl.n	144e <_usart_interrupt_handler+0x86>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1448:	1c28      	adds	r0, r5, #0
    144a:	68e9      	ldr	r1, [r5, #12]
    144c:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    144e:	0772      	lsls	r2, r6, #29
    1450:	d56a      	bpl.n	1528 <_usart_interrupt_handler+0x160>

		if (module->remaining_rx_buffer_length) {
    1452:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1454:	b29b      	uxth	r3, r3
    1456:	2b00      	cmp	r3, #0
    1458:	d064      	beq.n	1524 <_usart_interrupt_handler+0x15c>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    145a:	8b63      	ldrh	r3, [r4, #26]
    145c:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    145e:	0719      	lsls	r1, r3, #28
    1460:	d402      	bmi.n	1468 <_usart_interrupt_handler+0xa0>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1462:	223f      	movs	r2, #63	; 0x3f
    1464:	4013      	ands	r3, r2
    1466:	e001      	b.n	146c <_usart_interrupt_handler+0xa4>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1468:	2237      	movs	r2, #55	; 0x37
    146a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    146c:	2b00      	cmp	r3, #0
    146e:	d037      	beq.n	14e0 <_usart_interrupt_handler+0x118>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1470:	079a      	lsls	r2, r3, #30
    1472:	d507      	bpl.n	1484 <_usart_interrupt_handler+0xbc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1474:	221a      	movs	r2, #26
    1476:	2332      	movs	r3, #50	; 0x32
    1478:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    147a:	8b62      	ldrh	r2, [r4, #26]
    147c:	2302      	movs	r3, #2
    147e:	4313      	orrs	r3, r2
    1480:	8363      	strh	r3, [r4, #26]
    1482:	e027      	b.n	14d4 <_usart_interrupt_handler+0x10c>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1484:	0759      	lsls	r1, r3, #29
    1486:	d507      	bpl.n	1498 <_usart_interrupt_handler+0xd0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1488:	221e      	movs	r2, #30
    148a:	2332      	movs	r3, #50	; 0x32
    148c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    148e:	8b62      	ldrh	r2, [r4, #26]
    1490:	2304      	movs	r3, #4
    1492:	4313      	orrs	r3, r2
    1494:	8363      	strh	r3, [r4, #26]
    1496:	e01d      	b.n	14d4 <_usart_interrupt_handler+0x10c>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1498:	07da      	lsls	r2, r3, #31
    149a:	d507      	bpl.n	14ac <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    149c:	2213      	movs	r2, #19
    149e:	2332      	movs	r3, #50	; 0x32
    14a0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    14a2:	8b62      	ldrh	r2, [r4, #26]
    14a4:	2301      	movs	r3, #1
    14a6:	4313      	orrs	r3, r2
    14a8:	8363      	strh	r3, [r4, #26]
    14aa:	e013      	b.n	14d4 <_usart_interrupt_handler+0x10c>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    14ac:	06d9      	lsls	r1, r3, #27
    14ae:	d507      	bpl.n	14c0 <_usart_interrupt_handler+0xf8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    14b0:	2242      	movs	r2, #66	; 0x42
    14b2:	2332      	movs	r3, #50	; 0x32
    14b4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    14b6:	8b62      	ldrh	r2, [r4, #26]
    14b8:	2310      	movs	r3, #16
    14ba:	4313      	orrs	r3, r2
    14bc:	8363      	strh	r3, [r4, #26]
    14be:	e009      	b.n	14d4 <_usart_interrupt_handler+0x10c>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    14c0:	2220      	movs	r2, #32
    14c2:	421a      	tst	r2, r3
    14c4:	d006      	beq.n	14d4 <_usart_interrupt_handler+0x10c>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    14c6:	2241      	movs	r2, #65	; 0x41
    14c8:	2332      	movs	r3, #50	; 0x32
    14ca:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    14cc:	8b62      	ldrh	r2, [r4, #26]
    14ce:	2320      	movs	r3, #32
    14d0:	4313      	orrs	r3, r2
    14d2:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    14d4:	077a      	lsls	r2, r7, #29
    14d6:	d527      	bpl.n	1528 <_usart_interrupt_handler+0x160>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    14d8:	1c28      	adds	r0, r5, #0
    14da:	696b      	ldr	r3, [r5, #20]
    14dc:	4798      	blx	r3
    14de:	e023      	b.n	1528 <_usart_interrupt_handler+0x160>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    14e0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    14e2:	05d2      	lsls	r2, r2, #23
    14e4:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    14e6:	b2d3      	uxtb	r3, r2
    14e8:	6a69      	ldr	r1, [r5, #36]	; 0x24
    14ea:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    14ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    14ee:	1c59      	adds	r1, r3, #1
    14f0:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    14f2:	7969      	ldrb	r1, [r5, #5]
    14f4:	2901      	cmp	r1, #1
    14f6:	d104      	bne.n	1502 <_usart_interrupt_handler+0x13a>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    14f8:	0a12      	lsrs	r2, r2, #8
    14fa:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    14fc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    14fe:	3301      	adds	r3, #1
    1500:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1502:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1504:	3b01      	subs	r3, #1
    1506:	b29b      	uxth	r3, r3
    1508:	85ab      	strh	r3, [r5, #44]	; 0x2c
    150a:	2b00      	cmp	r3, #0
    150c:	d10c      	bne.n	1528 <_usart_interrupt_handler+0x160>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    150e:	2304      	movs	r3, #4
    1510:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1512:	2200      	movs	r2, #0
    1514:	2332      	movs	r3, #50	; 0x32
    1516:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1518:	07ba      	lsls	r2, r7, #30
    151a:	d505      	bpl.n	1528 <_usart_interrupt_handler+0x160>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    151c:	1c28      	adds	r0, r5, #0
    151e:	692b      	ldr	r3, [r5, #16]
    1520:	4798      	blx	r3
    1522:	e001      	b.n	1528 <_usart_interrupt_handler+0x160>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1524:	2304      	movs	r3, #4
    1526:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1528:	06f1      	lsls	r1, r6, #27
    152a:	d507      	bpl.n	153c <_usart_interrupt_handler+0x174>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    152c:	2310      	movs	r3, #16
    152e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1530:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1532:	06fa      	lsls	r2, r7, #27
    1534:	d502      	bpl.n	153c <_usart_interrupt_handler+0x174>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1536:	1c28      	adds	r0, r5, #0
    1538:	69eb      	ldr	r3, [r5, #28]
    153a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    153c:	06b1      	lsls	r1, r6, #26
    153e:	d507      	bpl.n	1550 <_usart_interrupt_handler+0x188>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1540:	2320      	movs	r3, #32
    1542:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1544:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1546:	073a      	lsls	r2, r7, #28
    1548:	d502      	bpl.n	1550 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    154a:	1c28      	adds	r0, r5, #0
    154c:	69ab      	ldr	r3, [r5, #24]
    154e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1550:	0731      	lsls	r1, r6, #28
    1552:	d507      	bpl.n	1564 <_usart_interrupt_handler+0x19c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1554:	2308      	movs	r3, #8
    1556:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1558:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    155a:	06ba      	lsls	r2, r7, #26
    155c:	d502      	bpl.n	1564 <_usart_interrupt_handler+0x19c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    155e:	6a2b      	ldr	r3, [r5, #32]
    1560:	1c28      	adds	r0, r5, #0
    1562:	4798      	blx	r3
		}
	}
#endif
}
    1564:	b003      	add	sp, #12
    1566:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1568:	00006a36 	.word	0x00006a36
    156c:	00000118 	.word	0x00000118

00001570 <vTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., NTask) in trcConfig.h is too small.
 ******************************************************************************/
void vTraceError(const char* msg)
{
    1570:	b510      	push	{r4, lr}
    1572:	b082      	sub	sp, #8
    1574:	1c01      	adds	r1, r0, #0
    1576:	4c16      	ldr	r4, [pc, #88]	; (15d0 <vTraceError+0x60>)
    1578:	447c      	add	r4, pc
	TRACE_ASSERT(msg != NULL, "vTraceError: msg == NULL", );
    157a:	2800      	cmp	r0, #0
    157c:	d105      	bne.n	158a <vTraceError+0x1a>
    157e:	4815      	ldr	r0, [pc, #84]	; (15d4 <vTraceError+0x64>)
    1580:	4478      	add	r0, pc
    1582:	4b15      	ldr	r3, [pc, #84]	; (15d8 <vTraceError+0x68>)
    1584:	58e3      	ldr	r3, [r4, r3]
    1586:	4798      	blx	r3
    1588:	e020      	b.n	15cc <vTraceError+0x5c>
	TRACE_ASSERT(RecorderDataPtr != NULL, "vTraceError: RecorderDataPtr == NULL", );
    158a:	4b14      	ldr	r3, [pc, #80]	; (15dc <vTraceError+0x6c>)
    158c:	58e3      	ldr	r3, [r4, r3]
    158e:	681b      	ldr	r3, [r3, #0]
    1590:	2b00      	cmp	r3, #0
    1592:	d105      	bne.n	15a0 <vTraceError+0x30>
    1594:	4812      	ldr	r0, [pc, #72]	; (15e0 <vTraceError+0x70>)
    1596:	4478      	add	r0, pc
    1598:	4b0f      	ldr	r3, [pc, #60]	; (15d8 <vTraceError+0x68>)
    159a:	58e3      	ldr	r3, [r4, r3]
    159c:	4798      	blx	r3
    159e:	e015      	b.n	15cc <vTraceError+0x5c>

	/* Stop the recorder. Note: We do not call vTraceStop, since that adds a weird
	and unnecessary dependency to trcUser.c */

	RecorderDataPtr->recorderActive = 0;
    15a0:	2200      	movs	r2, #0
    15a2:	631a      	str	r2, [r3, #48]	; 0x30

	if (traceErrorMessage == NULL)
    15a4:	4a0f      	ldr	r2, [pc, #60]	; (15e4 <vTraceError+0x74>)
    15a6:	58a2      	ldr	r2, [r4, r2]
    15a8:	6812      	ldr	r2, [r2, #0]
    15aa:	2a00      	cmp	r2, #0
    15ac:	d10e      	bne.n	15cc <vTraceError+0x5c>
	{
		traceErrorMessage = (char*)msg;
    15ae:	4a0d      	ldr	r2, [pc, #52]	; (15e4 <vTraceError+0x74>)
    15b0:	58a2      	ldr	r2, [r4, r2]
    15b2:	6010      	str	r0, [r2, #0]
		(void)strncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    15b4:	4a0c      	ldr	r2, [pc, #48]	; (15e8 <vTraceError+0x78>)
    15b6:	1898      	adds	r0, r3, r2
    15b8:	2250      	movs	r2, #80	; 0x50
    15ba:	4b0c      	ldr	r3, [pc, #48]	; (15ec <vTraceError+0x7c>)
    15bc:	58e3      	ldr	r3, [r4, r3]
    15be:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;	 	 
    15c0:	4b06      	ldr	r3, [pc, #24]	; (15dc <vTraceError+0x6c>)
    15c2:	58e3      	ldr	r3, [r4, r3]
    15c4:	681a      	ldr	r2, [r3, #0]
    15c6:	2101      	movs	r1, #1
    15c8:	4b09      	ldr	r3, [pc, #36]	; (15f0 <vTraceError+0x80>)
    15ca:	50d1      	str	r1, [r2, r3]
	}
	
}
    15cc:	b002      	add	sp, #8
    15ce:	bd10      	pop	{r4, pc}
    15d0:	0000688c 	.word	0x0000688c
    15d4:	000055f0 	.word	0x000055f0
    15d8:	00000120 	.word	0x00000120
    15dc:	00000028 	.word	0x00000028
    15e0:	00005602 	.word	0x00005602
    15e4:	00000280 	.word	0x00000280
    15e8:	000007dc 	.word	0x000007dc
    15ec:	00000164 	.word	0x00000164
    15f0:	000007d4 	.word	0x000007d4

000015f4 <prvTraceInitTraceData>:

RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{		
    15f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    15f6:	465f      	mov	r7, fp
    15f8:	4656      	mov	r6, sl
    15fa:	464d      	mov	r5, r9
    15fc:	4644      	mov	r4, r8
    15fe:	b4f0      	push	{r4, r5, r6, r7}
    1600:	b083      	sub	sp, #12
    1602:	4d51      	ldr	r5, [pc, #324]	; (1748 <prvTraceInitTraceData+0x154>)
    1604:	447d      	add	r5, pc
	init_hwtc_count = HWTC_COUNT;
    1606:	4b51      	ldr	r3, [pc, #324]	; (174c <prvTraceInitTraceData+0x158>)
    1608:	681a      	ldr	r2, [r3, #0]
    160a:	4b51      	ldr	r3, [pc, #324]	; (1750 <prvTraceInitTraceData+0x15c>)
    160c:	58eb      	ldr	r3, [r5, r3]
    160e:	601a      	str	r2, [r3, #0]
	
#if TRACE_DATA_ALLOCATION == TRACE_DATA_ALLOCATION_STATIC
	RecorderDataPtr = &RecorderData;
    1610:	4b50      	ldr	r3, [pc, #320]	; (1754 <prvTraceInitTraceData+0x160>)
    1612:	58ee      	ldr	r6, [r5, r3]
    1614:	4b50      	ldr	r3, [pc, #320]	; (1758 <prvTraceInitTraceData+0x164>)
    1616:	58ec      	ldr	r4, [r5, r3]
    1618:	6034      	str	r4, [r6, #0]
	{
		vTraceError("No recorder data structure allocated!");
		return;
	}
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
    161a:	23bf      	movs	r3, #191	; 0xbf
    161c:	015b      	lsls	r3, r3, #5
    161e:	469b      	mov	fp, r3
    1620:	1c20      	adds	r0, r4, #0
    1622:	2100      	movs	r1, #0
    1624:	1c1a      	adds	r2, r3, #0
    1626:	4b4d      	ldr	r3, [pc, #308]	; (175c <prvTraceInitTraceData+0x168>)
    1628:	58eb      	ldr	r3, [r5, r3]
    162a:	4798      	blx	r3

	RecorderDataPtr->startmarker0 = 0x00;
	RecorderDataPtr->startmarker1 = 0x01;
    162c:	2101      	movs	r1, #1
    162e:	468a      	mov	sl, r1
    1630:	7061      	strb	r1, [r4, #1]
	RecorderDataPtr->startmarker2 = 0x02;
    1632:	2302      	movs	r3, #2
    1634:	70a3      	strb	r3, [r4, #2]
	RecorderDataPtr->startmarker3 = 0x03;
    1636:	2303      	movs	r3, #3
    1638:	70e3      	strb	r3, [r4, #3]
	RecorderDataPtr->startmarker4 = 0x70;
    163a:	2370      	movs	r3, #112	; 0x70
    163c:	7123      	strb	r3, [r4, #4]
	RecorderDataPtr->startmarker5 = 0x71;
    163e:	2371      	movs	r3, #113	; 0x71
    1640:	4699      	mov	r9, r3
    1642:	7163      	strb	r3, [r4, #5]
	RecorderDataPtr->startmarker6 = 0x72;
    1644:	2272      	movs	r2, #114	; 0x72
    1646:	4690      	mov	r8, r2
    1648:	71a2      	strb	r2, [r4, #6]
	RecorderDataPtr->startmarker7 = 0x73;
    164a:	2773      	movs	r7, #115	; 0x73
    164c:	71e7      	strb	r7, [r4, #7]
	RecorderDataPtr->startmarker8 = 0xF0;
    164e:	23f0      	movs	r3, #240	; 0xf0
    1650:	7223      	strb	r3, [r4, #8]
	RecorderDataPtr->startmarker9 = 0xF1;
    1652:	210f      	movs	r1, #15
    1654:	4249      	negs	r1, r1
    1656:	7261      	strb	r1, [r4, #9]
	RecorderDataPtr->startmarker10 = 0xF2;
    1658:	220e      	movs	r2, #14
    165a:	4252      	negs	r2, r2
    165c:	72a2      	strb	r2, [r4, #10]
	RecorderDataPtr->startmarker11 = 0xF3;
    165e:	230d      	movs	r3, #13
    1660:	425b      	negs	r3, r3
    1662:	72e3      	strb	r3, [r4, #11]

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
    1664:	4b3e      	ldr	r3, [pc, #248]	; (1760 <prvTraceInitTraceData+0x16c>)
    1666:	81a3      	strh	r3, [r4, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
    1668:	2304      	movs	r3, #4
    166a:	73a3      	strb	r3, [r4, #14]
	RecorderDataPtr->irq_priority_order = IRQ_PRIORITY_ORDER;
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
    166c:	4659      	mov	r1, fp
    166e:	6121      	str	r1, [r4, #16]

	RecorderDataPtr->maxEvents = EVENT_BUFFER_SIZE;
    1670:	23fa      	movs	r3, #250	; 0xfa
    1672:	009b      	lsls	r3, r3, #2
    1674:	61a3      	str	r3, [r4, #24]

	RecorderDataPtr->debugMarker0 = 0xF0F0F0F0;
    1676:	4b3b      	ldr	r3, [pc, #236]	; (1764 <prvTraceInitTraceData+0x170>)
    1678:	6563      	str	r3, [r4, #84]	; 0x54

	RecorderDataPtr->isUsing16bitHandles = USE_16BIT_OBJECT_HANDLES;

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
    167a:	4b3b      	ldr	r3, [pc, #236]	; (1768 <prvTraceInitTraceData+0x174>)
    167c:	58eb      	ldr	r3, [r5, r3]
    167e:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = 0xF1F1F1F1;
    1680:	6830      	ldr	r0, [r6, #0]
    1682:	4a3a      	ldr	r2, [pc, #232]	; (176c <prvTraceInitTraceData+0x178>)
    1684:	4b3a      	ldr	r3, [pc, #232]	; (1770 <prvTraceInitTraceData+0x17c>)
    1686:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.symTableSize = SYMBOL_TABLE_SIZE;
    1688:	22c8      	movs	r2, #200	; 0xc8
    168a:	0092      	lsls	r2, r2, #2
    168c:	2385      	movs	r3, #133	; 0x85
    168e:	00db      	lsls	r3, r3, #3
    1690:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
    1692:	4b38      	ldr	r3, [pc, #224]	; (1774 <prvTraceInitTraceData+0x180>)
    1694:	4652      	mov	r2, sl
    1696:	50c2      	str	r2, [r0, r3]
#if (INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
    1698:	22fe      	movs	r2, #254	; 0xfe
    169a:	0592      	lsls	r2, r2, #22
    169c:	23fa      	movs	r3, #250	; 0xfa
    169e:	00db      	lsls	r3, r3, #3
    16a0:	50c2      	str	r2, [r0, r3]
#endif
	RecorderDataPtr->debugMarker2 = 0xF2F2F2F2;
    16a2:	4a35      	ldr	r2, [pc, #212]	; (1778 <prvTraceInitTraceData+0x184>)
    16a4:	23fb      	movs	r3, #251	; 0xfb
    16a6:	00db      	lsls	r3, r3, #3
    16a8:	50c2      	str	r2, [r0, r3]
	(void)strncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
    16aa:	4b34      	ldr	r3, [pc, #208]	; (177c <prvTraceInitTraceData+0x188>)
    16ac:	18c0      	adds	r0, r0, r3
    16ae:	4934      	ldr	r1, [pc, #208]	; (1780 <prvTraceInitTraceData+0x18c>)
    16b0:	4479      	add	r1, pc
    16b2:	2250      	movs	r2, #80	; 0x50
    16b4:	4b33      	ldr	r3, [pc, #204]	; (1784 <prvTraceInitTraceData+0x190>)
    16b6:	58eb      	ldr	r3, [r5, r3]
    16b8:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = 0xF3F3F3F3;
    16ba:	6833      	ldr	r3, [r6, #0]
    16bc:	4932      	ldr	r1, [pc, #200]	; (1788 <prvTraceInitTraceData+0x194>)
    16be:	4a33      	ldr	r2, [pc, #204]	; (178c <prvTraceInitTraceData+0x198>)
    16c0:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
    16c2:	210a      	movs	r1, #10
    16c4:	4a32      	ldr	r2, [pc, #200]	; (1790 <prvTraceInitTraceData+0x19c>)
    16c6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
    16c8:	210b      	movs	r1, #11
    16ca:	4a32      	ldr	r2, [pc, #200]	; (1794 <prvTraceInitTraceData+0x1a0>)
    16cc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
    16ce:	210c      	movs	r1, #12
    16d0:	4a31      	ldr	r2, [pc, #196]	; (1798 <prvTraceInitTraceData+0x1a4>)
    16d2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
    16d4:	210d      	movs	r1, #13
    16d6:	4a31      	ldr	r2, [pc, #196]	; (179c <prvTraceInitTraceData+0x1a8>)
    16d8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
    16da:	4a31      	ldr	r2, [pc, #196]	; (17a0 <prvTraceInitTraceData+0x1ac>)
    16dc:	4649      	mov	r1, r9
    16de:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
    16e0:	4a30      	ldr	r2, [pc, #192]	; (17a4 <prvTraceInitTraceData+0x1b0>)
    16e2:	4641      	mov	r1, r8
    16e4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
    16e6:	4a30      	ldr	r2, [pc, #192]	; (17a8 <prvTraceInitTraceData+0x1b4>)
    16e8:	549f      	strb	r7, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
    16ea:	2174      	movs	r1, #116	; 0x74
    16ec:	4a2f      	ldr	r2, [pc, #188]	; (17ac <prvTraceInitTraceData+0x1b8>)
    16ee:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
    16f0:	4a2f      	ldr	r2, [pc, #188]	; (17b0 <prvTraceInitTraceData+0x1bc>)
    16f2:	210f      	movs	r1, #15
    16f4:	4249      	negs	r1, r1
    16f6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
    16f8:	4a2e      	ldr	r2, [pc, #184]	; (17b4 <prvTraceInitTraceData+0x1c0>)
    16fa:	210e      	movs	r1, #14
    16fc:	4249      	negs	r1, r1
    16fe:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
    1700:	4a2d      	ldr	r2, [pc, #180]	; (17b8 <prvTraceInitTraceData+0x1c4>)
    1702:	210d      	movs	r1, #13
    1704:	4249      	negs	r1, r1
    1706:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
    1708:	21f4      	movs	r1, #244	; 0xf4
    170a:	4a2c      	ldr	r2, [pc, #176]	; (17bc <prvTraceInitTraceData+0x1c8>)
    170c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = USER_EVENT_BUFFER_SIZE;
	RecorderDataPtr->userEventBuffer.numberOfChannels = CHANNEL_FORMAT_PAIRS + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
    170e:	4b2c      	ldr	r3, [pc, #176]	; (17c0 <prvTraceInitTraceData+0x1cc>)
    1710:	58eb      	ldr	r3, [r5, r3]
    1712:	4798      	blx	r3
}

static void vInitStartMarkers()
{
	uint32_t i;
	uint8_t *ptr = (uint8_t*)&(RecorderDataPtr->startmarker0);
    1714:	6831      	ldr	r1, [r6, #0]
	if ((*ptr) == 0)
    1716:	780b      	ldrb	r3, [r1, #0]
    1718:	2b00      	cmp	r3, #0
    171a:	d108      	bne.n	172e <prvTraceInitTraceData+0x13a>
    171c:	1c0b      	adds	r3, r1, #0
    171e:	310c      	adds	r1, #12
	{
		for (i = 0; i < 12; i++)
		{
			ptr[i] += 1;
    1720:	781a      	ldrb	r2, [r3, #0]
    1722:	3201      	adds	r2, #1
    1724:	701a      	strb	r2, [r3, #0]
    1726:	3301      	adds	r3, #1
{
	uint32_t i;
	uint8_t *ptr = (uint8_t*)&(RecorderDataPtr->startmarker0);
	if ((*ptr) == 0)
	{
		for (i = 0; i < 12; i++)
    1728:	428b      	cmp	r3, r1
    172a:	d1f9      	bne.n	1720 <prvTraceInitTraceData+0x12c>
    172c:	e004      	b.n	1738 <prvTraceInitTraceData+0x144>
			ptr[i] += 1;
		}
	}
	else
	{
		vTraceError("Trace start markers already initialized!");
    172e:	4825      	ldr	r0, [pc, #148]	; (17c4 <prvTraceInitTraceData+0x1d0>)
    1730:	4478      	add	r0, pc
    1732:	4b25      	ldr	r3, [pc, #148]	; (17c8 <prvTraceInitTraceData+0x1d4>)
    1734:	58eb      	ldr	r3, [r5, r3]
    1736:	4798      	blx	r3
	vInitStartMarkers();
	
	#ifdef PORT_SPECIFIC_INIT
	PORT_SPECIFIC_INIT();
	#endif
}
    1738:	b003      	add	sp, #12
    173a:	bc3c      	pop	{r2, r3, r4, r5}
    173c:	4690      	mov	r8, r2
    173e:	4699      	mov	r9, r3
    1740:	46a2      	mov	sl, r4
    1742:	46ab      	mov	fp, r5
    1744:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1746:	46c0      	nop			; (mov r8, r8)
    1748:	00006800 	.word	0x00006800
    174c:	e000e018 	.word	0xe000e018
    1750:	00000284 	.word	0x00000284
    1754:	00000028 	.word	0x00000028
    1758:	000000c0 	.word	0x000000c0
    175c:	000001ac 	.word	0x000001ac
    1760:	00001aa1 	.word	0x00001aa1
    1764:	f0f0f0f0 	.word	0xf0f0f0f0
    1768:	0000028c 	.word	0x0000028c
    176c:	f1f1f1f1 	.word	0xf1f1f1f1
    1770:	00000424 	.word	0x00000424
    1774:	0000042c 	.word	0x0000042c
    1778:	f2f2f2f2 	.word	0xf2f2f2f2
    177c:	000007dc 	.word	0x000007dc
    1780:	0000551c 	.word	0x0000551c
    1784:	00000164 	.word	0x00000164
    1788:	f3f3f3f3 	.word	0xf3f3f3f3
    178c:	0000082c 	.word	0x0000082c
    1790:	000017d4 	.word	0x000017d4
    1794:	000017d5 	.word	0x000017d5
    1798:	000017d6 	.word	0x000017d6
    179c:	000017d7 	.word	0x000017d7
    17a0:	000017d8 	.word	0x000017d8
    17a4:	000017d9 	.word	0x000017d9
    17a8:	000017da 	.word	0x000017da
    17ac:	000017db 	.word	0x000017db
    17b0:	000017dc 	.word	0x000017dc
    17b4:	000017dd 	.word	0x000017dd
    17b8:	000017de 	.word	0x000017de
    17bc:	000017df 	.word	0x000017df
    17c0:	00000208 	.word	0x00000208
    17c4:	000054b0 	.word	0x000054b0
    17c8:	00000120 	.word	0x00000120

000017cc <xTraceNextFreeEventBufferSlot>:

/* Gives the last error message of the recorder. NULL if no error message. */
char* traceErrorMessage = NULL;

void* xTraceNextFreeEventBufferSlot(void)
{
    17cc:	b500      	push	{lr}
    17ce:	b083      	sub	sp, #12
    17d0:	4a0d      	ldr	r2, [pc, #52]	; (1808 <xTraceNextFreeEventBufferSlot+0x3c>)
    17d2:	447a      	add	r2, pc
	if (! RecorderDataPtr->recorderActive)
    17d4:	4b0d      	ldr	r3, [pc, #52]	; (180c <xTraceNextFreeEventBufferSlot+0x40>)
    17d6:	58d3      	ldr	r3, [r2, r3]
    17d8:	681b      	ldr	r3, [r3, #0]
    17da:	6b19      	ldr	r1, [r3, #48]	; 0x30
    17dc:	2900      	cmp	r1, #0
    17de:	d010      	beq.n	1802 <xTraceNextFreeEventBufferSlot+0x36>
	{
		// If the associated XTS or XPS event prio to the main event has filled the buffer and store mode "stop when full".
		return NULL;
	}

	if (RecorderDataPtr->nextFreeIndex >= EVENT_BUFFER_SIZE)
    17e0:	69d9      	ldr	r1, [r3, #28]
    17e2:	480b      	ldr	r0, [pc, #44]	; (1810 <xTraceNextFreeEventBufferSlot+0x44>)
    17e4:	4281      	cmp	r1, r0
    17e6:	d906      	bls.n	17f6 <xTraceNextFreeEventBufferSlot+0x2a>
	{
		vTraceError("Attempt to index outside event buffer!");
    17e8:	480a      	ldr	r0, [pc, #40]	; (1814 <xTraceNextFreeEventBufferSlot+0x48>)
    17ea:	4478      	add	r0, pc
    17ec:	4b0a      	ldr	r3, [pc, #40]	; (1818 <xTraceNextFreeEventBufferSlot+0x4c>)
    17ee:	58d3      	ldr	r3, [r2, r3]
    17f0:	4798      	blx	r3
		return NULL;
    17f2:	2000      	movs	r0, #0
    17f4:	e006      	b.n	1804 <xTraceNextFreeEventBufferSlot+0x38>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
    17f6:	0088      	lsls	r0, r1, #2
    17f8:	2283      	movs	r2, #131	; 0x83
    17fa:	0112      	lsls	r2, r2, #4
    17fc:	1880      	adds	r0, r0, r2
    17fe:	1818      	adds	r0, r3, r0
    1800:	e000      	b.n	1804 <xTraceNextFreeEventBufferSlot+0x38>
void* xTraceNextFreeEventBufferSlot(void)
{
	if (! RecorderDataPtr->recorderActive)
	{
		// If the associated XTS or XPS event prio to the main event has filled the buffer and store mode "stop when full".
		return NULL;
    1802:	2000      	movs	r0, #0
	{
		vTraceError("Attempt to index outside event buffer!");
		return NULL;
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
}
    1804:	b003      	add	sp, #12
    1806:	bd00      	pop	{pc}
    1808:	00006632 	.word	0x00006632
    180c:	00000028 	.word	0x00000028
    1810:	000003e7 	.word	0x000003e7
    1814:	00005422 	.word	0x00005422
    1818:	00000120 	.word	0x00000120

0000181c <uiIndexOfObject>:

uint16_t uiIndexOfObject(objectHandleType objecthandle, uint8_t objectclass)
{
    181c:	b510      	push	{r4, lr}
    181e:	b082      	sub	sp, #8
    1820:	4b15      	ldr	r3, [pc, #84]	; (1878 <uiIndexOfObject+0x5c>)
    1822:	447b      	add	r3, pc
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    1824:	2906      	cmp	r1, #6
    1826:	d907      	bls.n	1838 <uiIndexOfObject+0x1c>
    1828:	4814      	ldr	r0, [pc, #80]	; (187c <uiIndexOfObject+0x60>)
    182a:	4478      	add	r0, pc
    182c:	4a14      	ldr	r2, [pc, #80]	; (1880 <uiIndexOfObject+0x64>)
    182e:	589a      	ldr	r2, [r3, r2]
    1830:	9201      	str	r2, [sp, #4]
    1832:	4790      	blx	r2
    1834:	2000      	movs	r0, #0
    1836:	e01c      	b.n	1872 <uiIndexOfObject+0x56>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    1838:	2800      	cmp	r0, #0
    183a:	d007      	beq.n	184c <uiIndexOfObject+0x30>
    183c:	4a11      	ldr	r2, [pc, #68]	; (1884 <uiIndexOfObject+0x68>)
    183e:	589a      	ldr	r2, [r3, r2]
    1840:	6812      	ldr	r2, [r2, #0]
    1842:	1854      	adds	r4, r2, r1
    1844:	3460      	adds	r4, #96	; 0x60
    1846:	7924      	ldrb	r4, [r4, #4]
    1848:	4284      	cmp	r4, r0
    184a:	d207      	bcs.n	185c <uiIndexOfObject+0x40>
    184c:	480e      	ldr	r0, [pc, #56]	; (1888 <uiIndexOfObject+0x6c>)
    184e:	4478      	add	r0, pc
    1850:	4a0b      	ldr	r2, [pc, #44]	; (1880 <uiIndexOfObject+0x64>)
    1852:	589a      	ldr	r2, [r3, r2]
    1854:	9201      	str	r2, [sp, #4]
    1856:	4790      	blx	r2
    1858:	2000      	movs	r0, #0
    185a:	e00a      	b.n	1872 <uiIndexOfObject+0x56>

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    185c:	1853      	adds	r3, r2, r1
    185e:	3370      	adds	r3, #112	; 0x70
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    1860:	791b      	ldrb	r3, [r3, #4]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    1862:	3801      	subs	r0, #1
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    1864:	4358      	muls	r0, r3
    1866:	313c      	adds	r1, #60	; 0x3c
    1868:	0049      	lsls	r1, r1, #1
    186a:	1852      	adds	r2, r2, r1
    186c:	8893      	ldrh	r3, [r2, #4]
    186e:	18c0      	adds	r0, r0, r3
    1870:	b280      	uxth	r0, r0
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
	}

	vTraceError("Object table lookup with invalid object handle or object class!");
	return 0;
}
    1872:	b002      	add	sp, #8
    1874:	bd10      	pop	{r4, pc}
    1876:	46c0      	nop			; (mov r8, r8)
    1878:	000065e2 	.word	0x000065e2
    187c:	0000540a 	.word	0x0000540a
    1880:	00000120 	.word	0x00000120
    1884:	00000028 	.word	0x00000028
    1888:	00005426 	.word	0x00005426

0000188c <xTraceGetObjectHandle>:
 * contains the mapping between object handle and object name which was valid up
 * to this point in time. The object name is stored as a symbol table entry.
 ******************************************************************************/

objectHandleType xTraceGetObjectHandle(traceObjectClass objectclass)
{
    188c:	b570      	push	{r4, r5, r6, lr}
    188e:	b082      	sub	sp, #8
    1890:	4c56      	ldr	r4, [pc, #344]	; (19ec <xTraceGetObjectHandle+0x160>)
    1892:	447c      	add	r4, pc
	objectHandleType handle;
	static int indexOfHandle;

	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    1894:	2806      	cmp	r0, #6
    1896:	d906      	bls.n	18a6 <xTraceGetObjectHandle+0x1a>
    1898:	4855      	ldr	r0, [pc, #340]	; (19f0 <xTraceGetObjectHandle+0x164>)
    189a:	4478      	add	r0, pc
    189c:	4b55      	ldr	r3, [pc, #340]	; (19f4 <xTraceGetObjectHandle+0x168>)
    189e:	58e3      	ldr	r3, [r4, r3]
    18a0:	4798      	blx	r3
    18a2:	2000      	movs	r0, #0
    18a4:	e0a0      	b.n	19e8 <xTraceGetObjectHandle+0x15c>
		"xTraceGetObjectHandle: Invalid value for objectclass", (objectHandleType)0);

	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
    18a6:	4b54      	ldr	r3, [pc, #336]	; (19f8 <xTraceGetObjectHandle+0x16c>)
    18a8:	58e2      	ldr	r2, [r4, r3]
    18aa:	0043      	lsls	r3, r0, #1
    18ac:	5a9b      	ldrh	r3, [r3, r2]
    18ae:	4953      	ldr	r1, [pc, #332]	; (19fc <xTraceGetObjectHandle+0x170>)
    18b0:	4479      	add	r1, pc
    18b2:	600b      	str	r3, [r1, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
    18b4:	18d2      	adds	r2, r2, r3
    18b6:	3238      	adds	r2, #56	; 0x38
    18b8:	7812      	ldrb	r2, [r2, #0]
    18ba:	2a00      	cmp	r2, #0
    18bc:	d10a      	bne.n	18d4 <xTraceGetObjectHandle+0x48>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
    18be:	4a4e      	ldr	r2, [pc, #312]	; (19f8 <xTraceGetObjectHandle+0x16c>)
    18c0:	58a2      	ldr	r2, [r4, r2]
    18c2:	18d5      	adds	r5, r2, r3
    18c4:	3538      	adds	r5, #56	; 0x38
			(objectHandleType)(1 + indexOfHandle -
    18c6:	1c59      	adds	r1, r3, #1
			objectHandleStacks.lowestIndexOfClass[objectclass]);
    18c8:	1d06      	adds	r6, r0, #4
    18ca:	0076      	lsls	r6, r6, #1
    18cc:	1992      	adds	r2, r2, r6
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
    18ce:	88d2      	ldrh	r2, [r2, #6]
    18d0:	1a89      	subs	r1, r1, r2
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
    18d2:	7029      	strb	r1, [r5, #0]
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    18d4:	4a48      	ldr	r2, [pc, #288]	; (19f8 <xTraceGetObjectHandle+0x16c>)
    18d6:	58a2      	ldr	r2, [r4, r2]
    18d8:	18d1      	adds	r1, r2, r3
    18da:	3138      	adds	r1, #56	; 0x38
    18dc:	7809      	ldrb	r1, [r1, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
		> objectHandleStacks.highestIndexOfClass[objectclass])
    18de:	1c05      	adds	r5, r0, #0
    18e0:	350c      	adds	r5, #12
    18e2:	006d      	lsls	r5, r5, #1
    18e4:	1952      	adds	r2, r2, r5
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
    18e6:	8892      	ldrh	r2, [r2, #4]
    18e8:	429a      	cmp	r2, r3
    18ea:	d207      	bcs.n	18fc <xTraceGetObjectHandle+0x70>
		> objectHandleStacks.highestIndexOfClass[objectclass])
	{
		/* ERROR */
		vTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    18ec:	4b44      	ldr	r3, [pc, #272]	; (1a00 <xTraceGetObjectHandle+0x174>)
    18ee:	58e3      	ldr	r3, [r4, r3]
    18f0:	4798      	blx	r3
    18f2:	4b40      	ldr	r3, [pc, #256]	; (19f4 <xTraceGetObjectHandle+0x168>)
    18f4:	58e3      	ldr	r3, [r4, r3]
    18f6:	4798      	blx	r3

		handle = 0; /* an invalid/anonymous handle - but the recorder is stopped now... */
    18f8:	2000      	movs	r0, #0
    18fa:	e075      	b.n	19e8 <xTraceGetObjectHandle+0x15c>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
    18fc:	3301      	adds	r3, #1
    18fe:	b29b      	uxth	r3, r3
    1900:	4a3d      	ldr	r2, [pc, #244]	; (19f8 <xTraceGetObjectHandle+0x16c>)
    1902:	58a2      	ldr	r2, [r4, r2]
    1904:	0045      	lsls	r5, r0, #1
    1906:	52ab      	strh	r3, [r5, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
			objectHandleStacks.lowestIndexOfClass[objectclass];
    1908:	1d05      	adds	r5, r0, #4
    190a:	006d      	lsls	r5, r5, #1
    190c:	1955      	adds	r5, r2, r5
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
    190e:	88ed      	ldrh	r5, [r5, #6]
    1910:	1b5b      	subs	r3, r3, r5
			objectHandleStacks.lowestIndexOfClass[objectclass];

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
    1912:	1c05      	adds	r5, r0, #0
    1914:	3514      	adds	r5, #20
    1916:	006d      	lsls	r5, r5, #1
    1918:	1952      	adds	r2, r2, r5
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
			objectHandleStacks.lowestIndexOfClass[objectclass];

		if (hndCount >
    191a:	8852      	ldrh	r2, [r2, #2]
    191c:	4293      	cmp	r3, r2
    191e:	dd07      	ble.n	1930 <xTraceGetObjectHandle+0xa4>
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    1920:	4a35      	ldr	r2, [pc, #212]	; (19f8 <xTraceGetObjectHandle+0x16c>)
    1922:	58a2      	ldr	r2, [r4, r2]
    1924:	9201      	str	r2, [sp, #4]
    1926:	1c2a      	adds	r2, r5, #0
    1928:	b2db      	uxtb	r3, r3
    192a:	9d01      	ldr	r5, [sp, #4]
    192c:	18aa      	adds	r2, r5, r2
    192e:	8053      	strh	r3, [r2, #2]
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    1930:	2806      	cmp	r0, #6
    1932:	d858      	bhi.n	19e6 <xTraceGetObjectHandle+0x15a>
    1934:	f004 fe00 	bl	6538 <__gnu_thumb1_case_uqi>
    1938:	2d1f1104 	.word	0x2d1f1104
    193c:	3b57      	.short	0x3b57
    193e:	49          	.byte	0x49
    193f:	00          	.byte	0x00
    1940:	08ca      	lsrs	r2, r1, #3
    1942:	4b30      	ldr	r3, [pc, #192]	; (1a04 <xTraceGetObjectHandle+0x178>)
    1944:	58e3      	ldr	r3, [r4, r3]
    1946:	2407      	movs	r4, #7
    1948:	400c      	ands	r4, r1
    194a:	2001      	movs	r0, #1
    194c:	40a0      	lsls	r0, r4
    194e:	1c04      	adds	r4, r0, #0
    1950:	5c98      	ldrb	r0, [r3, r2]
    1952:	43a0      	bics	r0, r4
    1954:	5498      	strb	r0, [r3, r2]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    1956:	1c08      	adds	r0, r1, #0
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    1958:	e046      	b.n	19e8 <xTraceGetObjectHandle+0x15c>
    195a:	1c08      	adds	r0, r1, #0
    195c:	300b      	adds	r0, #11
    195e:	10c2      	asrs	r2, r0, #3
    1960:	4b28      	ldr	r3, [pc, #160]	; (1a04 <xTraceGetObjectHandle+0x178>)
    1962:	58e3      	ldr	r3, [r4, r3]
    1964:	2407      	movs	r4, #7
    1966:	4020      	ands	r0, r4
    1968:	2401      	movs	r4, #1
    196a:	4084      	lsls	r4, r0
    196c:	5c98      	ldrb	r0, [r3, r2]
    196e:	43a0      	bics	r0, r4
    1970:	5498      	strb	r0, [r3, r2]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    1972:	1c08      	adds	r0, r1, #0
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    1974:	e038      	b.n	19e8 <xTraceGetObjectHandle+0x15c>
    1976:	1c08      	adds	r0, r1, #0
    1978:	3016      	adds	r0, #22
    197a:	10c2      	asrs	r2, r0, #3
    197c:	4b21      	ldr	r3, [pc, #132]	; (1a04 <xTraceGetObjectHandle+0x178>)
    197e:	58e3      	ldr	r3, [r4, r3]
    1980:	2407      	movs	r4, #7
    1982:	4020      	ands	r0, r4
    1984:	2401      	movs	r4, #1
    1986:	4084      	lsls	r4, r0
    1988:	5c98      	ldrb	r0, [r3, r2]
    198a:	43a0      	bics	r0, r4
    198c:	5498      	strb	r0, [r3, r2]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    198e:	1c08      	adds	r0, r1, #0
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    1990:	e02a      	b.n	19e8 <xTraceGetObjectHandle+0x15c>
    1992:	1c08      	adds	r0, r1, #0
    1994:	3021      	adds	r0, #33	; 0x21
    1996:	10c2      	asrs	r2, r0, #3
    1998:	4b1a      	ldr	r3, [pc, #104]	; (1a04 <xTraceGetObjectHandle+0x178>)
    199a:	58e3      	ldr	r3, [r4, r3]
    199c:	2407      	movs	r4, #7
    199e:	4020      	ands	r0, r4
    19a0:	2401      	movs	r4, #1
    19a2:	4084      	lsls	r4, r0
    19a4:	5c98      	ldrb	r0, [r3, r2]
    19a6:	43a0      	bics	r0, r4
    19a8:	5498      	strb	r0, [r3, r2]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    19aa:	1c08      	adds	r0, r1, #0
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    19ac:	e01c      	b.n	19e8 <xTraceGetObjectHandle+0x15c>
    19ae:	1c08      	adds	r0, r1, #0
    19b0:	3031      	adds	r0, #49	; 0x31
    19b2:	10c2      	asrs	r2, r0, #3
    19b4:	4b13      	ldr	r3, [pc, #76]	; (1a04 <xTraceGetObjectHandle+0x178>)
    19b6:	58e3      	ldr	r3, [r4, r3]
    19b8:	2407      	movs	r4, #7
    19ba:	4020      	ands	r0, r4
    19bc:	2401      	movs	r4, #1
    19be:	4084      	lsls	r4, r0
    19c0:	5c98      	ldrb	r0, [r3, r2]
    19c2:	43a0      	bics	r0, r4
    19c4:	5498      	strb	r0, [r3, r2]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    19c6:	1c08      	adds	r0, r1, #0
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    19c8:	e00e      	b.n	19e8 <xTraceGetObjectHandle+0x15c>
    19ca:	1c08      	adds	r0, r1, #0
    19cc:	3034      	adds	r0, #52	; 0x34
    19ce:	10c2      	asrs	r2, r0, #3
    19d0:	4b0c      	ldr	r3, [pc, #48]	; (1a04 <xTraceGetObjectHandle+0x178>)
    19d2:	58e3      	ldr	r3, [r4, r3]
    19d4:	2407      	movs	r4, #7
    19d6:	4020      	ands	r0, r4
    19d8:	2401      	movs	r4, #1
    19da:	4084      	lsls	r4, r0
    19dc:	5c98      	ldrb	r0, [r3, r2]
    19de:	43a0      	bics	r0, r4
    19e0:	5498      	strb	r0, [r3, r2]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    19e2:	1c08      	adds	r0, r1, #0
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
    19e4:	e000      	b.n	19e8 <xTraceGetObjectHandle+0x15c>
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    19e6:	1c08      	adds	r0, r1, #0

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
	}

	return handle;
}
    19e8:	b002      	add	sp, #8
    19ea:	bd70      	pop	{r4, r5, r6, pc}
    19ec:	00006572 	.word	0x00006572
    19f0:	0000541a 	.word	0x0000541a
    19f4:	00000120 	.word	0x00000120
    19f8:	000002b8 	.word	0x000002b8
    19fc:	1fffebf8 	.word	0x1fffebf8
    1a00:	00000030 	.word	0x00000030
    1a04:	00000124 	.word	0x00000124

00001a08 <vTraceFreeObjectHandle>:

void vTraceFreeObjectHandle(traceObjectClass objectclass, objectHandleType handle)
{
    1a08:	b570      	push	{r4, r5, r6, lr}
    1a0a:	b082      	sub	sp, #8
    1a0c:	4b1c      	ldr	r3, [pc, #112]	; (1a80 <vTraceFreeObjectHandle+0x78>)
    1a0e:	447b      	add	r3, pc
	int indexOfHandle;

	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    1a10:	2806      	cmp	r0, #6
    1a12:	d906      	bls.n	1a22 <vTraceFreeObjectHandle+0x1a>
    1a14:	481b      	ldr	r0, [pc, #108]	; (1a84 <vTraceFreeObjectHandle+0x7c>)
    1a16:	4478      	add	r0, pc
    1a18:	4a1b      	ldr	r2, [pc, #108]	; (1a88 <vTraceFreeObjectHandle+0x80>)
    1a1a:	589a      	ldr	r2, [r3, r2]
    1a1c:	9201      	str	r2, [sp, #4]
    1a1e:	4790      	blx	r2
    1a20:	e02b      	b.n	1a7a <vTraceFreeObjectHandle+0x72>
		"vTraceFreeObjectHandle: Invalid value for objectclass", );
	TRACE_ASSERT(handle > 0 && handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    1a22:	2900      	cmp	r1, #0
    1a24:	d007      	beq.n	1a36 <vTraceFreeObjectHandle+0x2e>
    1a26:	4a19      	ldr	r2, [pc, #100]	; (1a8c <vTraceFreeObjectHandle+0x84>)
    1a28:	589a      	ldr	r2, [r3, r2]
    1a2a:	6812      	ldr	r2, [r2, #0]
    1a2c:	1812      	adds	r2, r2, r0
    1a2e:	3260      	adds	r2, #96	; 0x60
    1a30:	7912      	ldrb	r2, [r2, #4]
    1a32:	428a      	cmp	r2, r1
    1a34:	d206      	bcs.n	1a44 <vTraceFreeObjectHandle+0x3c>
    1a36:	4816      	ldr	r0, [pc, #88]	; (1a90 <vTraceFreeObjectHandle+0x88>)
    1a38:	4478      	add	r0, pc
    1a3a:	4a13      	ldr	r2, [pc, #76]	; (1a88 <vTraceFreeObjectHandle+0x80>)
    1a3c:	589a      	ldr	r2, [r3, r2]
    1a3e:	9201      	str	r2, [sp, #4]
    1a40:	4790      	blx	r2
    1a42:	e01a      	b.n	1a7a <vTraceFreeObjectHandle+0x72>
		"vTraceFreeObjectHandle: Invalid value for handle", );

	/* Check that there is room to push the handle on the stack */
	if ((objectHandleStacks.indexOfNextAvailableHandle[objectclass] - 1) <
    1a44:	4a13      	ldr	r2, [pc, #76]	; (1a94 <vTraceFreeObjectHandle+0x8c>)
    1a46:	589a      	ldr	r2, [r3, r2]
    1a48:	0044      	lsls	r4, r0, #1
    1a4a:	5aa4      	ldrh	r4, [r4, r2]
    1a4c:	1e65      	subs	r5, r4, #1
		objectHandleStacks.lowestIndexOfClass[objectclass])
    1a4e:	1d06      	adds	r6, r0, #4
    1a50:	0076      	lsls	r6, r6, #1
    1a52:	1992      	adds	r2, r2, r6
		"vTraceFreeObjectHandle: Invalid value for objectclass", );
	TRACE_ASSERT(handle > 0 && handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
		"vTraceFreeObjectHandle: Invalid value for handle", );

	/* Check that there is room to push the handle on the stack */
	if ((objectHandleStacks.indexOfNextAvailableHandle[objectclass] - 1) <
    1a54:	88d2      	ldrh	r2, [r2, #6]
    1a56:	4295      	cmp	r5, r2
    1a58:	da06      	bge.n	1a68 <vTraceFreeObjectHandle+0x60>
		objectHandleStacks.lowestIndexOfClass[objectclass])
	{
		/* Error */
		vTraceError("Attempt to free more handles than allocated!");
    1a5a:	480f      	ldr	r0, [pc, #60]	; (1a98 <vTraceFreeObjectHandle+0x90>)
    1a5c:	4478      	add	r0, pc
    1a5e:	4a0a      	ldr	r2, [pc, #40]	; (1a88 <vTraceFreeObjectHandle+0x80>)
    1a60:	589a      	ldr	r2, [r3, r2]
    1a62:	9201      	str	r2, [sp, #4]
    1a64:	4790      	blx	r2
    1a66:	e008      	b.n	1a7a <vTraceFreeObjectHandle+0x72>
	}
	else
	{
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]--;
    1a68:	3c01      	subs	r4, #1
    1a6a:	b2a4      	uxth	r4, r4
    1a6c:	4a09      	ldr	r2, [pc, #36]	; (1a94 <vTraceFreeObjectHandle+0x8c>)
    1a6e:	589b      	ldr	r3, [r3, r2]
    1a70:	0040      	lsls	r0, r0, #1
    1a72:	52c4      	strh	r4, [r0, r3]
		indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
		objectHandleStacks.objectHandles[indexOfHandle] = handle;
    1a74:	191c      	adds	r4, r3, r4
    1a76:	3438      	adds	r4, #56	; 0x38
    1a78:	7021      	strb	r1, [r4, #0]
	}

}
    1a7a:	b002      	add	sp, #8
    1a7c:	bd70      	pop	{r4, r5, r6, pc}
    1a7e:	46c0      	nop			; (mov r8, r8)
    1a80:	000063f6 	.word	0x000063f6
    1a84:	000052e2 	.word	0x000052e2
    1a88:	00000120 	.word	0x00000120
    1a8c:	00000028 	.word	0x00000028
    1a90:	00005304 	.word	0x00005304
    1a94:	000002b8 	.word	0x000002b8
    1a98:	00005320 	.word	0x00005320

00001a9c <vTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void vTraceSetObjectName(traceObjectClass objectclass,
						 objectHandleType handle,
						 const char* name)
{
    1a9c:	b570      	push	{r4, r5, r6, lr}
    1a9e:	b082      	sub	sp, #8
    1aa0:	1c05      	adds	r5, r0, #0
    1aa2:	1c16      	adds	r6, r2, #0
    1aa4:	4c21      	ldr	r4, [pc, #132]	; (1b2c <vTraceSetObjectName+0x90>)
    1aa6:	447c      	add	r4, pc
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "vTraceSetObjectName: name == NULL", );
    1aa8:	2a00      	cmp	r2, #0
    1aaa:	d105      	bne.n	1ab8 <vTraceSetObjectName+0x1c>
    1aac:	4820      	ldr	r0, [pc, #128]	; (1b30 <vTraceSetObjectName+0x94>)
    1aae:	4478      	add	r0, pc
    1ab0:	4b20      	ldr	r3, [pc, #128]	; (1b34 <vTraceSetObjectName+0x98>)
    1ab2:	58e3      	ldr	r3, [r4, r3]
    1ab4:	4798      	blx	r3
    1ab6:	e037      	b.n	1b28 <vTraceSetObjectName+0x8c>

	if (objectclass >= TRACE_NCLASSES)
    1ab8:	2806      	cmp	r0, #6
    1aba:	d905      	bls.n	1ac8 <vTraceSetObjectName+0x2c>
	{
		vTraceError("Illegal object class in vTraceSetObjectName");
    1abc:	481e      	ldr	r0, [pc, #120]	; (1b38 <vTraceSetObjectName+0x9c>)
    1abe:	4478      	add	r0, pc
    1ac0:	4b1c      	ldr	r3, [pc, #112]	; (1b34 <vTraceSetObjectName+0x98>)
    1ac2:	58e3      	ldr	r3, [r4, r3]
    1ac4:	4798      	blx	r3
		return;
    1ac6:	e02f      	b.n	1b28 <vTraceSetObjectName+0x8c>
	}

	if (handle == 0)
    1ac8:	2900      	cmp	r1, #0
    1aca:	d105      	bne.n	1ad8 <vTraceSetObjectName+0x3c>
	{
		vTraceError("Illegal handle (0) in vTraceSetObjectName.");
    1acc:	481b      	ldr	r0, [pc, #108]	; (1b3c <vTraceSetObjectName+0xa0>)
    1ace:	4478      	add	r0, pc
    1ad0:	4b18      	ldr	r3, [pc, #96]	; (1b34 <vTraceSetObjectName+0x98>)
    1ad2:	58e3      	ldr	r3, [r4, r3]
    1ad4:	4798      	blx	r3
		return;
    1ad6:	e027      	b.n	1b28 <vTraceSetObjectName+0x8c>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
    1ad8:	4b19      	ldr	r3, [pc, #100]	; (1b40 <vTraceSetObjectName+0xa4>)
    1ada:	58e3      	ldr	r3, [r4, r3]
    1adc:	681b      	ldr	r3, [r3, #0]
    1ade:	181b      	adds	r3, r3, r0
    1ae0:	3360      	adds	r3, #96	; 0x60
    1ae2:	791b      	ldrb	r3, [r3, #4]
    1ae4:	428b      	cmp	r3, r1
    1ae6:	d206      	bcs.n	1af6 <vTraceSetObjectName+0x5a>
	{
		/* ERROR */
		vTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    1ae8:	4b16      	ldr	r3, [pc, #88]	; (1b44 <vTraceSetObjectName+0xa8>)
    1aea:	58e3      	ldr	r3, [r4, r3]
    1aec:	4798      	blx	r3
    1aee:	4b11      	ldr	r3, [pc, #68]	; (1b34 <vTraceSetObjectName+0x98>)
    1af0:	58e3      	ldr	r3, [r4, r3]
    1af2:	4798      	blx	r3
    1af4:	e018      	b.n	1b28 <vTraceSetObjectName+0x8c>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
    1af6:	1c08      	adds	r0, r1, #0
    1af8:	1c29      	adds	r1, r5, #0
    1afa:	4b13      	ldr	r3, [pc, #76]	; (1b48 <vTraceSetObjectName+0xac>)
    1afc:	58e3      	ldr	r3, [r4, r3]
    1afe:	4798      	blx	r3
    1b00:	4b12      	ldr	r3, [pc, #72]	; (1b4c <vTraceSetObjectName+0xb0>)
    1b02:	447b      	add	r3, pc
    1b04:	8098      	strh	r0, [r3, #4]

		if (traceErrorMessage == NULL)
    1b06:	4b12      	ldr	r3, [pc, #72]	; (1b50 <vTraceSetObjectName+0xb4>)
    1b08:	58e3      	ldr	r3, [r4, r3]
    1b0a:	681b      	ldr	r3, [r3, #0]
    1b0c:	2b00      	cmp	r3, #0
    1b0e:	d10b      	bne.n	1b28 <vTraceSetObjectName+0x8c>
		{
			(void)strncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    1b10:	4b0b      	ldr	r3, [pc, #44]	; (1b40 <vTraceSetObjectName+0xa4>)
    1b12:	58e3      	ldr	r3, [r4, r3]
    1b14:	681b      	ldr	r3, [r3, #0]
    1b16:	1818      	adds	r0, r3, r0
    1b18:	308c      	adds	r0, #140	; 0x8c
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
    1b1a:	195b      	adds	r3, r3, r5
    1b1c:	3368      	adds	r3, #104	; 0x68
	{
		idx = uiIndexOfObject(handle, objectclass);

		if (traceErrorMessage == NULL)
		{
			(void)strncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    1b1e:	791a      	ldrb	r2, [r3, #4]
    1b20:	1c31      	adds	r1, r6, #0
    1b22:	4b0c      	ldr	r3, [pc, #48]	; (1b54 <vTraceSetObjectName+0xb8>)
    1b24:	58e3      	ldr	r3, [r4, r3]
    1b26:	4798      	blx	r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
		}
	}
}
    1b28:	b002      	add	sp, #8
    1b2a:	bd70      	pop	{r4, r5, r6, pc}
    1b2c:	0000635e 	.word	0x0000635e
    1b30:	000052fe 	.word	0x000052fe
    1b34:	00000120 	.word	0x00000120
    1b38:	0000531e 	.word	0x0000531e
    1b3c:	0000533a 	.word	0x0000533a
    1b40:	00000028 	.word	0x00000028
    1b44:	00000030 	.word	0x00000030
    1b48:	00000264 	.word	0x00000264
    1b4c:	1fffe9a6 	.word	0x1fffe9a6
    1b50:	00000280 	.word	0x00000280
    1b54:	00000164 	.word	0x00000164

00001b58 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 *
 * This is assumed to execute within a critical section...
 *****************************************************************************/

void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
    1b58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b5a:	4647      	mov	r7, r8
    1b5c:	b480      	push	{r7}
    1b5e:	b082      	sub	sp, #8
    1b60:	4930      	ldr	r1, [pc, #192]	; (1c24 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xcc>)
    1b62:	4479      	add	r1, pc
    1b64:	4688      	mov	r8, r1
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
    1b66:	2800      	cmp	r0, #0
    1b68:	d004      	beq.n	1b74 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1c>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", );

	while (i < nofEntriesToCheck)
    1b6a:	1c06      	adds	r6, r0, #0
    1b6c:	2400      	movs	r4, #0
    1b6e:	2800      	cmp	r0, #0
    1b70:	d106      	bne.n	1b80 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
    1b72:	e052      	b.n	1c1a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xc2>
{
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
    1b74:	482c      	ldr	r0, [pc, #176]	; (1c28 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xd0>)
    1b76:	4478      	add	r0, pc
    1b78:	4b2c      	ldr	r3, [pc, #176]	; (1c2c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xd4>)
    1b7a:	58cb      	ldr	r3, [r1, r3]
    1b7c:	4798      	blx	r3
    1b7e:	e04c      	b.n	1c1a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xc2>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", );

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
    1b80:	4b2b      	ldr	r3, [pc, #172]	; (1c30 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xd8>)
    1b82:	58cf      	ldr	r7, [r1, r3]
    1b84:	683b      	ldr	r3, [r7, #0]
    1b86:	69d8      	ldr	r0, [r3, #28]
    1b88:	1821      	adds	r1, r4, r0
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
    1b8a:	008d      	lsls	r5, r1, #2
    1b8c:	195a      	adds	r2, r3, r5
    1b8e:	2083      	movs	r0, #131	; 0x83
    1b90:	0100      	lsls	r0, r0, #4
    1b92:	1812      	adds	r2, r2, r0
    1b94:	7812      	ldrb	r2, [r2, #0]
    1b96:	1c10      	adds	r0, r2, #0
    1b98:	3067      	adds	r0, #103	; 0x67
    1b9a:	b2c0      	uxtb	r0, r0
    1b9c:	280e      	cmp	r0, #14
    1b9e:	d811      	bhi.n	1bc4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x6c>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
    1ba0:	3268      	adds	r2, #104	; 0x68
    1ba2:	b2d2      	uxtb	r2, r2
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
    1ba4:	1851      	adds	r1, r2, r1
    1ba6:	6998      	ldr	r0, [r3, #24]
    1ba8:	4281      	cmp	r1, r0
    1baa:	d233      	bcs.n	1c14 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xbc>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4 * nDataEvents);
    1bac:	3201      	adds	r2, #1
    1bae:	0092      	lsls	r2, r2, #2
    1bb0:	2183      	movs	r1, #131	; 0x83
    1bb2:	0109      	lsls	r1, r1, #4
    1bb4:	186d      	adds	r5, r5, r1
    1bb6:	1958      	adds	r0, r3, r5
    1bb8:	2100      	movs	r1, #0
    1bba:	4b1e      	ldr	r3, [pc, #120]	; (1c34 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xdc>)
    1bbc:	4645      	mov	r5, r8
    1bbe:	58eb      	ldr	r3, [r5, r3]
    1bc0:	4798      	blx	r3
    1bc2:	e027      	b.n	1c14 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xbc>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
    1bc4:	2a01      	cmp	r2, #1
    1bc6:	d125      	bne.n	1c14 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xbc>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
    1bc8:	3101      	adds	r1, #1
    1bca:	6998      	ldr	r0, [r3, #24]
    1bcc:	4281      	cmp	r1, r0
    1bce:	d20d      	bcs.n	1bec <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x94>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
    1bd0:	2183      	movs	r1, #131	; 0x83
    1bd2:	0109      	lsls	r1, r1, #4
    1bd4:	186d      	adds	r5, r5, r1
    1bd6:	195b      	adds	r3, r3, r5
    1bd8:	2200      	movs	r2, #0
    1bda:	701a      	strb	r2, [r3, #0]
    1bdc:	705a      	strb	r2, [r3, #1]
    1bde:	709a      	strb	r2, [r3, #2]
    1be0:	70da      	strb	r2, [r3, #3]
    1be2:	711a      	strb	r2, [r3, #4]
    1be4:	715a      	strb	r2, [r3, #5]
    1be6:	719a      	strb	r2, [r3, #6]
    1be8:	71da      	strb	r2, [r3, #7]
    1bea:	e013      	b.n	1c14 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xbc>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
    1bec:	2283      	movs	r2, #131	; 0x83
    1bee:	0112      	lsls	r2, r2, #4
    1bf0:	189b      	adds	r3, r3, r2
    1bf2:	2200      	movs	r2, #0
    1bf4:	701a      	strb	r2, [r3, #0]
    1bf6:	705a      	strb	r2, [r3, #1]
    1bf8:	709a      	strb	r2, [r3, #2]
    1bfa:	70da      	strb	r2, [r3, #3]
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
    1bfc:	4b0c      	ldr	r3, [pc, #48]	; (1c30 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xd8>)
    1bfe:	4640      	mov	r0, r8
    1c00:	58c3      	ldr	r3, [r0, r3]
    1c02:	2183      	movs	r1, #131	; 0x83
    1c04:	0109      	lsls	r1, r1, #4
    1c06:	186d      	adds	r5, r5, r1
    1c08:	681b      	ldr	r3, [r3, #0]
    1c0a:	195d      	adds	r5, r3, r5
    1c0c:	702a      	strb	r2, [r5, #0]
    1c0e:	706a      	strb	r2, [r5, #1]
    1c10:	70aa      	strb	r2, [r5, #2]
    1c12:	70ea      	strb	r2, [r5, #3]
			}
		}
		i++;
    1c14:	3401      	adds	r4, #1
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", );

	while (i < nofEntriesToCheck)
    1c16:	42b4      	cmp	r4, r6
    1c18:	d3b4      	bcc.n	1b84 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x2c>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
			}
		}
		i++;
	}
}
    1c1a:	b002      	add	sp, #8
    1c1c:	bc04      	pop	{r2}
    1c1e:	4690      	mov	r8, r2
    1c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c22:	46c0      	nop			; (mov r8, r8)
    1c24:	000062a2 	.word	0x000062a2
    1c28:	000052be 	.word	0x000052be
    1c2c:	00000120 	.word	0x00000120
    1c30:	00000028 	.word	0x00000028
    1c34:	000001ac 	.word	0x000001ac

00001c38 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
    1c38:	b500      	push	{lr}
    1c3a:	b083      	sub	sp, #12
    1c3c:	4a0d      	ldr	r2, [pc, #52]	; (1c74 <prvTraceUpdateCounters+0x3c>)
    1c3e:	447a      	add	r2, pc
	if (RecorderDataPtr->recorderActive == 0)
    1c40:	4b0d      	ldr	r3, [pc, #52]	; (1c78 <prvTraceUpdateCounters+0x40>)
    1c42:	58d3      	ldr	r3, [r2, r3]
    1c44:	681b      	ldr	r3, [r3, #0]
    1c46:	6b19      	ldr	r1, [r3, #48]	; 0x30
    1c48:	2900      	cmp	r1, #0
    1c4a:	d010      	beq.n	1c6e <prvTraceUpdateCounters+0x36>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
    1c4c:	6959      	ldr	r1, [r3, #20]
    1c4e:	3101      	adds	r1, #1
    1c50:	6159      	str	r1, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
    1c52:	69d9      	ldr	r1, [r3, #28]
    1c54:	3101      	adds	r1, #1
    1c56:	61d9      	str	r1, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= EVENT_BUFFER_SIZE)
    1c58:	4808      	ldr	r0, [pc, #32]	; (1c7c <prvTraceUpdateCounters+0x44>)
    1c5a:	4281      	cmp	r1, r0
    1c5c:	d903      	bls.n	1c66 <prvTraceUpdateCounters+0x2e>
	{
#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
    1c5e:	2101      	movs	r1, #1
    1c60:	6219      	str	r1, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
    1c62:	2100      	movs	r1, #0
    1c64:	61d9      	str	r1, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
    1c66:	2001      	movs	r0, #1
    1c68:	4b05      	ldr	r3, [pc, #20]	; (1c80 <prvTraceUpdateCounters+0x48>)
    1c6a:	58d3      	ldr	r3, [r2, r3]
    1c6c:	4798      	blx	r3
#endif
}
    1c6e:	b003      	add	sp, #12
    1c70:	bd00      	pop	{pc}
    1c72:	46c0      	nop			; (mov r8, r8)
    1c74:	000061c6 	.word	0x000061c6
    1c78:	00000028 	.word	0x00000028
    1c7c:	000003e7 	.word	0x000003e7
    1c80:	0000021c 	.word	0x0000021c

00001c84 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
    1c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c86:	4647      	mov	r7, r8
    1c88:	b480      	push	{r7}
    1c8a:	b084      	sub	sp, #16
    1c8c:	1c05      	adds	r5, r0, #0
    1c8e:	4c41      	ldr	r4, [pc, #260]	; (1d94 <prvTraceGetDTS+0x110>)
    1c90:	447c      	add	r4, pc
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
	uint32_t dts = 0;
	uint32_t timestamp = 0;
    1c92:	2300      	movs	r3, #0
    1c94:	9303      	str	r3, [sp, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
    1c96:	28ff      	cmp	r0, #255	; 0xff
    1c98:	d009      	beq.n	1cae <prvTraceGetDTS+0x2a>
    1c9a:	4b3f      	ldr	r3, [pc, #252]	; (1d98 <prvTraceGetDTS+0x114>)
    1c9c:	4298      	cmp	r0, r3
    1c9e:	d006      	beq.n	1cae <prvTraceGetDTS+0x2a>
    1ca0:	483e      	ldr	r0, [pc, #248]	; (1d9c <prvTraceGetDTS+0x118>)
    1ca2:	4478      	add	r0, pc
    1ca4:	4b3e      	ldr	r3, [pc, #248]	; (1da0 <prvTraceGetDTS+0x11c>)
    1ca6:	58e3      	ldr	r3, [r4, r3]
    1ca8:	4798      	blx	r3
    1caa:	2000      	movs	r0, #0
    1cac:	e06d      	b.n	1d8a <prvTraceGetDTS+0x106>

#if (SELECTED_PORT != PORT_ARM_CortexM)

	if (RecorderDataPtr->frequency == 0 && init_hwtc_count != HWTC_COUNT)
    1cae:	4b3d      	ldr	r3, [pc, #244]	; (1da4 <prvTraceGetDTS+0x120>)
    1cb0:	58e3      	ldr	r3, [r4, r3]
    1cb2:	681b      	ldr	r3, [r3, #0]
    1cb4:	6a58      	ldr	r0, [r3, #36]	; 0x24
    1cb6:	2800      	cmp	r0, #0
    1cb8:	d10e      	bne.n	1cd8 <prvTraceGetDTS+0x54>
    1cba:	4a3b      	ldr	r2, [pc, #236]	; (1da8 <prvTraceGetDTS+0x124>)
    1cbc:	58a2      	ldr	r2, [r4, r2]
    1cbe:	493b      	ldr	r1, [pc, #236]	; (1dac <prvTraceGetDTS+0x128>)
    1cc0:	6809      	ldr	r1, [r1, #0]
    1cc2:	6812      	ldr	r2, [r2, #0]
    1cc4:	4291      	cmp	r1, r2
    1cc6:	d007      	beq.n	1cd8 <prvTraceGetDTS+0x54>
#if (SELECTED_PORT == PORT_Win32)
		RecorderDataPtr->frequency = 100000;
#elif (SELECTED_PORT == PORT_HWIndependent)
		RecorderDataPtr->frequency = TRACE_TICK_RATE_HZ;
#else
		RecorderDataPtr->frequency = (HWTC_PERIOD * TRACE_TICK_RATE_HZ) / (uint32_t)HWTC_DIVISOR;
    1cc8:	4a39      	ldr	r2, [pc, #228]	; (1db0 <prvTraceGetDTS+0x12c>)
    1cca:	6811      	ldr	r1, [r2, #0]
    1ccc:	3101      	adds	r1, #1
    1cce:	22fa      	movs	r2, #250	; 0xfa
    1cd0:	0092      	lsls	r2, r2, #2
    1cd2:	434a      	muls	r2, r1
    1cd4:	0852      	lsrs	r2, r2, #1
    1cd6:	625a      	str	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	vTracePortGetTimeStamp(&timestamp);	
    1cd8:	a803      	add	r0, sp, #12
    1cda:	4b36      	ldr	r3, [pc, #216]	; (1db4 <prvTraceGetDTS+0x130>)
    1cdc:	58e3      	ldr	r3, [r4, r3]
    1cde:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
    1ce0:	9b03      	ldr	r3, [sp, #12]
    1ce2:	4a35      	ldr	r2, [pc, #212]	; (1db8 <prvTraceGetDTS+0x134>)
    1ce4:	447a      	add	r2, pc
    1ce6:	6891      	ldr	r1, [r2, #8]
    1ce8:	1a5e      	subs	r6, r3, r1
	old_timestamp = timestamp;
    1cea:	6093      	str	r3, [r2, #8]

	if (RecorderDataPtr->frequency > 0)
    1cec:	4a2d      	ldr	r2, [pc, #180]	; (1da4 <prvTraceGetDTS+0x120>)
    1cee:	58a2      	ldr	r2, [r4, r2]
    1cf0:	6817      	ldr	r7, [r2, #0]
    1cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1cf4:	4690      	mov	r8, r2
    1cf6:	2a00      	cmp	r2, #0
    1cf8:	d022      	beq.n	1d40 <prvTraceGetDTS+0xbc>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
    1cfa:	4296      	cmp	r6, r2
    1cfc:	d910      	bls.n	1d20 <prvTraceGetDTS+0x9c>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
    1cfe:	4b2f      	ldr	r3, [pc, #188]	; (1dbc <prvTraceGetDTS+0x138>)
    1d00:	58e3      	ldr	r3, [r4, r3]
    1d02:	1c30      	adds	r0, r6, #0
    1d04:	1c11      	adds	r1, r2, #0
    1d06:	4798      	blx	r3
    1d08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    1d0a:	1808      	adds	r0, r1, r0
    1d0c:	62f8      	str	r0, [r7, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
    1d0e:	4b2c      	ldr	r3, [pc, #176]	; (1dc0 <prvTraceGetDTS+0x13c>)
    1d10:	58e3      	ldr	r3, [r4, r3]
    1d12:	1c30      	adds	r0, r6, #0
    1d14:	4641      	mov	r1, r8
    1d16:	4798      	blx	r3
    1d18:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1d1a:	1851      	adds	r1, r2, r1
    1d1c:	62b9      	str	r1, [r7, #40]	; 0x28
    1d1e:	e002      	b.n	1d26 <prvTraceGetDTS+0xa2>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
    1d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1d22:	1983      	adds	r3, r0, r6
    1d24:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
    1d26:	4b1f      	ldr	r3, [pc, #124]	; (1da4 <prvTraceGetDTS+0x120>)
    1d28:	58e3      	ldr	r3, [r4, r3]
    1d2a:	681b      	ldr	r3, [r3, #0]
    1d2c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1d30:	4291      	cmp	r1, r2
    1d32:	d306      	bcc.n	1d42 <prvTraceGetDTS+0xbe>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
    1d34:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1d36:	3001      	adds	r0, #1
    1d38:	62d8      	str	r0, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
    1d3a:	1a8a      	subs	r2, r1, r2
    1d3c:	629a      	str	r2, [r3, #40]	; 0x28
    1d3e:	e000      	b.n	1d42 <prvTraceGetDTS+0xbe>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
    1d40:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
    1d42:	42ae      	cmp	r6, r5
    1d44:	d91f      	bls.n	1d86 <prvTraceGetDTS+0x102>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) xTraceNextFreeEventBufferSlot();
    1d46:	4b1f      	ldr	r3, [pc, #124]	; (1dc4 <prvTraceGetDTS+0x140>)
    1d48:	58e3      	ldr	r3, [r4, r3]
    1d4a:	4798      	blx	r3

		if (xts != NULL)
    1d4c:	2800      	cmp	r0, #0
    1d4e:	d01a      	beq.n	1d86 <prvTraceGetDTS+0x102>
		{
			if (param_maxDTS == 0xFFFF)
    1d50:	4b11      	ldr	r3, [pc, #68]	; (1d98 <prvTraceGetDTS+0x114>)
    1d52:	429d      	cmp	r5, r3
    1d54:	d106      	bne.n	1d64 <prvTraceGetDTS+0xe0>
			{
				xts->type = XTS16;
    1d56:	23a9      	movs	r3, #169	; 0xa9
    1d58:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
    1d5a:	0c33      	lsrs	r3, r6, #16
    1d5c:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = 0;
    1d5e:	2300      	movs	r3, #0
    1d60:	7043      	strb	r3, [r0, #1]
    1d62:	e00d      	b.n	1d80 <prvTraceGetDTS+0xfc>
			}
			else if (param_maxDTS == 0xFF)
    1d64:	2dff      	cmp	r5, #255	; 0xff
    1d66:	d106      	bne.n	1d76 <prvTraceGetDTS+0xf2>
			{
				xts->type = XTS8;
    1d68:	23a8      	movs	r3, #168	; 0xa8
    1d6a:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
    1d6c:	0a33      	lsrs	r3, r6, #8
    1d6e:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
    1d70:	0e33      	lsrs	r3, r6, #24
    1d72:	7043      	strb	r3, [r0, #1]
    1d74:	e004      	b.n	1d80 <prvTraceGetDTS+0xfc>
			}
			else
			{
				vTraceError("Bad param_maxDTS in prvTraceGetDTS");
    1d76:	4814      	ldr	r0, [pc, #80]	; (1dc8 <prvTraceGetDTS+0x144>)
    1d78:	4478      	add	r0, pc
    1d7a:	4b09      	ldr	r3, [pc, #36]	; (1da0 <prvTraceGetDTS+0x11c>)
    1d7c:	58e3      	ldr	r3, [r4, r3]
    1d7e:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
    1d80:	4b12      	ldr	r3, [pc, #72]	; (1dcc <prvTraceGetDTS+0x148>)
    1d82:	58e3      	ldr	r3, [r4, r3]
    1d84:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
    1d86:	1c30      	adds	r0, r6, #0
    1d88:	4028      	ands	r0, r5
}
    1d8a:	b004      	add	sp, #16
    1d8c:	bc04      	pop	{r2}
    1d8e:	4690      	mov	r8, r2
    1d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d92:	46c0      	nop			; (mov r8, r8)
    1d94:	00006174 	.word	0x00006174
    1d98:	0000ffff 	.word	0x0000ffff
    1d9c:	000051ea 	.word	0x000051ea
    1da0:	00000120 	.word	0x00000120
    1da4:	00000028 	.word	0x00000028
    1da8:	00000284 	.word	0x00000284
    1dac:	e000e018 	.word	0xe000e018
    1db0:	e000e014 	.word	0xe000e014
    1db4:	00000058 	.word	0x00000058
    1db8:	1fffe7c4 	.word	0x1fffe7c4
    1dbc:	000001c0 	.word	0x000001c0
    1dc0:	00000250 	.word	0x00000250
    1dc4:	000000e8 	.word	0x000000e8
    1dc8:	00005154 	.word	0x00005154
    1dcc:	00000240 	.word	0x00000240

00001dd0 <prvTraceLookupSymbolTableEntry>:
 ******************************************************************************/
traceLabel prvTraceLookupSymbolTableEntry(const char* name,
										 uint8_t crc6,
										 uint8_t len,
										 traceLabel chn)
{
    1dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dd2:	465f      	mov	r7, fp
    1dd4:	4656      	mov	r6, sl
    1dd6:	464d      	mov	r5, r9
    1dd8:	4644      	mov	r4, r8
    1dda:	b4f0      	push	{r4, r5, r6, r7}
    1ddc:	b083      	sub	sp, #12
    1dde:	4683      	mov	fp, r0
    1de0:	4692      	mov	sl, r2
    1de2:	4831      	ldr	r0, [pc, #196]	; (1ea8 <prvTraceLookupSymbolTableEntry+0xd8>)
    1de4:	4478      	add	r0, pc
    1de6:	4681      	mov	r9, r0
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];
    1de8:	4a30      	ldr	r2, [pc, #192]	; (1eac <prvTraceLookupSymbolTableEntry+0xdc>)
    1dea:	5882      	ldr	r2, [r0, r2]
    1dec:	6816      	ldr	r6, [r2, #0]
    1dee:	22ea      	movs	r2, #234	; 0xea
    1df0:	0092      	lsls	r2, r2, #2
    1df2:	1889      	adds	r1, r1, r2
    1df4:	0049      	lsls	r1, r1, #1
    1df6:	5b8c      	ldrh	r4, [r1, r6]

	TRACE_ASSERT(name != NULL, "prvTraceLookupSymbolTableEntry: name == NULL", (traceLabel)0);
    1df8:	4658      	mov	r0, fp
    1dfa:	2800      	cmp	r0, #0
    1dfc:	d107      	bne.n	1e0e <prvTraceLookupSymbolTableEntry+0x3e>
    1dfe:	482c      	ldr	r0, [pc, #176]	; (1eb0 <prvTraceLookupSymbolTableEntry+0xe0>)
    1e00:	4478      	add	r0, pc
    1e02:	4b2c      	ldr	r3, [pc, #176]	; (1eb4 <prvTraceLookupSymbolTableEntry+0xe4>)
    1e04:	464a      	mov	r2, r9
    1e06:	58d3      	ldr	r3, [r2, r3]
    1e08:	4798      	blx	r3
    1e0a:	2000      	movs	r0, #0
    1e0c:	e044      	b.n	1e98 <prvTraceLookupSymbolTableEntry+0xc8>
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceLabel)0);
    1e0e:	4650      	mov	r0, sl
    1e10:	2800      	cmp	r0, #0
    1e12:	d002      	beq.n	1e1a <prvTraceLookupSymbolTableEntry+0x4a>

	while (i != 0)
    1e14:	1e20      	subs	r0, r4, #0
    1e16:	d03f      	beq.n	1e98 <prvTraceLookupSymbolTableEntry+0xc8>
    1e18:	e007      	b.n	1e2a <prvTraceLookupSymbolTableEntry+0x5a>
										 traceLabel chn)
{
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];

	TRACE_ASSERT(name != NULL, "prvTraceLookupSymbolTableEntry: name == NULL", (traceLabel)0);
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceLabel)0);
    1e1a:	4827      	ldr	r0, [pc, #156]	; (1eb8 <prvTraceLookupSymbolTableEntry+0xe8>)
    1e1c:	4478      	add	r0, pc
    1e1e:	4b25      	ldr	r3, [pc, #148]	; (1eb4 <prvTraceLookupSymbolTableEntry+0xe4>)
    1e20:	464a      	mov	r2, r9
    1e22:	58d3      	ldr	r3, [r2, r3]
    1e24:	4798      	blx	r3
    1e26:	2000      	movs	r0, #0
    1e28:	e036      	b.n	1e98 <prvTraceLookupSymbolTableEntry+0xc8>

	while (i != 0)
	{
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
		{
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
    1e2a:	0a18      	lsrs	r0, r3, #8
    1e2c:	4680      	mov	r8, r0
	TRACE_ASSERT(name != NULL, "prvTraceLookupSymbolTableEntry: name == NULL", (traceLabel)0);
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceLabel)0);

	while (i != 0)
	{
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
    1e2e:	27ff      	movs	r7, #255	; 0xff
    1e30:	401f      	ands	r7, r3
    1e32:	1c25      	adds	r5, r4, #0
    1e34:	1933      	adds	r3, r6, r4
    1e36:	4a21      	ldr	r2, [pc, #132]	; (1ebc <prvTraceLookupSymbolTableEntry+0xec>)
    1e38:	189b      	adds	r3, r3, r2
    1e3a:	781b      	ldrb	r3, [r3, #0]
    1e3c:	42bb      	cmp	r3, r7
    1e3e:	d11a      	bne.n	1e76 <prvTraceLookupSymbolTableEntry+0xa6>
		{
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
    1e40:	1933      	adds	r3, r6, r4
    1e42:	481f      	ldr	r0, [pc, #124]	; (1ec0 <prvTraceLookupSymbolTableEntry+0xf0>)
    1e44:	181b      	adds	r3, r3, r0
    1e46:	781b      	ldrb	r3, [r3, #0]
    1e48:	4543      	cmp	r3, r8
    1e4a:	d114      	bne.n	1e76 <prvTraceLookupSymbolTableEntry+0xa6>
			{
				if (RecorderDataPtr->SymbolTable.symbytes[i + 4 + len] == '\0')
    1e4c:	1d20      	adds	r0, r4, #4
    1e4e:	1833      	adds	r3, r6, r0
    1e50:	4453      	add	r3, sl
    1e52:	2286      	movs	r2, #134	; 0x86
    1e54:	00d2      	lsls	r2, r2, #3
    1e56:	189b      	adds	r3, r3, r2
    1e58:	781b      	ldrb	r3, [r3, #0]
    1e5a:	2b00      	cmp	r3, #0
    1e5c:	d10b      	bne.n	1e76 <prvTraceLookupSymbolTableEntry+0xa6>
				{
					if (strncmp((char*)(& RecorderDataPtr->SymbolTable.symbytes[i + 4]), name, len) == 0)
    1e5e:	1880      	adds	r0, r0, r2
    1e60:	1830      	adds	r0, r6, r0
    1e62:	4659      	mov	r1, fp
    1e64:	4652      	mov	r2, sl
    1e66:	4b17      	ldr	r3, [pc, #92]	; (1ec4 <prvTraceLookupSymbolTableEntry+0xf4>)
    1e68:	469c      	mov	ip, r3
    1e6a:	464b      	mov	r3, r9
    1e6c:	4463      	add	r3, ip
    1e6e:	681b      	ldr	r3, [r3, #0]
    1e70:	4798      	blx	r3
    1e72:	2800      	cmp	r0, #0
    1e74:	d00d      	beq.n	1e92 <prvTraceLookupSymbolTableEntry+0xc2>
						break; /* found */
					}
				}
			}
		}
		i = (uint16_t)(RecorderDataPtr->SymbolTable.symbytes[i] + (RecorderDataPtr->SymbolTable.symbytes[i + 1] * 0x100));
    1e76:	1975      	adds	r5, r6, r5
    1e78:	4813      	ldr	r0, [pc, #76]	; (1ec8 <prvTraceLookupSymbolTableEntry+0xf8>)
    1e7a:	182b      	adds	r3, r5, r0
    1e7c:	781c      	ldrb	r4, [r3, #0]
    1e7e:	0224      	lsls	r4, r4, #8
    1e80:	2286      	movs	r2, #134	; 0x86
    1e82:	00d2      	lsls	r2, r2, #3
    1e84:	18ad      	adds	r5, r5, r2
    1e86:	782b      	ldrb	r3, [r5, #0]
    1e88:	191c      	adds	r4, r3, r4
    1e8a:	b2a4      	uxth	r4, r4
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];

	TRACE_ASSERT(name != NULL, "prvTraceLookupSymbolTableEntry: name == NULL", (traceLabel)0);
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceLabel)0);

	while (i != 0)
    1e8c:	2c00      	cmp	r4, #0
    1e8e:	d1d0      	bne.n	1e32 <prvTraceLookupSymbolTableEntry+0x62>
    1e90:	e001      	b.n	1e96 <prvTraceLookupSymbolTableEntry+0xc6>
    1e92:	1c20      	adds	r0, r4, #0
    1e94:	e000      	b.n	1e98 <prvTraceLookupSymbolTableEntry+0xc8>
						break; /* found */
					}
				}
			}
		}
		i = (uint16_t)(RecorderDataPtr->SymbolTable.symbytes[i] + (RecorderDataPtr->SymbolTable.symbytes[i + 1] * 0x100));
    1e96:	1c20      	adds	r0, r4, #0
	}
	return i;
}
    1e98:	b003      	add	sp, #12
    1e9a:	bc3c      	pop	{r2, r3, r4, r5}
    1e9c:	4690      	mov	r8, r2
    1e9e:	4699      	mov	r9, r3
    1ea0:	46a2      	mov	sl, r4
    1ea2:	46ab      	mov	fp, r5
    1ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ea6:	46c0      	nop			; (mov r8, r8)
    1ea8:	00006020 	.word	0x00006020
    1eac:	00000028 	.word	0x00000028
    1eb0:	000050f0 	.word	0x000050f0
    1eb4:	00000120 	.word	0x00000120
    1eb8:	00005110 	.word	0x00005110
    1ebc:	00000432 	.word	0x00000432
    1ec0:	00000433 	.word	0x00000433
    1ec4:	00000158 	.word	0x00000158
    1ec8:	00000431 	.word	0x00000431

00001ecc <prvTraceCreateSymbolTableEntry>:
 ******************************************************************************/
uint16_t prvTraceCreateSymbolTableEntry(const char* name,
										uint8_t crc6,
										uint8_t len,
										traceLabel channel)
{
    1ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ece:	465f      	mov	r7, fp
    1ed0:	4656      	mov	r6, sl
    1ed2:	464d      	mov	r5, r9
    1ed4:	4644      	mov	r4, r8
    1ed6:	b4f0      	push	{r4, r5, r6, r7}
    1ed8:	b083      	sub	sp, #12
    1eda:	1c06      	adds	r6, r0, #0
    1edc:	1c15      	adds	r5, r2, #0
    1ede:	4c31      	ldr	r4, [pc, #196]	; (1fa4 <prvTraceCreateSymbolTableEntry+0xd8>)
    1ee0:	447c      	add	r4, pc
	uint16_t ret = 0;

	TRACE_ASSERT(name != NULL, "prvTraceCreateSymbolTableEntry: name == NULL", 0);
    1ee2:	2800      	cmp	r0, #0
    1ee4:	d106      	bne.n	1ef4 <prvTraceCreateSymbolTableEntry+0x28>
    1ee6:	4830      	ldr	r0, [pc, #192]	; (1fa8 <prvTraceCreateSymbolTableEntry+0xdc>)
    1ee8:	4478      	add	r0, pc
    1eea:	4b30      	ldr	r3, [pc, #192]	; (1fac <prvTraceCreateSymbolTableEntry+0xe0>)
    1eec:	58e3      	ldr	r3, [r4, r3]
    1eee:	4798      	blx	r3
    1ef0:	2000      	movs	r0, #0
    1ef2:	e050      	b.n	1f96 <prvTraceCreateSymbolTableEntry+0xca>
	TRACE_ASSERT(len != 0, "prvTraceCreateSymbolTableEntry: len == 0", 0);
    1ef4:	2a00      	cmp	r2, #0
    1ef6:	d106      	bne.n	1f06 <prvTraceCreateSymbolTableEntry+0x3a>
    1ef8:	482d      	ldr	r0, [pc, #180]	; (1fb0 <prvTraceCreateSymbolTableEntry+0xe4>)
    1efa:	4478      	add	r0, pc
    1efc:	4b2b      	ldr	r3, [pc, #172]	; (1fac <prvTraceCreateSymbolTableEntry+0xe0>)
    1efe:	58e3      	ldr	r3, [r4, r3]
    1f00:	4798      	blx	r3
    1f02:	2000      	movs	r0, #0
    1f04:	e047      	b.n	1f96 <prvTraceCreateSymbolTableEntry+0xca>

	if (RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + len + 4 >= SYMBOL_TABLE_SIZE)
    1f06:	4a2b      	ldr	r2, [pc, #172]	; (1fb4 <prvTraceCreateSymbolTableEntry+0xe8>)
    1f08:	58a2      	ldr	r2, [r4, r2]
    1f0a:	6812      	ldr	r2, [r2, #0]
    1f0c:	482a      	ldr	r0, [pc, #168]	; (1fb8 <prvTraceCreateSymbolTableEntry+0xec>)
    1f0e:	5817      	ldr	r7, [r2, r0]
    1f10:	46ba      	mov	sl, r7
    1f12:	2004      	movs	r0, #4
    1f14:	4683      	mov	fp, r0
    1f16:	44d3      	add	fp, sl
    1f18:	46a9      	mov	r9, r5
    1f1a:	44d9      	add	r9, fp
    1f1c:	4827      	ldr	r0, [pc, #156]	; (1fbc <prvTraceCreateSymbolTableEntry+0xf0>)
    1f1e:	4581      	cmp	r9, r0
    1f20:	d906      	bls.n	1f30 <prvTraceCreateSymbolTableEntry+0x64>
	{
		vTraceError("Symbol table full. Increase SYMBOL_TABLE_SIZE in trcConfig.h");
    1f22:	4827      	ldr	r0, [pc, #156]	; (1fc0 <prvTraceCreateSymbolTableEntry+0xf4>)
    1f24:	4478      	add	r0, pc
    1f26:	4b21      	ldr	r3, [pc, #132]	; (1fac <prvTraceCreateSymbolTableEntry+0xe0>)
    1f28:	58e3      	ldr	r3, [r4, r3]
    1f2a:	4798      	blx	r3
		ret = 0;
    1f2c:	2000      	movs	r0, #0
    1f2e:	e032      	b.n	1f96 <prvTraceCreateSymbolTableEntry+0xca>
	else
	{

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
    1f30:	27ea      	movs	r7, #234	; 0xea
    1f32:	00bf      	lsls	r7, r7, #2
    1f34:	19c9      	adds	r1, r1, r7
    1f36:	0049      	lsls	r1, r1, #1
    1f38:	4688      	mov	r8, r1
    1f3a:	5a88      	ldrh	r0, [r1, r2]
    1f3c:	4681      	mov	r9, r0
	}
	else
	{

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
    1f3e:	4651      	mov	r1, sl
    1f40:	1850      	adds	r0, r2, r1
    1f42:	2786      	movs	r7, #134	; 0x86
    1f44:	00ff      	lsls	r7, r7, #3
    1f46:	4649      	mov	r1, r9
    1f48:	5439      	strb	r1, [r7, r0]
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
    1f4a:	4f1e      	ldr	r7, [pc, #120]	; (1fc4 <prvTraceCreateSymbolTableEntry+0xf8>)
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
    1f4c:	4649      	mov	r1, r9
    1f4e:	0a09      	lsrs	r1, r1, #8
		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
    1f50:	5439      	strb	r1, [r7, r0]
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
    1f52:	4f1d      	ldr	r7, [pc, #116]	; (1fc8 <prvTraceCreateSymbolTableEntry+0xfc>)
    1f54:	543b      	strb	r3, [r7, r0]
			(uint8_t)(channel & 0x00FF);

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
    1f56:	491d      	ldr	r1, [pc, #116]	; (1fcc <prvTraceCreateSymbolTableEntry+0x100>)
    1f58:	1840      	adds	r0, r0, r1
			(uint8_t)(channel / 0x100);
    1f5a:	0a1b      	lsrs	r3, r3, #8
		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
			(uint8_t)(channel & 0x00FF);

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
    1f5c:	7003      	strb	r3, [r0, #0]
			(uint8_t)(channel / 0x100);

		/* set name (bytes 4...4+len-1) */
		(void)strncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
    1f5e:	2386      	movs	r3, #134	; 0x86
    1f60:	00db      	lsls	r3, r3, #3
    1f62:	1c1f      	adds	r7, r3, #0
    1f64:	445f      	add	r7, fp
    1f66:	19d0      	adds	r0, r2, r7
    1f68:	1c31      	adds	r1, r6, #0
    1f6a:	1c2a      	adds	r2, r5, #0
    1f6c:	4b18      	ldr	r3, [pc, #96]	; (1fd0 <prvTraceCreateSymbolTableEntry+0x104>)
    1f6e:	58e3      	ldr	r3, [r4, r3]
    1f70:	4798      	blx	r3
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4]), name, len);

		/* Set zero termination (at offset 4+len) */
		RecorderDataPtr->SymbolTable.symbytes
			[RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4 + len] = '\0';
    1f72:	4b10      	ldr	r3, [pc, #64]	; (1fb4 <prvTraceCreateSymbolTableEntry+0xe8>)
    1f74:	58e3      	ldr	r3, [r4, r3]
    1f76:	681b      	ldr	r3, [r3, #0]
    1f78:	4a0f      	ldr	r2, [pc, #60]	; (1fb8 <prvTraceCreateSymbolTableEntry+0xec>)
    1f7a:	5899      	ldr	r1, [r3, r2]
    1f7c:	1868      	adds	r0, r5, r1
    1f7e:	181c      	adds	r4, r3, r0
    1f80:	4e14      	ldr	r6, [pc, #80]	; (1fd4 <prvTraceCreateSymbolTableEntry+0x108>)
    1f82:	19a4      	adds	r4, r4, r6
    1f84:	2600      	movs	r6, #0
    1f86:	7026      	strb	r6, [r4, #0]

		/* store index of entry (for return value, and as head of LL[crc6]) */
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
    1f88:	4647      	mov	r7, r8
    1f8a:	52f9      	strh	r1, [r7, r3]

		RecorderDataPtr->SymbolTable.nextFreeSymbolIndex += (len + 5);
    1f8c:	3005      	adds	r0, #5
    1f8e:	5098      	str	r0, [r3, r2]

		ret = (uint16_t)(RecorderDataPtr->SymbolTable.nextFreeSymbolIndex -
    1f90:	1b40      	subs	r0, r0, r5
    1f92:	3805      	subs	r0, #5
    1f94:	b280      	uxth	r0, r0
			(len + 5));
	}

	return ret;
}
    1f96:	b003      	add	sp, #12
    1f98:	bc3c      	pop	{r2, r3, r4, r5}
    1f9a:	4690      	mov	r8, r2
    1f9c:	4699      	mov	r9, r3
    1f9e:	46a2      	mov	sl, r4
    1fa0:	46ab      	mov	fp, r5
    1fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fa4:	00005f24 	.word	0x00005f24
    1fa8:	0000507c 	.word	0x0000507c
    1fac:	00000120 	.word	0x00000120
    1fb0:	000050a6 	.word	0x000050a6
    1fb4:	00000028 	.word	0x00000028
    1fb8:	0000042c 	.word	0x0000042c
    1fbc:	0000031f 	.word	0x0000031f
    1fc0:	000050b4 	.word	0x000050b4
    1fc4:	00000431 	.word	0x00000431
    1fc8:	00000432 	.word	0x00000432
    1fcc:	00000433 	.word	0x00000433
    1fd0:	00000164 	.word	0x00000164
    1fd4:	00000434 	.word	0x00000434

00001fd8 <prvTraceGetChecksum>:
 *
 * Calculates a simple 6-bit checksum from a string, used to index the string
 * for fast symbol table lookup.
 ******************************************************************************/
void prvTraceGetChecksum(const char *pname, uint8_t* pcrc, uint8_t* plength)
{
    1fd8:	b530      	push	{r4, r5, lr}
    1fda:	b083      	sub	sp, #12
    1fdc:	4b18      	ldr	r3, [pc, #96]	; (2040 <STACK_SIZE+0x40>)
    1fde:	447b      	add	r3, pc
	unsigned char c;
	int length = 1;		/* Should be 1 to account for '\0' */
	int crc = 0;

	TRACE_ASSERT(pname != NULL, "prvTraceGetChecksum: pname == NULL", );
    1fe0:	2800      	cmp	r0, #0
    1fe2:	d106      	bne.n	1ff2 <prvTraceGetChecksum+0x1a>
    1fe4:	4817      	ldr	r0, [pc, #92]	; (2044 <STACK_SIZE+0x44>)
    1fe6:	4478      	add	r0, pc
    1fe8:	4a17      	ldr	r2, [pc, #92]	; (2048 <STACK_SIZE+0x48>)
    1fea:	589a      	ldr	r2, [r3, r2]
    1fec:	9201      	str	r2, [sp, #4]
    1fee:	4790      	blx	r2
    1ff0:	e024      	b.n	203c <STACK_SIZE+0x3c>
	TRACE_ASSERT(pcrc != NULL, "prvTraceGetChecksum: pcrc == NULL", );
    1ff2:	2900      	cmp	r1, #0
    1ff4:	d106      	bne.n	2004 <STACK_SIZE+0x4>
    1ff6:	4815      	ldr	r0, [pc, #84]	; (204c <STACK_SIZE+0x4c>)
    1ff8:	4478      	add	r0, pc
    1ffa:	4a13      	ldr	r2, [pc, #76]	; (2048 <STACK_SIZE+0x48>)
    1ffc:	589a      	ldr	r2, [r3, r2]
    1ffe:	9201      	str	r2, [sp, #4]
    2000:	4790      	blx	r2
    2002:	e01b      	b.n	203c <STACK_SIZE+0x3c>
	TRACE_ASSERT(plength != NULL, "prvTraceGetChecksum: plength == NULL", );
    2004:	2a00      	cmp	r2, #0
    2006:	d106      	bne.n	2016 <STACK_SIZE+0x16>
    2008:	4811      	ldr	r0, [pc, #68]	; (2050 <STACK_SIZE+0x50>)
    200a:	4478      	add	r0, pc
    200c:	4a0e      	ldr	r2, [pc, #56]	; (2048 <STACK_SIZE+0x48>)
    200e:	589a      	ldr	r2, [r3, r2]
    2010:	9201      	str	r2, [sp, #4]
    2012:	4790      	blx	r2
    2014:	e012      	b.n	203c <STACK_SIZE+0x3c>

	if (pname != (const char *) 0)
	{
		for (; (c = *pname++) != '\0';)
    2016:	7804      	ldrb	r4, [r0, #0]
    2018:	2c00      	cmp	r4, #0
    201a:	d009      	beq.n	2030 <STACK_SIZE+0x30>
    201c:	2500      	movs	r5, #0
    201e:	2301      	movs	r3, #1
		{
			crc += c;
    2020:	192d      	adds	r5, r5, r4
			length++;
    2022:	3301      	adds	r3, #1
    2024:	18c4      	adds	r4, r0, r3
    2026:	3c01      	subs	r4, #1
	TRACE_ASSERT(pcrc != NULL, "prvTraceGetChecksum: pcrc == NULL", );
	TRACE_ASSERT(plength != NULL, "prvTraceGetChecksum: plength == NULL", );

	if (pname != (const char *) 0)
	{
		for (; (c = *pname++) != '\0';)
    2028:	7824      	ldrb	r4, [r4, #0]
    202a:	2c00      	cmp	r4, #0
    202c:	d1f8      	bne.n	2020 <STACK_SIZE+0x20>
    202e:	e001      	b.n	2034 <STACK_SIZE+0x34>
    2030:	2500      	movs	r5, #0
    2032:	2301      	movs	r3, #1
		{
			crc += c;
			length++;
		}
	}
	*pcrc = (uint8_t)(crc & 0x3F);
    2034:	203f      	movs	r0, #63	; 0x3f
    2036:	4005      	ands	r5, r0
    2038:	700d      	strb	r5, [r1, #0]
	*plength = (uint8_t)length;
    203a:	7013      	strb	r3, [r2, #0]
}
    203c:	b003      	add	sp, #12
    203e:	bd30      	pop	{r4, r5, pc}
    2040:	00005e26 	.word	0x00005e26
    2044:	00005032 	.word	0x00005032
    2048:	00000120 	.word	0x00000120
    204c:	00005054 	.word	0x00005054
    2050:	00005072 	.word	0x00005072

00002054 <prvTraceOpenSymbol>:
		}
	}
}

traceLabel prvTraceOpenSymbol(const char* name, traceLabel userEventChannel)
{
    2054:	b5f0      	push	{r4, r5, r6, r7, lr}
    2056:	464f      	mov	r7, r9
    2058:	4646      	mov	r6, r8
    205a:	b4c0      	push	{r6, r7}
    205c:	b085      	sub	sp, #20
    205e:	1c05      	adds	r5, r0, #0
    2060:	4688      	mov	r8, r1
    2062:	4c22      	ldr	r4, [pc, #136]	; (20ec <prvTraceOpenSymbol+0x98>)
    2064:	447c      	add	r4, pc
	uint16_t result;
	uint8_t len;
	uint8_t crc;
	TRACE_SR_ALLOC_CRITICAL_SECTION();
	
	len = 0;
    2066:	2200      	movs	r2, #0
    2068:	466b      	mov	r3, sp
    206a:	73da      	strb	r2, [r3, #15]
	crc = 0;
    206c:	466b      	mov	r3, sp
    206e:	739a      	strb	r2, [r3, #14]
	
	TRACE_ASSERT(name != NULL, "prvTraceOpenSymbol: name == NULL", (traceLabel)0);
    2070:	2800      	cmp	r0, #0
    2072:	d106      	bne.n	2082 <prvTraceOpenSymbol+0x2e>
    2074:	481e      	ldr	r0, [pc, #120]	; (20f0 <prvTraceOpenSymbol+0x9c>)
    2076:	4478      	add	r0, pc
    2078:	4b1e      	ldr	r3, [pc, #120]	; (20f4 <prvTraceOpenSymbol+0xa0>)
    207a:	58e3      	ldr	r3, [r4, r3]
    207c:	4798      	blx	r3
    207e:	2000      	movs	r0, #0
    2080:	e02e      	b.n	20e0 <prvTraceOpenSymbol+0x8c>

	prvTraceGetChecksum(name, &crc, &len);
    2082:	466f      	mov	r7, sp
    2084:	370e      	adds	r7, #14
    2086:	1c39      	adds	r1, r7, #0
    2088:	466e      	mov	r6, sp
    208a:	360f      	adds	r6, #15
    208c:	1c32      	adds	r2, r6, #0
    208e:	4b1a      	ldr	r3, [pc, #104]	; (20f8 <prvTraceOpenSymbol+0xa4>)
    2090:	58e3      	ldr	r3, [r4, r3]
    2092:	4798      	blx	r3

	trcCRITICAL_SECTION_BEGIN();
    2094:	4b19      	ldr	r3, [pc, #100]	; (20fc <prvTraceOpenSymbol+0xa8>)
    2096:	58e3      	ldr	r3, [r4, r3]
    2098:	4798      	blx	r3
    209a:	4681      	mov	r9, r0
    209c:	4b18      	ldr	r3, [pc, #96]	; (2100 <prvTraceOpenSymbol+0xac>)
    209e:	58e3      	ldr	r3, [r4, r3]
    20a0:	681a      	ldr	r2, [r3, #0]
    20a2:	3201      	adds	r2, #1
    20a4:	601a      	str	r2, [r3, #0]
	result = prvTraceLookupSymbolTableEntry(name, crc, len, userEventChannel);
    20a6:	7839      	ldrb	r1, [r7, #0]
    20a8:	7832      	ldrb	r2, [r6, #0]
    20aa:	1c28      	adds	r0, r5, #0
    20ac:	4643      	mov	r3, r8
    20ae:	4e15      	ldr	r6, [pc, #84]	; (2104 <prvTraceOpenSymbol+0xb0>)
    20b0:	59a6      	ldr	r6, [r4, r6]
    20b2:	47b0      	blx	r6
    20b4:	1e06      	subs	r6, r0, #0
	if (!result)
    20b6:	d109      	bne.n	20cc <prvTraceOpenSymbol+0x78>
	{
		result = prvTraceCreateSymbolTableEntry(name, crc, len, userEventChannel);
    20b8:	466b      	mov	r3, sp
    20ba:	7b99      	ldrb	r1, [r3, #14]
    20bc:	466b      	mov	r3, sp
    20be:	7bda      	ldrb	r2, [r3, #15]
    20c0:	1c28      	adds	r0, r5, #0
    20c2:	4643      	mov	r3, r8
    20c4:	4d10      	ldr	r5, [pc, #64]	; (2108 <prvTraceOpenSymbol+0xb4>)
    20c6:	5965      	ldr	r5, [r4, r5]
    20c8:	47a8      	blx	r5
    20ca:	1c06      	adds	r6, r0, #0
	}
	trcCRITICAL_SECTION_END();
    20cc:	4b0c      	ldr	r3, [pc, #48]	; (2100 <prvTraceOpenSymbol+0xac>)
    20ce:	58e3      	ldr	r3, [r4, r3]
    20d0:	681a      	ldr	r2, [r3, #0]
    20d2:	3a01      	subs	r2, #1
    20d4:	601a      	str	r2, [r3, #0]
    20d6:	4648      	mov	r0, r9
    20d8:	4b0c      	ldr	r3, [pc, #48]	; (210c <prvTraceOpenSymbol+0xb8>)
    20da:	58e3      	ldr	r3, [r4, r3]
    20dc:	4798      	blx	r3

	return result;
    20de:	1c30      	adds	r0, r6, #0
}
    20e0:	b005      	add	sp, #20
    20e2:	bc0c      	pop	{r2, r3}
    20e4:	4690      	mov	r8, r2
    20e6:	4699      	mov	r9, r3
    20e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20ea:	46c0      	nop			; (mov r8, r8)
    20ec:	00005da0 	.word	0x00005da0
    20f0:	0000503a 	.word	0x0000503a
    20f4:	00000120 	.word	0x00000120
    20f8:	00000178 	.word	0x00000178
    20fc:	00000274 	.word	0x00000274
    2100:	000002c4 	.word	0x000002c4
    2104:	00000204 	.word	0x00000204
    2108:	00000214 	.word	0x00000214
    210c:	00000134 	.word	0x00000134

00002110 <vTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of vTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void vTracePortGetTimeStamp(uint32_t *pTimestamp)
{
    2110:	b570      	push	{r4, r5, r6, lr}
    2112:	4b1f      	ldr	r3, [pc, #124]	; (2190 <vTracePortGetTimeStamp+0x80>)
    2114:	447b      	add	r3, pc
	static uint32_t last_traceTickCount = 0;
	static uint32_t last_hwtc_count = 0;
	uint32_t traceTickCount = 0;
	uint32_t hwtc_count = 0;

	if (trace_disable_timestamp == 1)
    2116:	4a1f      	ldr	r2, [pc, #124]	; (2194 <vTracePortGetTimeStamp+0x84>)
    2118:	589a      	ldr	r2, [r3, r2]
    211a:	6812      	ldr	r2, [r2, #0]
    211c:	2a01      	cmp	r2, #1
    211e:	d106      	bne.n	212e <vTracePortGetTimeStamp+0x1e>
	{
		if (pTimestamp)
    2120:	2800      	cmp	r0, #0
    2122:	d034      	beq.n	218e <vTracePortGetTimeStamp+0x7e>
			*pTimestamp = last_timestamp;
    2124:	4a1c      	ldr	r2, [pc, #112]	; (2198 <vTracePortGetTimeStamp+0x88>)
    2126:	589b      	ldr	r3, [r3, r2]
    2128:	681b      	ldr	r3, [r3, #0]
    212a:	6003      	str	r3, [r0, #0]
    212c:	e02f      	b.n	218e <vTracePortGetTimeStamp+0x7e>

	/* Retrieve HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (HWTC_COUNT_DIRECTION == DIRECTION_INCREMENTING)
	hwtc_count = HWTC_COUNT;
#elif (HWTC_COUNT_DIRECTION == DIRECTION_DECREMENTING)
	hwtc_count = HWTC_PERIOD - HWTC_COUNT;
    212e:	4a1b      	ldr	r2, [pc, #108]	; (219c <vTracePortGetTimeStamp+0x8c>)
    2130:	6814      	ldr	r4, [r2, #0]
    2132:	3401      	adds	r4, #1
    2134:	4a1a      	ldr	r2, [pc, #104]	; (21a0 <vTracePortGetTimeStamp+0x90>)
    2136:	6811      	ldr	r1, [r2, #0]
    2138:	1a61      	subs	r1, r4, r1
	{
		hwtc_count = last_hwtc_count;
	}
#endif

	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
    213a:	4a1a      	ldr	r2, [pc, #104]	; (21a4 <vTracePortGetTimeStamp+0x94>)
    213c:	447a      	add	r2, pc
    213e:	6815      	ldr	r5, [r2, #0]
    2140:	4a19      	ldr	r2, [pc, #100]	; (21a8 <vTracePortGetTimeStamp+0x98>)
    2142:	589a      	ldr	r2, [r3, r2]
    2144:	6812      	ldr	r2, [r2, #0]
    2146:	43d6      	mvns	r6, r2
    2148:	42ee      	cmn	r6, r5
    214a:	d502      	bpl.n	2152 <vTracePortGetTimeStamp+0x42>
		traceTickCount = uiTraceTickCount;
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    214c:	4295      	cmp	r5, r2
    214e:	d107      	bne.n	2160 <vTracePortGetTimeStamp+0x50>
		traceTickCount = last_traceTickCount;
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
    2150:	1c15      	adds	r5, r2, #0
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    2152:	4a16      	ldr	r2, [pc, #88]	; (21ac <vTracePortGetTimeStamp+0x9c>)
    2154:	447a      	add	r2, pc
    2156:	6852      	ldr	r2, [r2, #4]
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
    2158:	4291      	cmp	r1, r2
    215a:	4192      	sbcs	r2, r2
    215c:	4252      	negs	r2, r2
    215e:	18aa      	adds	r2, r5, r2
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
    2160:	2800      	cmp	r0, #0
    2162:	d010      	beq.n	2186 <vTracePortGetTimeStamp+0x76>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		*pTimestamp = traceTickCount * (HWTC_PERIOD / HWTC_DIVISOR);
    2164:	0864      	lsrs	r4, r4, #1
    2166:	1c25      	adds	r5, r4, #0
    2168:	4355      	muls	r5, r2
    216a:	6005      	str	r5, [r0, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / HWTC_DIVISOR. */
		*pTimestamp += (hwtc_count + traceTickCount * (HWTC_PERIOD % HWTC_DIVISOR)) / HWTC_DIVISOR;
    216c:	4c0b      	ldr	r4, [pc, #44]	; (219c <vTracePortGetTimeStamp+0x8c>)
    216e:	6824      	ldr	r4, [r4, #0]
    2170:	3401      	adds	r4, #1
    2172:	2601      	movs	r6, #1
    2174:	4034      	ands	r4, r6
    2176:	4354      	muls	r4, r2
    2178:	1864      	adds	r4, r4, r1
    217a:	0864      	lsrs	r4, r4, #1
    217c:	1964      	adds	r4, r4, r5
    217e:	6004      	str	r4, [r0, #0]

		last_timestamp = *pTimestamp;
    2180:	4805      	ldr	r0, [pc, #20]	; (2198 <vTracePortGetTimeStamp+0x88>)
    2182:	581b      	ldr	r3, [r3, r0]
    2184:	601c      	str	r4, [r3, #0]
	}

	/* Store the previous values. */
	last_traceTickCount = traceTickCount;
    2186:	4b0a      	ldr	r3, [pc, #40]	; (21b0 <vTracePortGetTimeStamp+0xa0>)
    2188:	447b      	add	r3, pc
    218a:	601a      	str	r2, [r3, #0]
	last_hwtc_count = hwtc_count;
    218c:	6059      	str	r1, [r3, #4]
}
    218e:	bd70      	pop	{r4, r5, r6, pc}
    2190:	00005cf0 	.word	0x00005cf0
    2194:	000000ec 	.word	0x000000ec
    2198:	0000009c 	.word	0x0000009c
    219c:	e000e014 	.word	0xe000e014
    21a0:	e000e018 	.word	0xe000e018
    21a4:	1fffe420 	.word	0x1fffe420
    21a8:	00000228 	.word	0x00000228
    21ac:	1fffe408 	.word	0x1fffe408
    21b0:	1fffe3d4 	.word	0x1fffe3d4

000021b4 <vTraceStoreTaskReady>:
 * vTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void vTraceStoreTaskReady(objectHandleType handle)
{
    21b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    21b6:	b083      	sub	sp, #12
    21b8:	1c05      	adds	r5, r0, #0
    21ba:	4c2a      	ldr	r4, [pc, #168]	; (2264 <vTraceStoreTaskReady+0xb0>)
    21bc:	447c      	add	r4, pc
	TREvent* tr;
	uint8_t hnd8;

	TRACE_SR_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
    21be:	2800      	cmp	r0, #0
    21c0:	d04e      	beq.n	2260 <vTraceStoreTaskReady+0xac>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
    21c2:	4b29      	ldr	r3, [pc, #164]	; (2268 <vTraceStoreTaskReady+0xb4>)
    21c4:	447b      	add	r3, pc
    21c6:	681b      	ldr	r3, [r3, #0]
    21c8:	2b00      	cmp	r3, #0
    21ca:	d049      	beq.n	2260 <vTraceStoreTaskReady+0xac>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= NTask, "vTraceStoreTaskReady: Invalid value for handle", );
    21cc:	280f      	cmp	r0, #15
    21ce:	d905      	bls.n	21dc <vTraceStoreTaskReady+0x28>
    21d0:	4826      	ldr	r0, [pc, #152]	; (226c <vTraceStoreTaskReady+0xb8>)
    21d2:	4478      	add	r0, pc
    21d4:	4b26      	ldr	r3, [pc, #152]	; (2270 <vTraceStoreTaskReady+0xbc>)
    21d6:	58e3      	ldr	r3, [r4, r3]
    21d8:	4798      	blx	r3
    21da:	e041      	b.n	2260 <vTraceStoreTaskReady+0xac>

	if (recorder_busy)
    21dc:	4b25      	ldr	r3, [pc, #148]	; (2274 <vTraceStoreTaskReady+0xc0>)
    21de:	58e3      	ldr	r3, [r4, r3]
    21e0:	681b      	ldr	r3, [r3, #0]
    21e2:	2b00      	cmp	r3, #0
    21e4:	d005      	beq.n	21f2 <vTraceStoreTaskReady+0x3e>
	 * This should never occur, as the tick- and kernel call ISR is on lowest
	 * interrupt priority and always are disabled during the critical sections
	 * of the recorder.
	 ***********************************************************************/

	 vTraceError("Recorder busy - high priority ISR using syscall? (1)");
    21e6:	4824      	ldr	r0, [pc, #144]	; (2278 <vTraceStoreTaskReady+0xc4>)
    21e8:	4478      	add	r0, pc
    21ea:	4b21      	ldr	r3, [pc, #132]	; (2270 <vTraceStoreTaskReady+0xbc>)
    21ec:	58e3      	ldr	r3, [r4, r3]
    21ee:	4798      	blx	r3
	 return;
    21f0:	e036      	b.n	2260 <vTraceStoreTaskReady+0xac>
	}

	trcCRITICAL_SECTION_BEGIN();
    21f2:	4b22      	ldr	r3, [pc, #136]	; (227c <vTraceStoreTaskReady+0xc8>)
    21f4:	58e3      	ldr	r3, [r4, r3]
    21f6:	4798      	blx	r3
    21f8:	1c06      	adds	r6, r0, #0
    21fa:	4b1e      	ldr	r3, [pc, #120]	; (2274 <vTraceStoreTaskReady+0xc0>)
    21fc:	58e3      	ldr	r3, [r4, r3]
    21fe:	681a      	ldr	r2, [r3, #0]
    2200:	3201      	adds	r2, #1
    2202:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
    2204:	4b1e      	ldr	r3, [pc, #120]	; (2280 <vTraceStoreTaskReady+0xcc>)
    2206:	58e3      	ldr	r3, [r4, r3]
    2208:	681b      	ldr	r3, [r3, #0]
    220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    220c:	2b00      	cmp	r3, #0
    220e:	d01e      	beq.n	224e <vTraceStoreTaskReady+0x9a>
	{
		if (!TRACE_GET_TASK_FLAG_ISEXCLUDED(handle))
    2210:	1c2b      	adds	r3, r5, #0
    2212:	3321      	adds	r3, #33	; 0x21
    2214:	4a1b      	ldr	r2, [pc, #108]	; (2284 <vTraceStoreTaskReady+0xd0>)
    2216:	58a2      	ldr	r2, [r4, r2]
    2218:	9201      	str	r2, [sp, #4]
    221a:	10da      	asrs	r2, r3, #3
    221c:	9901      	ldr	r1, [sp, #4]
    221e:	5c8a      	ldrb	r2, [r1, r2]
    2220:	2107      	movs	r1, #7
    2222:	400b      	ands	r3, r1
    2224:	411a      	asrs	r2, r3
    2226:	1c13      	adds	r3, r2, #0
    2228:	07da      	lsls	r2, r3, #31
    222a:	d410      	bmi.n	224e <vTraceStoreTaskReady+0x9a>
		{
			dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    222c:	4816      	ldr	r0, [pc, #88]	; (2288 <vTraceStoreTaskReady+0xd4>)
    222e:	4b17      	ldr	r3, [pc, #92]	; (228c <vTraceStoreTaskReady+0xd8>)
    2230:	58e3      	ldr	r3, [r4, r3]
    2232:	4798      	blx	r3
    2234:	1c07      	adds	r7, r0, #0
			hnd8 = prvTraceGet8BitHandle(handle);
			tr = (TREvent*)xTraceNextFreeEventBufferSlot();
    2236:	4b16      	ldr	r3, [pc, #88]	; (2290 <vTraceStoreTaskReady+0xdc>)
    2238:	58e3      	ldr	r3, [r4, r3]
    223a:	4798      	blx	r3
			if (tr != NULL)
    223c:	2800      	cmp	r0, #0
    223e:	d006      	beq.n	224e <vTraceStoreTaskReady+0x9a>
			{
				tr->type = DIV_TASK_READY;
    2240:	2202      	movs	r2, #2
    2242:	7002      	strb	r2, [r0, #0]
				tr->dts = dts3;
    2244:	8047      	strh	r7, [r0, #2]
				tr->objHandle = hnd8;
    2246:	7045      	strb	r5, [r0, #1]
				prvTraceUpdateCounters();
    2248:	4b12      	ldr	r3, [pc, #72]	; (2294 <vTraceStoreTaskReady+0xe0>)
    224a:	58e3      	ldr	r3, [r4, r3]
    224c:	4798      	blx	r3
			}
		}
	}
	trcCRITICAL_SECTION_END();
    224e:	4b09      	ldr	r3, [pc, #36]	; (2274 <vTraceStoreTaskReady+0xc0>)
    2250:	58e3      	ldr	r3, [r4, r3]
    2252:	681a      	ldr	r2, [r3, #0]
    2254:	3a01      	subs	r2, #1
    2256:	601a      	str	r2, [r3, #0]
    2258:	1c30      	adds	r0, r6, #0
    225a:	4b0f      	ldr	r3, [pc, #60]	; (2298 <vTraceStoreTaskReady+0xe4>)
    225c:	58e3      	ldr	r3, [r4, r3]
    225e:	4798      	blx	r3
}
    2260:	b003      	add	sp, #12
    2262:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2264:	00005c48 	.word	0x00005c48
    2268:	1fffde3c 	.word	0x1fffde3c
    226c:	00004f0e 	.word	0x00004f0e
    2270:	00000120 	.word	0x00000120
    2274:	000002c4 	.word	0x000002c4
    2278:	00004f38 	.word	0x00004f38
    227c:	00000274 	.word	0x00000274
    2280:	00000028 	.word	0x00000028
    2284:	00000124 	.word	0x00000124
    2288:	0000ffff 	.word	0x0000ffff
    228c:	00000180 	.word	0x00000180
    2290:	000000e8 	.word	0x000000e8
    2294:	00000240 	.word	0x00000240
    2298:	00000134 	.word	0x00000134

0000229c <vTraceStoreKernelCall>:
 *
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
void vTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
    229c:	b5f0      	push	{r4, r5, r6, r7, lr}
    229e:	4647      	mov	r7, r8
    22a0:	b480      	push	{r7}
    22a2:	b082      	sub	sp, #8
    22a4:	1c06      	adds	r6, r0, #0
    22a6:	1c0d      	adds	r5, r1, #0
    22a8:	1c17      	adds	r7, r2, #0
    22aa:	4c3f      	ldr	r4, [pc, #252]	; (23a8 <vTraceStoreKernelCall+0x10c>)
    22ac:	447c      	add	r4, pc
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "vTraceStoreKernelCall: ecode >= 0xFF", );
    22ae:	28fe      	cmp	r0, #254	; 0xfe
    22b0:	d905      	bls.n	22be <vTraceStoreKernelCall+0x22>
    22b2:	483e      	ldr	r0, [pc, #248]	; (23ac <vTraceStoreKernelCall+0x110>)
    22b4:	4478      	add	r0, pc
    22b6:	4b3e      	ldr	r3, [pc, #248]	; (23b0 <vTraceStoreKernelCall+0x114>)
    22b8:	58e3      	ldr	r3, [r4, r3]
    22ba:	4798      	blx	r3
    22bc:	e06f      	b.n	239e <vTraceStoreKernelCall+0x102>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "vTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", );
    22be:	2906      	cmp	r1, #6
    22c0:	d905      	bls.n	22ce <vTraceStoreKernelCall+0x32>
    22c2:	483c      	ldr	r0, [pc, #240]	; (23b4 <vTraceStoreKernelCall+0x118>)
    22c4:	4478      	add	r0, pc
    22c6:	4b3a      	ldr	r3, [pc, #232]	; (23b0 <vTraceStoreKernelCall+0x114>)
    22c8:	58e3      	ldr	r3, [r4, r3]
    22ca:	4798      	blx	r3
    22cc:	e067      	b.n	239e <vTraceStoreKernelCall+0x102>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "vTraceStoreKernelCall: Invalid value for objectNumber", );
    22ce:	4b3a      	ldr	r3, [pc, #232]	; (23b8 <vTraceStoreKernelCall+0x11c>)
    22d0:	58e3      	ldr	r3, [r4, r3]
    22d2:	681b      	ldr	r3, [r3, #0]
    22d4:	185b      	adds	r3, r3, r1
    22d6:	3360      	adds	r3, #96	; 0x60
    22d8:	791b      	ldrb	r3, [r3, #4]
    22da:	4293      	cmp	r3, r2
    22dc:	d205      	bcs.n	22ea <vTraceStoreKernelCall+0x4e>
    22de:	4837      	ldr	r0, [pc, #220]	; (23bc <vTraceStoreKernelCall+0x120>)
    22e0:	4478      	add	r0, pc
    22e2:	4b33      	ldr	r3, [pc, #204]	; (23b0 <vTraceStoreKernelCall+0x114>)
    22e4:	58e3      	ldr	r3, [r4, r3]
    22e6:	4798      	blx	r3
    22e8:	e059      	b.n	239e <vTraceStoreKernelCall+0x102>

	if (recorder_busy)
    22ea:	4b35      	ldr	r3, [pc, #212]	; (23c0 <vTraceStoreKernelCall+0x124>)
    22ec:	58e3      	ldr	r3, [r4, r3]
    22ee:	681b      	ldr	r3, [r3, #0]
    22f0:	2b00      	cmp	r3, #0
    22f2:	d005      	beq.n	2300 <vTraceStoreKernelCall+0x64>
		* or creates a user event.
		* Only ISRs that are disabled by TRACE_ENTER_CRITICAL_SECTION may use system calls
		* or user events (see TRACE_MAX_SYSCALL_INTERRUPT_PRIORITY).
		*************************************************************************/

		vTraceError("Recorder busy - high priority ISR using syscall? (2)");
    22f4:	4833      	ldr	r0, [pc, #204]	; (23c4 <vTraceStoreKernelCall+0x128>)
    22f6:	4478      	add	r0, pc
    22f8:	4b2d      	ldr	r3, [pc, #180]	; (23b0 <vTraceStoreKernelCall+0x114>)
    22fa:	58e3      	ldr	r3, [r4, r3]
    22fc:	4798      	blx	r3
		return;
    22fe:	e04e      	b.n	239e <vTraceStoreKernelCall+0x102>
	}

	if (handle_of_last_logged_task == 0)
    2300:	4b31      	ldr	r3, [pc, #196]	; (23c8 <vTraceStoreKernelCall+0x12c>)
    2302:	58e3      	ldr	r3, [r4, r3]
    2304:	9301      	str	r3, [sp, #4]
    2306:	781b      	ldrb	r3, [r3, #0]
    2308:	2b00      	cmp	r3, #0
    230a:	d048      	beq.n	239e <vTraceStoreKernelCall+0x102>
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
    230c:	4b2f      	ldr	r3, [pc, #188]	; (23cc <vTraceStoreKernelCall+0x130>)
    230e:	58e3      	ldr	r3, [r4, r3]
    2310:	4798      	blx	r3
    2312:	4680      	mov	r8, r0
    2314:	4b2a      	ldr	r3, [pc, #168]	; (23c0 <vTraceStoreKernelCall+0x124>)
    2316:	58e3      	ldr	r3, [r4, r3]
    2318:	681a      	ldr	r2, [r3, #0]
    231a:	3201      	adds	r2, #1
    231c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
    231e:	4b26      	ldr	r3, [pc, #152]	; (23b8 <vTraceStoreKernelCall+0x11c>)
    2320:	58e3      	ldr	r3, [r4, r3]
    2322:	681b      	ldr	r3, [r3, #0]
    2324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2326:	2b00      	cmp	r3, #0
    2328:	d030      	beq.n	238c <vTraceStoreKernelCall+0xf0>
	{
		/* If it is an ISR or NOT an excluded task, this kernel call will be stored in the trace */
		if (nISRactive || !inExcludedTask)
    232a:	4b29      	ldr	r3, [pc, #164]	; (23d0 <vTraceStoreKernelCall+0x134>)
    232c:	58e3      	ldr	r3, [r4, r3]
    232e:	9301      	str	r3, [sp, #4]
    2330:	781b      	ldrb	r3, [r3, #0]
    2332:	b25b      	sxtb	r3, r3
    2334:	2b00      	cmp	r3, #0
    2336:	d105      	bne.n	2344 <vTraceStoreKernelCall+0xa8>
    2338:	4b26      	ldr	r3, [pc, #152]	; (23d4 <vTraceStoreKernelCall+0x138>)
    233a:	58e3      	ldr	r3, [r4, r3]
    233c:	9301      	str	r3, [sp, #4]
    233e:	781b      	ldrb	r3, [r3, #0]
    2340:	2b00      	cmp	r3, #0
    2342:	d123      	bne.n	238c <vTraceStoreKernelCall+0xf0>
		{
			/* Check if the referenced object or the event code is excluded */
			if (!uiTraceIsObjectExcluded(objectClass, (objectHandleType)objectNumber) && !TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(ecode))
    2344:	b2ff      	uxtb	r7, r7
    2346:	1c28      	adds	r0, r5, #0
    2348:	1c39      	adds	r1, r7, #0
    234a:	4b23      	ldr	r3, [pc, #140]	; (23d8 <vTraceStoreKernelCall+0x13c>)
    234c:	58e3      	ldr	r3, [r4, r3]
    234e:	4798      	blx	r3
    2350:	2800      	cmp	r0, #0
    2352:	d11b      	bne.n	238c <vTraceStoreKernelCall+0xf0>
    2354:	4b21      	ldr	r3, [pc, #132]	; (23dc <vTraceStoreKernelCall+0x140>)
    2356:	58e3      	ldr	r3, [r4, r3]
    2358:	9301      	str	r3, [sp, #4]
    235a:	08f3      	lsrs	r3, r6, #3
    235c:	9901      	ldr	r1, [sp, #4]
    235e:	5cca      	ldrb	r2, [r1, r3]
    2360:	2307      	movs	r3, #7
    2362:	4033      	ands	r3, r6
    2364:	411a      	asrs	r2, r3
    2366:	1c13      	adds	r3, r2, #0
    2368:	07da      	lsls	r2, r3, #31
    236a:	d40f      	bmi.n	238c <vTraceStoreKernelCall+0xf0>
			{
				dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
    236c:	481c      	ldr	r0, [pc, #112]	; (23e0 <vTraceStoreKernelCall+0x144>)
    236e:	4b1d      	ldr	r3, [pc, #116]	; (23e4 <vTraceStoreKernelCall+0x148>)
    2370:	58e3      	ldr	r3, [r4, r3]
    2372:	4798      	blx	r3
    2374:	1c05      	adds	r5, r0, #0
				hnd8 = prvTraceGet8BitHandle(objectNumber);
				kse = (KernelCall*) xTraceNextFreeEventBufferSlot();
    2376:	4b1c      	ldr	r3, [pc, #112]	; (23e8 <vTraceStoreKernelCall+0x14c>)
    2378:	58e3      	ldr	r3, [r4, r3]
    237a:	4798      	blx	r3
				if (kse != NULL)
    237c:	2800      	cmp	r0, #0
    237e:	d005      	beq.n	238c <vTraceStoreKernelCall+0xf0>
				{
					kse->dts = dts1;
    2380:	8045      	strh	r5, [r0, #2]
					kse->type = (uint8_t)ecode;
    2382:	7006      	strb	r6, [r0, #0]
					kse->objHandle = hnd8;
    2384:	7047      	strb	r7, [r0, #1]
					prvTraceUpdateCounters();
    2386:	4b19      	ldr	r3, [pc, #100]	; (23ec <vTraceStoreKernelCall+0x150>)
    2388:	58e3      	ldr	r3, [r4, r3]
    238a:	4798      	blx	r3
				}
			}
		}
	}
	trcCRITICAL_SECTION_END();
    238c:	4b0c      	ldr	r3, [pc, #48]	; (23c0 <vTraceStoreKernelCall+0x124>)
    238e:	58e3      	ldr	r3, [r4, r3]
    2390:	681a      	ldr	r2, [r3, #0]
    2392:	3a01      	subs	r2, #1
    2394:	601a      	str	r2, [r3, #0]
    2396:	4640      	mov	r0, r8
    2398:	4b15      	ldr	r3, [pc, #84]	; (23f0 <vTraceStoreKernelCall+0x154>)
    239a:	58e3      	ldr	r3, [r4, r3]
    239c:	4798      	blx	r3
#endif /* TRACE_SCHEDULING_ONLY */
}
    239e:	b002      	add	sp, #8
    23a0:	bc04      	pop	{r2}
    23a2:	4690      	mov	r8, r2
    23a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23a6:	46c0      	nop			; (mov r8, r8)
    23a8:	00005b58 	.word	0x00005b58
    23ac:	00004edc 	.word	0x00004edc
    23b0:	00000120 	.word	0x00000120
    23b4:	00004f00 	.word	0x00004f00
    23b8:	00000028 	.word	0x00000028
    23bc:	00004f28 	.word	0x00004f28
    23c0:	000002c4 	.word	0x000002c4
    23c4:	00004f56 	.word	0x00004f56
    23c8:	0000002c 	.word	0x0000002c
    23cc:	00000274 	.word	0x00000274
    23d0:	000002c8 	.word	0x000002c8
    23d4:	00000230 	.word	0x00000230
    23d8:	000001a4 	.word	0x000001a4
    23dc:	00000298 	.word	0x00000298
    23e0:	0000ffff 	.word	0x0000ffff
    23e4:	00000180 	.word	0x00000180
    23e8:	000000e8 	.word	0x000000e8
    23ec:	00000240 	.word	0x00000240
    23f0:	00000134 	.word	0x00000134

000023f4 <vTraceStoreKernelCallWithParam>:
 ******************************************************************************/
void vTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
    23f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23f6:	4657      	mov	r7, sl
    23f8:	464e      	mov	r6, r9
    23fa:	4645      	mov	r5, r8
    23fc:	b4e0      	push	{r5, r6, r7}
    23fe:	b082      	sub	sp, #8
    2400:	1c06      	adds	r6, r0, #0
    2402:	1c0d      	adds	r5, r1, #0
    2404:	1c17      	adds	r7, r2, #0
    2406:	4698      	mov	r8, r3
    2408:	4c4a      	ldr	r4, [pc, #296]	; (2534 <vTraceStoreKernelCallWithParam+0x140>)
    240a:	447c      	add	r4, pc
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "vTraceStoreKernelCall: evtcode >= 0xFF", );
    240c:	28fe      	cmp	r0, #254	; 0xfe
    240e:	d905      	bls.n	241c <vTraceStoreKernelCallWithParam+0x28>
    2410:	4849      	ldr	r0, [pc, #292]	; (2538 <vTraceStoreKernelCallWithParam+0x144>)
    2412:	4478      	add	r0, pc
    2414:	4b49      	ldr	r3, [pc, #292]	; (253c <vTraceStoreKernelCallWithParam+0x148>)
    2416:	58e3      	ldr	r3, [r4, r3]
    2418:	4798      	blx	r3
    241a:	e085      	b.n	2528 <vTraceStoreKernelCallWithParam+0x134>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "vTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", );
    241c:	2906      	cmp	r1, #6
    241e:	d905      	bls.n	242c <vTraceStoreKernelCallWithParam+0x38>
    2420:	4847      	ldr	r0, [pc, #284]	; (2540 <vTraceStoreKernelCallWithParam+0x14c>)
    2422:	4478      	add	r0, pc
    2424:	4b45      	ldr	r3, [pc, #276]	; (253c <vTraceStoreKernelCallWithParam+0x148>)
    2426:	58e3      	ldr	r3, [r4, r3]
    2428:	4798      	blx	r3
    242a:	e07d      	b.n	2528 <vTraceStoreKernelCallWithParam+0x134>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "vTraceStoreKernelCallWithParam: Invalid value for objectNumber", );
    242c:	4b45      	ldr	r3, [pc, #276]	; (2544 <vTraceStoreKernelCallWithParam+0x150>)
    242e:	58e2      	ldr	r2, [r4, r3]
    2430:	6812      	ldr	r2, [r2, #0]
    2432:	1852      	adds	r2, r2, r1
    2434:	3260      	adds	r2, #96	; 0x60
    2436:	7912      	ldrb	r2, [r2, #4]
    2438:	42ba      	cmp	r2, r7
    243a:	d205      	bcs.n	2448 <vTraceStoreKernelCallWithParam+0x54>
    243c:	4842      	ldr	r0, [pc, #264]	; (2548 <vTraceStoreKernelCallWithParam+0x154>)
    243e:	4478      	add	r0, pc
    2440:	4b3e      	ldr	r3, [pc, #248]	; (253c <vTraceStoreKernelCallWithParam+0x148>)
    2442:	58e3      	ldr	r3, [r4, r3]
    2444:	4798      	blx	r3
    2446:	e06f      	b.n	2528 <vTraceStoreKernelCallWithParam+0x134>

	if (recorder_busy)
    2448:	4b40      	ldr	r3, [pc, #256]	; (254c <vTraceStoreKernelCallWithParam+0x158>)
    244a:	58e3      	ldr	r3, [r4, r3]
    244c:	681b      	ldr	r3, [r3, #0]
    244e:	2b00      	cmp	r3, #0
    2450:	d005      	beq.n	245e <vTraceStoreKernelCallWithParam+0x6a>
		* or creates a user event.
		* Only ISRs that are disabled by TRACE_ENTER_CRITICAL_SECTION may use system calls
		* or user events (see TRACE_MAX_SYSCALL_INTERRUPT_PRIORITY).
		*************************************************************************/

		vTraceError("Recorder busy - high priority ISR using syscall? (3)");
    2452:	483f      	ldr	r0, [pc, #252]	; (2550 <vTraceStoreKernelCallWithParam+0x15c>)
    2454:	4478      	add	r0, pc
    2456:	4b39      	ldr	r3, [pc, #228]	; (253c <vTraceStoreKernelCallWithParam+0x148>)
    2458:	58e3      	ldr	r3, [r4, r3]
    245a:	4798      	blx	r3
		return;
    245c:	e064      	b.n	2528 <vTraceStoreKernelCallWithParam+0x134>
	}

	trcCRITICAL_SECTION_BEGIN();
    245e:	4b3d      	ldr	r3, [pc, #244]	; (2554 <vTraceStoreKernelCallWithParam+0x160>)
    2460:	58e3      	ldr	r3, [r4, r3]
    2462:	4798      	blx	r3
    2464:	4681      	mov	r9, r0
    2466:	4b39      	ldr	r3, [pc, #228]	; (254c <vTraceStoreKernelCallWithParam+0x158>)
    2468:	58e3      	ldr	r3, [r4, r3]
    246a:	681a      	ldr	r2, [r3, #0]
    246c:	3201      	adds	r2, #1
    246e:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task && (! inExcludedTask || nISRactive))
    2470:	4b34      	ldr	r3, [pc, #208]	; (2544 <vTraceStoreKernelCallWithParam+0x150>)
    2472:	58e3      	ldr	r3, [r4, r3]
    2474:	681b      	ldr	r3, [r3, #0]
    2476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2478:	2b00      	cmp	r3, #0
    247a:	d04c      	beq.n	2516 <vTraceStoreKernelCallWithParam+0x122>
    247c:	4b36      	ldr	r3, [pc, #216]	; (2558 <vTraceStoreKernelCallWithParam+0x164>)
    247e:	58e3      	ldr	r3, [r4, r3]
    2480:	9301      	str	r3, [sp, #4]
    2482:	781b      	ldrb	r3, [r3, #0]
    2484:	2b00      	cmp	r3, #0
    2486:	d046      	beq.n	2516 <vTraceStoreKernelCallWithParam+0x122>
    2488:	4b34      	ldr	r3, [pc, #208]	; (255c <vTraceStoreKernelCallWithParam+0x168>)
    248a:	58e3      	ldr	r3, [r4, r3]
    248c:	9301      	str	r3, [sp, #4]
    248e:	781b      	ldrb	r3, [r3, #0]
    2490:	2b00      	cmp	r3, #0
    2492:	d006      	beq.n	24a2 <vTraceStoreKernelCallWithParam+0xae>
    2494:	4b32      	ldr	r3, [pc, #200]	; (2560 <vTraceStoreKernelCallWithParam+0x16c>)
    2496:	58e3      	ldr	r3, [r4, r3]
    2498:	9301      	str	r3, [sp, #4]
    249a:	781b      	ldrb	r3, [r3, #0]
    249c:	b25b      	sxtb	r3, r3
    249e:	2b00      	cmp	r3, #0
    24a0:	d039      	beq.n	2516 <vTraceStoreKernelCallWithParam+0x122>
	{
		/* Check if the referenced object or the event code is excluded */
		if (!uiTraceIsObjectExcluded(objectClass, (objectHandleType)objectNumber) &&
    24a2:	b2ff      	uxtb	r7, r7
    24a4:	1c28      	adds	r0, r5, #0
    24a6:	1c39      	adds	r1, r7, #0
    24a8:	4b2e      	ldr	r3, [pc, #184]	; (2564 <vTraceStoreKernelCallWithParam+0x170>)
    24aa:	58e3      	ldr	r3, [r4, r3]
    24ac:	4798      	blx	r3
    24ae:	2800      	cmp	r0, #0
    24b0:	d131      	bne.n	2516 <vTraceStoreKernelCallWithParam+0x122>
			!TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(evtcode))
    24b2:	4b2d      	ldr	r3, [pc, #180]	; (2568 <vTraceStoreKernelCallWithParam+0x174>)
    24b4:	58e3      	ldr	r3, [r4, r3]
    24b6:	9301      	str	r3, [sp, #4]
    24b8:	08f3      	lsrs	r3, r6, #3
    24ba:	9901      	ldr	r1, [sp, #4]
    24bc:	5cca      	ldrb	r2, [r1, r3]
    24be:	2307      	movs	r3, #7
    24c0:	4033      	ands	r3, r6
    24c2:	411a      	asrs	r2, r3
    24c4:	1c13      	adds	r3, r2, #0

	trcCRITICAL_SECTION_BEGIN();
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task && (! inExcludedTask || nISRactive))
	{
		/* Check if the referenced object or the event code is excluded */
		if (!uiTraceIsObjectExcluded(objectClass, (objectHandleType)objectNumber) &&
    24c6:	07da      	lsls	r2, r3, #31
    24c8:	d425      	bmi.n	2516 <vTraceStoreKernelCallWithParam+0x122>
			!TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(evtcode))
		{
			dts2 = (uint8_t)prvTraceGetDTS(0xFF);
    24ca:	20ff      	movs	r0, #255	; 0xff
    24cc:	4b27      	ldr	r3, [pc, #156]	; (256c <vTraceStoreKernelCallWithParam+0x178>)
    24ce:	58e3      	ldr	r3, [r4, r3]
    24d0:	4798      	blx	r3
    24d2:	4682      	mov	sl, r0
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
	{
		return param;
    24d4:	4645      	mov	r5, r8
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
    24d6:	2dff      	cmp	r5, #255	; 0xff
    24d8:	d910      	bls.n	24fc <vTraceStoreKernelCallWithParam+0x108>
	{
		return param;
	}
	else
	{
		xps = (XPSEvent*) xTraceNextFreeEventBufferSlot();
    24da:	4b25      	ldr	r3, [pc, #148]	; (2570 <vTraceStoreKernelCallWithParam+0x17c>)
    24dc:	58e3      	ldr	r3, [r4, r3]
    24de:	4798      	blx	r3
		if (xps != NULL)
    24e0:	2800      	cmp	r0, #0
    24e2:	d008      	beq.n	24f6 <vTraceStoreKernelCallWithParam+0x102>
		{
			xps->type = DIV_XPS;
    24e4:	2301      	movs	r3, #1
    24e6:	7003      	strb	r3, [r0, #0]
			xps->xps_8 = (param & (0xFF00 & ~param_max)) >> 8;
    24e8:	0a2b      	lsrs	r3, r5, #8
    24ea:	7043      	strb	r3, [r0, #1]
			xps->xps_16 = (param & (0xFFFF0000 & ~param_max)) >> 16;
    24ec:	0c2b      	lsrs	r3, r5, #16
    24ee:	8043      	strh	r3, [r0, #2]
			prvTraceUpdateCounters();
    24f0:	4b20      	ldr	r3, [pc, #128]	; (2574 <vTraceStoreKernelCallWithParam+0x180>)
    24f2:	58e3      	ldr	r3, [r4, r3]
    24f4:	4798      	blx	r3
		}

		return param & param_max;
    24f6:	25ff      	movs	r5, #255	; 0xff
    24f8:	4643      	mov	r3, r8
    24fa:	401d      	ands	r5, r3
			!TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(evtcode))
		{
			dts2 = (uint8_t)prvTraceGetDTS(0xFF);
			p8 = (uint8_t) prvTraceGetParam(0xFF, param);
			hnd8 = prvTraceGet8BitHandle((objectHandleType)objectNumber);
			kse = (KernelCallWithParamAndHandle*) xTraceNextFreeEventBufferSlot();
    24fc:	4b1c      	ldr	r3, [pc, #112]	; (2570 <vTraceStoreKernelCallWithParam+0x17c>)
    24fe:	58e3      	ldr	r3, [r4, r3]
    2500:	4798      	blx	r3
			if (kse != NULL)
    2502:	2800      	cmp	r0, #0
    2504:	d007      	beq.n	2516 <vTraceStoreKernelCallWithParam+0x122>
			{
				kse->dts = dts2;
    2506:	4651      	mov	r1, sl
    2508:	70c1      	strb	r1, [r0, #3]
				kse->type = (uint8_t)evtcode;
    250a:	7006      	strb	r6, [r0, #0]
				kse->objHandle = hnd8;
    250c:	7047      	strb	r7, [r0, #1]
				kse->param = p8;
    250e:	7085      	strb	r5, [r0, #2]
				prvTraceUpdateCounters();
    2510:	4b18      	ldr	r3, [pc, #96]	; (2574 <vTraceStoreKernelCallWithParam+0x180>)
    2512:	58e3      	ldr	r3, [r4, r3]
    2514:	4798      	blx	r3
			}
		}
	}
	trcCRITICAL_SECTION_END();
    2516:	4b0d      	ldr	r3, [pc, #52]	; (254c <vTraceStoreKernelCallWithParam+0x158>)
    2518:	58e3      	ldr	r3, [r4, r3]
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	3a01      	subs	r2, #1
    251e:	601a      	str	r2, [r3, #0]
    2520:	4648      	mov	r0, r9
    2522:	4b15      	ldr	r3, [pc, #84]	; (2578 <vTraceStoreKernelCallWithParam+0x184>)
    2524:	58e3      	ldr	r3, [r4, r3]
    2526:	4798      	blx	r3
#endif /* TRACE_SCHEDULING_ONLY */
}
    2528:	b002      	add	sp, #8
    252a:	bc1c      	pop	{r2, r3, r4}
    252c:	4690      	mov	r8, r2
    252e:	4699      	mov	r9, r3
    2530:	46a2      	mov	sl, r4
    2532:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2534:	000059fa 	.word	0x000059fa
    2538:	00004e72 	.word	0x00004e72
    253c:	00000120 	.word	0x00000120
    2540:	00004e9a 	.word	0x00004e9a
    2544:	00000028 	.word	0x00000028
    2548:	00004eca 	.word	0x00004eca
    254c:	000002c4 	.word	0x000002c4
    2550:	00004f04 	.word	0x00004f04
    2554:	00000274 	.word	0x00000274
    2558:	0000002c 	.word	0x0000002c
    255c:	00000230 	.word	0x00000230
    2560:	000002c8 	.word	0x000002c8
    2564:	000001a4 	.word	0x000001a4
    2568:	00000298 	.word	0x00000298
    256c:	00000180 	.word	0x00000180
    2570:	000000e8 	.word	0x000000e8
    2574:	00000240 	.word	0x00000240
    2578:	00000134 	.word	0x00000134

0000257c <vTraceStoreKernelCallWithNumericParamOnly>:
 *
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
void vTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
    257c:	b5f0      	push	{r4, r5, r6, r7, lr}
    257e:	464f      	mov	r7, r9
    2580:	4646      	mov	r6, r8
    2582:	b4c0      	push	{r6, r7}
    2584:	b083      	sub	sp, #12
    2586:	1c05      	adds	r5, r0, #0
    2588:	1c0e      	adds	r6, r1, #0
    258a:	4c3c      	ldr	r4, [pc, #240]	; (267c <vTraceStoreKernelCallWithNumericParamOnly+0x100>)
    258c:	447c      	add	r4, pc
	uint16_t restParam;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	restParam = 0;

	TRACE_ASSERT(evtcode < 0xFF,
    258e:	28fe      	cmp	r0, #254	; 0xfe
    2590:	d905      	bls.n	259e <vTraceStoreKernelCallWithNumericParamOnly+0x22>
    2592:	483b      	ldr	r0, [pc, #236]	; (2680 <vTraceStoreKernelCallWithNumericParamOnly+0x104>)
    2594:	4478      	add	r0, pc
    2596:	4b3b      	ldr	r3, [pc, #236]	; (2684 <vTraceStoreKernelCallWithNumericParamOnly+0x108>)
    2598:	58e3      	ldr	r3, [r4, r3]
    259a:	4798      	blx	r3
    259c:	e068      	b.n	2670 <vTraceStoreKernelCallWithNumericParamOnly+0xf4>
		"vTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", );

	if (recorder_busy)
    259e:	4b3a      	ldr	r3, [pc, #232]	; (2688 <vTraceStoreKernelCallWithNumericParamOnly+0x10c>)
    25a0:	58e3      	ldr	r3, [r4, r3]
    25a2:	681b      	ldr	r3, [r3, #0]
    25a4:	2b00      	cmp	r3, #0
    25a6:	d005      	beq.n	25b4 <vTraceStoreKernelCallWithNumericParamOnly+0x38>
		* or creates a user event.
		* Only ISRs that are disabled by TRACE_ENTER_CRITICAL_SECTION may use system calls
		* or user events (see TRACE_MAX_SYSCALL_INTERRUPT_PRIORITY).
		*************************************************************************/

		vTraceError("Recorder busy - high priority ISR using syscall? (4)");
    25a8:	4838      	ldr	r0, [pc, #224]	; (268c <vTraceStoreKernelCallWithNumericParamOnly+0x110>)
    25aa:	4478      	add	r0, pc
    25ac:	4b35      	ldr	r3, [pc, #212]	; (2684 <vTraceStoreKernelCallWithNumericParamOnly+0x108>)
    25ae:	58e3      	ldr	r3, [r4, r3]
    25b0:	4798      	blx	r3
		return;
    25b2:	e05d      	b.n	2670 <vTraceStoreKernelCallWithNumericParamOnly+0xf4>
	}

	trcCRITICAL_SECTION_BEGIN();
    25b4:	4b36      	ldr	r3, [pc, #216]	; (2690 <vTraceStoreKernelCallWithNumericParamOnly+0x114>)
    25b6:	58e3      	ldr	r3, [r4, r3]
    25b8:	4798      	blx	r3
    25ba:	1c07      	adds	r7, r0, #0
    25bc:	4b32      	ldr	r3, [pc, #200]	; (2688 <vTraceStoreKernelCallWithNumericParamOnly+0x10c>)
    25be:	58e3      	ldr	r3, [r4, r3]
    25c0:	681a      	ldr	r2, [r3, #0]
    25c2:	3201      	adds	r2, #1
    25c4:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task
    25c6:	4b33      	ldr	r3, [pc, #204]	; (2694 <vTraceStoreKernelCallWithNumericParamOnly+0x118>)
    25c8:	58e3      	ldr	r3, [r4, r3]
    25ca:	681b      	ldr	r3, [r3, #0]
    25cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    25ce:	2b00      	cmp	r3, #0
    25d0:	d045      	beq.n	265e <vTraceStoreKernelCallWithNumericParamOnly+0xe2>
    25d2:	4b31      	ldr	r3, [pc, #196]	; (2698 <vTraceStoreKernelCallWithNumericParamOnly+0x11c>)
    25d4:	58e3      	ldr	r3, [r4, r3]
    25d6:	9301      	str	r3, [sp, #4]
    25d8:	781b      	ldrb	r3, [r3, #0]
    25da:	2b00      	cmp	r3, #0
    25dc:	d03f      	beq.n	265e <vTraceStoreKernelCallWithNumericParamOnly+0xe2>
		&& (! inExcludedTask || nISRactive))
    25de:	4b2f      	ldr	r3, [pc, #188]	; (269c <vTraceStoreKernelCallWithNumericParamOnly+0x120>)
    25e0:	58e3      	ldr	r3, [r4, r3]
    25e2:	9301      	str	r3, [sp, #4]
    25e4:	781b      	ldrb	r3, [r3, #0]
    25e6:	2b00      	cmp	r3, #0
    25e8:	d006      	beq.n	25f8 <vTraceStoreKernelCallWithNumericParamOnly+0x7c>
    25ea:	4b2d      	ldr	r3, [pc, #180]	; (26a0 <vTraceStoreKernelCallWithNumericParamOnly+0x124>)
    25ec:	58e3      	ldr	r3, [r4, r3]
    25ee:	9301      	str	r3, [sp, #4]
    25f0:	781b      	ldrb	r3, [r3, #0]
    25f2:	b25b      	sxtb	r3, r3
    25f4:	2b00      	cmp	r3, #0
    25f6:	d032      	beq.n	265e <vTraceStoreKernelCallWithNumericParamOnly+0xe2>
	{
		/* Check if the event code is excluded */
		if (!TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(evtcode))
    25f8:	4b2a      	ldr	r3, [pc, #168]	; (26a4 <vTraceStoreKernelCallWithNumericParamOnly+0x128>)
    25fa:	58e3      	ldr	r3, [r4, r3]
    25fc:	9301      	str	r3, [sp, #4]
    25fe:	08eb      	lsrs	r3, r5, #3
    2600:	9901      	ldr	r1, [sp, #4]
    2602:	5cca      	ldrb	r2, [r1, r3]
    2604:	2307      	movs	r3, #7
    2606:	402b      	ands	r3, r5
    2608:	411a      	asrs	r2, r3
    260a:	1c13      	adds	r3, r2, #0
    260c:	07da      	lsls	r2, r3, #31
    260e:	d426      	bmi.n	265e <vTraceStoreKernelCallWithNumericParamOnly+0xe2>
		{
			dts6 = (uint8_t)prvTraceGetDTS(0xFF);
    2610:	20ff      	movs	r0, #255	; 0xff
    2612:	4b25      	ldr	r3, [pc, #148]	; (26a8 <vTraceStoreKernelCallWithNumericParamOnly+0x12c>)
    2614:	58e3      	ldr	r3, [r4, r3]
    2616:	4798      	blx	r3
    2618:	4681      	mov	r9, r0
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
	{
		return param;
    261a:	46b0      	mov	r8, r6
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
    261c:	4b23      	ldr	r3, [pc, #140]	; (26ac <vTraceStoreKernelCallWithNumericParamOnly+0x130>)
    261e:	429e      	cmp	r6, r3
    2620:	d910      	bls.n	2644 <vTraceStoreKernelCallWithNumericParamOnly+0xc8>
	{
		return param;
	}
	else
	{
		xps = (XPSEvent*) xTraceNextFreeEventBufferSlot();
    2622:	4b23      	ldr	r3, [pc, #140]	; (26b0 <vTraceStoreKernelCallWithNumericParamOnly+0x134>)
    2624:	58e3      	ldr	r3, [r4, r3]
    2626:	4798      	blx	r3
		if (xps != NULL)
    2628:	2800      	cmp	r0, #0
    262a:	d008      	beq.n	263e <vTraceStoreKernelCallWithNumericParamOnly+0xc2>
		{
			xps->type = DIV_XPS;
    262c:	2301      	movs	r3, #1
    262e:	7003      	strb	r3, [r0, #0]
			xps->xps_8 = (param & (0xFF00 & ~param_max)) >> 8;
    2630:	2300      	movs	r3, #0
    2632:	7043      	strb	r3, [r0, #1]
			xps->xps_16 = (param & (0xFFFF0000 & ~param_max)) >> 16;
    2634:	0c33      	lsrs	r3, r6, #16
    2636:	8043      	strh	r3, [r0, #2]
			prvTraceUpdateCounters();
    2638:	4b1e      	ldr	r3, [pc, #120]	; (26b4 <vTraceStoreKernelCallWithNumericParamOnly+0x138>)
    263a:	58e3      	ldr	r3, [r4, r3]
    263c:	4798      	blx	r3
		}

		return param & param_max;
    263e:	0436      	lsls	r6, r6, #16
    2640:	0c36      	lsrs	r6, r6, #16
    2642:	46b0      	mov	r8, r6
		/* Check if the event code is excluded */
		if (!TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(evtcode))
		{
			dts6 = (uint8_t)prvTraceGetDTS(0xFF);
			restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
			kse = (KernelCallWithParam16*) xTraceNextFreeEventBufferSlot();
    2644:	4b1a      	ldr	r3, [pc, #104]	; (26b0 <vTraceStoreKernelCallWithNumericParamOnly+0x134>)
    2646:	58e3      	ldr	r3, [r4, r3]
    2648:	4798      	blx	r3
			if (kse != NULL)
    264a:	2800      	cmp	r0, #0
    264c:	d007      	beq.n	265e <vTraceStoreKernelCallWithNumericParamOnly+0xe2>
			{
				kse->dts = dts6;
    264e:	464b      	mov	r3, r9
    2650:	7043      	strb	r3, [r0, #1]
				kse->type = (uint8_t)evtcode;
    2652:	7005      	strb	r5, [r0, #0]
				kse->param = restParam;
    2654:	4641      	mov	r1, r8
    2656:	8041      	strh	r1, [r0, #2]
				prvTraceUpdateCounters();
    2658:	4b16      	ldr	r3, [pc, #88]	; (26b4 <vTraceStoreKernelCallWithNumericParamOnly+0x138>)
    265a:	58e3      	ldr	r3, [r4, r3]
    265c:	4798      	blx	r3
			}
		}
	}
	trcCRITICAL_SECTION_END();
    265e:	4b0a      	ldr	r3, [pc, #40]	; (2688 <vTraceStoreKernelCallWithNumericParamOnly+0x10c>)
    2660:	58e3      	ldr	r3, [r4, r3]
    2662:	681a      	ldr	r2, [r3, #0]
    2664:	3a01      	subs	r2, #1
    2666:	601a      	str	r2, [r3, #0]
    2668:	1c38      	adds	r0, r7, #0
    266a:	4b13      	ldr	r3, [pc, #76]	; (26b8 <vTraceStoreKernelCallWithNumericParamOnly+0x13c>)
    266c:	58e3      	ldr	r3, [r4, r3]
    266e:	4798      	blx	r3
#endif /* TRACE_SCHEDULING_ONLY */
}
    2670:	b003      	add	sp, #12
    2672:	bc0c      	pop	{r2, r3}
    2674:	4690      	mov	r8, r2
    2676:	4699      	mov	r9, r3
    2678:	bdf0      	pop	{r4, r5, r6, r7, pc}
    267a:	46c0      	nop			; (mov r8, r8)
    267c:	00005878 	.word	0x00005878
    2680:	00004dfc 	.word	0x00004dfc
    2684:	00000120 	.word	0x00000120
    2688:	000002c4 	.word	0x000002c4
    268c:	00004e3a 	.word	0x00004e3a
    2690:	00000274 	.word	0x00000274
    2694:	00000028 	.word	0x00000028
    2698:	0000002c 	.word	0x0000002c
    269c:	00000230 	.word	0x00000230
    26a0:	000002c8 	.word	0x000002c8
    26a4:	00000298 	.word	0x00000298
    26a8:	00000180 	.word	0x00000180
    26ac:	0000ffff 	.word	0x0000ffff
    26b0:	000000e8 	.word	0x000000e8
    26b4:	00000240 	.word	0x00000240
    26b8:	00000134 	.word	0x00000134

000026bc <vTraceStoreObjectNameOnCloseEvent>:
 * "old" one, valid up until this point.
 ******************************************************************************/
#if (INCLUDE_OBJECT_DELETE == 1)
void vTraceStoreObjectNameOnCloseEvent(objectHandleType handle,
										traceObjectClass objectclass)
{
    26bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    26be:	b083      	sub	sp, #12
    26c0:	1c07      	adds	r7, r0, #0
    26c2:	1c0d      	adds	r5, r1, #0
    26c4:	4c19      	ldr	r4, [pc, #100]	; (272c <vTraceStoreObjectNameOnCloseEvent+0x70>)
    26c6:	447c      	add	r4, pc
	ObjCloseNameEvent * ce;
	const char * name;
	traceLabel idx;

	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    26c8:	2906      	cmp	r1, #6
    26ca:	d905      	bls.n	26d8 <vTraceStoreObjectNameOnCloseEvent+0x1c>
    26cc:	4818      	ldr	r0, [pc, #96]	; (2730 <vTraceStoreObjectNameOnCloseEvent+0x74>)
    26ce:	4478      	add	r0, pc
    26d0:	4b18      	ldr	r3, [pc, #96]	; (2734 <vTraceStoreObjectNameOnCloseEvent+0x78>)
    26d2:	58e3      	ldr	r3, [r4, r3]
    26d4:	4798      	blx	r3
    26d6:	e026      	b.n	2726 <vTraceStoreObjectNameOnCloseEvent+0x6a>
		"vTraceStoreObjectNameOnCloseEvent: objectclass >= TRACE_NCLASSES", );
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    26d8:	4b17      	ldr	r3, [pc, #92]	; (2738 <vTraceStoreObjectNameOnCloseEvent+0x7c>)
    26da:	58e3      	ldr	r3, [r4, r3]
    26dc:	681e      	ldr	r6, [r3, #0]
    26de:	1873      	adds	r3, r6, r1
    26e0:	3360      	adds	r3, #96	; 0x60
    26e2:	791b      	ldrb	r3, [r3, #4]
    26e4:	4283      	cmp	r3, r0
    26e6:	d205      	bcs.n	26f4 <vTraceStoreObjectNameOnCloseEvent+0x38>
    26e8:	4814      	ldr	r0, [pc, #80]	; (273c <vTraceStoreObjectNameOnCloseEvent+0x80>)
    26ea:	4478      	add	r0, pc
    26ec:	4b11      	ldr	r3, [pc, #68]	; (2734 <vTraceStoreObjectNameOnCloseEvent+0x78>)
    26ee:	58e3      	ldr	r3, [r4, r3]
    26f0:	4798      	blx	r3
    26f2:	e018      	b.n	2726 <vTraceStoreObjectNameOnCloseEvent+0x6a>
		"vTraceStoreObjectNameOnCloseEvent: Invalid value for handle", );

	if (RecorderDataPtr->recorderActive)
    26f4:	6b33      	ldr	r3, [r6, #48]	; 0x30
    26f6:	2b00      	cmp	r3, #0
    26f8:	d015      	beq.n	2726 <vTraceStoreObjectNameOnCloseEvent+0x6a>
	{
		uint8_t hnd8 = prvTraceGet8BitHandle(handle);
		name = TRACE_PROPERTY_NAME_GET(objectclass, handle);
    26fa:	4b11      	ldr	r3, [pc, #68]	; (2740 <vTraceStoreObjectNameOnCloseEvent+0x84>)
    26fc:	58e3      	ldr	r3, [r4, r3]
    26fe:	4798      	blx	r3
    2700:	1830      	adds	r0, r6, r0
    2702:	308c      	adds	r0, #140	; 0x8c
		idx = prvTraceOpenSymbol(name, 0);
    2704:	2100      	movs	r1, #0
    2706:	4b0f      	ldr	r3, [pc, #60]	; (2744 <vTraceStoreObjectNameOnCloseEvent+0x88>)
    2708:	58e3      	ldr	r3, [r4, r3]
    270a:	4798      	blx	r3
    270c:	1c06      	adds	r6, r0, #0

		// Interrupt disable not necessary, already done in trcHooks.h macro
		ce = (ObjCloseNameEvent*) xTraceNextFreeEventBufferSlot();
    270e:	4b0e      	ldr	r3, [pc, #56]	; (2748 <vTraceStoreObjectNameOnCloseEvent+0x8c>)
    2710:	58e3      	ldr	r3, [r4, r3]
    2712:	4798      	blx	r3
		if (ce != NULL)
    2714:	2800      	cmp	r0, #0
    2716:	d006      	beq.n	2726 <vTraceStoreObjectNameOnCloseEvent+0x6a>
		{
			ce->type = EVENTGROUP_OBJCLOSE_NAME + objectclass;
    2718:	3508      	adds	r5, #8
    271a:	7005      	strb	r5, [r0, #0]
			ce->objHandle = hnd8;
    271c:	7047      	strb	r7, [r0, #1]
			ce->symbolIndex = idx;
    271e:	8046      	strh	r6, [r0, #2]
			prvTraceUpdateCounters();
    2720:	4b0a      	ldr	r3, [pc, #40]	; (274c <vTraceStoreObjectNameOnCloseEvent+0x90>)
    2722:	58e3      	ldr	r3, [r4, r3]
    2724:	4798      	blx	r3
		}
	}
}
    2726:	b003      	add	sp, #12
    2728:	bdf0      	pop	{r4, r5, r6, r7, pc}
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	0000573e 	.word	0x0000573e
    2730:	00004d4e 	.word	0x00004d4e
    2734:	00000120 	.word	0x00000120
    2738:	00000028 	.word	0x00000028
    273c:	00004d82 	.word	0x00004d82
    2740:	00000264 	.word	0x00000264
    2744:	000000f4 	.word	0x000000f4
    2748:	000000e8 	.word	0x000000e8
    274c:	00000240 	.word	0x00000240

00002750 <vTraceStoreObjectPropertiesOnCloseEvent>:

void vTraceStoreObjectPropertiesOnCloseEvent(objectHandleType handle,
											 traceObjectClass objectclass)
{
    2750:	b5f0      	push	{r4, r5, r6, r7, lr}
    2752:	b083      	sub	sp, #12
    2754:	1c06      	adds	r6, r0, #0
    2756:	1c0d      	adds	r5, r1, #0
    2758:	4c24      	ldr	r4, [pc, #144]	; (27ec <vTraceStoreObjectPropertiesOnCloseEvent+0x9c>)
    275a:	447c      	add	r4, pc
	ObjClosePropEvent * pe;

	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    275c:	2906      	cmp	r1, #6
    275e:	d905      	bls.n	276c <vTraceStoreObjectPropertiesOnCloseEvent+0x1c>
    2760:	4823      	ldr	r0, [pc, #140]	; (27f0 <vTraceStoreObjectPropertiesOnCloseEvent+0xa0>)
    2762:	4478      	add	r0, pc
    2764:	4b23      	ldr	r3, [pc, #140]	; (27f4 <vTraceStoreObjectPropertiesOnCloseEvent+0xa4>)
    2766:	58e3      	ldr	r3, [r4, r3]
    2768:	4798      	blx	r3
    276a:	e03d      	b.n	27e8 <vTraceStoreObjectPropertiesOnCloseEvent+0x98>
		"vTraceStoreObjectPropertiesOnCloseEvent: objectclass >= TRACE_NCLASSES", );
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    276c:	4b22      	ldr	r3, [pc, #136]	; (27f8 <vTraceStoreObjectPropertiesOnCloseEvent+0xa8>)
    276e:	58e3      	ldr	r3, [r4, r3]
    2770:	681b      	ldr	r3, [r3, #0]
    2772:	185a      	adds	r2, r3, r1
    2774:	3260      	adds	r2, #96	; 0x60
    2776:	7912      	ldrb	r2, [r2, #4]
    2778:	4282      	cmp	r2, r0
    277a:	d205      	bcs.n	2788 <vTraceStoreObjectPropertiesOnCloseEvent+0x38>
    277c:	481f      	ldr	r0, [pc, #124]	; (27fc <vTraceStoreObjectPropertiesOnCloseEvent+0xac>)
    277e:	4478      	add	r0, pc
    2780:	4b1c      	ldr	r3, [pc, #112]	; (27f4 <vTraceStoreObjectPropertiesOnCloseEvent+0xa4>)
    2782:	58e3      	ldr	r3, [r4, r3]
    2784:	4798      	blx	r3
    2786:	e02f      	b.n	27e8 <vTraceStoreObjectPropertiesOnCloseEvent+0x98>
		"vTraceStoreObjectPropertiesOnCloseEvent: Invalid value for handle", );

	if (RecorderDataPtr->recorderActive)
    2788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    278a:	2b00      	cmp	r3, #0
    278c:	d02c      	beq.n	27e8 <vTraceStoreObjectPropertiesOnCloseEvent+0x98>
	{
		// Interrupt disable not necessary, already done in trcHooks.h macro
		pe = (ObjClosePropEvent*) xTraceNextFreeEventBufferSlot();
    278e:	4b1c      	ldr	r3, [pc, #112]	; (2800 <vTraceStoreObjectPropertiesOnCloseEvent+0xb0>)
    2790:	58e3      	ldr	r3, [r4, r3]
    2792:	4798      	blx	r3
    2794:	1e07      	subs	r7, r0, #0
		if (pe != NULL)
    2796:	d027      	beq.n	27e8 <vTraceStoreObjectPropertiesOnCloseEvent+0x98>
		{
			if (objectclass == TRACE_CLASS_TASK)
    2798:	2d03      	cmp	r5, #3
    279a:	d110      	bne.n	27be <vTraceStoreObjectPropertiesOnCloseEvent+0x6e>
			{
				pe->arg1 = TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, handle);
    279c:	1c30      	adds	r0, r6, #0
    279e:	2103      	movs	r1, #3
    27a0:	4b18      	ldr	r3, [pc, #96]	; (2804 <vTraceStoreObjectPropertiesOnCloseEvent+0xb4>)
    27a2:	58e3      	ldr	r3, [r4, r3]
    27a4:	4798      	blx	r3
    27a6:	4b14      	ldr	r3, [pc, #80]	; (27f8 <vTraceStoreObjectPropertiesOnCloseEvent+0xa8>)
    27a8:	58e2      	ldr	r2, [r4, r3]
    27aa:	6813      	ldr	r3, [r2, #0]
    27ac:	195a      	adds	r2, r3, r5
    27ae:	3268      	adds	r2, #104	; 0x68
    27b0:	7912      	ldrb	r2, [r2, #4]
    27b2:	181b      	adds	r3, r3, r0
    27b4:	189b      	adds	r3, r3, r2
    27b6:	3389      	adds	r3, #137	; 0x89
    27b8:	791b      	ldrb	r3, [r3, #4]
    27ba:	707b      	strb	r3, [r7, #1]
    27bc:	e00f      	b.n	27de <vTraceStoreObjectPropertiesOnCloseEvent+0x8e>
			}
			else
			{
				pe->arg1 = TRACE_PROPERTY_OBJECT_STATE(objectclass, handle);
    27be:	1c30      	adds	r0, r6, #0
    27c0:	1c29      	adds	r1, r5, #0
    27c2:	4b10      	ldr	r3, [pc, #64]	; (2804 <vTraceStoreObjectPropertiesOnCloseEvent+0xb4>)
    27c4:	58e3      	ldr	r3, [r4, r3]
    27c6:	4798      	blx	r3
    27c8:	4b0b      	ldr	r3, [pc, #44]	; (27f8 <vTraceStoreObjectPropertiesOnCloseEvent+0xa8>)
    27ca:	58e2      	ldr	r2, [r4, r3]
    27cc:	6813      	ldr	r3, [r2, #0]
    27ce:	195a      	adds	r2, r3, r5
    27d0:	3268      	adds	r2, #104	; 0x68
    27d2:	7912      	ldrb	r2, [r2, #4]
    27d4:	181b      	adds	r3, r3, r0
    27d6:	189b      	adds	r3, r3, r2
    27d8:	3388      	adds	r3, #136	; 0x88
    27da:	791b      	ldrb	r3, [r3, #4]
    27dc:	707b      	strb	r3, [r7, #1]
			}
			pe->type = EVENTGROUP_OBJCLOSE_PROP + objectclass;
    27de:	3510      	adds	r5, #16
    27e0:	703d      	strb	r5, [r7, #0]
			prvTraceUpdateCounters();
    27e2:	4b09      	ldr	r3, [pc, #36]	; (2808 <vTraceStoreObjectPropertiesOnCloseEvent+0xb8>)
    27e4:	58e3      	ldr	r3, [r4, r3]
    27e6:	4798      	blx	r3
		}
	}
}
    27e8:	b003      	add	sp, #12
    27ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27ec:	000056aa 	.word	0x000056aa
    27f0:	00004d56 	.word	0x00004d56
    27f4:	00000120 	.word	0x00000120
    27f8:	00000028 	.word	0x00000028
    27fc:	00004d92 	.word	0x00004d92
    2800:	000000e8 	.word	0x000000e8
    2804:	00000264 	.word	0x00000264
    2808:	00000240 	.word	0x00000240

0000280c <vTraceSetPriorityProperty>:
#endif

void vTraceSetPriorityProperty(uint8_t objectclass, objectHandleType id, uint8_t value)
{
    280c:	b570      	push	{r4, r5, r6, lr}
    280e:	b082      	sub	sp, #8
    2810:	1c05      	adds	r5, r0, #0
    2812:	1c16      	adds	r6, r2, #0
    2814:	4c14      	ldr	r4, [pc, #80]	; (2868 <vTraceSetPriorityProperty+0x5c>)
    2816:	447c      	add	r4, pc
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    2818:	2806      	cmp	r0, #6
    281a:	d905      	bls.n	2828 <vTraceSetPriorityProperty+0x1c>
    281c:	4813      	ldr	r0, [pc, #76]	; (286c <vTraceSetPriorityProperty+0x60>)
    281e:	4478      	add	r0, pc
    2820:	4b13      	ldr	r3, [pc, #76]	; (2870 <vTraceSetPriorityProperty+0x64>)
    2822:	58e3      	ldr	r3, [r4, r3]
    2824:	4798      	blx	r3
    2826:	e01c      	b.n	2862 <vTraceSetPriorityProperty+0x56>
		"vTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", );
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    2828:	4b12      	ldr	r3, [pc, #72]	; (2874 <vTraceSetPriorityProperty+0x68>)
    282a:	58e3      	ldr	r3, [r4, r3]
    282c:	681b      	ldr	r3, [r3, #0]
    282e:	181b      	adds	r3, r3, r0
    2830:	3360      	adds	r3, #96	; 0x60
    2832:	791b      	ldrb	r3, [r3, #4]
    2834:	428b      	cmp	r3, r1
    2836:	d205      	bcs.n	2844 <vTraceSetPriorityProperty+0x38>
    2838:	480f      	ldr	r0, [pc, #60]	; (2878 <vTraceSetPriorityProperty+0x6c>)
    283a:	4478      	add	r0, pc
    283c:	4b0c      	ldr	r3, [pc, #48]	; (2870 <vTraceSetPriorityProperty+0x64>)
    283e:	58e3      	ldr	r3, [r4, r3]
    2840:	4798      	blx	r3
    2842:	e00e      	b.n	2862 <vTraceSetPriorityProperty+0x56>
		"vTraceSetPriorityProperty: Invalid value for id", );

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
    2844:	1c08      	adds	r0, r1, #0
    2846:	1c29      	adds	r1, r5, #0
    2848:	4b0c      	ldr	r3, [pc, #48]	; (287c <vTraceSetPriorityProperty+0x70>)
    284a:	58e3      	ldr	r3, [r4, r3]
    284c:	4798      	blx	r3
    284e:	4b09      	ldr	r3, [pc, #36]	; (2874 <vTraceSetPriorityProperty+0x68>)
    2850:	58e2      	ldr	r2, [r4, r3]
    2852:	6813      	ldr	r3, [r2, #0]
    2854:	195d      	adds	r5, r3, r5
    2856:	3568      	adds	r5, #104	; 0x68
    2858:	792a      	ldrb	r2, [r5, #4]
    285a:	181b      	adds	r3, r3, r0
    285c:	189b      	adds	r3, r3, r2
    285e:	3389      	adds	r3, #137	; 0x89
    2860:	711e      	strb	r6, [r3, #4]
}
    2862:	b002      	add	sp, #8
    2864:	bd70      	pop	{r4, r5, r6, pc}
    2866:	46c0      	nop			; (mov r8, r8)
    2868:	000055ee 	.word	0x000055ee
    286c:	00004d42 	.word	0x00004d42
    2870:	00000120 	.word	0x00000120
    2874:	00000028 	.word	0x00000028
    2878:	00004d6e 	.word	0x00004d6e
    287c:	00000264 	.word	0x00000264

00002880 <uiTraceGetPriorityProperty>:

uint8_t uiTraceGetPriorityProperty(uint8_t objectclass, objectHandleType id)
{
    2880:	b530      	push	{r4, r5, lr}
    2882:	b083      	sub	sp, #12
    2884:	1c05      	adds	r5, r0, #0
    2886:	4c15      	ldr	r4, [pc, #84]	; (28dc <uiTraceGetPriorityProperty+0x5c>)
    2888:	447c      	add	r4, pc
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    288a:	2806      	cmp	r0, #6
    288c:	d906      	bls.n	289c <uiTraceGetPriorityProperty+0x1c>
    288e:	4814      	ldr	r0, [pc, #80]	; (28e0 <uiTraceGetPriorityProperty+0x60>)
    2890:	4478      	add	r0, pc
    2892:	4b14      	ldr	r3, [pc, #80]	; (28e4 <uiTraceGetPriorityProperty+0x64>)
    2894:	58e3      	ldr	r3, [r4, r3]
    2896:	4798      	blx	r3
    2898:	2000      	movs	r0, #0
    289a:	e01d      	b.n	28d8 <uiTraceGetPriorityProperty+0x58>
		"uiTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    289c:	4b12      	ldr	r3, [pc, #72]	; (28e8 <uiTraceGetPriorityProperty+0x68>)
    289e:	58e3      	ldr	r3, [r4, r3]
    28a0:	681b      	ldr	r3, [r3, #0]
    28a2:	181b      	adds	r3, r3, r0
    28a4:	3360      	adds	r3, #96	; 0x60
    28a6:	791b      	ldrb	r3, [r3, #4]
    28a8:	428b      	cmp	r3, r1
    28aa:	d206      	bcs.n	28ba <uiTraceGetPriorityProperty+0x3a>
    28ac:	480f      	ldr	r0, [pc, #60]	; (28ec <uiTraceGetPriorityProperty+0x6c>)
    28ae:	4478      	add	r0, pc
    28b0:	4b0c      	ldr	r3, [pc, #48]	; (28e4 <uiTraceGetPriorityProperty+0x64>)
    28b2:	58e3      	ldr	r3, [r4, r3]
    28b4:	4798      	blx	r3
    28b6:	2000      	movs	r0, #0
    28b8:	e00e      	b.n	28d8 <uiTraceGetPriorityProperty+0x58>
		"uiTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
    28ba:	1c08      	adds	r0, r1, #0
    28bc:	1c29      	adds	r1, r5, #0
    28be:	4b0c      	ldr	r3, [pc, #48]	; (28f0 <uiTraceGetPriorityProperty+0x70>)
    28c0:	58e3      	ldr	r3, [r4, r3]
    28c2:	4798      	blx	r3
    28c4:	4b08      	ldr	r3, [pc, #32]	; (28e8 <uiTraceGetPriorityProperty+0x68>)
    28c6:	58e2      	ldr	r2, [r4, r3]
    28c8:	6813      	ldr	r3, [r2, #0]
    28ca:	195d      	adds	r5, r3, r5
    28cc:	3568      	adds	r5, #104	; 0x68
    28ce:	792a      	ldrb	r2, [r5, #4]
    28d0:	181b      	adds	r3, r3, r0
    28d2:	189b      	adds	r3, r3, r2
    28d4:	3389      	adds	r3, #137	; 0x89
    28d6:	7918      	ldrb	r0, [r3, #4]
}
    28d8:	b003      	add	sp, #12
    28da:	bd30      	pop	{r4, r5, pc}
    28dc:	0000557c 	.word	0x0000557c
    28e0:	00004d58 	.word	0x00004d58
    28e4:	00000120 	.word	0x00000120
    28e8:	00000028 	.word	0x00000028
    28ec:	00004d82 	.word	0x00004d82
    28f0:	00000264 	.word	0x00000264

000028f4 <vTraceSetObjectState>:

void vTraceSetObjectState(uint8_t objectclass, objectHandleType id, uint8_t value)
{
    28f4:	b570      	push	{r4, r5, r6, lr}
    28f6:	b082      	sub	sp, #8
    28f8:	1c05      	adds	r5, r0, #0
    28fa:	1c16      	adds	r6, r2, #0
    28fc:	4c14      	ldr	r4, [pc, #80]	; (2950 <vTraceSetObjectState+0x5c>)
    28fe:	447c      	add	r4, pc
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    2900:	2806      	cmp	r0, #6
    2902:	d905      	bls.n	2910 <vTraceSetObjectState+0x1c>
    2904:	4813      	ldr	r0, [pc, #76]	; (2954 <vTraceSetObjectState+0x60>)
    2906:	4478      	add	r0, pc
    2908:	4b13      	ldr	r3, [pc, #76]	; (2958 <vTraceSetObjectState+0x64>)
    290a:	58e3      	ldr	r3, [r4, r3]
    290c:	4798      	blx	r3
    290e:	e01c      	b.n	294a <vTraceSetObjectState+0x56>
		"vTraceSetObjectState: objectclass >= TRACE_NCLASSES", );
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    2910:	4b12      	ldr	r3, [pc, #72]	; (295c <vTraceSetObjectState+0x68>)
    2912:	58e3      	ldr	r3, [r4, r3]
    2914:	681b      	ldr	r3, [r3, #0]
    2916:	181b      	adds	r3, r3, r0
    2918:	3360      	adds	r3, #96	; 0x60
    291a:	791b      	ldrb	r3, [r3, #4]
    291c:	428b      	cmp	r3, r1
    291e:	d205      	bcs.n	292c <vTraceSetObjectState+0x38>
    2920:	480f      	ldr	r0, [pc, #60]	; (2960 <vTraceSetObjectState+0x6c>)
    2922:	4478      	add	r0, pc
    2924:	4b0c      	ldr	r3, [pc, #48]	; (2958 <vTraceSetObjectState+0x64>)
    2926:	58e3      	ldr	r3, [r4, r3]
    2928:	4798      	blx	r3
    292a:	e00e      	b.n	294a <vTraceSetObjectState+0x56>
		"vTraceSetObjectState: Invalid value for id", );

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
    292c:	1c08      	adds	r0, r1, #0
    292e:	1c29      	adds	r1, r5, #0
    2930:	4b0c      	ldr	r3, [pc, #48]	; (2964 <vTraceSetObjectState+0x70>)
    2932:	58e3      	ldr	r3, [r4, r3]
    2934:	4798      	blx	r3
    2936:	4b09      	ldr	r3, [pc, #36]	; (295c <vTraceSetObjectState+0x68>)
    2938:	58e2      	ldr	r2, [r4, r3]
    293a:	6813      	ldr	r3, [r2, #0]
    293c:	195d      	adds	r5, r3, r5
    293e:	3568      	adds	r5, #104	; 0x68
    2940:	792a      	ldrb	r2, [r5, #4]
    2942:	181b      	adds	r3, r3, r0
    2944:	189b      	adds	r3, r3, r2
    2946:	3388      	adds	r3, #136	; 0x88
    2948:	711e      	strb	r6, [r3, #4]
}
    294a:	b002      	add	sp, #8
    294c:	bd70      	pop	{r4, r5, r6, pc}
    294e:	46c0      	nop			; (mov r8, r8)
    2950:	00005506 	.word	0x00005506
    2954:	00004d6a 	.word	0x00004d6a
    2958:	00000120 	.word	0x00000120
    295c:	00000028 	.word	0x00000028
    2960:	00004d92 	.word	0x00004d92
    2964:	00000264 	.word	0x00000264

00002968 <uiTraceGetObjectState>:

uint8_t uiTraceGetObjectState(uint8_t objectclass, objectHandleType id)
{
    2968:	b530      	push	{r4, r5, lr}
    296a:	b083      	sub	sp, #12
    296c:	1c05      	adds	r5, r0, #0
    296e:	4c15      	ldr	r4, [pc, #84]	; (29c4 <uiTraceGetObjectState+0x5c>)
    2970:	447c      	add	r4, pc
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    2972:	2806      	cmp	r0, #6
    2974:	d906      	bls.n	2984 <uiTraceGetObjectState+0x1c>
    2976:	4814      	ldr	r0, [pc, #80]	; (29c8 <uiTraceGetObjectState+0x60>)
    2978:	4478      	add	r0, pc
    297a:	4b14      	ldr	r3, [pc, #80]	; (29cc <uiTraceGetObjectState+0x64>)
    297c:	58e3      	ldr	r3, [r4, r3]
    297e:	4798      	blx	r3
    2980:	2000      	movs	r0, #0
    2982:	e01d      	b.n	29c0 <uiTraceGetObjectState+0x58>
		"uiTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    2984:	4b12      	ldr	r3, [pc, #72]	; (29d0 <uiTraceGetObjectState+0x68>)
    2986:	58e3      	ldr	r3, [r4, r3]
    2988:	681b      	ldr	r3, [r3, #0]
    298a:	181b      	adds	r3, r3, r0
    298c:	3360      	adds	r3, #96	; 0x60
    298e:	791b      	ldrb	r3, [r3, #4]
    2990:	428b      	cmp	r3, r1
    2992:	d206      	bcs.n	29a2 <uiTraceGetObjectState+0x3a>
    2994:	480f      	ldr	r0, [pc, #60]	; (29d4 <uiTraceGetObjectState+0x6c>)
    2996:	4478      	add	r0, pc
    2998:	4b0c      	ldr	r3, [pc, #48]	; (29cc <uiTraceGetObjectState+0x64>)
    299a:	58e3      	ldr	r3, [r4, r3]
    299c:	4798      	blx	r3
    299e:	2000      	movs	r0, #0
    29a0:	e00e      	b.n	29c0 <uiTraceGetObjectState+0x58>
		"uiTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
    29a2:	1c08      	adds	r0, r1, #0
    29a4:	1c29      	adds	r1, r5, #0
    29a6:	4b0c      	ldr	r3, [pc, #48]	; (29d8 <uiTraceGetObjectState+0x70>)
    29a8:	58e3      	ldr	r3, [r4, r3]
    29aa:	4798      	blx	r3
    29ac:	4b08      	ldr	r3, [pc, #32]	; (29d0 <uiTraceGetObjectState+0x68>)
    29ae:	58e2      	ldr	r2, [r4, r3]
    29b0:	6813      	ldr	r3, [r2, #0]
    29b2:	195d      	adds	r5, r3, r5
    29b4:	3568      	adds	r5, #104	; 0x68
    29b6:	792a      	ldrb	r2, [r5, #4]
    29b8:	181b      	adds	r3, r3, r0
    29ba:	189b      	adds	r3, r3, r2
    29bc:	3388      	adds	r3, #136	; 0x88
    29be:	7918      	ldrb	r0, [r3, #4]
}
    29c0:	b003      	add	sp, #12
    29c2:	bd30      	pop	{r4, r5, pc}
    29c4:	00005494 	.word	0x00005494
    29c8:	00004d78 	.word	0x00004d78
    29cc:	00000120 	.word	0x00000120
    29d0:	00000028 	.word	0x00000028
    29d4:	00004d9e 	.word	0x00004d9e
    29d8:	00000264 	.word	0x00000264

000029dc <vTraceStoreTaskswitch>:
 * vTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void vTraceStoreTaskswitch(objectHandleType task_handle)
{
    29dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    29de:	b083      	sub	sp, #12
    29e0:	1c05      	adds	r5, r0, #0
    29e2:	4c34      	ldr	r4, [pc, #208]	; (2ab4 <vTraceStoreTaskswitch+0xd8>)
    29e4:	447c      	add	r4, pc
	uint8_t hnd8;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	skipEvent = 0;

	TRACE_ASSERT(task_handle <= NTask,
    29e6:	280f      	cmp	r0, #15
    29e8:	d905      	bls.n	29f6 <vTraceStoreTaskswitch+0x1a>
    29ea:	4833      	ldr	r0, [pc, #204]	; (2ab8 <vTraceStoreTaskswitch+0xdc>)
    29ec:	4478      	add	r0, pc
    29ee:	4b33      	ldr	r3, [pc, #204]	; (2abc <vTraceStoreTaskswitch+0xe0>)
    29f0:	58e3      	ldr	r3, [r4, r3]
    29f2:	4798      	blx	r3
    29f4:	e05c      	b.n	2ab0 <vTraceStoreTaskswitch+0xd4>
	function since critical sections should not be used in the context switch
	event...)
	***************************************************************************/

	/* Skip the event if the task has been excluded, using vTraceExcludeTask */
	if (TRACE_GET_TASK_FLAG_ISEXCLUDED(task_handle))
    29f6:	1c03      	adds	r3, r0, #0
    29f8:	3321      	adds	r3, #33	; 0x21
    29fa:	4a31      	ldr	r2, [pc, #196]	; (2ac0 <vTraceStoreTaskswitch+0xe4>)
    29fc:	58a2      	ldr	r2, [r4, r2]
    29fe:	9201      	str	r2, [sp, #4]
    2a00:	10da      	asrs	r2, r3, #3
    2a02:	9901      	ldr	r1, [sp, #4]
    2a04:	5c8a      	ldrb	r2, [r1, r2]
    2a06:	2107      	movs	r1, #7
    2a08:	400b      	ands	r3, r1
    2a0a:	411a      	asrs	r2, r3
    2a0c:	1c13      	adds	r3, r2, #0
    2a0e:	07da      	lsls	r2, r3, #31
    2a10:	d507      	bpl.n	2a22 <vTraceStoreTaskswitch+0x46>
	{
		skipEvent = 1;
		inExcludedTask = 1;
    2a12:	4b2c      	ldr	r3, [pc, #176]	; (2ac4 <vTraceStoreTaskswitch+0xe8>)
    2a14:	58e3      	ldr	r3, [r4, r3]
    2a16:	9301      	str	r3, [sp, #4]
    2a18:	2301      	movs	r3, #1
    2a1a:	9901      	ldr	r1, [sp, #4]
    2a1c:	700b      	strb	r3, [r1, #0]
	***************************************************************************/

	/* Skip the event if the task has been excluded, using vTraceExcludeTask */
	if (TRACE_GET_TASK_FLAG_ISEXCLUDED(task_handle))
	{
		skipEvent = 1;
    2a1e:	2101      	movs	r1, #1
    2a20:	e006      	b.n	2a30 <vTraceStoreTaskswitch+0x54>
		inExcludedTask = 1;
	}
	else
	{
		inExcludedTask = 0;
    2a22:	4b28      	ldr	r3, [pc, #160]	; (2ac4 <vTraceStoreTaskswitch+0xe8>)
    2a24:	58e3      	ldr	r3, [r4, r3]
    2a26:	9301      	str	r3, [sp, #4]
    2a28:	2300      	movs	r3, #0
    2a2a:	9a01      	ldr	r2, [sp, #4]
    2a2c:	7013      	strb	r3, [r2, #0]
	TSEvent* ts;
	int8_t skipEvent;
	uint8_t hnd8;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	skipEvent = 0;
    2a2e:	2100      	movs	r1, #0
	else
	{
		inExcludedTask = 0;
	}

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
    2a30:	4b25      	ldr	r3, [pc, #148]	; (2ac8 <vTraceStoreTaskswitch+0xec>)
    2a32:	58e3      	ldr	r3, [r4, r3]
    2a34:	681a      	ldr	r2, [r3, #0]
    2a36:	3201      	adds	r2, #1
    2a38:	601a      	str	r2, [r3, #0]

	/* Skip the event if the same task is scheduled */
	if (task_handle == handle_of_last_logged_task)
    2a3a:	4b24      	ldr	r3, [pc, #144]	; (2acc <vTraceStoreTaskswitch+0xf0>)
    2a3c:	58e3      	ldr	r3, [r4, r3]
    2a3e:	9301      	str	r3, [sp, #4]
    2a40:	781b      	ldrb	r3, [r3, #0]
    2a42:	42ab      	cmp	r3, r5
    2a44:	d02f      	beq.n	2aa6 <vTraceStoreTaskswitch+0xca>
	{
		skipEvent = 1;
	}

	if (!RecorderDataPtr->recorderActive)
    2a46:	4b22      	ldr	r3, [pc, #136]	; (2ad0 <vTraceStoreTaskswitch+0xf4>)
    2a48:	58e3      	ldr	r3, [r4, r3]
    2a4a:	681b      	ldr	r3, [r3, #0]
    2a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2a4e:	2b00      	cmp	r3, #0
    2a50:	d029      	beq.n	2aa6 <vTraceStoreTaskswitch+0xca>
	{
		skipEvent = 1;
	}

	/* If this event should be logged, log it! */
	if (skipEvent == 0)
    2a52:	2900      	cmp	r1, #0
    2a54:	d127      	bne.n	2aa6 <vTraceStoreTaskswitch+0xca>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    2a56:	481f      	ldr	r0, [pc, #124]	; (2ad4 <vTraceStoreTaskswitch+0xf8>)
    2a58:	4b1f      	ldr	r3, [pc, #124]	; (2ad8 <vTraceStoreTaskswitch+0xfc>)
    2a5a:	58e3      	ldr	r3, [r4, r3]
    2a5c:	4798      	blx	r3
    2a5e:	1c07      	adds	r7, r0, #0
		handle_of_last_logged_task = task_handle;
    2a60:	4b1a      	ldr	r3, [pc, #104]	; (2acc <vTraceStoreTaskswitch+0xf0>)
    2a62:	58e3      	ldr	r3, [r4, r3]
    2a64:	701d      	strb	r5, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
		ts = (TSEvent*)xTraceNextFreeEventBufferSlot();
    2a66:	4b1d      	ldr	r3, [pc, #116]	; (2adc <vTraceStoreTaskswitch+0x100>)
    2a68:	58e3      	ldr	r3, [r4, r3]
    2a6a:	4798      	blx	r3
    2a6c:	1e06      	subs	r6, r0, #0

		if (ts != NULL)
    2a6e:	d01a      	beq.n	2aa6 <vTraceStoreTaskswitch+0xca>
		{
			if (uiTraceGetObjectState(TRACE_CLASS_TASK,
    2a70:	4b16      	ldr	r3, [pc, #88]	; (2acc <vTraceStoreTaskswitch+0xf0>)
    2a72:	58e3      	ldr	r3, [r4, r3]
    2a74:	7819      	ldrb	r1, [r3, #0]
    2a76:	2003      	movs	r0, #3
    2a78:	4b19      	ldr	r3, [pc, #100]	; (2ae0 <vTraceStoreTaskswitch+0x104>)
    2a7a:	58e3      	ldr	r3, [r4, r3]
    2a7c:	4798      	blx	r3
    2a7e:	2801      	cmp	r0, #1
    2a80:	d102      	bne.n	2a88 <vTraceStoreTaskswitch+0xac>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
    2a82:	2307      	movs	r3, #7
    2a84:	7033      	strb	r3, [r6, #0]
    2a86:	e001      	b.n	2a8c <vTraceStoreTaskswitch+0xb0>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
    2a88:	2306      	movs	r3, #6
    2a8a:	7033      	strb	r3, [r6, #0]
			}

			ts->dts = dts3;
    2a8c:	8077      	strh	r7, [r6, #2]
			ts->objHandle = hnd8;
    2a8e:	7075      	strb	r5, [r6, #1]

			vTraceSetObjectState(TRACE_CLASS_TASK,
    2a90:	4b0e      	ldr	r3, [pc, #56]	; (2acc <vTraceStoreTaskswitch+0xf0>)
    2a92:	58e3      	ldr	r3, [r4, r3]
    2a94:	7819      	ldrb	r1, [r3, #0]
    2a96:	2003      	movs	r0, #3
    2a98:	2201      	movs	r2, #1
    2a9a:	4b12      	ldr	r3, [pc, #72]	; (2ae4 <vTraceStoreTaskswitch+0x108>)
    2a9c:	58e3      	ldr	r3, [r4, r3]
    2a9e:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
    2aa0:	4b11      	ldr	r3, [pc, #68]	; (2ae8 <vTraceStoreTaskswitch+0x10c>)
    2aa2:	58e3      	ldr	r3, [r4, r3]
    2aa4:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
    2aa6:	4b08      	ldr	r3, [pc, #32]	; (2ac8 <vTraceStoreTaskswitch+0xec>)
    2aa8:	58e3      	ldr	r3, [r4, r3]
    2aaa:	681a      	ldr	r2, [r3, #0]
    2aac:	3a01      	subs	r2, #1
    2aae:	601a      	str	r2, [r3, #0]
}
    2ab0:	b003      	add	sp, #12
    2ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ab4:	00005420 	.word	0x00005420
    2ab8:	00004d84 	.word	0x00004d84
    2abc:	00000120 	.word	0x00000120
    2ac0:	00000124 	.word	0x00000124
    2ac4:	00000230 	.word	0x00000230
    2ac8:	000002c4 	.word	0x000002c4
    2acc:	0000002c 	.word	0x0000002c
    2ad0:	00000028 	.word	0x00000028
    2ad4:	0000ffff 	.word	0x0000ffff
    2ad8:	00000180 	.word	0x00000180
    2adc:	000000e8 	.word	0x000000e8
    2ae0:	0000015c 	.word	0x0000015c
    2ae4:	000002a4 	.word	0x000002a4
    2ae8:	00000240 	.word	0x00000240

00002aec <vTraceSetTaskInstanceFinished>:

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
}

void vTraceSetTaskInstanceFinished(objectHandleType handle)
{
    2aec:	b510      	push	{r4, lr}
    2aee:	b082      	sub	sp, #8
    2af0:	4c0f      	ldr	r4, [pc, #60]	; (2b30 <vTraceSetTaskInstanceFinished+0x44>)
    2af2:	447c      	add	r4, pc
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
    2af4:	4b0f      	ldr	r3, [pc, #60]	; (2b34 <vTraceSetTaskInstanceFinished+0x48>)
    2af6:	58e3      	ldr	r3, [r4, r3]
    2af8:	681a      	ldr	r2, [r3, #0]
    2afa:	2367      	movs	r3, #103	; 0x67
    2afc:	5cd3      	ldrb	r3, [r2, r3]
    2afe:	4283      	cmp	r3, r0
    2b00:	d205      	bcs.n	2b0e <vTraceSetTaskInstanceFinished+0x22>
    2b02:	480d      	ldr	r0, [pc, #52]	; (2b38 <vTraceSetTaskInstanceFinished+0x4c>)
    2b04:	4478      	add	r0, pc
    2b06:	4b0d      	ldr	r3, [pc, #52]	; (2b3c <vTraceSetTaskInstanceFinished+0x50>)
    2b08:	58e3      	ldr	r3, [r4, r3]
    2b0a:	4798      	blx	r3
    2b0c:	e00d      	b.n	2b2a <vTraceSetTaskInstanceFinished+0x3e>
		"vTraceSetTaskInstanceFinished: Invalid value for handle", );

#if (USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
    2b0e:	2103      	movs	r1, #3
    2b10:	4b0b      	ldr	r3, [pc, #44]	; (2b40 <vTraceSetTaskInstanceFinished+0x54>)
    2b12:	58e3      	ldr	r3, [r4, r3]
    2b14:	4798      	blx	r3
    2b16:	4b07      	ldr	r3, [pc, #28]	; (2b34 <vTraceSetTaskInstanceFinished+0x48>)
    2b18:	58e2      	ldr	r2, [r4, r3]
    2b1a:	6813      	ldr	r3, [r2, #0]
    2b1c:	226f      	movs	r2, #111	; 0x6f
    2b1e:	5c9a      	ldrb	r2, [r3, r2]
    2b20:	181b      	adds	r3, r3, r0
    2b22:	189b      	adds	r3, r3, r2
    2b24:	3388      	adds	r3, #136	; 0x88
    2b26:	2200      	movs	r2, #0
    2b28:	711a      	strb	r2, [r3, #4]
#endif
}
    2b2a:	b002      	add	sp, #8
    2b2c:	bd10      	pop	{r4, pc}
    2b2e:	46c0      	nop			; (mov r8, r8)
    2b30:	00005312 	.word	0x00005312
    2b34:	00000028 	.word	0x00000028
    2b38:	00004cb0 	.word	0x00004cb0
    2b3c:	00000120 	.word	0x00000120
    2b40:	00000264 	.word	0x00000264

00002b44 <prvTraceGetObjectNumber>:
#else

extern portBASE_TYPE uxQueueGetQueueNumber(void*);

objectHandleType prvTraceGetObjectNumber(void* handle)
{
    2b44:	b500      	push	{lr}
    2b46:	b083      	sub	sp, #12
    2b48:	4b04      	ldr	r3, [pc, #16]	; (2b5c <prvTraceGetObjectNumber+0x18>)
    2b4a:	447b      	add	r3, pc
	return (objectHandleType) uxQueueGetQueueNumber(handle);
    2b4c:	4a04      	ldr	r2, [pc, #16]	; (2b60 <prvTraceGetObjectNumber+0x1c>)
    2b4e:	589a      	ldr	r2, [r3, r2]
    2b50:	9201      	str	r2, [sp, #4]
    2b52:	4790      	blx	r2
    2b54:	b2c0      	uxtb	r0, r0
}
    2b56:	b003      	add	sp, #12
    2b58:	bd00      	pop	{pc}
    2b5a:	46c0      	nop			; (mov r8, r8)
    2b5c:	000052ba 	.word	0x000052ba
    2b60:	00000098 	.word	0x00000098

00002b64 <prvTraceGetObjectType>:

#endif

unsigned char prvTraceGetObjectType(void* handle)
{
    2b64:	b500      	push	{lr}
    2b66:	b083      	sub	sp, #12
    2b68:	4b03      	ldr	r3, [pc, #12]	; (2b78 <prvTraceGetObjectType+0x14>)
    2b6a:	447b      	add	r3, pc
	return ucQueueGetQueueType(handle);
    2b6c:	4a03      	ldr	r2, [pc, #12]	; (2b7c <prvTraceGetObjectType+0x18>)
    2b6e:	589a      	ldr	r2, [r3, r2]
    2b70:	9201      	str	r2, [sp, #4]
    2b72:	4790      	blx	r2
}
    2b74:	b003      	add	sp, #12
    2b76:	bd00      	pop	{pc}
    2b78:	0000529a 	.word	0x0000529a
    2b7c:	000001c8 	.word	0x000001c8

00002b80 <prvTraceGetTaskNumber>:

objectHandleType prvTraceGetTaskNumber(void* handle)
{
    2b80:	b500      	push	{lr}
    2b82:	b083      	sub	sp, #12
    2b84:	4b04      	ldr	r3, [pc, #16]	; (2b98 <prvTraceGetTaskNumber+0x18>)
    2b86:	447b      	add	r3, pc
	return (objectHandleType)uxTaskGetTaskNumber(handle);
    2b88:	4a04      	ldr	r2, [pc, #16]	; (2b9c <prvTraceGetTaskNumber+0x1c>)
    2b8a:	589a      	ldr	r2, [r3, r2]
    2b8c:	9201      	str	r2, [sp, #4]
    2b8e:	4790      	blx	r2
    2b90:	b2c0      	uxtb	r0, r0
}
    2b92:	b003      	add	sp, #12
    2b94:	bd00      	pop	{pc}
    2b96:	46c0      	nop			; (mov r8, r8)
    2b98:	0000527e 	.word	0x0000527e
    2b9c:	000001a8 	.word	0x000001a8

00002ba0 <prvTraceGetCurrentTaskHandle>:
{
	return xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED;
}

void* prvTraceGetCurrentTaskHandle()
{
    2ba0:	b500      	push	{lr}
    2ba2:	b083      	sub	sp, #12
    2ba4:	4b03      	ldr	r3, [pc, #12]	; (2bb4 <prvTraceGetCurrentTaskHandle+0x14>)
    2ba6:	447b      	add	r3, pc
	return xTaskGetCurrentTaskHandle();
    2ba8:	4a03      	ldr	r2, [pc, #12]	; (2bb8 <prvTraceGetCurrentTaskHandle+0x18>)
    2baa:	589a      	ldr	r2, [r3, r2]
    2bac:	9201      	str	r2, [sp, #4]
    2bae:	4790      	blx	r2
}
    2bb0:	b003      	add	sp, #12
    2bb2:	bd00      	pop	{pc}
    2bb4:	0000525e 	.word	0x0000525e
    2bb8:	000001dc 	.word	0x000001dc

00002bbc <vTraceInitObjectPropertyTable>:

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
    2bbc:	b510      	push	{r4, lr}
    2bbe:	4b29      	ldr	r3, [pc, #164]	; (2c64 <vTraceInitObjectPropertyTable+0xa8>)
    2bc0:	447b      	add	r3, pc
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
    2bc2:	4a29      	ldr	r2, [pc, #164]	; (2c68 <vTraceInitObjectPropertyTable+0xac>)
    2bc4:	589b      	ldr	r3, [r3, r2]
    2bc6:	681b      	ldr	r3, [r3, #0]
    2bc8:	2207      	movs	r2, #7
    2bca:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = NQueue;
    2bcc:	220a      	movs	r2, #10
    2bce:	2164      	movs	r1, #100	; 0x64
    2bd0:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = NSemaphore;
    2bd2:	2165      	movs	r1, #101	; 0x65
    2bd4:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = NMutex;
    2bd6:	2166      	movs	r1, #102	; 0x66
    2bd8:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = NTask;
    2bda:	220f      	movs	r2, #15
    2bdc:	2167      	movs	r1, #103	; 0x67
    2bde:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = NISR;
    2be0:	2005      	movs	r0, #5
    2be2:	2168      	movs	r1, #104	; 0x68
    2be4:	5458      	strb	r0, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = NTimer;
    2be6:	2102      	movs	r1, #2
    2be8:	2069      	movs	r0, #105	; 0x69
    2bea:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = NEventGroup;	
    2bec:	206a      	movs	r0, #106	; 0x6a
    2bee:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = NameLenQueue;
    2bf0:	216c      	movs	r1, #108	; 0x6c
    2bf2:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = NameLenSemaphore;
    2bf4:	216d      	movs	r1, #109	; 0x6d
    2bf6:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = NameLenMutex;
    2bf8:	216e      	movs	r1, #110	; 0x6e
    2bfa:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = NameLenTask;
    2bfc:	216f      	movs	r1, #111	; 0x6f
    2bfe:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = NameLenISR;
    2c00:	2170      	movs	r1, #112	; 0x70
    2c02:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = NameLenTimer;
    2c04:	2171      	movs	r1, #113	; 0x71
    2c06:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = NameLenEventGroup;	
    2c08:	2172      	movs	r1, #114	; 0x72
    2c0a:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
    2c0c:	2210      	movs	r2, #16
    2c0e:	2174      	movs	r1, #116	; 0x74
    2c10:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
    2c12:	2175      	movs	r1, #117	; 0x75
    2c14:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
    2c16:	2176      	movs	r1, #118	; 0x76
    2c18:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
    2c1a:	2113      	movs	r1, #19
    2c1c:	2077      	movs	r0, #119	; 0x77
    2c1e:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
    2c20:	2411      	movs	r4, #17
    2c22:	2078      	movs	r0, #120	; 0x78
    2c24:	541c      	strb	r4, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
    2c26:	2079      	movs	r0, #121	; 0x79
    2c28:	541a      	strb	r2, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
    2c2a:	227a      	movs	r2, #122	; 0x7a
    2c2c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
    2c2e:	2100      	movs	r1, #0
    2c30:	227c      	movs	r2, #124	; 0x7c
    2c32:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
    2c34:	21a0      	movs	r1, #160	; 0xa0
    2c36:	227e      	movs	r2, #126	; 0x7e
    2c38:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
    2c3a:	0049      	lsls	r1, r1, #1
    2c3c:	2280      	movs	r2, #128	; 0x80
    2c3e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
    2c40:	21f0      	movs	r1, #240	; 0xf0
    2c42:	0049      	lsls	r1, r1, #1
    2c44:	2282      	movs	r2, #130	; 0x82
    2c46:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
    2c48:	4908      	ldr	r1, [pc, #32]	; (2c6c <vTraceInitObjectPropertyTable+0xb0>)
    2c4a:	2284      	movs	r2, #132	; 0x84
    2c4c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
    2c4e:	4908      	ldr	r1, [pc, #32]	; (2c70 <vTraceInitObjectPropertyTable+0xb4>)
    2c50:	2286      	movs	r2, #134	; 0x86
    2c52:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
    2c54:	4907      	ldr	r1, [pc, #28]	; (2c74 <vTraceInitObjectPropertyTable+0xb8>)
    2c56:	2288      	movs	r2, #136	; 0x88
    2c58:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
    2c5a:	22e6      	movs	r2, #230	; 0xe6
    2c5c:	0092      	lsls	r2, r2, #2
    2c5e:	661a      	str	r2, [r3, #96]	; 0x60
}
    2c60:	bd10      	pop	{r4, pc}
    2c62:	46c0      	nop			; (mov r8, r8)
    2c64:	00005244 	.word	0x00005244
    2c68:	00000028 	.word	0x00000028
    2c6c:	000002fd 	.word	0x000002fd
    2c70:	00000352 	.word	0x00000352
    2c74:	00000372 	.word	0x00000372

00002c78 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, xTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
    2c78:	4b13      	ldr	r3, [pc, #76]	; (2cc8 <vTraceInitObjectHandleStack+0x50>)
    2c7a:	447b      	add	r3, pc
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
    2c7c:	4a13      	ldr	r2, [pc, #76]	; (2ccc <vTraceInitObjectHandleStack+0x54>)
    2c7e:	589b      	ldr	r3, [r3, r2]
    2c80:	2200      	movs	r2, #0
    2c82:	81da      	strh	r2, [r3, #14]
    2c84:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = NQueue;
    2c86:	220a      	movs	r2, #10
    2c88:	821a      	strh	r2, [r3, #16]
    2c8a:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = NQueue + NSemaphore;
    2c8c:	2214      	movs	r2, #20
    2c8e:	825a      	strh	r2, [r3, #18]
    2c90:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = NQueue + NSemaphore + NMutex;
    2c92:	221e      	movs	r2, #30
    2c94:	829a      	strh	r2, [r3, #20]
    2c96:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = NQueue + NSemaphore + NMutex + NTask;
    2c98:	222d      	movs	r2, #45	; 0x2d
    2c9a:	82da      	strh	r2, [r3, #22]
    2c9c:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = NQueue + NSemaphore + NMutex + NTask + NISR;
    2c9e:	2232      	movs	r2, #50	; 0x32
    2ca0:	831a      	strh	r2, [r3, #24]
    2ca2:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = NQueue + NSemaphore + NMutex + NTask + NISR + NTimer;
    2ca4:	2234      	movs	r2, #52	; 0x34
    2ca6:	835a      	strh	r2, [r3, #26]
    2ca8:	819a      	strh	r2, [r3, #12]

	objectHandleStacks.highestIndexOfClass[0] = NQueue - 1;
    2caa:	2209      	movs	r2, #9
    2cac:	839a      	strh	r2, [r3, #28]
	objectHandleStacks.highestIndexOfClass[1] = NQueue + NSemaphore - 1;
    2cae:	2213      	movs	r2, #19
    2cb0:	83da      	strh	r2, [r3, #30]
	objectHandleStacks.highestIndexOfClass[2] = NQueue + NSemaphore + NMutex - 1;
    2cb2:	221d      	movs	r2, #29
    2cb4:	841a      	strh	r2, [r3, #32]
	objectHandleStacks.highestIndexOfClass[3] = NQueue + NSemaphore + NMutex + NTask - 1;
    2cb6:	222c      	movs	r2, #44	; 0x2c
    2cb8:	845a      	strh	r2, [r3, #34]	; 0x22
	objectHandleStacks.highestIndexOfClass[4] = NQueue + NSemaphore + NMutex + NTask + NISR - 1;
    2cba:	2231      	movs	r2, #49	; 0x31
    2cbc:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[5] = NQueue + NSemaphore + NMutex + NTask + NISR + NTimer - 1;
    2cbe:	2233      	movs	r2, #51	; 0x33
    2cc0:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[6] = NQueue + NSemaphore + NMutex + NTask + NISR + NTimer + NEventGroup - 1;
    2cc2:	2235      	movs	r2, #53	; 0x35
    2cc4:	851a      	strh	r2, [r3, #40]	; 0x28
}
    2cc6:	4770      	bx	lr
    2cc8:	0000518a 	.word	0x0000518a
    2ccc:	000002b8 	.word	0x000002b8

00002cd0 <pszTraceGetErrorNotEnoughHandles>:
	
/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
    2cd0:	b500      	push	{lr}
	switch(objectclass)
    2cd2:	2806      	cmp	r0, #6
    2cd4:	d817      	bhi.n	2d06 <pszTraceGetErrorNotEnoughHandles+0x36>
    2cd6:	f003 fc2f 	bl	6538 <__gnu_thumb1_case_uqi>
    2cda:	070d      	.short	0x070d
    2cdc:	1019040a 	.word	0x1019040a
    2ce0:	13          	.byte	0x13
    2ce1:	00          	.byte	0x00
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase NTask in trcConfig.h";
    2ce2:	480c      	ldr	r0, [pc, #48]	; (2d14 <pszTraceGetErrorNotEnoughHandles+0x44>)
    2ce4:	4478      	add	r0, pc
    2ce6:	e013      	b.n	2d10 <pszTraceGetErrorNotEnoughHandles+0x40>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase NISR in trcConfig.h";
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase NSemaphore in trcConfig.h";
    2ce8:	480b      	ldr	r0, [pc, #44]	; (2d18 <pszTraceGetErrorNotEnoughHandles+0x48>)
    2cea:	4478      	add	r0, pc
    2cec:	e010      	b.n	2d10 <pszTraceGetErrorNotEnoughHandles+0x40>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase NMutex in trcConfig.h";
    2cee:	480b      	ldr	r0, [pc, #44]	; (2d1c <pszTraceGetErrorNotEnoughHandles+0x4c>)
    2cf0:	4478      	add	r0, pc
    2cf2:	e00d      	b.n	2d10 <pszTraceGetErrorNotEnoughHandles+0x40>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase NQueue in trcConfig.h";
    2cf4:	480a      	ldr	r0, [pc, #40]	; (2d20 <pszTraceGetErrorNotEnoughHandles+0x50>)
    2cf6:	4478      	add	r0, pc
    2cf8:	e00a      	b.n	2d10 <pszTraceGetErrorNotEnoughHandles+0x40>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase NTimer in trcConfig.h";
    2cfa:	480a      	ldr	r0, [pc, #40]	; (2d24 <pszTraceGetErrorNotEnoughHandles+0x54>)
    2cfc:	4478      	add	r0, pc
    2cfe:	e007      	b.n	2d10 <pszTraceGetErrorNotEnoughHandles+0x40>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase NEventGroup in trcConfig.h";		
    2d00:	4809      	ldr	r0, [pc, #36]	; (2d28 <pszTraceGetErrorNotEnoughHandles+0x58>)
    2d02:	4478      	add	r0, pc
    2d04:	e004      	b.n	2d10 <pszTraceGetErrorNotEnoughHandles+0x40>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
    2d06:	4809      	ldr	r0, [pc, #36]	; (2d2c <pszTraceGetErrorNotEnoughHandles+0x5c>)
    2d08:	4478      	add	r0, pc
    2d0a:	e001      	b.n	2d10 <pszTraceGetErrorNotEnoughHandles+0x40>
	switch(objectclass)
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase NTask in trcConfig.h";
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase NISR in trcConfig.h";
    2d0c:	4808      	ldr	r0, [pc, #32]	; (2d30 <pszTraceGetErrorNotEnoughHandles+0x60>)
    2d0e:	4478      	add	r0, pc
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase NEventGroup in trcConfig.h";		
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
	}
}
    2d10:	bd00      	pop	{pc}
    2d12:	46c0      	nop			; (mov r8, r8)
    2d14:	00004b18 	.word	0x00004b18
    2d18:	00004b82 	.word	0x00004b82
    2d1c:	00004bc0 	.word	0x00004bc0
    2d20:	00004bf6 	.word	0x00004bf6
    2d24:	00004c2c 	.word	0x00004c2c
    2d28:	00004c62 	.word	0x00004c62
    2d2c:	00004ca0 	.word	0x00004ca0
    2d30:	00004b26 	.word	0x00004b26

00002d34 <uiTraceIsObjectExcluded>:

/* Returns the exclude state of the object */
uint8_t uiTraceIsObjectExcluded(traceObjectClass objectclass, objectHandleType handle)
{
    2d34:	b500      	push	{lr}
    2d36:	b083      	sub	sp, #12
    2d38:	4b38      	ldr	r3, [pc, #224]	; (2e1c <uiTraceIsObjectExcluded+0xe8>)
    2d3a:	447b      	add	r3, pc
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, "prvTraceIsObjectExcluded: objectclass >= TRACE_NCLASSES", 1);
    2d3c:	2806      	cmp	r0, #6
    2d3e:	d906      	bls.n	2d4e <uiTraceIsObjectExcluded+0x1a>
    2d40:	4837      	ldr	r0, [pc, #220]	; (2e20 <uiTraceIsObjectExcluded+0xec>)
    2d42:	4478      	add	r0, pc
    2d44:	4a37      	ldr	r2, [pc, #220]	; (2e24 <uiTraceIsObjectExcluded+0xf0>)
    2d46:	589a      	ldr	r2, [r3, r2]
    2d48:	4790      	blx	r2
    2d4a:	2001      	movs	r0, #1
    2d4c:	e063      	b.n	2e16 <uiTraceIsObjectExcluded+0xe2>
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], "uiTraceIsObjectExcluded: Invalid value for handle", 1);
    2d4e:	4a36      	ldr	r2, [pc, #216]	; (2e28 <uiTraceIsObjectExcluded+0xf4>)
    2d50:	589a      	ldr	r2, [r3, r2]
    2d52:	6812      	ldr	r2, [r2, #0]
    2d54:	1812      	adds	r2, r2, r0
    2d56:	3260      	adds	r2, #96	; 0x60
    2d58:	7912      	ldrb	r2, [r2, #4]
    2d5a:	428a      	cmp	r2, r1
    2d5c:	d206      	bcs.n	2d6c <uiTraceIsObjectExcluded+0x38>
    2d5e:	4833      	ldr	r0, [pc, #204]	; (2e2c <uiTraceIsObjectExcluded+0xf8>)
    2d60:	4478      	add	r0, pc
    2d62:	4a30      	ldr	r2, [pc, #192]	; (2e24 <uiTraceIsObjectExcluded+0xf0>)
    2d64:	589a      	ldr	r2, [r3, r2]
    2d66:	4790      	blx	r2
    2d68:	2001      	movs	r0, #1
    2d6a:	e054      	b.n	2e16 <uiTraceIsObjectExcluded+0xe2>
	
	switch(objectclass)
    2d6c:	2806      	cmp	r0, #6
    2d6e:	d84c      	bhi.n	2e0a <uiTraceIsObjectExcluded+0xd6>
    2d70:	f003 fbe2 	bl	6538 <__gnu_thumb1_case_uqi>
    2d74:	041c1028 	.word	0x041c1028
    2d78:	334b      	.short	0x334b
    2d7a:	3f          	.byte	0x3f
    2d7b:	00          	.byte	0x00
	{
	case TRACE_CLASS_TASK:
		return TRACE_GET_TASK_FLAG_ISEXCLUDED(handle);
    2d7c:	3121      	adds	r1, #33	; 0x21
    2d7e:	2007      	movs	r0, #7
    2d80:	4008      	ands	r0, r1
    2d82:	2201      	movs	r2, #1
    2d84:	4082      	lsls	r2, r0
    2d86:	1c10      	adds	r0, r2, #0
    2d88:	4a29      	ldr	r2, [pc, #164]	; (2e30 <uiTraceIsObjectExcluded+0xfc>)
    2d8a:	589a      	ldr	r2, [r3, r2]
    2d8c:	10c9      	asrs	r1, r1, #3
    2d8e:	5c53      	ldrb	r3, [r2, r1]
    2d90:	4018      	ands	r0, r3
    2d92:	e040      	b.n	2e16 <uiTraceIsObjectExcluded+0xe2>
	case TRACE_CLASS_SEMAPHORE:
		return TRACE_GET_SEMAPHORE_FLAG_ISEXCLUDED(handle);
    2d94:	310b      	adds	r1, #11
    2d96:	2007      	movs	r0, #7
    2d98:	4008      	ands	r0, r1
    2d9a:	2201      	movs	r2, #1
    2d9c:	4082      	lsls	r2, r0
    2d9e:	1c10      	adds	r0, r2, #0
    2da0:	4a23      	ldr	r2, [pc, #140]	; (2e30 <uiTraceIsObjectExcluded+0xfc>)
    2da2:	589a      	ldr	r2, [r3, r2]
    2da4:	10c9      	asrs	r1, r1, #3
    2da6:	5c53      	ldrb	r3, [r2, r1]
    2da8:	4018      	ands	r0, r3
    2daa:	e034      	b.n	2e16 <uiTraceIsObjectExcluded+0xe2>
	case TRACE_CLASS_MUTEX:
		return TRACE_GET_MUTEX_FLAG_ISEXCLUDED(handle);
    2dac:	3116      	adds	r1, #22
    2dae:	2007      	movs	r0, #7
    2db0:	4008      	ands	r0, r1
    2db2:	2201      	movs	r2, #1
    2db4:	4082      	lsls	r2, r0
    2db6:	1c10      	adds	r0, r2, #0
    2db8:	4a1d      	ldr	r2, [pc, #116]	; (2e30 <uiTraceIsObjectExcluded+0xfc>)
    2dba:	589a      	ldr	r2, [r3, r2]
    2dbc:	10c9      	asrs	r1, r1, #3
    2dbe:	5c53      	ldrb	r3, [r2, r1]
    2dc0:	4018      	ands	r0, r3
    2dc2:	e028      	b.n	2e16 <uiTraceIsObjectExcluded+0xe2>
	case TRACE_CLASS_QUEUE:
		return TRACE_GET_QUEUE_FLAG_ISEXCLUDED(handle);
    2dc4:	2007      	movs	r0, #7
    2dc6:	4008      	ands	r0, r1
    2dc8:	2201      	movs	r2, #1
    2dca:	4082      	lsls	r2, r0
    2dcc:	1c10      	adds	r0, r2, #0
    2dce:	4a18      	ldr	r2, [pc, #96]	; (2e30 <uiTraceIsObjectExcluded+0xfc>)
    2dd0:	589a      	ldr	r2, [r3, r2]
    2dd2:	08c9      	lsrs	r1, r1, #3
    2dd4:	5c53      	ldrb	r3, [r2, r1]
    2dd6:	4018      	ands	r0, r3
    2dd8:	e01d      	b.n	2e16 <uiTraceIsObjectExcluded+0xe2>
	case TRACE_CLASS_TIMER:
		return TRACE_GET_TIMER_FLAG_ISEXCLUDED(handle);		
    2dda:	3131      	adds	r1, #49	; 0x31
    2ddc:	2007      	movs	r0, #7
    2dde:	4008      	ands	r0, r1
    2de0:	2201      	movs	r2, #1
    2de2:	4082      	lsls	r2, r0
    2de4:	1c10      	adds	r0, r2, #0
    2de6:	4a12      	ldr	r2, [pc, #72]	; (2e30 <uiTraceIsObjectExcluded+0xfc>)
    2de8:	589a      	ldr	r2, [r3, r2]
    2dea:	10c9      	asrs	r1, r1, #3
    2dec:	5c53      	ldrb	r3, [r2, r1]
    2dee:	4018      	ands	r0, r3
    2df0:	e011      	b.n	2e16 <uiTraceIsObjectExcluded+0xe2>
	case TRACE_CLASS_EVENTGROUP:
		return TRACE_GET_EVENTGROUP_FLAG_ISEXCLUDED(handle);				
    2df2:	3134      	adds	r1, #52	; 0x34
    2df4:	2007      	movs	r0, #7
    2df6:	4008      	ands	r0, r1
    2df8:	2201      	movs	r2, #1
    2dfa:	4082      	lsls	r2, r0
    2dfc:	1c10      	adds	r0, r2, #0
    2dfe:	4a0c      	ldr	r2, [pc, #48]	; (2e30 <uiTraceIsObjectExcluded+0xfc>)
    2e00:	589a      	ldr	r2, [r3, r2]
    2e02:	10c9      	asrs	r1, r1, #3
    2e04:	5c53      	ldrb	r3, [r2, r1]
    2e06:	4018      	ands	r0, r3
    2e08:	e005      	b.n	2e16 <uiTraceIsObjectExcluded+0xe2>
	}
	
	vTraceError("Invalid object class ID in uiTraceIsObjectExcluded!");
    2e0a:	480a      	ldr	r0, [pc, #40]	; (2e34 <uiTraceIsObjectExcluded+0x100>)
    2e0c:	4478      	add	r0, pc
    2e0e:	4a05      	ldr	r2, [pc, #20]	; (2e24 <uiTraceIsObjectExcluded+0xf0>)
    2e10:	589a      	ldr	r2, [r3, r2]
    2e12:	4790      	blx	r2
	
	/* Must never reach */
	return 1;
    2e14:	2001      	movs	r0, #1
}
    2e16:	b003      	add	sp, #12
    2e18:	bd00      	pop	{pc}
    2e1a:	46c0      	nop			; (mov r8, r8)
    2e1c:	000050ca 	.word	0x000050ca
    2e20:	00004c96 	.word	0x00004c96
    2e24:	00000120 	.word	0x00000120
    2e28:	00000028 	.word	0x00000028
    2e2c:	00004cc0 	.word	0x00004cc0
    2e30:	00000124 	.word	0x00000124
    2e34:	00004c54 	.word	0x00004c54

00002e38 <writeInt32>:
	return i + 2;
}

/*** Locally used in vTracePrintF ***/
static uint8_t writeInt32(void * buffer, uint8_t i, uint32_t value)
{
    2e38:	b510      	push	{r4, lr}
    2e3a:	b082      	sub	sp, #8
    2e3c:	1c03      	adds	r3, r0, #0
    2e3e:	4c13      	ldr	r4, [pc, #76]	; (2e8c <writeInt32+0x54>)
    2e40:	447c      	add	r4, pc
	TRACE_ASSERT(buffer != NULL, "writeInt32: buffer == NULL", 0);
    2e42:	2800      	cmp	r0, #0
    2e44:	d006      	beq.n	2e54 <writeInt32+0x1c>

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
    2e46:	0788      	lsls	r0, r1, #30
    2e48:	d012      	beq.n	2e70 <writeInt32+0x38>
	{
		if (i >= MAX_ARG_SIZE)
    2e4a:	2923      	cmp	r1, #35	; 0x23
    2e4c:	d819      	bhi.n	2e82 <writeInt32+0x4a>
		{
			return 255;
		}

		((uint8_t*)buffer)[i] = 0;
    2e4e:	2400      	movs	r4, #0
static uint8_t writeInt32(void * buffer, uint8_t i, uint32_t value)
{
	TRACE_ASSERT(buffer != NULL, "writeInt32: buffer == NULL", 0);

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
    2e50:	2003      	movs	r0, #3
    2e52:	e008      	b.n	2e66 <writeInt32+0x2e>
}

/*** Locally used in vTracePrintF ***/
static uint8_t writeInt32(void * buffer, uint8_t i, uint32_t value)
{
	TRACE_ASSERT(buffer != NULL, "writeInt32: buffer == NULL", 0);
    2e54:	480e      	ldr	r0, [pc, #56]	; (2e90 <writeInt32+0x58>)
    2e56:	4478      	add	r0, pc
    2e58:	4b0e      	ldr	r3, [pc, #56]	; (2e94 <writeInt32+0x5c>)
    2e5a:	58e3      	ldr	r3, [r4, r3]
    2e5c:	4798      	blx	r3
    2e5e:	2000      	movs	r0, #0
    2e60:	e012      	b.n	2e88 <writeInt32+0x50>

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
	{
		if (i >= MAX_ARG_SIZE)
    2e62:	2924      	cmp	r1, #36	; 0x24
    2e64:	d00f      	beq.n	2e86 <writeInt32+0x4e>
		{
			return 255;
		}

		((uint8_t*)buffer)[i] = 0;
    2e66:	545c      	strb	r4, [r3, r1]
		i++;
    2e68:	3101      	adds	r1, #1
    2e6a:	b2c9      	uxtb	r1, r1
static uint8_t writeInt32(void * buffer, uint8_t i, uint32_t value)
{
	TRACE_ASSERT(buffer != NULL, "writeInt32: buffer == NULL", 0);

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
    2e6c:	4208      	tst	r0, r1
    2e6e:	d1f8      	bne.n	2e62 <writeInt32+0x2a>

		((uint8_t*)buffer)[i] = 0;
		i++;
	}

	if (i + 4 > MAX_ARG_SIZE)
    2e70:	1d0c      	adds	r4, r1, #4
	{
		return 255;
    2e72:	20ff      	movs	r0, #255	; 0xff

		((uint8_t*)buffer)[i] = 0;
		i++;
	}

	if (i + 4 > MAX_ARG_SIZE)
    2e74:	2c24      	cmp	r4, #36	; 0x24
    2e76:	dc07      	bgt.n	2e88 <writeInt32+0x50>
	{
		return 255;
	}

	((uint32_t*)buffer)[i/4] = value;
    2e78:	0888      	lsrs	r0, r1, #2
    2e7a:	0080      	lsls	r0, r0, #2
    2e7c:	50c2      	str	r2, [r0, r3]

	return i + 4;
    2e7e:	b2e0      	uxtb	r0, r4
    2e80:	e002      	b.n	2e88 <writeInt32+0x50>
	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
	{
		if (i >= MAX_ARG_SIZE)
		{
			return 255;
    2e82:	20ff      	movs	r0, #255	; 0xff
    2e84:	e000      	b.n	2e88 <writeInt32+0x50>
    2e86:	20ff      	movs	r0, #255	; 0xff
	}

	((uint32_t*)buffer)[i/4] = value;

	return i + 4;
}
    2e88:	b002      	add	sp, #8
    2e8a:	bd10      	pop	{r4, pc}
    2e8c:	00004fc4 	.word	0x00004fc4
    2e90:	00004c3e 	.word	0x00004c3e
    2e94:	00000120 	.word	0x00000120

00002e98 <writeInt16>:
	return i + 1;
}

/*** Locally used in vTracePrintF ***/
static uint8_t writeInt16(void * buffer, uint8_t i, uint16_t value)
{
    2e98:	b510      	push	{r4, lr}
    2e9a:	b082      	sub	sp, #8
    2e9c:	1c03      	adds	r3, r0, #0
    2e9e:	4c13      	ldr	r4, [pc, #76]	; (2eec <writeInt16+0x54>)
    2ea0:	447c      	add	r4, pc
	TRACE_ASSERT(buffer != NULL, "writeInt16: buffer == NULL", 0);
    2ea2:	2800      	cmp	r0, #0
    2ea4:	d006      	beq.n	2eb4 <writeInt16+0x1c>

	/* Align to multiple of 2 */
	while ((i % 2) != 0)
    2ea6:	07c8      	lsls	r0, r1, #31
    2ea8:	d512      	bpl.n	2ed0 <writeInt16+0x38>
	{
		if (i >= MAX_ARG_SIZE)
    2eaa:	2923      	cmp	r1, #35	; 0x23
    2eac:	d819      	bhi.n	2ee2 <writeInt16+0x4a>
		{
			return 255;
		}

		((uint8_t*)buffer)[i] = 0;
    2eae:	2400      	movs	r4, #0
static uint8_t writeInt16(void * buffer, uint8_t i, uint16_t value)
{
	TRACE_ASSERT(buffer != NULL, "writeInt16: buffer == NULL", 0);

	/* Align to multiple of 2 */
	while ((i % 2) != 0)
    2eb0:	2001      	movs	r0, #1
    2eb2:	e008      	b.n	2ec6 <writeInt16+0x2e>
}

/*** Locally used in vTracePrintF ***/
static uint8_t writeInt16(void * buffer, uint8_t i, uint16_t value)
{
	TRACE_ASSERT(buffer != NULL, "writeInt16: buffer == NULL", 0);
    2eb4:	480e      	ldr	r0, [pc, #56]	; (2ef0 <writeInt16+0x58>)
    2eb6:	4478      	add	r0, pc
    2eb8:	4b0e      	ldr	r3, [pc, #56]	; (2ef4 <writeInt16+0x5c>)
    2eba:	58e3      	ldr	r3, [r4, r3]
    2ebc:	4798      	blx	r3
    2ebe:	2000      	movs	r0, #0
    2ec0:	e012      	b.n	2ee8 <writeInt16+0x50>

	/* Align to multiple of 2 */
	while ((i % 2) != 0)
	{
		if (i >= MAX_ARG_SIZE)
    2ec2:	2924      	cmp	r1, #36	; 0x24
    2ec4:	d00f      	beq.n	2ee6 <writeInt16+0x4e>
		{
			return 255;
		}

		((uint8_t*)buffer)[i] = 0;
    2ec6:	545c      	strb	r4, [r3, r1]
		i++;
    2ec8:	3101      	adds	r1, #1
    2eca:	b2c9      	uxtb	r1, r1
static uint8_t writeInt16(void * buffer, uint8_t i, uint16_t value)
{
	TRACE_ASSERT(buffer != NULL, "writeInt16: buffer == NULL", 0);

	/* Align to multiple of 2 */
	while ((i % 2) != 0)
    2ecc:	4208      	tst	r0, r1
    2ece:	d1f8      	bne.n	2ec2 <writeInt16+0x2a>

		((uint8_t*)buffer)[i] = 0;
		i++;
	}

	if (i + 2 > MAX_ARG_SIZE)
    2ed0:	1c8c      	adds	r4, r1, #2
	{
		return 255;
    2ed2:	20ff      	movs	r0, #255	; 0xff

		((uint8_t*)buffer)[i] = 0;
		i++;
	}

	if (i + 2 > MAX_ARG_SIZE)
    2ed4:	2c24      	cmp	r4, #36	; 0x24
    2ed6:	dc07      	bgt.n	2ee8 <writeInt16+0x50>
	{
		return 255;
	}

	((uint16_t*)buffer)[i/2] = value;
    2ed8:	0848      	lsrs	r0, r1, #1
    2eda:	0040      	lsls	r0, r0, #1
    2edc:	52c2      	strh	r2, [r0, r3]

	return i + 2;
    2ede:	b2e0      	uxtb	r0, r4
    2ee0:	e002      	b.n	2ee8 <writeInt16+0x50>
	/* Align to multiple of 2 */
	while ((i % 2) != 0)
	{
		if (i >= MAX_ARG_SIZE)
		{
			return 255;
    2ee2:	20ff      	movs	r0, #255	; 0xff
    2ee4:	e000      	b.n	2ee8 <writeInt16+0x50>
    2ee6:	20ff      	movs	r0, #255	; 0xff
	}

	((uint16_t*)buffer)[i/2] = value;

	return i + 2;
}
    2ee8:	b002      	add	sp, #8
    2eea:	bd10      	pop	{r4, pc}
    2eec:	00004f64 	.word	0x00004f64
    2ef0:	00004c0a 	.word	0x00004c0a
    2ef4:	00000120 	.word	0x00000120

00002ef8 <vTraceInitTraceData>:
 *
 * Allocates, if necessary, and initializes the recorder data structure, based
 * on the constants in trcConfig.h.
 ******************************************************************************/
void vTraceInitTraceData(void)
{
    2ef8:	b500      	push	{lr}
    2efa:	b083      	sub	sp, #12
    2efc:	4b03      	ldr	r3, [pc, #12]	; (2f0c <vTraceInitTraceData+0x14>)
    2efe:	447b      	add	r3, pc
	prvTraceInitTraceData();
    2f00:	4a03      	ldr	r2, [pc, #12]	; (2f10 <vTraceInitTraceData+0x18>)
    2f02:	589a      	ldr	r2, [r3, r2]
    2f04:	9201      	str	r2, [sp, #4]
    2f06:	4790      	blx	r2
}
    2f08:	b003      	add	sp, #12
    2f0a:	bd00      	pop	{pc}
    2f0c:	00004f06 	.word	0x00004f06
    2f10:	0000011c 	.word	0x0000011c

00002f14 <xTraceOpenLabel>:
 * therefore recommended for user events that are frequently
 * executed and/or located in time-critical code. The lookup operation is
 * however fairly fast due to the design of the symbol table.
 ******************************************************************************/
traceLabel xTraceOpenLabel(const char* label)
{
    2f14:	b500      	push	{lr}
    2f16:	b083      	sub	sp, #12
    2f18:	4b09      	ldr	r3, [pc, #36]	; (2f40 <xTraceOpenLabel+0x2c>)
    2f1a:	447b      	add	r3, pc
	TRACE_ASSERT(label != NULL, "xTraceOpenLabel: label == NULL", (traceLabel)0);
    2f1c:	2800      	cmp	r0, #0
    2f1e:	d107      	bne.n	2f30 <xTraceOpenLabel+0x1c>
    2f20:	4808      	ldr	r0, [pc, #32]	; (2f44 <xTraceOpenLabel+0x30>)
    2f22:	4478      	add	r0, pc
    2f24:	4a08      	ldr	r2, [pc, #32]	; (2f48 <xTraceOpenLabel+0x34>)
    2f26:	589a      	ldr	r2, [r3, r2]
    2f28:	9201      	str	r2, [sp, #4]
    2f2a:	4790      	blx	r2
    2f2c:	2000      	movs	r0, #0
    2f2e:	e004      	b.n	2f3a <xTraceOpenLabel+0x26>

	return prvTraceOpenSymbol(label, 0);
    2f30:	2100      	movs	r1, #0
    2f32:	4a06      	ldr	r2, [pc, #24]	; (2f4c <xTraceOpenLabel+0x38>)
    2f34:	589a      	ldr	r2, [r3, r2]
    2f36:	9201      	str	r2, [sp, #4]
    2f38:	4790      	blx	r2
}
    2f3a:	b003      	add	sp, #12
    2f3c:	bd00      	pop	{pc}
    2f3e:	46c0      	nop			; (mov r8, r8)
    2f40:	00004eea 	.word	0x00004eea
    2f44:	00004dd6 	.word	0x00004dd6
    2f48:	00000120 	.word	0x00000120
    2f4c:	000000f4 	.word	0x000000f4

00002f50 <vTracePrintF_Helper>:
	va_end(vl);
#endif /* TRACE_SCHEDULING_ONLY */
}

void vTracePrintF_Helper(traceLabel eventLabel, const char* formatStr, va_list vl)
{
    2f50:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f52:	465f      	mov	r7, fp
    2f54:	4656      	mov	r6, sl
    2f56:	464d      	mov	r5, r9
    2f58:	4644      	mov	r4, r8
    2f5a:	b4f0      	push	{r4, r5, r6, r7}
    2f5c:	b093      	sub	sp, #76	; 0x4c
    2f5e:	9002      	str	r0, [sp, #8]
    2f60:	1c0d      	adds	r5, r1, #0
    2f62:	1c14      	adds	r4, r2, #0
    2f64:	4eb8      	ldr	r6, [pc, #736]	; (3248 <vTracePrintF_Helper+0x2f8>)
    2f66:	447e      	add	r6, pc
	* global. That would cause data corruption when two calls to vTracePrintF
	* from different tasks overlaps (interrupts are only disabled in a small
	* part of this function, otherwise enabled)
	***************************************************************************/

	TRACE_ASSERT(formatStr != NULL, "vTracePrintF: formatStr == NULL", );
    2f68:	2900      	cmp	r1, #0
    2f6a:	d105      	bne.n	2f78 <vTracePrintF_Helper+0x28>
    2f6c:	48b7      	ldr	r0, [pc, #732]	; (324c <vTracePrintF_Helper+0x2fc>)
    2f6e:	4478      	add	r0, pc
    2f70:	4bb7      	ldr	r3, [pc, #732]	; (3250 <vTracePrintF_Helper+0x300>)
    2f72:	58f3      	ldr	r3, [r6, r3]
    2f74:	4798      	blx	r3
    2f76:	e202      	b.n	337e <vTracePrintF_Helper+0x42e>

	trcCRITICAL_SECTION_BEGIN();
    2f78:	4bb6      	ldr	r3, [pc, #728]	; (3254 <vTracePrintF_Helper+0x304>)
    2f7a:	58f3      	ldr	r3, [r6, r3]
    2f7c:	4798      	blx	r3
    2f7e:	4680      	mov	r8, r0
    2f80:	4bb5      	ldr	r3, [pc, #724]	; (3258 <vTracePrintF_Helper+0x308>)
    2f82:	58f3      	ldr	r3, [r6, r3]
    2f84:	681a      	ldr	r2, [r3, #0]
    2f86:	3201      	adds	r2, #1
    2f88:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->recorderActive && (! inExcludedTask || nISRactive) && handle_of_last_logged_task)
    2f8a:	4bb4      	ldr	r3, [pc, #720]	; (325c <vTracePrintF_Helper+0x30c>)
    2f8c:	58f3      	ldr	r3, [r6, r3]
    2f8e:	681b      	ldr	r3, [r3, #0]
    2f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2f92:	2b00      	cmp	r3, #0
    2f94:	d100      	bne.n	2f98 <vTracePrintF_Helper+0x48>
    2f96:	e1e9      	b.n	336c <vTracePrintF_Helper+0x41c>
    2f98:	4bb1      	ldr	r3, [pc, #708]	; (3260 <vTracePrintF_Helper+0x310>)
    2f9a:	58f3      	ldr	r3, [r6, r3]
    2f9c:	9300      	str	r3, [sp, #0]
    2f9e:	781b      	ldrb	r3, [r3, #0]
    2fa0:	2b00      	cmp	r3, #0
    2fa2:	d007      	beq.n	2fb4 <vTracePrintF_Helper+0x64>
    2fa4:	4baf      	ldr	r3, [pc, #700]	; (3264 <vTracePrintF_Helper+0x314>)
    2fa6:	58f3      	ldr	r3, [r6, r3]
    2fa8:	9300      	str	r3, [sp, #0]
    2faa:	781b      	ldrb	r3, [r3, #0]
    2fac:	b25b      	sxtb	r3, r3
    2fae:	2b00      	cmp	r3, #0
    2fb0:	d100      	bne.n	2fb4 <vTracePrintF_Helper+0x64>
    2fb2:	e1db      	b.n	336c <vTracePrintF_Helper+0x41c>
    2fb4:	4bac      	ldr	r3, [pc, #688]	; (3268 <vTracePrintF_Helper+0x318>)
    2fb6:	58f3      	ldr	r3, [r6, r3]
    2fb8:	9300      	str	r3, [sp, #0]
    2fba:	781b      	ldrb	r3, [r3, #0]
    2fbc:	2b00      	cmp	r3, #0
    2fbe:	d100      	bne.n	2fc2 <vTracePrintF_Helper+0x72>
    2fc0:	e1d4      	b.n	336c <vTracePrintF_Helper+0x41c>
		/* First, write the "primary" user event entry in the local buffer, but
		let the event type be "EVENT_BEING_WRITTEN" for now...*/

		ue1 = (UserEvent*)(&tempDataBuffer[0]);

		ue1->type = EVENT_BEING_WRITTEN;	 /* Update this as the last step */
    2fc2:	22aa      	movs	r2, #170	; 0xaa
    2fc4:	ab09      	add	r3, sp, #36	; 0x24
    2fc6:	701a      	strb	r2, [r3, #0]
    2fc8:	46a2      	mov	sl, r4
 ******************************************************************************/
static uint8_t prvTraceUserEventFormat(const char* formatStr, va_list vl, uint8_t* buffer, uint8_t byteOffset)
{
	uint16_t formatStrIndex = 0;
	uint8_t argCounter = 0;
	uint8_t i = byteOffset;
    2fca:	2704      	movs	r7, #4
 * Parses the format string and stores the arguments in the buffer.
 ******************************************************************************/
static uint8_t prvTraceUserEventFormat(const char* formatStr, va_list vl, uint8_t* buffer, uint8_t byteOffset)
{
	uint16_t formatStrIndex = 0;
	uint8_t argCounter = 0;
    2fcc:	2000      	movs	r0, #0
 *
 * Parses the format string and stores the arguments in the buffer.
 ******************************************************************************/
static uint8_t prvTraceUserEventFormat(const char* formatStr, va_list vl, uint8_t* buffer, uint8_t byteOffset)
{
	uint16_t formatStrIndex = 0;
    2fce:	2400      	movs	r4, #0
	if (i >= MAX_ARG_SIZE)
	{
		return 255;
	}

	((uint8_t*)buffer)[i] = value;
    2fd0:	469b      	mov	fp, r3
								break;
					case 'h':
								formatStrIndex++;
								switch (formatStr[formatStrIndex])
								{
									case 'd':	i = writeInt16(	buffer,
    2fd2:	4aa6      	ldr	r2, [pc, #664]	; (326c <vTracePrintF_Helper+0x31c>)
    2fd4:	447a      	add	r2, pc
    2fd6:	9204      	str	r2, [sp, #16]
    2fd8:	1c33      	adds	r3, r6, #0
    2fda:	1c06      	adds	r6, r0, #0
    2fdc:	4699      	mov	r9, r3
    2fde:	e162      	b.n	32a6 <vTracePrintF_Helper+0x356>
	uint8_t argCounter = 0;
	uint8_t i = byteOffset;

	while (formatStr[formatStrIndex] != '\0')
	{
		if (formatStr[formatStrIndex] == '%')
    2fe0:	2b25      	cmp	r3, #37	; 0x25
    2fe2:	d000      	beq.n	2fe6 <vTracePrintF_Helper+0x96>
    2fe4:	e153      	b.n	328e <vTracePrintF_Helper+0x33e>
		{
			argCounter++;
    2fe6:	3601      	adds	r6, #1
    2fe8:	b2f6      	uxtb	r6, r6

			if (argCounter > 15)
    2fea:	2e0f      	cmp	r6, #15
    2fec:	d907      	bls.n	2ffe <vTracePrintF_Helper+0xae>
    2fee:	464e      	mov	r6, r9
			{
				vTraceError("vTracePrintF - Too many arguments, max 15 allowed!");
    2ff0:	489f      	ldr	r0, [pc, #636]	; (3270 <vTracePrintF_Helper+0x320>)
    2ff2:	4478      	add	r0, pc
    2ff4:	4b96      	ldr	r3, [pc, #600]	; (3250 <vTracePrintF_Helper+0x300>)
    2ff6:	58f3      	ldr	r3, [r6, r3]
    2ff8:	4798      	blx	r3
				return 0;
    2ffa:	2700      	movs	r7, #0
    2ffc:	e15e      	b.n	32bc <vTracePrintF_Helper+0x36c>
			* the main event buffer using a fast memcpy. The event code is finalized as the
			* very last step. Before that step, the event code indicates an unfinished
			* event, which causes it to be ignored and stop the loading of the file (since
			* an unfinished event is the last event in the trace).
			*******************************************************************************/
			formatStrIndex++;
    2ffe:	3401      	adds	r4, #1
    3000:	b2a4      	uxth	r4, r4
    3002:	e001      	b.n	3008 <vTracePrintF_Helper+0xb8>

			while ((formatStr[formatStrIndex] >= '0' && formatStr[formatStrIndex] <= '9') || formatStr[formatStrIndex] == '#' || formatStr[formatStrIndex] == '.')
				formatStrIndex++;
    3004:	3401      	adds	r4, #1
    3006:	b2a4      	uxth	r4, r4
			* event, which causes it to be ignored and stop the loading of the file (since
			* an unfinished event is the last event in the trace).
			*******************************************************************************/
			formatStrIndex++;

			while ((formatStr[formatStrIndex] >= '0' && formatStr[formatStrIndex] <= '9') || formatStr[formatStrIndex] == '#' || formatStr[formatStrIndex] == '.')
    3008:	5d28      	ldrb	r0, [r5, r4]
    300a:	1c03      	adds	r3, r0, #0
    300c:	3b30      	subs	r3, #48	; 0x30
    300e:	2b09      	cmp	r3, #9
    3010:	d9f8      	bls.n	3004 <vTracePrintF_Helper+0xb4>
    3012:	2823      	cmp	r0, #35	; 0x23
    3014:	d0f6      	beq.n	3004 <vTracePrintF_Helper+0xb4>
    3016:	282e      	cmp	r0, #46	; 0x2e
    3018:	d0f4      	beq.n	3004 <vTracePrintF_Helper+0xb4>
    301a:	1c23      	adds	r3, r4, #0
				formatStrIndex++;

			if (formatStr[formatStrIndex] != '\0')
    301c:	2800      	cmp	r0, #0
    301e:	d100      	bne.n	3022 <vTracePrintF_Helper+0xd2>
    3020:	e145      	b.n	32ae <vTracePrintF_Helper+0x35e>
			{
				switch (formatStr[formatStrIndex])
    3022:	3858      	subs	r0, #88	; 0x58
    3024:	2820      	cmp	r0, #32
    3026:	d900      	bls.n	302a <vTracePrintF_Helper+0xda>
    3028:	e131      	b.n	328e <vTracePrintF_Helper+0x33e>
    302a:	f003 fa8f 	bl	654c <__gnu_thumb1_case_uhi>
    302e:	002f      	.short	0x002f
    3030:	01300130 	.word	0x01300130
    3034:	01300130 	.word	0x01300130
    3038:	01300130 	.word	0x01300130
    303c:	01300130 	.word	0x01300130
    3040:	00e30130 	.word	0x00e30130
    3044:	00210130 	.word	0x00210130
    3048:	00500130 	.word	0x00500130
    304c:	00c00130 	.word	0x00c00130
    3050:	01300130 	.word	0x01300130
    3054:	00880130 	.word	0x00880130
    3058:	01300130 	.word	0x01300130
    305c:	01300130 	.word	0x01300130
    3060:	01300130 	.word	0x01300130
    3064:	0130003d 	.word	0x0130003d
    3068:	0130002f 	.word	0x0130002f
    306c:	002f0130 	.word	0x002f0130
				{
					case 'd':	i = writeInt32(	buffer,
    3070:	4653      	mov	r3, sl
    3072:	3304      	adds	r3, #4
    3074:	9300      	str	r3, [sp, #0]
    3076:	4650      	mov	r0, sl
    3078:	6802      	ldr	r2, [r0, #0]
    307a:	4658      	mov	r0, fp
    307c:	1c39      	adds	r1, r7, #0
    307e:	4b7d      	ldr	r3, [pc, #500]	; (3274 <vTracePrintF_Helper+0x324>)
    3080:	447b      	add	r3, pc
    3082:	4798      	blx	r3
    3084:	1c07      	adds	r7, r0, #0
    3086:	9900      	ldr	r1, [sp, #0]
    3088:	468a      	mov	sl, r1
    308a:	e100      	b.n	328e <vTracePrintF_Helper+0x33e>
												i,
												(uint32_t)va_arg(vl, uint32_t));
								break;
					case 'x':
					case 'X':
					case 'u':	i = writeInt32(	buffer,
    308c:	4652      	mov	r2, sl
    308e:	3204      	adds	r2, #4
    3090:	9200      	str	r2, [sp, #0]
    3092:	4653      	mov	r3, sl
    3094:	681a      	ldr	r2, [r3, #0]
    3096:	4658      	mov	r0, fp
    3098:	1c39      	adds	r1, r7, #0
    309a:	4b77      	ldr	r3, [pc, #476]	; (3278 <vTracePrintF_Helper+0x328>)
    309c:	447b      	add	r3, pc
    309e:	4798      	blx	r3
    30a0:	1c07      	adds	r7, r0, #0
    30a2:	9800      	ldr	r0, [sp, #0]
    30a4:	4682      	mov	sl, r0
    30a6:	e0f2      	b.n	328e <vTracePrintF_Helper+0x33e>
												i,
												(uint32_t)va_arg(vl, uint32_t));
								break;
					case 's':	i = writeInt16(	buffer,
    30a8:	4651      	mov	r1, sl
    30aa:	3104      	adds	r1, #4
    30ac:	9100      	str	r1, [sp, #0]
    30ae:	4652      	mov	r2, sl
    30b0:	6810      	ldr	r0, [r2, #0]
    30b2:	4b72      	ldr	r3, [pc, #456]	; (327c <vTracePrintF_Helper+0x32c>)
    30b4:	4649      	mov	r1, r9
    30b6:	58cb      	ldr	r3, [r1, r3]
    30b8:	4798      	blx	r3
    30ba:	1c02      	adds	r2, r0, #0
    30bc:	4658      	mov	r0, fp
    30be:	1c39      	adds	r1, r7, #0
    30c0:	4b6f      	ldr	r3, [pc, #444]	; (3280 <vTracePrintF_Helper+0x330>)
    30c2:	447b      	add	r3, pc
    30c4:	4798      	blx	r3
    30c6:	1c07      	adds	r7, r0, #0
    30c8:	9a00      	ldr	r2, [sp, #0]
    30ca:	4692      	mov	sl, r2
    30cc:	e0df      	b.n	328e <vTracePrintF_Helper+0x33e>
					/* Yes, "double" as type also in the float
					case. This since "float" is promoted into "double"
					by the va_arg stuff. */
					case 'f':	i = writeFloat(	buffer,
												i,
												(float)va_arg(vl, double));
    30ce:	4653      	mov	r3, sl
    30d0:	3307      	adds	r3, #7
    30d2:	2207      	movs	r2, #7
    30d4:	4393      	bics	r3, r2
    30d6:	2008      	movs	r0, #8
    30d8:	18c0      	adds	r0, r0, r3
    30da:	4682      	mov	sl, r0
    30dc:	6819      	ldr	r1, [r3, #0]
    30de:	685a      	ldr	r2, [r3, #4]
    30e0:	9100      	str	r1, [sp, #0]
    30e2:	9201      	str	r2, [sp, #4]
static uint8_t writeFloat(void * buffer, uint8_t i, float value)
{
	TRACE_ASSERT(buffer != NULL, "writeFloat: buffer == NULL", 0);

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
    30e4:	07ba      	lsls	r2, r7, #30
    30e6:	d00e      	beq.n	3106 <vTracePrintF_Helper+0x1b6>
	{
		if (i >= MAX_ARG_SIZE)
    30e8:	2f23      	cmp	r7, #35	; 0x23
    30ea:	d821      	bhi.n	3130 <vTracePrintF_Helper+0x1e0>
		{
			return 255;
		}

		((uint8_t*)buffer)[i] = 0;
    30ec:	2200      	movs	r2, #0
static uint8_t writeFloat(void * buffer, uint8_t i, float value)
{
	TRACE_ASSERT(buffer != NULL, "writeFloat: buffer == NULL", 0);

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
    30ee:	2303      	movs	r3, #3
    30f0:	4658      	mov	r0, fp
    30f2:	e001      	b.n	30f8 <vTracePrintF_Helper+0x1a8>
	{
		if (i >= MAX_ARG_SIZE)
    30f4:	2f24      	cmp	r7, #36	; 0x24
    30f6:	d01d      	beq.n	3134 <vTracePrintF_Helper+0x1e4>
		{
			return 255;
		}

		((uint8_t*)buffer)[i] = 0;
    30f8:	19c1      	adds	r1, r0, r7
    30fa:	700a      	strb	r2, [r1, #0]
		i++;
    30fc:	3701      	adds	r7, #1
    30fe:	b2ff      	uxtb	r7, r7
static uint8_t writeFloat(void * buffer, uint8_t i, float value)
{
	TRACE_ASSERT(buffer != NULL, "writeFloat: buffer == NULL", 0);

	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
    3100:	423b      	tst	r3, r7
    3102:	d1f7      	bne.n	30f4 <vTracePrintF_Helper+0x1a4>
    3104:	4683      	mov	fp, r0

		((uint8_t*)buffer)[i] = 0;
		i++;
	}

	if (i + 4 > MAX_ARG_SIZE)
    3106:	1d3b      	adds	r3, r7, #4
    3108:	2b24      	cmp	r3, #36	; 0x24
    310a:	dc16      	bgt.n	313a <vTracePrintF_Helper+0x1ea>
	{
		return 255;
	}

	((float*)buffer)[i/4] = value;
    310c:	23ff      	movs	r3, #255	; 0xff
    310e:	009b      	lsls	r3, r3, #2
    3110:	403b      	ands	r3, r7
    3112:	a812      	add	r0, sp, #72	; 0x48
    3114:	18c3      	adds	r3, r0, r3
    3116:	3b24      	subs	r3, #36	; 0x24
    3118:	9303      	str	r3, [sp, #12]

#if (INCLUDE_FLOAT_SUPPORT)
					/* Yes, "double" as type also in the float
					case. This since "float" is promoted into "double"
					by the va_arg stuff. */
					case 'f':	i = writeFloat(	buffer,
    311a:	4b5a      	ldr	r3, [pc, #360]	; (3284 <vTracePrintF_Helper+0x334>)
    311c:	4649      	mov	r1, r9
    311e:	58cb      	ldr	r3, [r1, r3]
    3120:	9800      	ldr	r0, [sp, #0]
    3122:	9901      	ldr	r1, [sp, #4]
    3124:	4798      	blx	r3
    3126:	9a03      	ldr	r2, [sp, #12]
    3128:	6010      	str	r0, [r2, #0]
		return 255;
	}

	((float*)buffer)[i/4] = value;

	return i + 4;
    312a:	3704      	adds	r7, #4
    312c:	b2ff      	uxtb	r7, r7
    312e:	e0ae      	b.n	328e <vTracePrintF_Helper+0x33e>
	/* A 32 bit value should begin at an even 4-byte address */
	while ((i % 4) != 0)
	{
		if (i >= MAX_ARG_SIZE)
		{
			return 255;
    3130:	27ff      	movs	r7, #255	; 0xff
    3132:	e0ac      	b.n	328e <vTracePrintF_Helper+0x33e>
    3134:	4683      	mov	fp, r0
    3136:	27ff      	movs	r7, #255	; 0xff
    3138:	e0a9      	b.n	328e <vTracePrintF_Helper+0x33e>
		i++;
	}

	if (i + 4 > MAX_ARG_SIZE)
	{
		return 255;
    313a:	27ff      	movs	r7, #255	; 0xff
    313c:	e0a7      	b.n	328e <vTracePrintF_Helper+0x33e>
												i,
												(uint32_t)va_arg(vl, double));
								break;
#endif
					case 'l':
								formatStrIndex++;
    313e:	3301      	adds	r3, #1
    3140:	b29c      	uxth	r4, r3
								switch (formatStr[formatStrIndex])
    3142:	5d2b      	ldrb	r3, [r5, r4]
    3144:	2b66      	cmp	r3, #102	; 0x66
    3146:	d000      	beq.n	314a <vTracePrintF_Helper+0x1fa>
    3148:	e0a1      	b.n	328e <vTracePrintF_Helper+0x33e>
								{
#if (INCLUDE_FLOAT_SUPPORT)
									case 'f':	i = writeDouble(buffer,
    314a:	4653      	mov	r3, sl
    314c:	3307      	adds	r3, #7
    314e:	2207      	movs	r2, #7
    3150:	4393      	bics	r3, r2
    3152:	2008      	movs	r0, #8
    3154:	18c0      	adds	r0, r0, r3
    3156:	4682      	mov	sl, r0
    3158:	6819      	ldr	r1, [r3, #0]
    315a:	685a      	ldr	r2, [r3, #4]
    315c:	9106      	str	r1, [sp, #24]
    315e:	9207      	str	r2, [sp, #28]

	TRACE_ASSERT(buffer != NULL, "writeDouble: buffer == NULL", 0);

	/* The double is written as two 32 bit values, and should begin at an even
	4-byte address (to avoid having to align with 8 byte) */
	while (i % 4 != 0)
    3160:	07ba      	lsls	r2, r7, #30
    3162:	d00e      	beq.n	3182 <vTracePrintF_Helper+0x232>
	{
		if (i >= MAX_ARG_SIZE)
    3164:	2f23      	cmp	r7, #35	; 0x23
    3166:	d81b      	bhi.n	31a0 <vTracePrintF_Helper+0x250>
		{
			return 255;
		}

		((uint8_t*)buffer)[i] = 0;
    3168:	2100      	movs	r1, #0

	TRACE_ASSERT(buffer != NULL, "writeDouble: buffer == NULL", 0);

	/* The double is written as two 32 bit values, and should begin at an even
	4-byte address (to avoid having to align with 8 byte) */
	while (i % 4 != 0)
    316a:	2203      	movs	r2, #3
    316c:	4658      	mov	r0, fp
    316e:	e001      	b.n	3174 <vTracePrintF_Helper+0x224>
	{
		if (i >= MAX_ARG_SIZE)
    3170:	2f24      	cmp	r7, #36	; 0x24
    3172:	d017      	beq.n	31a4 <vTracePrintF_Helper+0x254>
		{
			return 255;
		}

		((uint8_t*)buffer)[i] = 0;
    3174:	19c3      	adds	r3, r0, r7
    3176:	7019      	strb	r1, [r3, #0]
		i++;
    3178:	3701      	adds	r7, #1
    317a:	b2ff      	uxtb	r7, r7

	TRACE_ASSERT(buffer != NULL, "writeDouble: buffer == NULL", 0);

	/* The double is written as two 32 bit values, and should begin at an even
	4-byte address (to avoid having to align with 8 byte) */
	while (i % 4 != 0)
    317c:	423a      	tst	r2, r7
    317e:	d1f7      	bne.n	3170 <vTracePrintF_Helper+0x220>
    3180:	4683      	mov	fp, r0

		((uint8_t*)buffer)[i] = 0;
		i++;
	}

	if (i + 8 > MAX_ARG_SIZE)
    3182:	1c3b      	adds	r3, r7, #0
    3184:	3308      	adds	r3, #8
    3186:	2b24      	cmp	r3, #36	; 0x24
    3188:	dc0f      	bgt.n	31aa <vTracePrintF_Helper+0x25a>
	{
		return 255;
	}

	dest = &(((uint32_t *)buffer)[i/4]);
    318a:	23ff      	movs	r3, #255	; 0xff
    318c:	009b      	lsls	r3, r3, #2
    318e:	403b      	ands	r3, r7
    3190:	445b      	add	r3, fp

	dest[0] = src[0];
    3192:	9806      	ldr	r0, [sp, #24]
    3194:	6018      	str	r0, [r3, #0]
	dest[1] = src[1];
    3196:	9907      	ldr	r1, [sp, #28]
    3198:	6059      	str	r1, [r3, #4]

	return i + 8;
    319a:	3708      	adds	r7, #8
    319c:	b2ff      	uxtb	r7, r7
    319e:	e076      	b.n	328e <vTracePrintF_Helper+0x33e>
	4-byte address (to avoid having to align with 8 byte) */
	while (i % 4 != 0)
	{
		if (i >= MAX_ARG_SIZE)
		{
			return 255;
    31a0:	27ff      	movs	r7, #255	; 0xff
    31a2:	e074      	b.n	328e <vTracePrintF_Helper+0x33e>
    31a4:	4683      	mov	fp, r0
    31a6:	27ff      	movs	r7, #255	; 0xff
    31a8:	e071      	b.n	328e <vTracePrintF_Helper+0x33e>
		i++;
	}

	if (i + 8 > MAX_ARG_SIZE)
	{
		return 255;
    31aa:	27ff      	movs	r7, #255	; 0xff
    31ac:	e06f      	b.n	328e <vTracePrintF_Helper+0x33e>
#endif

								}
								break;
					case 'h':
								formatStrIndex++;
    31ae:	3301      	adds	r3, #1
    31b0:	b29c      	uxth	r4, r3
								switch (formatStr[formatStrIndex])
    31b2:	5d2b      	ldrb	r3, [r5, r4]
    31b4:	2b64      	cmp	r3, #100	; 0x64
    31b6:	d002      	beq.n	31be <vTracePrintF_Helper+0x26e>
    31b8:	2b75      	cmp	r3, #117	; 0x75
    31ba:	d00d      	beq.n	31d8 <vTracePrintF_Helper+0x288>
    31bc:	e067      	b.n	328e <vTracePrintF_Helper+0x33e>
								{
									case 'd':	i = writeInt16(	buffer,
																i,
																(uint16_t)va_arg(vl, uint32_t));
    31be:	4652      	mov	r2, sl
    31c0:	3204      	adds	r2, #4
    31c2:	9200      	str	r2, [sp, #0]
								break;
					case 'h':
								formatStrIndex++;
								switch (formatStr[formatStrIndex])
								{
									case 'd':	i = writeInt16(	buffer,
    31c4:	4653      	mov	r3, sl
    31c6:	881a      	ldrh	r2, [r3, #0]
    31c8:	4658      	mov	r0, fp
    31ca:	1c39      	adds	r1, r7, #0
    31cc:	9b04      	ldr	r3, [sp, #16]
    31ce:	4798      	blx	r3
    31d0:	1c07      	adds	r7, r0, #0
																i,
																(uint16_t)va_arg(vl, uint32_t));
    31d2:	9800      	ldr	r0, [sp, #0]
    31d4:	4682      	mov	sl, r0
    31d6:	e05a      	b.n	328e <vTracePrintF_Helper+0x33e>
												break;
									case 'u':	i = writeInt16(	buffer,
																i,
																(uint16_t)va_arg(vl, uint32_t));
    31d8:	4651      	mov	r1, sl
    31da:	3104      	adds	r1, #4
    31dc:	9100      	str	r1, [sp, #0]
								{
									case 'd':	i = writeInt16(	buffer,
																i,
																(uint16_t)va_arg(vl, uint32_t));
												break;
									case 'u':	i = writeInt16(	buffer,
    31de:	4653      	mov	r3, sl
    31e0:	881a      	ldrh	r2, [r3, #0]
    31e2:	4658      	mov	r0, fp
    31e4:	1c39      	adds	r1, r7, #0
    31e6:	4b28      	ldr	r3, [pc, #160]	; (3288 <vTracePrintF_Helper+0x338>)
    31e8:	447b      	add	r3, pc
    31ea:	4798      	blx	r3
    31ec:	1c07      	adds	r7, r0, #0
																i,
																(uint16_t)va_arg(vl, uint32_t));
    31ee:	9800      	ldr	r0, [sp, #0]
    31f0:	4682      	mov	sl, r0
    31f2:	e04c      	b.n	328e <vTracePrintF_Helper+0x33e>
												break;
								}
								break;
					case 'b':
								formatStrIndex++;
    31f4:	3301      	adds	r3, #1
    31f6:	b29c      	uxth	r4, r3
								switch (formatStr[formatStrIndex])
    31f8:	5d2b      	ldrb	r3, [r5, r4]
    31fa:	2b64      	cmp	r3, #100	; 0x64
    31fc:	d002      	beq.n	3204 <vTracePrintF_Helper+0x2b4>
    31fe:	2b75      	cmp	r3, #117	; 0x75
    3200:	d012      	beq.n	3228 <vTracePrintF_Helper+0x2d8>
    3202:	e044      	b.n	328e <vTracePrintF_Helper+0x33e>
								{
									case 'd':	i = writeInt8(	buffer,
																i,
																(uint8_t)va_arg(vl, uint32_t));
    3204:	4653      	mov	r3, sl
    3206:	3304      	adds	r3, #4
    3208:	4651      	mov	r1, sl
    320a:	680a      	ldr	r2, [r1, #0]
/*** Locally used in vTracePrintF ***/
static uint8_t writeInt8(void * buffer, uint8_t i, uint8_t value)
{
	TRACE_ASSERT(buffer != NULL, "writeInt8: buffer == NULL", 0);

	if (i >= MAX_ARG_SIZE)
    320c:	2f23      	cmp	r7, #35	; 0x23
    320e:	d807      	bhi.n	3220 <vTracePrintF_Helper+0x2d0>
								break;
					case 'b':
								formatStrIndex++;
								switch (formatStr[formatStrIndex])
								{
									case 'd':	i = writeInt8(	buffer,
    3210:	4658      	mov	r0, fp
    3212:	55c2      	strb	r2, [r0, r7]
		return 255;
	}

	((uint8_t*)buffer)[i] = value;

	if (i + 1 > MAX_ARG_SIZE)
    3214:	1c7a      	adds	r2, r7, #1
	{
		return 255;
    3216:	27ff      	movs	r7, #255	; 0xff
		return 255;
	}

	((uint8_t*)buffer)[i] = value;

	if (i + 1 > MAX_ARG_SIZE)
    3218:	2a24      	cmp	r2, #36	; 0x24
    321a:	dc03      	bgt.n	3224 <vTracePrintF_Helper+0x2d4>
	{
		return 255;
	}

	return i + 1;
    321c:	b2d7      	uxtb	r7, r2
    321e:	e001      	b.n	3224 <vTracePrintF_Helper+0x2d4>
{
	TRACE_ASSERT(buffer != NULL, "writeInt8: buffer == NULL", 0);

	if (i >= MAX_ARG_SIZE)
	{
		return 255;
    3220:	27ff      	movs	r7, #255	; 0xff
    3222:	e7ff      	b.n	3224 <vTracePrintF_Helper+0x2d4>
								formatStrIndex++;
								switch (formatStr[formatStrIndex])
								{
									case 'd':	i = writeInt8(	buffer,
																i,
																(uint8_t)va_arg(vl, uint32_t));
    3224:	469a      	mov	sl, r3
    3226:	e032      	b.n	328e <vTracePrintF_Helper+0x33e>
												break;

									case 'u':	i = writeInt8(	buffer,
																i,
																(uint8_t)va_arg(vl, uint32_t));
    3228:	4653      	mov	r3, sl
    322a:	3304      	adds	r3, #4
    322c:	4651      	mov	r1, sl
    322e:	680a      	ldr	r2, [r1, #0]
/*** Locally used in vTracePrintF ***/
static uint8_t writeInt8(void * buffer, uint8_t i, uint8_t value)
{
	TRACE_ASSERT(buffer != NULL, "writeInt8: buffer == NULL", 0);

	if (i >= MAX_ARG_SIZE)
    3230:	2f23      	cmp	r7, #35	; 0x23
    3232:	d807      	bhi.n	3244 <vTracePrintF_Helper+0x2f4>
									case 'd':	i = writeInt8(	buffer,
																i,
																(uint8_t)va_arg(vl, uint32_t));
												break;

									case 'u':	i = writeInt8(	buffer,
    3234:	4658      	mov	r0, fp
    3236:	55c2      	strb	r2, [r0, r7]
		return 255;
	}

	((uint8_t*)buffer)[i] = value;

	if (i + 1 > MAX_ARG_SIZE)
    3238:	1c7a      	adds	r2, r7, #1
	{
		return 255;
    323a:	27ff      	movs	r7, #255	; 0xff
		return 255;
	}

	((uint8_t*)buffer)[i] = value;

	if (i + 1 > MAX_ARG_SIZE)
    323c:	2a24      	cmp	r2, #36	; 0x24
    323e:	dc25      	bgt.n	328c <vTracePrintF_Helper+0x33c>
	{
		return 255;
	}

	return i + 1;
    3240:	b2d7      	uxtb	r7, r2
    3242:	e023      	b.n	328c <vTracePrintF_Helper+0x33c>
{
	TRACE_ASSERT(buffer != NULL, "writeInt8: buffer == NULL", 0);

	if (i >= MAX_ARG_SIZE)
	{
		return 255;
    3244:	27ff      	movs	r7, #255	; 0xff
    3246:	e021      	b.n	328c <vTracePrintF_Helper+0x33c>
    3248:	00004e9e 	.word	0x00004e9e
    324c:	00004dba 	.word	0x00004dba
    3250:	00000120 	.word	0x00000120
    3254:	00000274 	.word	0x00000274
    3258:	000002c4 	.word	0x000002c4
    325c:	00000028 	.word	0x00000028
    3260:	00000230 	.word	0x00000230
    3264:	000002c8 	.word	0x000002c8
    3268:	0000002c 	.word	0x0000002c
    326c:	fffffec1 	.word	0xfffffec1
    3270:	00004d66 	.word	0x00004d66
    3274:	fffffdb5 	.word	0xfffffdb5
    3278:	fffffd99 	.word	0xfffffd99
    327c:	00000144 	.word	0x00000144
    3280:	fffffdd3 	.word	0xfffffdd3
    3284:	00000100 	.word	0x00000100
    3288:	fffffcad 	.word	0xfffffcad
																(uint8_t)va_arg(vl, uint32_t));
												break;

									case 'u':	i = writeInt8(	buffer,
																i,
																(uint8_t)va_arg(vl, uint32_t));
    328c:	469a      	mov	sl, r3
				}
			}
			else
				break;
		}
		formatStrIndex++;
    328e:	3401      	adds	r4, #1
    3290:	b2a4      	uxth	r4, r4
		if (i == 255)
    3292:	2fff      	cmp	r7, #255	; 0xff
    3294:	d107      	bne.n	32a6 <vTracePrintF_Helper+0x356>
    3296:	464e      	mov	r6, r9
		{
			vTraceError("vTracePrintF - Too large arguments, max 32 byte allowed!");
    3298:	483c      	ldr	r0, [pc, #240]	; (338c <vTracePrintF_Helper+0x43c>)
    329a:	4478      	add	r0, pc
    329c:	4b3c      	ldr	r3, [pc, #240]	; (3390 <vTracePrintF_Helper+0x440>)
    329e:	58f3      	ldr	r3, [r6, r3]
    32a0:	4798      	blx	r3
			return 0;
    32a2:	2700      	movs	r7, #0
    32a4:	e00a      	b.n	32bc <vTracePrintF_Helper+0x36c>
{
	uint16_t formatStrIndex = 0;
	uint8_t argCounter = 0;
	uint8_t i = byteOffset;

	while (formatStr[formatStrIndex] != '\0')
    32a6:	5d2b      	ldrb	r3, [r5, r4]
    32a8:	2b00      	cmp	r3, #0
    32aa:	d000      	beq.n	32ae <vTracePrintF_Helper+0x35e>
    32ac:	e698      	b.n	2fe0 <vTracePrintF_Helper+0x90>
    32ae:	464e      	mov	r6, r9
		{
			vTraceError("vTracePrintF - Too large arguments, max 32 byte allowed!");
			return 0;
		}
	}
	return (i+3)/4;
    32b0:	3703      	adds	r7, #3
    32b2:	17fb      	asrs	r3, r7, #31
    32b4:	0f9b      	lsrs	r3, r3, #30
    32b6:	19df      	adds	r7, r3, r7
    32b8:	10bf      	asrs	r7, r7, #2
    32ba:	b2ff      	uxtb	r7, r7
		ue1->type = EVENT_BEING_WRITTEN;	 /* Update this as the last step */

		noOfSlots = prvTraceUserEventFormat(formatStr, vl, (uint8_t*)tempDataBuffer, 4);

		/* Store the format string, with a reference to the channel symbol */
		ue1->payload = prvTraceOpenSymbol(formatStr, eventLabel);
    32bc:	1c28      	adds	r0, r5, #0
    32be:	9902      	ldr	r1, [sp, #8]
    32c0:	4b34      	ldr	r3, [pc, #208]	; (3394 <vTracePrintF_Helper+0x444>)
    32c2:	58f3      	ldr	r3, [r6, r3]
    32c4:	4798      	blx	r3
    32c6:	ac09      	add	r4, sp, #36	; 0x24
    32c8:	8060      	strh	r0, [r4, #2]

		ue1->dts = (uint8_t)prvTraceGetDTS(0xFF);
    32ca:	20ff      	movs	r0, #255	; 0xff
    32cc:	4b32      	ldr	r3, [pc, #200]	; (3398 <vTracePrintF_Helper+0x448>)
    32ce:	58f3      	ldr	r3, [r6, r3]
    32d0:	4798      	blx	r3
    32d2:	7060      	strb	r0, [r4, #1]

		 /* prvTraceGetDTS might stop the recorder in some cases... */
		if (RecorderDataPtr->recorderActive)
    32d4:	4b31      	ldr	r3, [pc, #196]	; (339c <vTracePrintF_Helper+0x44c>)
    32d6:	58f3      	ldr	r3, [r6, r3]
    32d8:	681b      	ldr	r3, [r3, #0]
    32da:	6b19      	ldr	r1, [r3, #48]	; 0x30
    32dc:	2900      	cmp	r1, #0
    32de:	d045      	beq.n	336c <vTracePrintF_Helper+0x41c>

		ue1 = (UserEvent*)(&tempDataBuffer[0]);

		ue1->type = EVENT_BEING_WRITTEN;	 /* Update this as the last step */

		noOfSlots = prvTraceUserEventFormat(formatStr, vl, (uint8_t*)tempDataBuffer, 4);
    32e0:	1c3c      	adds	r4, r7, #0
		if (RecorderDataPtr->recorderActive)
		{

			/* If the data does not fit in the remaining main buffer, wrap around to
			0 if allowed, otherwise stop the recorder and quit). */
			if (RecorderDataPtr->nextFreeIndex + noOfSlots > RecorderDataPtr->maxEvents)
    32e2:	69d9      	ldr	r1, [r3, #28]
    32e4:	699a      	ldr	r2, [r3, #24]
    32e6:	1878      	adds	r0, r7, r1
    32e8:	4290      	cmp	r0, r2
    32ea:	d914      	bls.n	3316 <vTracePrintF_Helper+0x3c6>
			{
				#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
				(void)memset(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
						0,
						(RecorderDataPtr->maxEvents - RecorderDataPtr->nextFreeIndex)*4);
    32ec:	1a52      	subs	r2, r2, r1
    32ee:	0092      	lsls	r2, r2, #2
			/* If the data does not fit in the remaining main buffer, wrap around to
			0 if allowed, otherwise stop the recorder and quit). */
			if (RecorderDataPtr->nextFreeIndex + noOfSlots > RecorderDataPtr->maxEvents)
			{
				#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
				(void)memset(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
    32f0:	0088      	lsls	r0, r1, #2
    32f2:	2183      	movs	r1, #131	; 0x83
    32f4:	0109      	lsls	r1, r1, #4
    32f6:	1840      	adds	r0, r0, r1
    32f8:	1818      	adds	r0, r3, r0
    32fa:	2100      	movs	r1, #0
    32fc:	4b28      	ldr	r3, [pc, #160]	; (33a0 <vTracePrintF_Helper+0x450>)
    32fe:	58f3      	ldr	r3, [r6, r3]
    3300:	4798      	blx	r3
						0,
						(RecorderDataPtr->maxEvents - RecorderDataPtr->nextFreeIndex)*4);
				RecorderDataPtr->nextFreeIndex = 0;
    3302:	4b26      	ldr	r3, [pc, #152]	; (339c <vTracePrintF_Helper+0x44c>)
    3304:	58f3      	ldr	r3, [r6, r3]
    3306:	681b      	ldr	r3, [r3, #0]
    3308:	2200      	movs	r2, #0
    330a:	61da      	str	r2, [r3, #28]
				RecorderDataPtr->bufferIsFull = 1;
    330c:	2201      	movs	r2, #1
    330e:	621a      	str	r2, [r3, #32]
				vTraceStop();
				#endif
			}

			/* Check if recorder has been stopped (i.e., vTraceStop above) */
			if (RecorderDataPtr->recorderActive)
    3310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3312:	2b00      	cmp	r3, #0
    3314:	d026      	beq.n	3364 <vTracePrintF_Helper+0x414>
				/* Check that the buffer to be overwritten does not contain any user
				events that would be partially overwritten. If so, they must be "killed"
				by replacing the user event and following data with NULL events (i.e.,
				using a memset to zero).*/
				#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
				prvCheckDataToBeOverwrittenForMultiEntryEvents((uint8_t)noOfSlots);
    3316:	1c38      	adds	r0, r7, #0
    3318:	4b22      	ldr	r3, [pc, #136]	; (33a4 <vTracePrintF_Helper+0x454>)
    331a:	58f3      	ldr	r3, [r6, r3]
    331c:	4798      	blx	r3
				#endif
				/* Copy the local buffer to the main buffer */
				(void)memcpy(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
    331e:	4b1f      	ldr	r3, [pc, #124]	; (339c <vTracePrintF_Helper+0x44c>)
    3320:	58f5      	ldr	r5, [r6, r3]
    3322:	682b      	ldr	r3, [r5, #0]
    3324:	69da      	ldr	r2, [r3, #28]
    3326:	0090      	lsls	r0, r2, #2
    3328:	2183      	movs	r1, #131	; 0x83
    332a:	0109      	lsls	r1, r1, #4
    332c:	1840      	adds	r0, r0, r1
    332e:	1818      	adds	r0, r3, r0
						tempDataBuffer,
						noOfSlots * 4);
    3330:	00a2      	lsls	r2, r4, #2
				using a memset to zero).*/
				#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
				prvCheckDataToBeOverwrittenForMultiEntryEvents((uint8_t)noOfSlots);
				#endif
				/* Copy the local buffer to the main buffer */
				(void)memcpy(& RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4],
    3332:	a909      	add	r1, sp, #36	; 0x24
    3334:	4b1c      	ldr	r3, [pc, #112]	; (33a8 <vTracePrintF_Helper+0x458>)
    3336:	58f3      	ldr	r3, [r6, r3]
    3338:	4798      	blx	r3
						noOfSlots * 4);

				/* Update the event type, i.e., number of data entries following the
				main USER_EVENT entry (Note: important that this is after the memcpy,
				but within the critical section!)*/
				RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4] =
    333a:	682b      	ldr	r3, [r5, #0]
    333c:	69da      	ldr	r2, [r3, #28]
    333e:	0091      	lsls	r1, r2, #2
    3340:	1859      	adds	r1, r3, r1
    3342:	2083      	movs	r0, #131	; 0x83
    3344:	0100      	lsls	r0, r0, #4
    3346:	1809      	adds	r1, r1, r0
				 (uint8_t) ( USER_EVENT + noOfSlots - 1 );
    3348:	3f69      	subs	r7, #105	; 0x69
						noOfSlots * 4);

				/* Update the event type, i.e., number of data entries following the
				main USER_EVENT entry (Note: important that this is after the memcpy,
				but within the critical section!)*/
				RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex * 4] =
    334a:	700f      	strb	r7, [r1, #0]
				 (uint8_t) ( USER_EVENT + noOfSlots - 1 );

				/* Update the main buffer event index (already checked that it fits in
				the buffer, so no need to check for wrapping)*/

				RecorderDataPtr->nextFreeIndex += noOfSlots;
    334c:	18a2      	adds	r2, r4, r2
    334e:	61da      	str	r2, [r3, #28]
				RecorderDataPtr->numEvents += noOfSlots;
    3350:	6959      	ldr	r1, [r3, #20]
    3352:	190c      	adds	r4, r1, r4
    3354:	615c      	str	r4, [r3, #20]

				if (RecorderDataPtr->nextFreeIndex >= EVENT_BUFFER_SIZE)
    3356:	4915      	ldr	r1, [pc, #84]	; (33ac <vTracePrintF_Helper+0x45c>)
    3358:	428a      	cmp	r2, r1
    335a:	d903      	bls.n	3364 <vTracePrintF_Helper+0x414>
				{
					#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
					/* We have reached the end, but this is a ring buffer. Start from the beginning again. */
					RecorderDataPtr->bufferIsFull = 1;
    335c:	2201      	movs	r2, #1
    335e:	621a      	str	r2, [r3, #32]
					RecorderDataPtr->nextFreeIndex = 0;
    3360:	2200      	movs	r2, #0
    3362:	61da      	str	r2, [r3, #28]
				}
			}

			#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
			/* Make sure the next entry is cleared correctly */
			prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
    3364:	2001      	movs	r0, #1
    3366:	4b0f      	ldr	r3, [pc, #60]	; (33a4 <vTracePrintF_Helper+0x454>)
    3368:	58f3      	ldr	r3, [r6, r3]
    336a:	4798      	blx	r3
			#endif

		}
	}
	trcCRITICAL_SECTION_END();
    336c:	4b10      	ldr	r3, [pc, #64]	; (33b0 <vTracePrintF_Helper+0x460>)
    336e:	58f3      	ldr	r3, [r6, r3]
    3370:	681a      	ldr	r2, [r3, #0]
    3372:	3a01      	subs	r2, #1
    3374:	601a      	str	r2, [r3, #0]
    3376:	4640      	mov	r0, r8
    3378:	4b0e      	ldr	r3, [pc, #56]	; (33b4 <vTracePrintF_Helper+0x464>)
    337a:	58f3      	ldr	r3, [r6, r3]
    337c:	4798      	blx	r3
		channel = xTraceRegisterChannelFormat(eventLabel, formatLabel);

		prvTraceUserEventHelper1(channel, eventLabel, formatLabel, vl);
	}
#endif
}
    337e:	b013      	add	sp, #76	; 0x4c
    3380:	bc3c      	pop	{r2, r3, r4, r5}
    3382:	4690      	mov	r8, r2
    3384:	4699      	mov	r9, r3
    3386:	46a2      	mov	sl, r4
    3388:	46ab      	mov	fp, r5
    338a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    338c:	00004af2 	.word	0x00004af2
    3390:	00000120 	.word	0x00000120
    3394:	000000f4 	.word	0x000000f4
    3398:	00000180 	.word	0x00000180
    339c:	00000028 	.word	0x00000028
    33a0:	000001ac 	.word	0x000001ac
    33a4:	0000021c 	.word	0x0000021c
    33a8:	00000068 	.word	0x00000068
    33ac:	000003e7 	.word	0x000003e7
    33b0:	000002c4 	.word	0x000002c4
    33b4:	00000134 	.word	0x00000134

000033b8 <vTracePrintF>:
 * Before using a %lf argument on a 16-bit MCU, please verify that
 * "sizeof(double)" actually gives 8 as expected. If not, use %f instead.
 ******************************************************************************/

void vTracePrintF(traceLabel eventLabel, const char* formatStr, ...)
{
    33b8:	b40e      	push	{r1, r2, r3}
    33ba:	b510      	push	{r4, lr}
    33bc:	b085      	sub	sp, #20
    33be:	aa07      	add	r2, sp, #28
    33c0:	ca08      	ldmia	r2!, {r3}
    33c2:	4b06      	ldr	r3, [pc, #24]	; (33dc <vTracePrintF+0x24>)
    33c4:	447b      	add	r3, pc
#if (TRACE_SCHEDULING_ONLY == 0)
	va_list vl;

	va_start(vl, formatStr);
    33c6:	9203      	str	r2, [sp, #12]
	vTracePrintF_Helper(eventLabel, formatStr, vl);
    33c8:	9907      	ldr	r1, [sp, #28]
    33ca:	4c05      	ldr	r4, [pc, #20]	; (33e0 <vTracePrintF+0x28>)
    33cc:	591c      	ldr	r4, [r3, r4]
    33ce:	9401      	str	r4, [sp, #4]
    33d0:	47a0      	blx	r4
	va_end(vl);
#endif /* TRACE_SCHEDULING_ONLY */
}
    33d2:	b005      	add	sp, #20
    33d4:	bc10      	pop	{r4}
    33d6:	bc08      	pop	{r3}
    33d8:	b003      	add	sp, #12
    33da:	4718      	bx	r3
    33dc:	00004a40 	.word	0x00004a40
    33e0:	00000190 	.word	0x00000190

000033e4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    33e4:	1c03      	adds	r3, r0, #0
    33e6:	3308      	adds	r3, #8
    33e8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    33ea:	2201      	movs	r2, #1
    33ec:	4252      	negs	r2, r2
    33ee:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    33f0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    33f2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    33f4:	2300      	movs	r3, #0
    33f6:	6003      	str	r3, [r0, #0]
}
    33f8:	4770      	bx	lr
    33fa:	46c0      	nop			; (mov r8, r8)

000033fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    33fc:	2300      	movs	r3, #0
    33fe:	6103      	str	r3, [r0, #16]
}
    3400:	4770      	bx	lr
    3402:	46c0      	nop			; (mov r8, r8)

00003404 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    3404:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    3406:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    3408:	689a      	ldr	r2, [r3, #8]
    340a:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    340c:	689a      	ldr	r2, [r3, #8]
    340e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    3410:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3412:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    3414:	6803      	ldr	r3, [r0, #0]
    3416:	3301      	adds	r3, #1
    3418:	6003      	str	r3, [r0, #0]
}
    341a:	4770      	bx	lr

0000341c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    341c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    341e:	680c      	ldr	r4, [r1, #0]
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3420:	1c02      	adds	r2, r0, #0
    3422:	3208      	adds	r2, #8
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    3424:	1c63      	adds	r3, r4, #1
    3426:	d101      	bne.n	342c <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    3428:	6902      	ldr	r2, [r0, #16]
    342a:	e005      	b.n	3438 <vListInsert+0x1c>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    342c:	6853      	ldr	r3, [r2, #4]
    342e:	681d      	ldr	r5, [r3, #0]
    3430:	42ac      	cmp	r4, r5
    3432:	d301      	bcc.n	3438 <vListInsert+0x1c>
    3434:	1c1a      	adds	r2, r3, #0
    3436:	e7f9      	b.n	342c <vListInsert+0x10>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    3438:	6853      	ldr	r3, [r2, #4]
    343a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    343c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    343e:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    3440:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3442:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    3444:	6803      	ldr	r3, [r0, #0]
    3446:	3301      	adds	r3, #1
    3448:	6003      	str	r3, [r0, #0]
}
    344a:	bd30      	pop	{r4, r5, pc}

0000344c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    344c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    344e:	6842      	ldr	r2, [r0, #4]
    3450:	6881      	ldr	r1, [r0, #8]
    3452:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3454:	6882      	ldr	r2, [r0, #8]
    3456:	6841      	ldr	r1, [r0, #4]
    3458:	6051      	str	r1, [r2, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    345a:	685a      	ldr	r2, [r3, #4]
    345c:	4282      	cmp	r2, r0
    345e:	d101      	bne.n	3464 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    3460:	6892      	ldr	r2, [r2, #8]
    3462:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    3464:	2200      	movs	r2, #0
    3466:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    3468:	6818      	ldr	r0, [r3, #0]
    346a:	3801      	subs	r0, #1
    346c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
    346e:	4770      	bx	lr

00003470 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    3470:	4b04      	ldr	r3, [pc, #16]	; (3484 <prvTaskExitError+0x14>)
    3472:	447b      	add	r3, pc
    3474:	681b      	ldr	r3, [r3, #0]
    3476:	3301      	adds	r3, #1
    3478:	d001      	beq.n	347e <prvTaskExitError+0xe>
    347a:	b672      	cpsid	i
    347c:	e7fe      	b.n	347c <prvTaskExitError+0xc>
	portDISABLE_INTERRUPTS();
    347e:	b672      	cpsid	i
    3480:	e7fe      	b.n	3480 <prvTaskExitError+0x10>
    3482:	46c0      	nop			; (mov r8, r8)
    3484:	1fffcb9a 	.word	0x1fffcb9a

00003488 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    3488:	4a06      	ldr	r2, [pc, #24]	; (34a4 <pxCurrentTCBConst2>)
    348a:	6813      	ldr	r3, [r2, #0]
    348c:	6818      	ldr	r0, [r3, #0]
    348e:	3020      	adds	r0, #32
    3490:	f380 8809 	msr	PSP, r0
    3494:	2002      	movs	r0, #2
    3496:	f380 8814 	msr	CONTROL, r0
    349a:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    349c:	46ae      	mov	lr, r5
    349e:	b662      	cpsie	i
    34a0:	bd00      	pop	{pc}
    34a2:	46c0      	nop			; (mov r8, r8)

000034a4 <pxCurrentTCBConst2>:
    34a4:	2000161c 	.word	0x2000161c

000034a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    34a8:	b510      	push	{r4, lr}
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    34aa:	1f03      	subs	r3, r0, #4
    34ac:	2480      	movs	r4, #128	; 0x80
    34ae:	0464      	lsls	r4, r4, #17
    34b0:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    34b2:	3b04      	subs	r3, #4
    34b4:	6019      	str	r1, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    34b6:	3b04      	subs	r3, #4
    34b8:	4903      	ldr	r1, [pc, #12]	; (34c8 <pxPortInitialiseStack+0x20>)
    34ba:	4479      	add	r1, pc
    34bc:	6019      	str	r1, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    34be:	3b14      	subs	r3, #20
    34c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */

	return pxTopOfStack;
    34c2:	3840      	subs	r0, #64	; 0x40
}
    34c4:	bd10      	pop	{r4, pc}
    34c6:	46c0      	nop			; (mov r8, r8)
    34c8:	ffffffb3 	.word	0xffffffb3

000034cc <SVC_Handler>:

void vPortSVCHandler( void )
{
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    34cc:	4770      	bx	lr
    34ce:	46c0      	nop			; (mov r8, r8)

000034d0 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    34d0:	2280      	movs	r2, #128	; 0x80
    34d2:	0552      	lsls	r2, r2, #21
    34d4:	4b03      	ldr	r3, [pc, #12]	; (34e4 <vPortYield+0x14>)
    34d6:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    34d8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    34dc:	f3bf 8f6f 	isb	sy
}
    34e0:	4770      	bx	lr
    34e2:	46c0      	nop			; (mov r8, r8)
    34e4:	e000ed04 	.word	0xe000ed04

000034e8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
    34e8:	b672      	cpsid	i
    uxCriticalNesting++;
    34ea:	4b05      	ldr	r3, [pc, #20]	; (3500 <vPortEnterCritical+0x18>)
    34ec:	447b      	add	r3, pc
    34ee:	681a      	ldr	r2, [r3, #0]
    34f0:	3201      	adds	r2, #1
    34f2:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
    34f4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    34f8:	f3bf 8f6f 	isb	sy
}
    34fc:	4770      	bx	lr
    34fe:	46c0      	nop			; (mov r8, r8)
    3500:	1fffcb20 	.word	0x1fffcb20

00003504 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
    3504:	4b07      	ldr	r3, [pc, #28]	; (3524 <vPortExitCritical+0x20>)
    3506:	447b      	add	r3, pc
    3508:	681b      	ldr	r3, [r3, #0]
    350a:	2b00      	cmp	r3, #0
    350c:	d101      	bne.n	3512 <vPortExitCritical+0xe>
    350e:	b672      	cpsid	i
    3510:	e7fe      	b.n	3510 <vPortExitCritical+0xc>
    uxCriticalNesting--;
    3512:	3b01      	subs	r3, #1
    3514:	4a04      	ldr	r2, [pc, #16]	; (3528 <vPortExitCritical+0x24>)
    3516:	447a      	add	r2, pc
    3518:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    351a:	2b00      	cmp	r3, #0
    351c:	d100      	bne.n	3520 <vPortExitCritical+0x1c>
    {
        portENABLE_INTERRUPTS();
    351e:	b662      	cpsie	i
    }
}
    3520:	4770      	bx	lr
    3522:	46c0      	nop			; (mov r8, r8)
    3524:	1fffcb06 	.word	0x1fffcb06
    3528:	1fffcaf6 	.word	0x1fffcaf6

0000352c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    352c:	f3ef 8010 	mrs	r0, PRIMASK
    3530:	b672      	cpsid	i
    3532:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
    3534:	2000      	movs	r0, #0
    3536:	46c0      	nop			; (mov r8, r8)

00003538 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
    3538:	f380 8810 	msr	PRIMASK, r0
    353c:	4770      	bx	lr
    353e:	46c0      	nop			; (mov r8, r8)

00003540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    3540:	f3ef 8009 	mrs	r0, PSP
    3544:	4b0e      	ldr	r3, [pc, #56]	; (3580 <pxCurrentTCBConst>)
    3546:	681a      	ldr	r2, [r3, #0]
    3548:	3820      	subs	r0, #32
    354a:	6010      	str	r0, [r2, #0]
    354c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    354e:	4644      	mov	r4, r8
    3550:	464d      	mov	r5, r9
    3552:	4656      	mov	r6, sl
    3554:	465f      	mov	r7, fp
    3556:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    3558:	b508      	push	{r3, lr}
    355a:	b672      	cpsid	i
    355c:	f001 fc20 	bl	4da0 <vTaskSwitchContext>
    3560:	b662      	cpsie	i
    3562:	bc0c      	pop	{r2, r3}
    3564:	6811      	ldr	r1, [r2, #0]
    3566:	6808      	ldr	r0, [r1, #0]
    3568:	3010      	adds	r0, #16
    356a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    356c:	46a0      	mov	r8, r4
    356e:	46a9      	mov	r9, r5
    3570:	46b2      	mov	sl, r6
    3572:	46bb      	mov	fp, r7
    3574:	f380 8809 	msr	PSP, r0
    3578:	3820      	subs	r0, #32
    357a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    357c:	4718      	bx	r3
    357e:	46c0      	nop			; (mov r8, r8)

00003580 <pxCurrentTCBConst>:
    3580:	2000161c 	.word	0x2000161c

00003584 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    3584:	b530      	push	{r4, r5, lr}
    3586:	b083      	sub	sp, #12
    3588:	4c0a      	ldr	r4, [pc, #40]	; (35b4 <SysTick_Handler+0x30>)
    358a:	447c      	add	r4, pc
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    358c:	4b0a      	ldr	r3, [pc, #40]	; (35b8 <SysTick_Handler+0x34>)
    358e:	58e3      	ldr	r3, [r4, r3]
    3590:	4798      	blx	r3
    3592:	1c05      	adds	r5, r0, #0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    3594:	4b09      	ldr	r3, [pc, #36]	; (35bc <SysTick_Handler+0x38>)
    3596:	58e3      	ldr	r3, [r4, r3]
    3598:	4798      	blx	r3
    359a:	2800      	cmp	r0, #0
    359c:	d003      	beq.n	35a6 <SysTick_Handler+0x22>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    359e:	2280      	movs	r2, #128	; 0x80
    35a0:	0552      	lsls	r2, r2, #21
    35a2:	4b07      	ldr	r3, [pc, #28]	; (35c0 <SysTick_Handler+0x3c>)
    35a4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    35a6:	1c28      	adds	r0, r5, #0
    35a8:	4b06      	ldr	r3, [pc, #24]	; (35c4 <SysTick_Handler+0x40>)
    35aa:	58e3      	ldr	r3, [r4, r3]
    35ac:	4798      	blx	r3
}
    35ae:	b003      	add	sp, #12
    35b0:	bd30      	pop	{r4, r5, pc}
    35b2:	46c0      	nop			; (mov r8, r8)
    35b4:	0000487a 	.word	0x0000487a
    35b8:	00000274 	.word	0x00000274
    35bc:	00000244 	.word	0x00000244
    35c0:	e000ed04 	.word	0xe000ed04
    35c4:	00000134 	.word	0x00000134

000035c8 <vPortSetupTimerInterrupt>:
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
    35c8:	2200      	movs	r2, #0
    35ca:	4b04      	ldr	r3, [pc, #16]	; (35dc <vPortSetupTimerInterrupt+0x14>)
    35cc:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    35ce:	4a04      	ldr	r2, [pc, #16]	; (35e0 <vPortSetupTimerInterrupt+0x18>)
    35d0:	4b04      	ldr	r3, [pc, #16]	; (35e4 <vPortSetupTimerInterrupt+0x1c>)
    35d2:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    35d4:	2207      	movs	r2, #7
    35d6:	4b04      	ldr	r3, [pc, #16]	; (35e8 <vPortSetupTimerInterrupt+0x20>)
    35d8:	601a      	str	r2, [r3, #0]
}
    35da:	4770      	bx	lr
    35dc:	e000e018 	.word	0xe000e018
    35e0:	0000bb7f 	.word	0x0000bb7f
    35e4:	e000e014 	.word	0xe000e014
    35e8:	e000e010 	.word	0xe000e010

000035ec <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    35ec:	b500      	push	{lr}
    35ee:	b083      	sub	sp, #12
    35f0:	4a0c      	ldr	r2, [pc, #48]	; (3624 <xPortStartScheduler+0x38>)
    35f2:	447a      	add	r2, pc
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    35f4:	4b0c      	ldr	r3, [pc, #48]	; (3628 <xPortStartScheduler+0x3c>)
    35f6:	6818      	ldr	r0, [r3, #0]
    35f8:	21ff      	movs	r1, #255	; 0xff
    35fa:	0409      	lsls	r1, r1, #16
    35fc:	4301      	orrs	r1, r0
    35fe:	6019      	str	r1, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    3600:	6818      	ldr	r0, [r3, #0]
    3602:	21ff      	movs	r1, #255	; 0xff
    3604:	0609      	lsls	r1, r1, #24
    3606:	4301      	orrs	r1, r0
    3608:	6019      	str	r1, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    360a:	4b08      	ldr	r3, [pc, #32]	; (362c <xPortStartScheduler+0x40>)
    360c:	58d3      	ldr	r3, [r2, r3]
    360e:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    3610:	2200      	movs	r2, #0
    3612:	4b07      	ldr	r3, [pc, #28]	; (3630 <xPortStartScheduler+0x44>)
    3614:	447b      	add	r3, pc
    3616:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    3618:	4b06      	ldr	r3, [pc, #24]	; (3634 <xPortStartScheduler+0x48>)
    361a:	447b      	add	r3, pc
    361c:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
    361e:	4b06      	ldr	r3, [pc, #24]	; (3638 <xPortStartScheduler+0x4c>)
    3620:	447b      	add	r3, pc
    3622:	4798      	blx	r3
    3624:	00004812 	.word	0x00004812
    3628:	e000ed20 	.word	0xe000ed20
    362c:	0000007c 	.word	0x0000007c
    3630:	1fffc9f8 	.word	0x1fffc9f8
    3634:	fffffe6b 	.word	0xfffffe6b
    3638:	fffffe4d 	.word	0xfffffe4d

0000363c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    363c:	b570      	push	{r4, r5, r6, lr}
    363e:	b082      	sub	sp, #8
    3640:	1c05      	adds	r5, r0, #0
    3642:	4c18      	ldr	r4, [pc, #96]	; (36a4 <pvPortMalloc+0x68>)
    3644:	447c      	add	r4, pc
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    3646:	0743      	lsls	r3, r0, #29
    3648:	d002      	beq.n	3650 <pvPortMalloc+0x14>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    364a:	2307      	movs	r3, #7
    364c:	439d      	bics	r5, r3
    364e:	3508      	adds	r5, #8
		}
	#endif

	vTaskSuspendAll();
    3650:	4b15      	ldr	r3, [pc, #84]	; (36a8 <pvPortMalloc+0x6c>)
    3652:	58e3      	ldr	r3, [r4, r3]
    3654:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    3656:	4b15      	ldr	r3, [pc, #84]	; (36ac <pvPortMalloc+0x70>)
    3658:	447b      	add	r3, pc
    365a:	681b      	ldr	r3, [r3, #0]
    365c:	2b00      	cmp	r3, #0
    365e:	d106      	bne.n	366e <pvPortMalloc+0x32>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    3660:	4b13      	ldr	r3, [pc, #76]	; (36b0 <pvPortMalloc+0x74>)
    3662:	447b      	add	r3, pc
    3664:	1c1a      	adds	r2, r3, #0
    3666:	320c      	adds	r2, #12
    3668:	2107      	movs	r1, #7
    366a:	438a      	bics	r2, r1
    366c:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    366e:	4b11      	ldr	r3, [pc, #68]	; (36b4 <pvPortMalloc+0x78>)
    3670:	447b      	add	r3, pc
    3672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3674:	18ed      	adds	r5, r5, r3
    3676:	4a10      	ldr	r2, [pc, #64]	; (36b8 <pvPortMalloc+0x7c>)
    3678:	4295      	cmp	r5, r2
    367a:	d809      	bhi.n	3690 <pvPortMalloc+0x54>
    367c:	42ab      	cmp	r3, r5
    367e:	d209      	bcs.n	3694 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    3680:	4a0e      	ldr	r2, [pc, #56]	; (36bc <pvPortMalloc+0x80>)
    3682:	447a      	add	r2, pc
    3684:	6816      	ldr	r6, [r2, #0]
    3686:	18f6      	adds	r6, r6, r3
			xNextFreeByte += xWantedSize;
    3688:	4b0d      	ldr	r3, [pc, #52]	; (36c0 <pvPortMalloc+0x84>)
    368a:	447b      	add	r3, pc
    368c:	625d      	str	r5, [r3, #36]	; 0x24
    368e:	e002      	b.n	3696 <pvPortMalloc+0x5a>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    3690:	2600      	movs	r6, #0
    3692:	e000      	b.n	3696 <pvPortMalloc+0x5a>
    3694:	2600      	movs	r6, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    3696:	4b0b      	ldr	r3, [pc, #44]	; (36c4 <pvPortMalloc+0x88>)
    3698:	58e3      	ldr	r3, [r4, r3]
    369a:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    369c:	1c30      	adds	r0, r6, #0
    369e:	b002      	add	sp, #8
    36a0:	bd70      	pop	{r4, r5, r6, pc}
    36a2:	46c0      	nop			; (mov r8, r8)
    36a4:	000047c0 	.word	0x000047c0
    36a8:	00000138 	.word	0x00000138
    36ac:	1fffcf20 	.word	0x1fffcf20
    36b0:	1fffcf16 	.word	0x1fffcf16
    36b4:	1fffde88 	.word	0x1fffde88
    36b8:	00000f97 	.word	0x00000f97
    36bc:	1fffcef6 	.word	0x1fffcef6
    36c0:	1fffde6e 	.word	0x1fffde6e
    36c4:	00000200 	.word	0x00000200

000036c8 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    36c8:	2800      	cmp	r0, #0
    36ca:	d001      	beq.n	36d0 <vPortFree+0x8>
    36cc:	b672      	cpsid	i
    36ce:	e7fe      	b.n	36ce <vPortFree+0x6>
}
    36d0:	4770      	bx	lr
    36d2:	46c0      	nop			; (mov r8, r8)

000036d4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    36d4:	b570      	push	{r4, r5, r6, lr}
    36d6:	b082      	sub	sp, #8
    36d8:	1c04      	adds	r4, r0, #0
    36da:	1c16      	adds	r6, r2, #0
    36dc:	4b1e      	ldr	r3, [pc, #120]	; (3758 <prvCopyDataToQueue+0x84>)
    36de:	447b      	add	r3, pc
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    36e0:	6c02      	ldr	r2, [r0, #64]	; 0x40
    36e2:	2a00      	cmp	r2, #0
    36e4:	d109      	bne.n	36fa <prvCopyDataToQueue+0x26>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    36e6:	6800      	ldr	r0, [r0, #0]
    36e8:	2800      	cmp	r0, #0
    36ea:	d12f      	bne.n	374c <prvCopyDataToQueue+0x78>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    36ec:	6860      	ldr	r0, [r4, #4]
    36ee:	4a1b      	ldr	r2, [pc, #108]	; (375c <prvCopyDataToQueue+0x88>)
    36f0:	589a      	ldr	r2, [r3, r2]
    36f2:	4790      	blx	r2
				pxQueue->pxMutexHolder = NULL;
    36f4:	2300      	movs	r3, #0
    36f6:	6063      	str	r3, [r4, #4]
    36f8:	e028      	b.n	374c <prvCopyDataToQueue+0x78>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    36fa:	2e00      	cmp	r6, #0
    36fc:	d10e      	bne.n	371c <prvCopyDataToQueue+0x48>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    36fe:	6880      	ldr	r0, [r0, #8]
    3700:	4d17      	ldr	r5, [pc, #92]	; (3760 <prvCopyDataToQueue+0x8c>)
    3702:	595d      	ldr	r5, [r3, r5]
    3704:	9501      	str	r5, [sp, #4]
    3706:	47a8      	blx	r5
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3708:	68a1      	ldr	r1, [r4, #8]
    370a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    370c:	188b      	adds	r3, r1, r2
    370e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    3710:	6860      	ldr	r0, [r4, #4]
    3712:	4283      	cmp	r3, r0
    3714:	d31a      	bcc.n	374c <prvCopyDataToQueue+0x78>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    3716:	6821      	ldr	r1, [r4, #0]
    3718:	60a1      	str	r1, [r4, #8]
    371a:	e017      	b.n	374c <prvCopyDataToQueue+0x78>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    371c:	68c0      	ldr	r0, [r0, #12]
    371e:	4d10      	ldr	r5, [pc, #64]	; (3760 <prvCopyDataToQueue+0x8c>)
    3720:	595d      	ldr	r5, [r3, r5]
    3722:	9501      	str	r5, [sp, #4]
    3724:	47a8      	blx	r5
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    3726:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3728:	425a      	negs	r2, r3
    372a:	68e0      	ldr	r0, [r4, #12]
    372c:	1883      	adds	r3, r0, r2
    372e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    3730:	6821      	ldr	r1, [r4, #0]
    3732:	428b      	cmp	r3, r1
    3734:	d202      	bcs.n	373c <prvCopyDataToQueue+0x68>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    3736:	6863      	ldr	r3, [r4, #4]
    3738:	189a      	adds	r2, r3, r2
    373a:	60e2      	str	r2, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    373c:	2e02      	cmp	r6, #2
    373e:	d105      	bne.n	374c <prvCopyDataToQueue+0x78>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    3740:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3742:	2b00      	cmp	r3, #0
    3744:	d002      	beq.n	374c <prvCopyDataToQueue+0x78>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    3746:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3748:	3b01      	subs	r3, #1
    374a:	63a3      	str	r3, [r4, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    374c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    374e:	3301      	adds	r3, #1
    3750:	63a3      	str	r3, [r4, #56]	; 0x38
}
    3752:	b002      	add	sp, #8
    3754:	bd70      	pop	{r4, r5, r6, pc}
    3756:	46c0      	nop			; (mov r8, r8)
    3758:	00004726 	.word	0x00004726
    375c:	00000150 	.word	0x00000150
    3760:	00000068 	.word	0x00000068

00003764 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    3764:	b5f0      	push	{r4, r5, r6, r7, lr}
    3766:	465f      	mov	r7, fp
    3768:	4656      	mov	r6, sl
    376a:	464d      	mov	r5, r9
    376c:	b4e0      	push	{r5, r6, r7}
    376e:	b084      	sub	sp, #16
    3770:	9003      	str	r0, [sp, #12]
    3772:	4689      	mov	r9, r1
    3774:	4d2d      	ldr	r5, [pc, #180]	; (382c <prvNotifyQueueSetContainer+0xc8>)
    3776:	447d      	add	r5, pc
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    3778:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    377a:	2c00      	cmp	r4, #0
    377c:	d101      	bne.n	3782 <prvNotifyQueueSetContainer+0x1e>
    377e:	b672      	cpsid	i
    3780:	e7fe      	b.n	3780 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    3782:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3784:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3786:	429a      	cmp	r2, r3
    3788:	d301      	bcc.n	378e <prvNotifyQueueSetContainer+0x2a>
    378a:	b672      	cpsid	i
    378c:	e7fe      	b.n	378c <prvNotifyQueueSetContainer+0x28>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    378e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    3790:	2000      	movs	r0, #0
		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    3792:	4293      	cmp	r3, r2
    3794:	d943      	bls.n	381e <prvNotifyQueueSetContainer+0xba>
		{
			traceQUEUE_SEND( pxQueueSetContainer );
    3796:	1c20      	adds	r0, r4, #0
    3798:	4b25      	ldr	r3, [pc, #148]	; (3830 <prvNotifyQueueSetContainer+0xcc>)
    379a:	58ee      	ldr	r6, [r5, r3]
    379c:	47b0      	blx	r6
    379e:	4b25      	ldr	r3, [pc, #148]	; (3834 <prvNotifyQueueSetContainer+0xd0>)
    37a0:	58eb      	ldr	r3, [r5, r3]
    37a2:	9300      	str	r3, [sp, #0]
    37a4:	5c1b      	ldrb	r3, [r3, r0]
    37a6:	3320      	adds	r3, #32
    37a8:	b2db      	uxtb	r3, r3
    37aa:	469b      	mov	fp, r3
    37ac:	1c20      	adds	r0, r4, #0
    37ae:	47b0      	blx	r6
    37b0:	9a00      	ldr	r2, [sp, #0]
    37b2:	5c17      	ldrb	r7, [r2, r0]
    37b4:	1c20      	adds	r0, r4, #0
    37b6:	4b20      	ldr	r3, [pc, #128]	; (3838 <prvNotifyQueueSetContainer+0xd4>)
    37b8:	58eb      	ldr	r3, [r5, r3]
    37ba:	9301      	str	r3, [sp, #4]
    37bc:	4798      	blx	r3
    37be:	1c02      	adds	r2, r0, #0
    37c0:	4658      	mov	r0, fp
    37c2:	1c39      	adds	r1, r7, #0
    37c4:	4b1d      	ldr	r3, [pc, #116]	; (383c <prvNotifyQueueSetContainer+0xd8>)
    37c6:	58eb      	ldr	r3, [r5, r3]
    37c8:	4798      	blx	r3
    37ca:	1c20      	adds	r0, r4, #0
    37cc:	47b0      	blx	r6
    37ce:	9b00      	ldr	r3, [sp, #0]
    37d0:	5c18      	ldrb	r0, [r3, r0]
    37d2:	4682      	mov	sl, r0
    37d4:	1c20      	adds	r0, r4, #0
    37d6:	9a01      	ldr	r2, [sp, #4]
    37d8:	4790      	blx	r2
    37da:	1c07      	adds	r7, r0, #0
    37dc:	1c20      	adds	r0, r4, #0
    37de:	47b0      	blx	r6
    37e0:	9a00      	ldr	r2, [sp, #0]
    37e2:	5c13      	ldrb	r3, [r2, r0]
    37e4:	2b02      	cmp	r3, #2
    37e6:	d003      	beq.n	37f0 <prvNotifyQueueSetContainer+0x8c>
    37e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    37ea:	3301      	adds	r3, #1
    37ec:	b2da      	uxtb	r2, r3
    37ee:	e000      	b.n	37f2 <prvNotifyQueueSetContainer+0x8e>
    37f0:	2200      	movs	r2, #0
    37f2:	4650      	mov	r0, sl
    37f4:	1c39      	adds	r1, r7, #0
    37f6:	4b12      	ldr	r3, [pc, #72]	; (3840 <prvNotifyQueueSetContainer+0xdc>)
    37f8:	58eb      	ldr	r3, [r5, r3]
    37fa:	4798      	blx	r3
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    37fc:	1c20      	adds	r0, r4, #0
    37fe:	a903      	add	r1, sp, #12
    3800:	464a      	mov	r2, r9
    3802:	4b10      	ldr	r3, [pc, #64]	; (3844 <prvNotifyQueueSetContainer+0xe0>)
    3804:	447b      	add	r3, pc
    3806:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    3808:	2000      	movs	r0, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    380a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    380c:	2b00      	cmp	r3, #0
    380e:	d006      	beq.n	381e <prvNotifyQueueSetContainer+0xba>
			{
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    3810:	1c20      	adds	r0, r4, #0
    3812:	3024      	adds	r0, #36	; 0x24
    3814:	4b0c      	ldr	r3, [pc, #48]	; (3848 <prvNotifyQueueSetContainer+0xe4>)
    3816:	58eb      	ldr	r3, [r5, r3]
    3818:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    381a:	1e43      	subs	r3, r0, #1
    381c:	4198      	sbcs	r0, r3
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    381e:	b004      	add	sp, #16
    3820:	bc1c      	pop	{r2, r3, r4}
    3822:	4691      	mov	r9, r2
    3824:	469a      	mov	sl, r3
    3826:	46a3      	mov	fp, r4
    3828:	bdf0      	pop	{r4, r5, r6, r7, pc}
    382a:	46c0      	nop			; (mov r8, r8)
    382c:	0000468e 	.word	0x0000468e
    3830:	0000019c 	.word	0x0000019c
    3834:	000002a8 	.word	0x000002a8
    3838:	00000070 	.word	0x00000070
    383c:	0000024c 	.word	0x0000024c
    3840:	000002a4 	.word	0x000002a4
    3844:	fffffecd 	.word	0xfffffecd
    3848:	00000110 	.word	0x00000110

0000384c <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    384c:	b570      	push	{r4, r5, r6, lr}
    384e:	b082      	sub	sp, #8
    3850:	4b0a      	ldr	r3, [pc, #40]	; (387c <prvCopyDataFromQueue+0x30>)
    3852:	447b      	add	r3, pc
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    3854:	6805      	ldr	r5, [r0, #0]
    3856:	2d00      	cmp	r5, #0
    3858:	d00d      	beq.n	3876 <prvCopyDataFromQueue+0x2a>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    385a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    385c:	68c6      	ldr	r6, [r0, #12]
    385e:	18b4      	adds	r4, r6, r2
    3860:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    3862:	6846      	ldr	r6, [r0, #4]
    3864:	42b4      	cmp	r4, r6
    3866:	d300      	bcc.n	386a <prvCopyDataFromQueue+0x1e>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    3868:	60c5      	str	r5, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    386a:	68c4      	ldr	r4, [r0, #12]
    386c:	1c08      	adds	r0, r1, #0
    386e:	1c21      	adds	r1, r4, #0
    3870:	4c03      	ldr	r4, [pc, #12]	; (3880 <prvCopyDataFromQueue+0x34>)
    3872:	591c      	ldr	r4, [r3, r4]
    3874:	47a0      	blx	r4
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    3876:	b002      	add	sp, #8
    3878:	bd70      	pop	{r4, r5, r6, pc}
    387a:	46c0      	nop			; (mov r8, r8)
    387c:	000045b2 	.word	0x000045b2
    3880:	00000068 	.word	0x00000068

00003884 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    3884:	b5f0      	push	{r4, r5, r6, r7, lr}
    3886:	b083      	sub	sp, #12
    3888:	1c04      	adds	r4, r0, #0
    388a:	4d2b      	ldr	r5, [pc, #172]	; (3938 <prvUnlockQueue+0xb4>)
    388c:	447d      	add	r5, pc

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    388e:	4b2b      	ldr	r3, [pc, #172]	; (393c <prvUnlockQueue+0xb8>)
    3890:	58eb      	ldr	r3, [r5, r3]
    3892:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3894:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3896:	2b00      	cmp	r3, #0
    3898:	dd21      	ble.n	38de <prvUnlockQueue+0x5a>
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    389a:	1c27      	adds	r7, r4, #0
    389c:	3724      	adds	r7, #36	; 0x24
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    389e:	4e28      	ldr	r6, [pc, #160]	; (3940 <prvUnlockQueue+0xbc>)
    38a0:	447e      	add	r6, pc
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    38a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    38a4:	2b00      	cmp	r3, #0
    38a6:	d008      	beq.n	38ba <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    38a8:	1c20      	adds	r0, r4, #0
    38aa:	2100      	movs	r1, #0
    38ac:	47b0      	blx	r6
    38ae:	2801      	cmp	r0, #1
    38b0:	d10f      	bne.n	38d2 <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    38b2:	4b24      	ldr	r3, [pc, #144]	; (3944 <prvUnlockQueue+0xc0>)
    38b4:	58eb      	ldr	r3, [r5, r3]
    38b6:	4798      	blx	r3
    38b8:	e00b      	b.n	38d2 <prvUnlockQueue+0x4e>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    38ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    38bc:	2b00      	cmp	r3, #0
    38be:	d00e      	beq.n	38de <prvUnlockQueue+0x5a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    38c0:	1c38      	adds	r0, r7, #0
    38c2:	4b21      	ldr	r3, [pc, #132]	; (3948 <prvUnlockQueue+0xc4>)
    38c4:	58eb      	ldr	r3, [r5, r3]
    38c6:	4798      	blx	r3
    38c8:	2800      	cmp	r0, #0
    38ca:	d002      	beq.n	38d2 <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    38cc:	4b1d      	ldr	r3, [pc, #116]	; (3944 <prvUnlockQueue+0xc0>)
    38ce:	58eb      	ldr	r3, [r5, r3]
    38d0:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    38d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    38d4:	3b01      	subs	r3, #1
    38d6:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    38d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    38da:	2b00      	cmp	r3, #0
    38dc:	dce1      	bgt.n	38a2 <prvUnlockQueue+0x1e>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    38de:	2301      	movs	r3, #1
    38e0:	425b      	negs	r3, r3
    38e2:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    38e4:	4b19      	ldr	r3, [pc, #100]	; (394c <prvUnlockQueue+0xc8>)
    38e6:	58eb      	ldr	r3, [r5, r3]
    38e8:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    38ea:	4b14      	ldr	r3, [pc, #80]	; (393c <prvUnlockQueue+0xb8>)
    38ec:	58eb      	ldr	r3, [r5, r3]
    38ee:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    38f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    38f2:	2b00      	cmp	r3, #0
    38f4:	dd17      	ble.n	3926 <prvUnlockQueue+0xa2>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    38f6:	6923      	ldr	r3, [r4, #16]
    38f8:	2b00      	cmp	r3, #0
    38fa:	d014      	beq.n	3926 <prvUnlockQueue+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    38fc:	1c27      	adds	r7, r4, #0
    38fe:	3710      	adds	r7, #16
    3900:	4b11      	ldr	r3, [pc, #68]	; (3948 <prvUnlockQueue+0xc4>)
    3902:	58ee      	ldr	r6, [r5, r3]
    3904:	e002      	b.n	390c <prvUnlockQueue+0x88>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3906:	6923      	ldr	r3, [r4, #16]
    3908:	2b00      	cmp	r3, #0
    390a:	d00c      	beq.n	3926 <prvUnlockQueue+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    390c:	1c38      	adds	r0, r7, #0
    390e:	47b0      	blx	r6
    3910:	2800      	cmp	r0, #0
    3912:	d002      	beq.n	391a <prvUnlockQueue+0x96>
				{
					vTaskMissedYield();
    3914:	4b0b      	ldr	r3, [pc, #44]	; (3944 <prvUnlockQueue+0xc0>)
    3916:	58eb      	ldr	r3, [r5, r3]
    3918:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    391a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    391c:	3b01      	subs	r3, #1
    391e:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3920:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3922:	2b00      	cmp	r3, #0
    3924:	dcef      	bgt.n	3906 <prvUnlockQueue+0x82>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    3926:	2301      	movs	r3, #1
    3928:	425b      	negs	r3, r3
    392a:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    392c:	4b07      	ldr	r3, [pc, #28]	; (394c <prvUnlockQueue+0xc8>)
    392e:	58eb      	ldr	r3, [r5, r3]
    3930:	4798      	blx	r3
}
    3932:	b003      	add	sp, #12
    3934:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3936:	46c0      	nop			; (mov r8, r8)
    3938:	00004578 	.word	0x00004578
    393c:	000002b4 	.word	0x000002b4
    3940:	fffffec1 	.word	0xfffffec1
    3944:	00000238 	.word	0x00000238
    3948:	00000110 	.word	0x00000110
    394c:	00000014 	.word	0x00000014

00003950 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    3950:	b570      	push	{r4, r5, r6, lr}
    3952:	b082      	sub	sp, #8
    3954:	1c04      	adds	r4, r0, #0
    3956:	1c0e      	adds	r6, r1, #0
    3958:	4d1b      	ldr	r5, [pc, #108]	; (39c8 <xQueueGenericReset+0x78>)
    395a:	447d      	add	r5, pc
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    395c:	2800      	cmp	r0, #0
    395e:	d101      	bne.n	3964 <xQueueGenericReset+0x14>
    3960:	b672      	cpsid	i
    3962:	e7fe      	b.n	3962 <xQueueGenericReset+0x12>

	taskENTER_CRITICAL();
    3964:	4b19      	ldr	r3, [pc, #100]	; (39cc <xQueueGenericReset+0x7c>)
    3966:	58eb      	ldr	r3, [r5, r3]
    3968:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    396a:	6823      	ldr	r3, [r4, #0]
    396c:	6c22      	ldr	r2, [r4, #64]	; 0x40
    396e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3970:	4350      	muls	r0, r2
    3972:	1819      	adds	r1, r3, r0
    3974:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    3976:	2100      	movs	r1, #0
    3978:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    397a:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    397c:	1a82      	subs	r2, r0, r2
    397e:	189b      	adds	r3, r3, r2
    3980:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    3982:	2301      	movs	r3, #1
    3984:	425b      	negs	r3, r3
    3986:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    3988:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
    398a:	2e00      	cmp	r6, #0
    398c:	d10d      	bne.n	39aa <xQueueGenericReset+0x5a>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    398e:	6921      	ldr	r1, [r4, #16]
    3990:	2900      	cmp	r1, #0
    3992:	d012      	beq.n	39ba <xQueueGenericReset+0x6a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    3994:	1c20      	adds	r0, r4, #0
    3996:	3010      	adds	r0, #16
    3998:	4b0d      	ldr	r3, [pc, #52]	; (39d0 <xQueueGenericReset+0x80>)
    399a:	58eb      	ldr	r3, [r5, r3]
    399c:	4798      	blx	r3
    399e:	2801      	cmp	r0, #1
    39a0:	d10b      	bne.n	39ba <xQueueGenericReset+0x6a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    39a2:	4b0c      	ldr	r3, [pc, #48]	; (39d4 <xQueueGenericReset+0x84>)
    39a4:	58eb      	ldr	r3, [r5, r3]
    39a6:	4798      	blx	r3
    39a8:	e007      	b.n	39ba <xQueueGenericReset+0x6a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    39aa:	1c20      	adds	r0, r4, #0
    39ac:	3010      	adds	r0, #16
    39ae:	4b0a      	ldr	r3, [pc, #40]	; (39d8 <xQueueGenericReset+0x88>)
    39b0:	58ee      	ldr	r6, [r5, r3]
    39b2:	47b0      	blx	r6
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    39b4:	1c20      	adds	r0, r4, #0
    39b6:	3024      	adds	r0, #36	; 0x24
    39b8:	47b0      	blx	r6
		}
	}
	taskEXIT_CRITICAL();
    39ba:	4b08      	ldr	r3, [pc, #32]	; (39dc <xQueueGenericReset+0x8c>)
    39bc:	58eb      	ldr	r3, [r5, r3]
    39be:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    39c0:	2001      	movs	r0, #1
    39c2:	b002      	add	sp, #8
    39c4:	bd70      	pop	{r4, r5, r6, pc}
    39c6:	46c0      	nop			; (mov r8, r8)
    39c8:	000044aa 	.word	0x000044aa
    39cc:	000002b4 	.word	0x000002b4
    39d0:	00000110 	.word	0x00000110
    39d4:	00000194 	.word	0x00000194
    39d8:	000000f8 	.word	0x000000f8
    39dc:	00000014 	.word	0x00000014

000039e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    39e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    39e2:	4657      	mov	r7, sl
    39e4:	464e      	mov	r6, r9
    39e6:	4645      	mov	r5, r8
    39e8:	b4e0      	push	{r5, r6, r7}
    39ea:	b082      	sub	sp, #8
    39ec:	1c05      	adds	r5, r0, #0
    39ee:	4688      	mov	r8, r1
    39f0:	1c16      	adds	r6, r2, #0
    39f2:	4f32      	ldr	r7, [pc, #200]	; (3abc <xQueueGenericCreate+0xdc>)
    39f4:	447f      	add	r7, pc
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
    39f6:	2800      	cmp	r0, #0
    39f8:	d01e      	beq.n	3a38 <xQueueGenericCreate+0x58>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    39fa:	2058      	movs	r0, #88	; 0x58
    39fc:	4b30      	ldr	r3, [pc, #192]	; (3ac0 <xQueueGenericCreate+0xe0>)
    39fe:	58fb      	ldr	r3, [r7, r3]
    3a00:	4798      	blx	r3
    3a02:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    3a04:	d018      	beq.n	3a38 <xQueueGenericCreate+0x58>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3a06:	4640      	mov	r0, r8
    3a08:	4368      	muls	r0, r5
    3a0a:	3001      	adds	r0, #1

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
    3a0c:	4b2c      	ldr	r3, [pc, #176]	; (3ac0 <xQueueGenericCreate+0xe0>)
    3a0e:	58fb      	ldr	r3, [r7, r3]
    3a10:	4798      	blx	r3
    3a12:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
    3a14:	2800      	cmp	r0, #0
    3a16:	d111      	bne.n	3a3c <xQueueGenericCreate+0x5c>
				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
    3a18:	4b2a      	ldr	r3, [pc, #168]	; (3ac4 <xQueueGenericCreate+0xe4>)
    3a1a:	58fb      	ldr	r3, [r7, r3]
    3a1c:	5d99      	ldrb	r1, [r3, r6]
    3a1e:	1c08      	adds	r0, r1, #0
    3a20:	3040      	adds	r0, #64	; 0x40
    3a22:	b2c0      	uxtb	r0, r0
    3a24:	2200      	movs	r2, #0
    3a26:	4b28      	ldr	r3, [pc, #160]	; (3ac8 <xQueueGenericCreate+0xe8>)
    3a28:	58fb      	ldr	r3, [r7, r3]
    3a2a:	4798      	blx	r3
				vPortFree( pxNewQueue );
    3a2c:	1c20      	adds	r0, r4, #0
    3a2e:	4b27      	ldr	r3, [pc, #156]	; (3acc <xQueueGenericCreate+0xec>)
    3a30:	58fb      	ldr	r3, [r7, r3]
    3a32:	4798      	blx	r3
    3a34:	e000      	b.n	3a38 <xQueueGenericCreate+0x58>
    3a36:	e7fe      	b.n	3a36 <xQueueGenericCreate+0x56>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    3a38:	b672      	cpsid	i
    3a3a:	e7fc      	b.n	3a36 <xQueueGenericCreate+0x56>
			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    3a3c:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    3a3e:	4643      	mov	r3, r8
    3a40:	6423      	str	r3, [r4, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    3a42:	1c20      	adds	r0, r4, #0
    3a44:	2101      	movs	r1, #1
    3a46:	4b22      	ldr	r3, [pc, #136]	; (3ad0 <xQueueGenericCreate+0xf0>)
    3a48:	58fb      	ldr	r3, [r7, r3]
    3a4a:	4798      	blx	r3

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
    3a4c:	2350      	movs	r3, #80	; 0x50
    3a4e:	54e6      	strb	r6, [r4, r3]
				}
				#endif /* configUSE_TRACE_FACILITY */

				#if( configUSE_QUEUE_SETS == 1 )
				{
					pxNewQueue->pxQueueSetContainer = NULL;
    3a50:	2300      	movs	r3, #0
    3a52:	6563      	str	r3, [r4, #84]	; 0x54
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
    3a54:	1c20      	adds	r0, r4, #0
    3a56:	4b1f      	ldr	r3, [pc, #124]	; (3ad4 <xQueueGenericCreate+0xf4>)
    3a58:	58fe      	ldr	r6, [r7, r3]
    3a5a:	47b0      	blx	r6
    3a5c:	4b19      	ldr	r3, [pc, #100]	; (3ac4 <xQueueGenericCreate+0xe4>)
    3a5e:	58fd      	ldr	r5, [r7, r3]
    3a60:	5c28      	ldrb	r0, [r5, r0]
    3a62:	4b1d      	ldr	r3, [pc, #116]	; (3ad8 <xQueueGenericCreate+0xf8>)
    3a64:	58fb      	ldr	r3, [r7, r3]
    3a66:	4798      	blx	r3
    3a68:	64e0      	str	r0, [r4, #76]	; 0x4c
    3a6a:	1c20      	adds	r0, r4, #0
    3a6c:	47b0      	blx	r6
    3a6e:	5c2b      	ldrb	r3, [r5, r0]
    3a70:	3318      	adds	r3, #24
    3a72:	b2db      	uxtb	r3, r3
    3a74:	469a      	mov	sl, r3
    3a76:	1c20      	adds	r0, r4, #0
    3a78:	47b0      	blx	r6
    3a7a:	5c28      	ldrb	r0, [r5, r0]
    3a7c:	4681      	mov	r9, r0
    3a7e:	1c20      	adds	r0, r4, #0
    3a80:	4b16      	ldr	r3, [pc, #88]	; (3adc <xQueueGenericCreate+0xfc>)
    3a82:	58fb      	ldr	r3, [r7, r3]
    3a84:	9300      	str	r3, [sp, #0]
    3a86:	4798      	blx	r3
    3a88:	1c02      	adds	r2, r0, #0
    3a8a:	4650      	mov	r0, sl
    3a8c:	4649      	mov	r1, r9
    3a8e:	4b0e      	ldr	r3, [pc, #56]	; (3ac8 <xQueueGenericCreate+0xe8>)
    3a90:	58fb      	ldr	r3, [r7, r3]
    3a92:	4798      	blx	r3
    3a94:	1c20      	adds	r0, r4, #0
    3a96:	47b0      	blx	r6
    3a98:	5c2d      	ldrb	r5, [r5, r0]
    3a9a:	1c20      	adds	r0, r4, #0
    3a9c:	9b00      	ldr	r3, [sp, #0]
    3a9e:	4798      	blx	r3
    3aa0:	1c01      	adds	r1, r0, #0
    3aa2:	1c28      	adds	r0, r5, #0
    3aa4:	2200      	movs	r2, #0
    3aa6:	4b0e      	ldr	r3, [pc, #56]	; (3ae0 <xQueueGenericCreate+0x100>)
    3aa8:	58fb      	ldr	r3, [r7, r3]
    3aaa:	4798      	blx	r3
	}

	configASSERT( xReturn );

	return xReturn;
}
    3aac:	1c20      	adds	r0, r4, #0
    3aae:	b002      	add	sp, #8
    3ab0:	bc1c      	pop	{r2, r3, r4}
    3ab2:	4690      	mov	r8, r2
    3ab4:	4699      	mov	r9, r3
    3ab6:	46a2      	mov	sl, r4
    3ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3aba:	46c0      	nop			; (mov r8, r8)
    3abc:	00004410 	.word	0x00004410
    3ac0:	000000e0 	.word	0x000000e0
    3ac4:	000002a8 	.word	0x000002a8
    3ac8:	0000024c 	.word	0x0000024c
    3acc:	0000008c 	.word	0x0000008c
    3ad0:	0000025c 	.word	0x0000025c
    3ad4:	0000019c 	.word	0x0000019c
    3ad8:	000002bc 	.word	0x000002bc
    3adc:	00000070 	.word	0x00000070
    3ae0:	000002a4 	.word	0x000002a4

00003ae4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    3ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ae6:	465f      	mov	r7, fp
    3ae8:	4656      	mov	r6, sl
    3aea:	464d      	mov	r5, r9
    3aec:	4644      	mov	r4, r8
    3aee:	b4f0      	push	{r4, r5, r6, r7}
    3af0:	b089      	sub	sp, #36	; 0x24
    3af2:	1c05      	adds	r5, r0, #0
    3af4:	4688      	mov	r8, r1
    3af6:	9205      	str	r2, [sp, #20]
    3af8:	1c1e      	adds	r6, r3, #0
    3afa:	4c9c      	ldr	r4, [pc, #624]	; (3d6c <xQueueGenericSend+0x288>)
    3afc:	447c      	add	r4, pc
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    3afe:	2800      	cmp	r0, #0
    3b00:	d101      	bne.n	3b06 <xQueueGenericSend+0x22>
    3b02:	b672      	cpsid	i
    3b04:	e7fe      	b.n	3b04 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    3b06:	2900      	cmp	r1, #0
    3b08:	d104      	bne.n	3b14 <xQueueGenericSend+0x30>
    3b0a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    3b0c:	2b00      	cmp	r3, #0
    3b0e:	d001      	beq.n	3b14 <xQueueGenericSend+0x30>
    3b10:	b672      	cpsid	i
    3b12:	e7fe      	b.n	3b12 <xQueueGenericSend+0x2e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    3b14:	2e02      	cmp	r6, #2
    3b16:	d104      	bne.n	3b22 <xQueueGenericSend+0x3e>
    3b18:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    3b1a:	2a01      	cmp	r2, #1
    3b1c:	d001      	beq.n	3b22 <xQueueGenericSend+0x3e>
    3b1e:	b672      	cpsid	i
    3b20:	e7fe      	b.n	3b20 <xQueueGenericSend+0x3c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    3b22:	4b93      	ldr	r3, [pc, #588]	; (3d70 <xQueueGenericSend+0x28c>)
    3b24:	58e3      	ldr	r3, [r4, r3]
    3b26:	4798      	blx	r3
    3b28:	2800      	cmp	r0, #0
    3b2a:	d102      	bne.n	3b32 <xQueueGenericSend+0x4e>
    3b2c:	9b05      	ldr	r3, [sp, #20]
    3b2e:	2b00      	cmp	r3, #0
    3b30:	d107      	bne.n	3b42 <xQueueGenericSend+0x5e>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    3b32:	2200      	movs	r2, #0
    3b34:	4692      	mov	sl, r2
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3b36:	4b8f      	ldr	r3, [pc, #572]	; (3d74 <xQueueGenericSend+0x290>)
    3b38:	58e3      	ldr	r3, [r4, r3]
    3b3a:	9302      	str	r3, [sp, #8]
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3b3c:	ab06      	add	r3, sp, #24
    3b3e:	4699      	mov	r9, r3
    3b40:	e001      	b.n	3b46 <xQueueGenericSend+0x62>
	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    3b42:	b672      	cpsid	i
    3b44:	e7fe      	b.n	3b44 <xQueueGenericSend+0x60>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3b46:	9a02      	ldr	r2, [sp, #8]
    3b48:	4790      	blx	r2
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    3b4a:	6bab      	ldr	r3, [r5, #56]	; 0x38
    3b4c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    3b4e:	4293      	cmp	r3, r2
    3b50:	d301      	bcc.n	3b56 <xQueueGenericSend+0x72>
    3b52:	2e02      	cmp	r6, #2
    3b54:	d15c      	bne.n	3c10 <xQueueGenericSend+0x12c>
			{
				traceQUEUE_SEND( pxQueue );
    3b56:	1c28      	adds	r0, r5, #0
    3b58:	4b87      	ldr	r3, [pc, #540]	; (3d78 <xQueueGenericSend+0x294>)
    3b5a:	58e3      	ldr	r3, [r4, r3]
    3b5c:	9301      	str	r3, [sp, #4]
    3b5e:	4798      	blx	r3
    3b60:	4b86      	ldr	r3, [pc, #536]	; (3d7c <xQueueGenericSend+0x298>)
    3b62:	58e3      	ldr	r3, [r4, r3]
    3b64:	9302      	str	r3, [sp, #8]
    3b66:	5c1b      	ldrb	r3, [r3, r0]
    3b68:	3320      	adds	r3, #32
    3b6a:	b2db      	uxtb	r3, r3
    3b6c:	469a      	mov	sl, r3
    3b6e:	1c28      	adds	r0, r5, #0
    3b70:	9b01      	ldr	r3, [sp, #4]
    3b72:	4798      	blx	r3
    3b74:	9a02      	ldr	r2, [sp, #8]
    3b76:	5c17      	ldrb	r7, [r2, r0]
    3b78:	1c28      	adds	r0, r5, #0
    3b7a:	4b81      	ldr	r3, [pc, #516]	; (3d80 <xQueueGenericSend+0x29c>)
    3b7c:	58e3      	ldr	r3, [r4, r3]
    3b7e:	9303      	str	r3, [sp, #12]
    3b80:	4798      	blx	r3
    3b82:	1c02      	adds	r2, r0, #0
    3b84:	4650      	mov	r0, sl
    3b86:	1c39      	adds	r1, r7, #0
    3b88:	4b7e      	ldr	r3, [pc, #504]	; (3d84 <xQueueGenericSend+0x2a0>)
    3b8a:	58e3      	ldr	r3, [r4, r3]
    3b8c:	4798      	blx	r3
    3b8e:	1c28      	adds	r0, r5, #0
    3b90:	9b01      	ldr	r3, [sp, #4]
    3b92:	4798      	blx	r3
    3b94:	9a02      	ldr	r2, [sp, #8]
    3b96:	5c10      	ldrb	r0, [r2, r0]
    3b98:	4681      	mov	r9, r0
    3b9a:	1c28      	adds	r0, r5, #0
    3b9c:	9b03      	ldr	r3, [sp, #12]
    3b9e:	4798      	blx	r3
    3ba0:	1c07      	adds	r7, r0, #0
    3ba2:	1c28      	adds	r0, r5, #0
    3ba4:	9a01      	ldr	r2, [sp, #4]
    3ba6:	4790      	blx	r2
    3ba8:	9a02      	ldr	r2, [sp, #8]
    3baa:	5c13      	ldrb	r3, [r2, r0]
    3bac:	2b02      	cmp	r3, #2
    3bae:	d003      	beq.n	3bb8 <xQueueGenericSend+0xd4>
    3bb0:	6baa      	ldr	r2, [r5, #56]	; 0x38
    3bb2:	3201      	adds	r2, #1
    3bb4:	b2d2      	uxtb	r2, r2
    3bb6:	e000      	b.n	3bba <xQueueGenericSend+0xd6>
    3bb8:	2200      	movs	r2, #0
    3bba:	4648      	mov	r0, r9
    3bbc:	1c39      	adds	r1, r7, #0
    3bbe:	4b72      	ldr	r3, [pc, #456]	; (3d88 <xQueueGenericSend+0x2a4>)
    3bc0:	58e3      	ldr	r3, [r4, r3]
    3bc2:	4798      	blx	r3
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3bc4:	1c28      	adds	r0, r5, #0
    3bc6:	4641      	mov	r1, r8
    3bc8:	1c32      	adds	r2, r6, #0
    3bca:	4b70      	ldr	r3, [pc, #448]	; (3d8c <xQueueGenericSend+0x2a8>)
    3bcc:	447b      	add	r3, pc
    3bce:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    3bd0:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    3bd2:	2b00      	cmp	r3, #0
    3bd4:	d00a      	beq.n	3bec <xQueueGenericSend+0x108>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    3bd6:	1c28      	adds	r0, r5, #0
    3bd8:	1c31      	adds	r1, r6, #0
    3bda:	4b6d      	ldr	r3, [pc, #436]	; (3d90 <xQueueGenericSend+0x2ac>)
    3bdc:	447b      	add	r3, pc
    3bde:	4798      	blx	r3
    3be0:	2801      	cmp	r0, #1
    3be2:	d110      	bne.n	3c06 <xQueueGenericSend+0x122>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    3be4:	4b6b      	ldr	r3, [pc, #428]	; (3d94 <xQueueGenericSend+0x2b0>)
    3be6:	58e3      	ldr	r3, [r4, r3]
    3be8:	4798      	blx	r3
    3bea:	e00c      	b.n	3c06 <xQueueGenericSend+0x122>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3bec:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3bee:	2a00      	cmp	r2, #0
    3bf0:	d009      	beq.n	3c06 <xQueueGenericSend+0x122>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    3bf2:	1c28      	adds	r0, r5, #0
    3bf4:	3024      	adds	r0, #36	; 0x24
    3bf6:	4b68      	ldr	r3, [pc, #416]	; (3d98 <xQueueGenericSend+0x2b4>)
    3bf8:	58e3      	ldr	r3, [r4, r3]
    3bfa:	4798      	blx	r3
    3bfc:	2801      	cmp	r0, #1
    3bfe:	d102      	bne.n	3c06 <xQueueGenericSend+0x122>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    3c00:	4b64      	ldr	r3, [pc, #400]	; (3d94 <xQueueGenericSend+0x2b0>)
    3c02:	58e3      	ldr	r3, [r4, r3]
    3c04:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    3c06:	4b65      	ldr	r3, [pc, #404]	; (3d9c <xQueueGenericSend+0x2b8>)
    3c08:	58e3      	ldr	r3, [r4, r3]
    3c0a:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    3c0c:	2001      	movs	r0, #1
    3c0e:	e0a5      	b.n	3d5c <xQueueGenericSend+0x278>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    3c10:	9b05      	ldr	r3, [sp, #20]
    3c12:	2b00      	cmp	r3, #0
    3c14:	d11c      	bne.n	3c50 <xQueueGenericSend+0x16c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3c16:	4b61      	ldr	r3, [pc, #388]	; (3d9c <xQueueGenericSend+0x2b8>)
    3c18:	58e3      	ldr	r3, [r4, r3]
    3c1a:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
    3c1c:	1c28      	adds	r0, r5, #0
    3c1e:	4b56      	ldr	r3, [pc, #344]	; (3d78 <xQueueGenericSend+0x294>)
    3c20:	58e3      	ldr	r3, [r4, r3]
    3c22:	9301      	str	r3, [sp, #4]
    3c24:	4798      	blx	r3
    3c26:	4b55      	ldr	r3, [pc, #340]	; (3d7c <xQueueGenericSend+0x298>)
    3c28:	58e6      	ldr	r6, [r4, r3]
    3c2a:	5c33      	ldrb	r3, [r6, r0]
    3c2c:	3348      	adds	r3, #72	; 0x48
    3c2e:	b2df      	uxtb	r7, r3
    3c30:	1c28      	adds	r0, r5, #0
    3c32:	9a01      	ldr	r2, [sp, #4]
    3c34:	4790      	blx	r2
    3c36:	5c36      	ldrb	r6, [r6, r0]
    3c38:	1c28      	adds	r0, r5, #0
    3c3a:	4b51      	ldr	r3, [pc, #324]	; (3d80 <xQueueGenericSend+0x29c>)
    3c3c:	58e3      	ldr	r3, [r4, r3]
    3c3e:	4798      	blx	r3
    3c40:	1c02      	adds	r2, r0, #0
    3c42:	1c38      	adds	r0, r7, #0
    3c44:	1c31      	adds	r1, r6, #0
    3c46:	4b4f      	ldr	r3, [pc, #316]	; (3d84 <xQueueGenericSend+0x2a0>)
    3c48:	58e3      	ldr	r3, [r4, r3]
    3c4a:	4798      	blx	r3
					return errQUEUE_FULL;
    3c4c:	2000      	movs	r0, #0
    3c4e:	e085      	b.n	3d5c <xQueueGenericSend+0x278>
				}
				else if( xEntryTimeSet == pdFALSE )
    3c50:	4653      	mov	r3, sl
    3c52:	2b00      	cmp	r3, #0
    3c54:	d105      	bne.n	3c62 <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3c56:	4648      	mov	r0, r9
    3c58:	4b51      	ldr	r3, [pc, #324]	; (3da0 <xQueueGenericSend+0x2bc>)
    3c5a:	58e3      	ldr	r3, [r4, r3]
    3c5c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    3c5e:	2201      	movs	r2, #1
    3c60:	4692      	mov	sl, r2
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    3c62:	4b4e      	ldr	r3, [pc, #312]	; (3d9c <xQueueGenericSend+0x2b8>)
    3c64:	58e3      	ldr	r3, [r4, r3]
    3c66:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3c68:	4b4e      	ldr	r3, [pc, #312]	; (3da4 <xQueueGenericSend+0x2c0>)
    3c6a:	58e3      	ldr	r3, [r4, r3]
    3c6c:	4798      	blx	r3
		prvLockQueue( pxQueue );
    3c6e:	4b41      	ldr	r3, [pc, #260]	; (3d74 <xQueueGenericSend+0x290>)
    3c70:	58e3      	ldr	r3, [r4, r3]
    3c72:	4798      	blx	r3
    3c74:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    3c76:	3301      	adds	r3, #1
    3c78:	d101      	bne.n	3c7e <xQueueGenericSend+0x19a>
    3c7a:	2300      	movs	r3, #0
    3c7c:	646b      	str	r3, [r5, #68]	; 0x44
    3c7e:	6cab      	ldr	r3, [r5, #72]	; 0x48
    3c80:	3301      	adds	r3, #1
    3c82:	d101      	bne.n	3c88 <xQueueGenericSend+0x1a4>
    3c84:	2300      	movs	r3, #0
    3c86:	64ab      	str	r3, [r5, #72]	; 0x48
    3c88:	4b44      	ldr	r3, [pc, #272]	; (3d9c <xQueueGenericSend+0x2b8>)
    3c8a:	58e3      	ldr	r3, [r4, r3]
    3c8c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3c8e:	4648      	mov	r0, r9
    3c90:	a905      	add	r1, sp, #20
    3c92:	4b45      	ldr	r3, [pc, #276]	; (3da8 <xQueueGenericSend+0x2c4>)
    3c94:	58e3      	ldr	r3, [r4, r3]
    3c96:	4798      	blx	r3
    3c98:	2800      	cmp	r0, #0
    3c9a:	d13f      	bne.n	3d1c <xQueueGenericSend+0x238>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3c9c:	4b35      	ldr	r3, [pc, #212]	; (3d74 <xQueueGenericSend+0x290>)
    3c9e:	58e3      	ldr	r3, [r4, r3]
    3ca0:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    3ca2:	6bab      	ldr	r3, [r5, #56]	; 0x38
    3ca4:	469b      	mov	fp, r3
    3ca6:	6bef      	ldr	r7, [r5, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    3ca8:	4b3c      	ldr	r3, [pc, #240]	; (3d9c <xQueueGenericSend+0x2b8>)
    3caa:	58e3      	ldr	r3, [r4, r3]
    3cac:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    3cae:	45bb      	cmp	fp, r7
    3cb0:	d12c      	bne.n	3d0c <xQueueGenericSend+0x228>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
    3cb2:	1c28      	adds	r0, r5, #0
    3cb4:	4b30      	ldr	r3, [pc, #192]	; (3d78 <xQueueGenericSend+0x294>)
    3cb6:	58e3      	ldr	r3, [r4, r3]
    3cb8:	9301      	str	r3, [sp, #4]
    3cba:	4798      	blx	r3
    3cbc:	4b2f      	ldr	r3, [pc, #188]	; (3d7c <xQueueGenericSend+0x298>)
    3cbe:	58e7      	ldr	r7, [r4, r3]
    3cc0:	5c3b      	ldrb	r3, [r7, r0]
    3cc2:	3370      	adds	r3, #112	; 0x70
    3cc4:	b2db      	uxtb	r3, r3
    3cc6:	469b      	mov	fp, r3
    3cc8:	1c28      	adds	r0, r5, #0
    3cca:	9a01      	ldr	r2, [sp, #4]
    3ccc:	4790      	blx	r2
    3cce:	5c3f      	ldrb	r7, [r7, r0]
    3cd0:	1c28      	adds	r0, r5, #0
    3cd2:	4b2b      	ldr	r3, [pc, #172]	; (3d80 <xQueueGenericSend+0x29c>)
    3cd4:	58e3      	ldr	r3, [r4, r3]
    3cd6:	4798      	blx	r3
    3cd8:	1c02      	adds	r2, r0, #0
    3cda:	4658      	mov	r0, fp
    3cdc:	1c39      	adds	r1, r7, #0
    3cde:	4b29      	ldr	r3, [pc, #164]	; (3d84 <xQueueGenericSend+0x2a0>)
    3ce0:	58e3      	ldr	r3, [r4, r3]
    3ce2:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    3ce4:	1c28      	adds	r0, r5, #0
    3ce6:	3010      	adds	r0, #16
    3ce8:	9905      	ldr	r1, [sp, #20]
    3cea:	4b30      	ldr	r3, [pc, #192]	; (3dac <xQueueGenericSend+0x2c8>)
    3cec:	58e3      	ldr	r3, [r4, r3]
    3cee:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    3cf0:	1c28      	adds	r0, r5, #0
    3cf2:	4b2f      	ldr	r3, [pc, #188]	; (3db0 <xQueueGenericSend+0x2cc>)
    3cf4:	447b      	add	r3, pc
    3cf6:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    3cf8:	4b2e      	ldr	r3, [pc, #184]	; (3db4 <xQueueGenericSend+0x2d0>)
    3cfa:	58e3      	ldr	r3, [r4, r3]
    3cfc:	4798      	blx	r3
    3cfe:	2800      	cmp	r0, #0
    3d00:	d000      	beq.n	3d04 <xQueueGenericSend+0x220>
    3d02:	e720      	b.n	3b46 <xQueueGenericSend+0x62>
				{
					portYIELD_WITHIN_API();
    3d04:	4b23      	ldr	r3, [pc, #140]	; (3d94 <xQueueGenericSend+0x2b0>)
    3d06:	58e3      	ldr	r3, [r4, r3]
    3d08:	4798      	blx	r3
    3d0a:	e71c      	b.n	3b46 <xQueueGenericSend+0x62>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3d0c:	1c28      	adds	r0, r5, #0
    3d0e:	4b2a      	ldr	r3, [pc, #168]	; (3db8 <xQueueGenericSend+0x2d4>)
    3d10:	447b      	add	r3, pc
    3d12:	4798      	blx	r3
				( void ) xTaskResumeAll();
    3d14:	4b27      	ldr	r3, [pc, #156]	; (3db4 <xQueueGenericSend+0x2d0>)
    3d16:	58e3      	ldr	r3, [r4, r3]
    3d18:	4798      	blx	r3
    3d1a:	e714      	b.n	3b46 <xQueueGenericSend+0x62>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    3d1c:	1c28      	adds	r0, r5, #0
    3d1e:	4b27      	ldr	r3, [pc, #156]	; (3dbc <xQueueGenericSend+0x2d8>)
    3d20:	447b      	add	r3, pc
    3d22:	4798      	blx	r3
			( void ) xTaskResumeAll();
    3d24:	4b23      	ldr	r3, [pc, #140]	; (3db4 <xQueueGenericSend+0x2d0>)
    3d26:	58e3      	ldr	r3, [r4, r3]
    3d28:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
    3d2a:	1c28      	adds	r0, r5, #0
    3d2c:	4b12      	ldr	r3, [pc, #72]	; (3d78 <xQueueGenericSend+0x294>)
    3d2e:	58e3      	ldr	r3, [r4, r3]
    3d30:	9301      	str	r3, [sp, #4]
    3d32:	4798      	blx	r3
    3d34:	4b11      	ldr	r3, [pc, #68]	; (3d7c <xQueueGenericSend+0x298>)
    3d36:	58e6      	ldr	r6, [r4, r3]
    3d38:	5c33      	ldrb	r3, [r6, r0]
    3d3a:	3348      	adds	r3, #72	; 0x48
    3d3c:	b2df      	uxtb	r7, r3
    3d3e:	1c28      	adds	r0, r5, #0
    3d40:	9b01      	ldr	r3, [sp, #4]
    3d42:	4798      	blx	r3
    3d44:	5c36      	ldrb	r6, [r6, r0]
    3d46:	1c28      	adds	r0, r5, #0
    3d48:	4b0d      	ldr	r3, [pc, #52]	; (3d80 <xQueueGenericSend+0x29c>)
    3d4a:	58e3      	ldr	r3, [r4, r3]
    3d4c:	4798      	blx	r3
    3d4e:	1c02      	adds	r2, r0, #0
    3d50:	1c38      	adds	r0, r7, #0
    3d52:	1c31      	adds	r1, r6, #0
    3d54:	4b0b      	ldr	r3, [pc, #44]	; (3d84 <xQueueGenericSend+0x2a0>)
    3d56:	58e3      	ldr	r3, [r4, r3]
    3d58:	4798      	blx	r3
			return errQUEUE_FULL;
    3d5a:	2000      	movs	r0, #0
		}
	}
}
    3d5c:	b009      	add	sp, #36	; 0x24
    3d5e:	bc3c      	pop	{r2, r3, r4, r5}
    3d60:	4690      	mov	r8, r2
    3d62:	4699      	mov	r9, r3
    3d64:	46a2      	mov	sl, r4
    3d66:	46ab      	mov	fp, r5
    3d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d6a:	46c0      	nop			; (mov r8, r8)
    3d6c:	00004308 	.word	0x00004308
    3d70:	0000027c 	.word	0x0000027c
    3d74:	000002b4 	.word	0x000002b4
    3d78:	0000019c 	.word	0x0000019c
    3d7c:	000002a8 	.word	0x000002a8
    3d80:	00000070 	.word	0x00000070
    3d84:	0000024c 	.word	0x0000024c
    3d88:	000002a4 	.word	0x000002a4
    3d8c:	fffffb05 	.word	0xfffffb05
    3d90:	fffffb85 	.word	0xfffffb85
    3d94:	00000194 	.word	0x00000194
    3d98:	00000110 	.word	0x00000110
    3d9c:	00000014 	.word	0x00000014
    3da0:	000002b0 	.word	0x000002b0
    3da4:	00000138 	.word	0x00000138
    3da8:	00000130 	.word	0x00000130
    3dac:	0000006c 	.word	0x0000006c
    3db0:	fffffb8d 	.word	0xfffffb8d
    3db4:	00000200 	.word	0x00000200
    3db8:	fffffb71 	.word	0xfffffb71
    3dbc:	fffffb61 	.word	0xfffffb61

00003dc0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    3dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dc2:	465f      	mov	r7, fp
    3dc4:	4656      	mov	r6, sl
    3dc6:	464d      	mov	r5, r9
    3dc8:	4644      	mov	r4, r8
    3dca:	b4f0      	push	{r4, r5, r6, r7}
    3dcc:	b085      	sub	sp, #20
    3dce:	1c04      	adds	r4, r0, #0
    3dd0:	1c0f      	adds	r7, r1, #0
    3dd2:	1c16      	adds	r6, r2, #0
    3dd4:	4698      	mov	r8, r3
    3dd6:	4d56      	ldr	r5, [pc, #344]	; (3f30 <xQueueGenericSendFromISR+0x170>)
    3dd8:	447d      	add	r5, pc
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    3dda:	2800      	cmp	r0, #0
    3ddc:	d101      	bne.n	3de2 <xQueueGenericSendFromISR+0x22>
    3dde:	b672      	cpsid	i
    3de0:	e7fe      	b.n	3de0 <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    3de2:	2900      	cmp	r1, #0
    3de4:	d104      	bne.n	3df0 <xQueueGenericSendFromISR+0x30>
    3de6:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3de8:	2a00      	cmp	r2, #0
    3dea:	d001      	beq.n	3df0 <xQueueGenericSendFromISR+0x30>
    3dec:	b672      	cpsid	i
    3dee:	e7fe      	b.n	3dee <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    3df0:	4643      	mov	r3, r8
    3df2:	2b02      	cmp	r3, #2
    3df4:	d000      	beq.n	3df8 <xQueueGenericSendFromISR+0x38>
    3df6:	e07f      	b.n	3ef8 <xQueueGenericSendFromISR+0x138>
    3df8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    3dfa:	2a01      	cmp	r2, #1
    3dfc:	d100      	bne.n	3e00 <xQueueGenericSendFromISR+0x40>
    3dfe:	e084      	b.n	3f0a <xQueueGenericSendFromISR+0x14a>
    3e00:	b672      	cpsid	i
    3e02:	e7fe      	b.n	3e02 <xQueueGenericSendFromISR+0x42>
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );
    3e04:	1c20      	adds	r0, r4, #0
    3e06:	4b4b      	ldr	r3, [pc, #300]	; (3f34 <xQueueGenericSendFromISR+0x174>)
    3e08:	58eb      	ldr	r3, [r5, r3]
    3e0a:	9300      	str	r3, [sp, #0]
    3e0c:	4798      	blx	r3
    3e0e:	4b4a      	ldr	r3, [pc, #296]	; (3f38 <xQueueGenericSendFromISR+0x178>)
    3e10:	58eb      	ldr	r3, [r5, r3]
    3e12:	9301      	str	r3, [sp, #4]
    3e14:	5c1b      	ldrb	r3, [r3, r0]
    3e16:	3330      	adds	r3, #48	; 0x30
    3e18:	b2db      	uxtb	r3, r3
    3e1a:	469b      	mov	fp, r3
    3e1c:	1c20      	adds	r0, r4, #0
    3e1e:	9b00      	ldr	r3, [sp, #0]
    3e20:	4798      	blx	r3
    3e22:	9a01      	ldr	r2, [sp, #4]
    3e24:	5c10      	ldrb	r0, [r2, r0]
    3e26:	4682      	mov	sl, r0
    3e28:	1c20      	adds	r0, r4, #0
    3e2a:	4b44      	ldr	r3, [pc, #272]	; (3f3c <xQueueGenericSendFromISR+0x17c>)
    3e2c:	58eb      	ldr	r3, [r5, r3]
    3e2e:	9302      	str	r3, [sp, #8]
    3e30:	4798      	blx	r3
    3e32:	1c02      	adds	r2, r0, #0
    3e34:	4658      	mov	r0, fp
    3e36:	4651      	mov	r1, sl
    3e38:	4b41      	ldr	r3, [pc, #260]	; (3f40 <xQueueGenericSendFromISR+0x180>)
    3e3a:	58eb      	ldr	r3, [r5, r3]
    3e3c:	4798      	blx	r3
    3e3e:	1c20      	adds	r0, r4, #0
    3e40:	9b00      	ldr	r3, [sp, #0]
    3e42:	4798      	blx	r3
    3e44:	9a01      	ldr	r2, [sp, #4]
    3e46:	5c10      	ldrb	r0, [r2, r0]
    3e48:	4683      	mov	fp, r0
    3e4a:	1c20      	adds	r0, r4, #0
    3e4c:	9b02      	ldr	r3, [sp, #8]
    3e4e:	4798      	blx	r3
    3e50:	1c01      	adds	r1, r0, #0
    3e52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3e54:	3201      	adds	r2, #1
    3e56:	b2d2      	uxtb	r2, r2
    3e58:	4658      	mov	r0, fp
    3e5a:	4b3a      	ldr	r3, [pc, #232]	; (3f44 <xQueueGenericSendFromISR+0x184>)
    3e5c:	58eb      	ldr	r3, [r5, r3]
    3e5e:	4798      	blx	r3

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3e60:	1c20      	adds	r0, r4, #0
    3e62:	1c39      	adds	r1, r7, #0
    3e64:	4642      	mov	r2, r8
    3e66:	4b38      	ldr	r3, [pc, #224]	; (3f48 <xQueueGenericSendFromISR+0x188>)
    3e68:	447b      	add	r3, pc
    3e6a:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    3e6c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3e6e:	3301      	adds	r3, #1
    3e70:	d11f      	bne.n	3eb2 <xQueueGenericSendFromISR+0xf2>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    3e72:	6d62      	ldr	r2, [r4, #84]	; 0x54
    3e74:	2a00      	cmp	r2, #0
    3e76:	d00c      	beq.n	3e92 <xQueueGenericSendFromISR+0xd2>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    3e78:	1c20      	adds	r0, r4, #0
    3e7a:	4641      	mov	r1, r8
    3e7c:	4b33      	ldr	r3, [pc, #204]	; (3f4c <xQueueGenericSendFromISR+0x18c>)
    3e7e:	447b      	add	r3, pc
    3e80:	4798      	blx	r3
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    3e82:	2701      	movs	r7, #1
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    3e84:	2801      	cmp	r0, #1
    3e86:	d146      	bne.n	3f16 <xQueueGenericSendFromISR+0x156>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    3e88:	2e00      	cmp	r6, #0
    3e8a:	d031      	beq.n	3ef0 <xQueueGenericSendFromISR+0x130>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    3e8c:	2301      	movs	r3, #1
    3e8e:	6033      	str	r3, [r6, #0]
    3e90:	e041      	b.n	3f16 <xQueueGenericSendFromISR+0x156>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    3e92:	2701      	movs	r7, #1
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3e94:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3e96:	2b00      	cmp	r3, #0
    3e98:	d03d      	beq.n	3f16 <xQueueGenericSendFromISR+0x156>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3e9a:	1c20      	adds	r0, r4, #0
    3e9c:	3024      	adds	r0, #36	; 0x24
    3e9e:	4b2c      	ldr	r3, [pc, #176]	; (3f50 <xQueueGenericSendFromISR+0x190>)
    3ea0:	58eb      	ldr	r3, [r5, r3]
    3ea2:	4798      	blx	r3
    3ea4:	2800      	cmp	r0, #0
    3ea6:	d036      	beq.n	3f16 <xQueueGenericSendFromISR+0x156>
							{
								/* The task waiting has a higher priority so record that a
								context	switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    3ea8:	2e00      	cmp	r6, #0
    3eaa:	d023      	beq.n	3ef4 <xQueueGenericSendFromISR+0x134>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    3eac:	2301      	movs	r3, #1
    3eae:	6033      	str	r3, [r6, #0]
    3eb0:	e031      	b.n	3f16 <xQueueGenericSendFromISR+0x156>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    3eb2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3eb4:	3301      	adds	r3, #1
    3eb6:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
    3eb8:	2701      	movs	r7, #1
    3eba:	e02c      	b.n	3f16 <xQueueGenericSendFromISR+0x156>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    3ebc:	1c20      	adds	r0, r4, #0
    3ebe:	4b1d      	ldr	r3, [pc, #116]	; (3f34 <xQueueGenericSendFromISR+0x174>)
    3ec0:	58eb      	ldr	r3, [r5, r3]
    3ec2:	9300      	str	r3, [sp, #0]
    3ec4:	4798      	blx	r3
    3ec6:	4b1c      	ldr	r3, [pc, #112]	; (3f38 <xQueueGenericSendFromISR+0x178>)
    3ec8:	58ee      	ldr	r6, [r5, r3]
    3eca:	5c33      	ldrb	r3, [r6, r0]
    3ecc:	3358      	adds	r3, #88	; 0x58
    3ece:	b2df      	uxtb	r7, r3
    3ed0:	1c20      	adds	r0, r4, #0
    3ed2:	9a00      	ldr	r2, [sp, #0]
    3ed4:	4790      	blx	r2
    3ed6:	5c36      	ldrb	r6, [r6, r0]
    3ed8:	1c20      	adds	r0, r4, #0
    3eda:	4b18      	ldr	r3, [pc, #96]	; (3f3c <xQueueGenericSendFromISR+0x17c>)
    3edc:	58eb      	ldr	r3, [r5, r3]
    3ede:	4798      	blx	r3
    3ee0:	1c02      	adds	r2, r0, #0
    3ee2:	1c38      	adds	r0, r7, #0
    3ee4:	1c31      	adds	r1, r6, #0
    3ee6:	4b16      	ldr	r3, [pc, #88]	; (3f40 <xQueueGenericSendFromISR+0x180>)
    3ee8:	58eb      	ldr	r3, [r5, r3]
    3eea:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    3eec:	2700      	movs	r7, #0
    3eee:	e012      	b.n	3f16 <xQueueGenericSendFromISR+0x156>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    3ef0:	2701      	movs	r7, #1
    3ef2:	e010      	b.n	3f16 <xQueueGenericSendFromISR+0x156>
    3ef4:	2701      	movs	r7, #1
    3ef6:	e00e      	b.n	3f16 <xQueueGenericSendFromISR+0x156>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3ef8:	4b16      	ldr	r3, [pc, #88]	; (3f54 <xQueueGenericSendFromISR+0x194>)
    3efa:	58eb      	ldr	r3, [r5, r3]
    3efc:	4798      	blx	r3
    3efe:	4681      	mov	r9, r0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    3f00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3f02:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    3f04:	4293      	cmp	r3, r2
    3f06:	d2d9      	bcs.n	3ebc <xQueueGenericSendFromISR+0xfc>
    3f08:	e77c      	b.n	3e04 <xQueueGenericSendFromISR+0x44>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3f0a:	4b12      	ldr	r3, [pc, #72]	; (3f54 <xQueueGenericSendFromISR+0x194>)
    3f0c:	58eb      	ldr	r3, [r5, r3]
    3f0e:	4798      	blx	r3
    3f10:	4681      	mov	r9, r0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    3f12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3f14:	e776      	b.n	3e04 <xQueueGenericSendFromISR+0x44>
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3f16:	4648      	mov	r0, r9
    3f18:	4b0f      	ldr	r3, [pc, #60]	; (3f58 <xQueueGenericSendFromISR+0x198>)
    3f1a:	58eb      	ldr	r3, [r5, r3]
    3f1c:	4798      	blx	r3

	return xReturn;
}
    3f1e:	1c38      	adds	r0, r7, #0
    3f20:	b005      	add	sp, #20
    3f22:	bc3c      	pop	{r2, r3, r4, r5}
    3f24:	4690      	mov	r8, r2
    3f26:	4699      	mov	r9, r3
    3f28:	46a2      	mov	sl, r4
    3f2a:	46ab      	mov	fp, r5
    3f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f2e:	46c0      	nop			; (mov r8, r8)
    3f30:	0000402c 	.word	0x0000402c
    3f34:	0000019c 	.word	0x0000019c
    3f38:	000002a8 	.word	0x000002a8
    3f3c:	00000070 	.word	0x00000070
    3f40:	0000024c 	.word	0x0000024c
    3f44:	000002a4 	.word	0x000002a4
    3f48:	fffff869 	.word	0xfffff869
    3f4c:	fffff8e3 	.word	0xfffff8e3
    3f50:	00000110 	.word	0x00000110
    3f54:	00000274 	.word	0x00000274
    3f58:	00000134 	.word	0x00000134

00003f5c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    3f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f5e:	465f      	mov	r7, fp
    3f60:	4656      	mov	r6, sl
    3f62:	464d      	mov	r5, r9
    3f64:	4644      	mov	r4, r8
    3f66:	b4f0      	push	{r4, r5, r6, r7}
    3f68:	b089      	sub	sp, #36	; 0x24
    3f6a:	1c05      	adds	r5, r0, #0
    3f6c:	1c0f      	adds	r7, r1, #0
    3f6e:	9205      	str	r2, [sp, #20]
    3f70:	9303      	str	r3, [sp, #12]
    3f72:	4cba      	ldr	r4, [pc, #744]	; (425c <xQueueGenericReceive+0x300>)
    3f74:	447c      	add	r4, pc
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    3f76:	2800      	cmp	r0, #0
    3f78:	d101      	bne.n	3f7e <xQueueGenericReceive+0x22>
    3f7a:	b672      	cpsid	i
    3f7c:	e7fe      	b.n	3f7c <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    3f7e:	2900      	cmp	r1, #0
    3f80:	d104      	bne.n	3f8c <xQueueGenericReceive+0x30>
    3f82:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3f84:	2a00      	cmp	r2, #0
    3f86:	d001      	beq.n	3f8c <xQueueGenericReceive+0x30>
    3f88:	b672      	cpsid	i
    3f8a:	e7fe      	b.n	3f8a <xQueueGenericReceive+0x2e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    3f8c:	4bb4      	ldr	r3, [pc, #720]	; (4260 <xQueueGenericReceive+0x304>)
    3f8e:	58e3      	ldr	r3, [r4, r3]
    3f90:	4798      	blx	r3
    3f92:	2800      	cmp	r0, #0
    3f94:	d102      	bne.n	3f9c <xQueueGenericReceive+0x40>
    3f96:	9b05      	ldr	r3, [sp, #20]
    3f98:	2b00      	cmp	r3, #0
    3f9a:	d107      	bne.n	3fac <xQueueGenericReceive+0x50>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    3f9c:	2200      	movs	r2, #0
    3f9e:	4691      	mov	r9, r2
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    3fa0:	4bb0      	ldr	r3, [pc, #704]	; (4264 <xQueueGenericReceive+0x308>)
    3fa2:	58e3      	ldr	r3, [r4, r3]
    3fa4:	9304      	str	r3, [sp, #16]
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3fa6:	ab06      	add	r3, sp, #24
    3fa8:	4698      	mov	r8, r3
    3faa:	e001      	b.n	3fb0 <xQueueGenericReceive+0x54>

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    3fac:	b672      	cpsid	i
    3fae:	e7fe      	b.n	3fae <xQueueGenericReceive+0x52>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    3fb0:	9a04      	ldr	r2, [sp, #16]
    3fb2:	4790      	blx	r2
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    3fb4:	6bab      	ldr	r3, [r5, #56]	; 0x38
    3fb6:	2b00      	cmp	r3, #0
    3fb8:	d100      	bne.n	3fbc <xQueueGenericReceive+0x60>
    3fba:	e086      	b.n	40ca <xQueueGenericReceive+0x16e>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    3fbc:	68eb      	ldr	r3, [r5, #12]
    3fbe:	4698      	mov	r8, r3

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    3fc0:	1c28      	adds	r0, r5, #0
    3fc2:	1c39      	adds	r1, r7, #0
    3fc4:	4ba8      	ldr	r3, [pc, #672]	; (4268 <xQueueGenericReceive+0x30c>)
    3fc6:	447b      	add	r3, pc
    3fc8:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    3fca:	9a03      	ldr	r2, [sp, #12]
    3fcc:	2a00      	cmp	r2, #0
    3fce:	d150      	bne.n	4072 <xQueueGenericReceive+0x116>
				{
					traceQUEUE_RECEIVE( pxQueue );
    3fd0:	1c28      	adds	r0, r5, #0
    3fd2:	4ba6      	ldr	r3, [pc, #664]	; (426c <xQueueGenericReceive+0x310>)
    3fd4:	58e6      	ldr	r6, [r4, r3]
    3fd6:	47b0      	blx	r6
    3fd8:	4ba5      	ldr	r3, [pc, #660]	; (4270 <xQueueGenericReceive+0x314>)
    3fda:	58e3      	ldr	r3, [r4, r3]
    3fdc:	9301      	str	r3, [sp, #4]
    3fde:	5c1b      	ldrb	r3, [r3, r0]
    3fe0:	3328      	adds	r3, #40	; 0x28
    3fe2:	b2db      	uxtb	r3, r3
    3fe4:	4699      	mov	r9, r3
    3fe6:	1c28      	adds	r0, r5, #0
    3fe8:	47b0      	blx	r6
    3fea:	9b01      	ldr	r3, [sp, #4]
    3fec:	5c1f      	ldrb	r7, [r3, r0]
    3fee:	1c28      	adds	r0, r5, #0
    3ff0:	4ba0      	ldr	r3, [pc, #640]	; (4274 <xQueueGenericReceive+0x318>)
    3ff2:	58e3      	ldr	r3, [r4, r3]
    3ff4:	9303      	str	r3, [sp, #12]
    3ff6:	4798      	blx	r3
    3ff8:	1c02      	adds	r2, r0, #0
    3ffa:	4648      	mov	r0, r9
    3ffc:	1c39      	adds	r1, r7, #0
    3ffe:	4b9e      	ldr	r3, [pc, #632]	; (4278 <xQueueGenericReceive+0x31c>)
    4000:	58e3      	ldr	r3, [r4, r3]
    4002:	4798      	blx	r3
    4004:	1c28      	adds	r0, r5, #0
    4006:	47b0      	blx	r6
    4008:	9a01      	ldr	r2, [sp, #4]
    400a:	5c10      	ldrb	r0, [r2, r0]
    400c:	4680      	mov	r8, r0
    400e:	1c28      	adds	r0, r5, #0
    4010:	9b03      	ldr	r3, [sp, #12]
    4012:	4798      	blx	r3
    4014:	1c07      	adds	r7, r0, #0
    4016:	1c28      	adds	r0, r5, #0
    4018:	47b0      	blx	r6
    401a:	9a01      	ldr	r2, [sp, #4]
    401c:	5c13      	ldrb	r3, [r2, r0]
    401e:	2b02      	cmp	r3, #2
    4020:	d107      	bne.n	4032 <xQueueGenericReceive+0xd6>
    4022:	4b96      	ldr	r3, [pc, #600]	; (427c <xQueueGenericReceive+0x320>)
    4024:	58e3      	ldr	r3, [r4, r3]
    4026:	4798      	blx	r3
    4028:	4b95      	ldr	r3, [pc, #596]	; (4280 <xQueueGenericReceive+0x324>)
    402a:	58e3      	ldr	r3, [r4, r3]
    402c:	4798      	blx	r3
    402e:	1c02      	adds	r2, r0, #0
    4030:	e002      	b.n	4038 <xQueueGenericReceive+0xdc>
    4032:	6baa      	ldr	r2, [r5, #56]	; 0x38
    4034:	3a01      	subs	r2, #1
    4036:	b2d2      	uxtb	r2, r2
    4038:	4640      	mov	r0, r8
    403a:	1c39      	adds	r1, r7, #0
    403c:	4b91      	ldr	r3, [pc, #580]	; (4284 <xQueueGenericReceive+0x328>)
    403e:	58e3      	ldr	r3, [r4, r3]
    4040:	4798      	blx	r3

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    4042:	6bab      	ldr	r3, [r5, #56]	; 0x38
    4044:	3b01      	subs	r3, #1
    4046:	63ab      	str	r3, [r5, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4048:	682b      	ldr	r3, [r5, #0]
    404a:	2b00      	cmp	r3, #0
    404c:	d103      	bne.n	4056 <xQueueGenericReceive+0xfa>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    404e:	4b8e      	ldr	r3, [pc, #568]	; (4288 <xQueueGenericReceive+0x32c>)
    4050:	58e3      	ldr	r3, [r4, r3]
    4052:	4798      	blx	r3
    4054:	6068      	str	r0, [r5, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4056:	692a      	ldr	r2, [r5, #16]
    4058:	2a00      	cmp	r2, #0
    405a:	d031      	beq.n	40c0 <xQueueGenericReceive+0x164>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    405c:	1c28      	adds	r0, r5, #0
    405e:	3010      	adds	r0, #16
    4060:	4b8a      	ldr	r3, [pc, #552]	; (428c <xQueueGenericReceive+0x330>)
    4062:	58e3      	ldr	r3, [r4, r3]
    4064:	4798      	blx	r3
    4066:	2801      	cmp	r0, #1
    4068:	d12a      	bne.n	40c0 <xQueueGenericReceive+0x164>
						{
							queueYIELD_IF_USING_PREEMPTION();
    406a:	4b89      	ldr	r3, [pc, #548]	; (4290 <xQueueGenericReceive+0x334>)
    406c:	58e3      	ldr	r3, [r4, r3]
    406e:	4798      	blx	r3
    4070:	e026      	b.n	40c0 <xQueueGenericReceive+0x164>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					traceQUEUE_PEEK( pxQueue );
    4072:	1c28      	adds	r0, r5, #0
    4074:	4b7d      	ldr	r3, [pc, #500]	; (426c <xQueueGenericReceive+0x310>)
    4076:	58e3      	ldr	r3, [r4, r3]
    4078:	9301      	str	r3, [sp, #4]
    407a:	4798      	blx	r3
    407c:	4b7c      	ldr	r3, [pc, #496]	; (4270 <xQueueGenericReceive+0x314>)
    407e:	58e6      	ldr	r6, [r4, r3]
    4080:	5c33      	ldrb	r3, [r6, r0]
    4082:	3378      	adds	r3, #120	; 0x78
    4084:	b2df      	uxtb	r7, r3
    4086:	1c28      	adds	r0, r5, #0
    4088:	9b01      	ldr	r3, [sp, #4]
    408a:	4798      	blx	r3
    408c:	5c36      	ldrb	r6, [r6, r0]
    408e:	1c28      	adds	r0, r5, #0
    4090:	4b78      	ldr	r3, [pc, #480]	; (4274 <xQueueGenericReceive+0x318>)
    4092:	58e3      	ldr	r3, [r4, r3]
    4094:	4798      	blx	r3
    4096:	1c02      	adds	r2, r0, #0
    4098:	1c38      	adds	r0, r7, #0
    409a:	1c31      	adds	r1, r6, #0
    409c:	4b76      	ldr	r3, [pc, #472]	; (4278 <xQueueGenericReceive+0x31c>)
    409e:	58e3      	ldr	r3, [r4, r3]
    40a0:	4798      	blx	r3

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    40a2:	4642      	mov	r2, r8
    40a4:	60ea      	str	r2, [r5, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    40a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    40a8:	2b00      	cmp	r3, #0
    40aa:	d009      	beq.n	40c0 <xQueueGenericReceive+0x164>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    40ac:	1c28      	adds	r0, r5, #0
    40ae:	3024      	adds	r0, #36	; 0x24
    40b0:	4b76      	ldr	r3, [pc, #472]	; (428c <xQueueGenericReceive+0x330>)
    40b2:	58e3      	ldr	r3, [r4, r3]
    40b4:	4798      	blx	r3
    40b6:	2800      	cmp	r0, #0
    40b8:	d002      	beq.n	40c0 <xQueueGenericReceive+0x164>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    40ba:	4b75      	ldr	r3, [pc, #468]	; (4290 <xQueueGenericReceive+0x334>)
    40bc:	58e3      	ldr	r3, [r4, r3]
    40be:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    40c0:	4b74      	ldr	r3, [pc, #464]	; (4294 <xQueueGenericReceive+0x338>)
    40c2:	58e3      	ldr	r3, [r4, r3]
    40c4:	4798      	blx	r3
				return pdPASS;
    40c6:	2001      	movs	r0, #1
    40c8:	e0c0      	b.n	424c <xQueueGenericReceive+0x2f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    40ca:	9a05      	ldr	r2, [sp, #20]
    40cc:	2a00      	cmp	r2, #0
    40ce:	d11c      	bne.n	410a <xQueueGenericReceive+0x1ae>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    40d0:	4b70      	ldr	r3, [pc, #448]	; (4294 <xQueueGenericReceive+0x338>)
    40d2:	58e3      	ldr	r3, [r4, r3]
    40d4:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    40d6:	1c28      	adds	r0, r5, #0
    40d8:	4b64      	ldr	r3, [pc, #400]	; (426c <xQueueGenericReceive+0x310>)
    40da:	58e3      	ldr	r3, [r4, r3]
    40dc:	9301      	str	r3, [sp, #4]
    40de:	4798      	blx	r3
    40e0:	4b63      	ldr	r3, [pc, #396]	; (4270 <xQueueGenericReceive+0x314>)
    40e2:	58e6      	ldr	r6, [r4, r3]
    40e4:	5c33      	ldrb	r3, [r6, r0]
    40e6:	3350      	adds	r3, #80	; 0x50
    40e8:	b2df      	uxtb	r7, r3
    40ea:	1c28      	adds	r0, r5, #0
    40ec:	9b01      	ldr	r3, [sp, #4]
    40ee:	4798      	blx	r3
    40f0:	5c36      	ldrb	r6, [r6, r0]
    40f2:	1c28      	adds	r0, r5, #0
    40f4:	4b5f      	ldr	r3, [pc, #380]	; (4274 <xQueueGenericReceive+0x318>)
    40f6:	58e3      	ldr	r3, [r4, r3]
    40f8:	4798      	blx	r3
    40fa:	1c02      	adds	r2, r0, #0
    40fc:	1c38      	adds	r0, r7, #0
    40fe:	1c31      	adds	r1, r6, #0
    4100:	4b5d      	ldr	r3, [pc, #372]	; (4278 <xQueueGenericReceive+0x31c>)
    4102:	58e3      	ldr	r3, [r4, r3]
    4104:	4798      	blx	r3
					return errQUEUE_EMPTY;
    4106:	2000      	movs	r0, #0
    4108:	e0a0      	b.n	424c <xQueueGenericReceive+0x2f0>
				}
				else if( xEntryTimeSet == pdFALSE )
    410a:	464a      	mov	r2, r9
    410c:	2a00      	cmp	r2, #0
    410e:	d105      	bne.n	411c <xQueueGenericReceive+0x1c0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    4110:	4640      	mov	r0, r8
    4112:	4b61      	ldr	r3, [pc, #388]	; (4298 <xQueueGenericReceive+0x33c>)
    4114:	58e3      	ldr	r3, [r4, r3]
    4116:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    4118:	2301      	movs	r3, #1
    411a:	4699      	mov	r9, r3
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    411c:	4b5d      	ldr	r3, [pc, #372]	; (4294 <xQueueGenericReceive+0x338>)
    411e:	58e3      	ldr	r3, [r4, r3]
    4120:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4122:	4b5e      	ldr	r3, [pc, #376]	; (429c <xQueueGenericReceive+0x340>)
    4124:	58e3      	ldr	r3, [r4, r3]
    4126:	4798      	blx	r3
		prvLockQueue( pxQueue );
    4128:	4b4e      	ldr	r3, [pc, #312]	; (4264 <xQueueGenericReceive+0x308>)
    412a:	58e3      	ldr	r3, [r4, r3]
    412c:	4798      	blx	r3
    412e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    4130:	3301      	adds	r3, #1
    4132:	d101      	bne.n	4138 <xQueueGenericReceive+0x1dc>
    4134:	2300      	movs	r3, #0
    4136:	646b      	str	r3, [r5, #68]	; 0x44
    4138:	6cab      	ldr	r3, [r5, #72]	; 0x48
    413a:	3301      	adds	r3, #1
    413c:	d101      	bne.n	4142 <xQueueGenericReceive+0x1e6>
    413e:	2300      	movs	r3, #0
    4140:	64ab      	str	r3, [r5, #72]	; 0x48
    4142:	4b54      	ldr	r3, [pc, #336]	; (4294 <xQueueGenericReceive+0x338>)
    4144:	58e3      	ldr	r3, [r4, r3]
    4146:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4148:	4640      	mov	r0, r8
    414a:	a905      	add	r1, sp, #20
    414c:	4b54      	ldr	r3, [pc, #336]	; (42a0 <xQueueGenericReceive+0x344>)
    414e:	58e3      	ldr	r3, [r4, r3]
    4150:	4798      	blx	r3
    4152:	2800      	cmp	r0, #0
    4154:	d15a      	bne.n	420c <xQueueGenericReceive+0x2b0>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    4156:	4b43      	ldr	r3, [pc, #268]	; (4264 <xQueueGenericReceive+0x308>)
    4158:	58e3      	ldr	r3, [r4, r3]
    415a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    415c:	6bae      	ldr	r6, [r5, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    415e:	4b4d      	ldr	r3, [pc, #308]	; (4294 <xQueueGenericReceive+0x338>)
    4160:	58e3      	ldr	r3, [r4, r3]
    4162:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4164:	2e00      	cmp	r6, #0
    4166:	d149      	bne.n	41fc <xQueueGenericReceive+0x2a0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    4168:	1c28      	adds	r0, r5, #0
    416a:	4b40      	ldr	r3, [pc, #256]	; (426c <xQueueGenericReceive+0x310>)
    416c:	58e3      	ldr	r3, [r4, r3]
    416e:	9301      	str	r3, [sp, #4]
    4170:	4798      	blx	r3
    4172:	4b3f      	ldr	r3, [pc, #252]	; (4270 <xQueueGenericReceive+0x314>)
    4174:	58e6      	ldr	r6, [r4, r3]
    4176:	5c33      	ldrb	r3, [r6, r0]
    4178:	3368      	adds	r3, #104	; 0x68
    417a:	b2db      	uxtb	r3, r3
    417c:	469b      	mov	fp, r3
    417e:	1c28      	adds	r0, r5, #0
    4180:	9a01      	ldr	r2, [sp, #4]
    4182:	4790      	blx	r2
    4184:	5c30      	ldrb	r0, [r6, r0]
    4186:	4682      	mov	sl, r0
    4188:	1c28      	adds	r0, r5, #0
    418a:	4b3a      	ldr	r3, [pc, #232]	; (4274 <xQueueGenericReceive+0x318>)
    418c:	58e3      	ldr	r3, [r4, r3]
    418e:	4798      	blx	r3
    4190:	1c02      	adds	r2, r0, #0
    4192:	4658      	mov	r0, fp
    4194:	4651      	mov	r1, sl
    4196:	4b38      	ldr	r3, [pc, #224]	; (4278 <xQueueGenericReceive+0x31c>)
    4198:	58e3      	ldr	r3, [r4, r3]
    419a:	4798      	blx	r3
    419c:	1c28      	adds	r0, r5, #0
    419e:	9b01      	ldr	r3, [sp, #4]
    41a0:	4798      	blx	r3
    41a2:	5c33      	ldrb	r3, [r6, r0]
    41a4:	2b02      	cmp	r3, #2
    41a6:	d008      	beq.n	41ba <xQueueGenericReceive+0x25e>
    41a8:	4b34      	ldr	r3, [pc, #208]	; (427c <xQueueGenericReceive+0x320>)
    41aa:	58e3      	ldr	r3, [r4, r3]
    41ac:	4798      	blx	r3
    41ae:	4b34      	ldr	r3, [pc, #208]	; (4280 <xQueueGenericReceive+0x324>)
    41b0:	58e3      	ldr	r3, [r4, r3]
    41b2:	4798      	blx	r3
    41b4:	4b3b      	ldr	r3, [pc, #236]	; (42a4 <xQueueGenericReceive+0x348>)
    41b6:	58e3      	ldr	r3, [r4, r3]
    41b8:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    41ba:	682a      	ldr	r2, [r5, #0]
    41bc:	2a00      	cmp	r2, #0
    41be:	d109      	bne.n	41d4 <xQueueGenericReceive+0x278>
					{
						taskENTER_CRITICAL();
    41c0:	4b28      	ldr	r3, [pc, #160]	; (4264 <xQueueGenericReceive+0x308>)
    41c2:	58e3      	ldr	r3, [r4, r3]
    41c4:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    41c6:	6868      	ldr	r0, [r5, #4]
    41c8:	4b37      	ldr	r3, [pc, #220]	; (42a8 <xQueueGenericReceive+0x34c>)
    41ca:	58e3      	ldr	r3, [r4, r3]
    41cc:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    41ce:	4b31      	ldr	r3, [pc, #196]	; (4294 <xQueueGenericReceive+0x338>)
    41d0:	58e3      	ldr	r3, [r4, r3]
    41d2:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    41d4:	1c28      	adds	r0, r5, #0
    41d6:	3024      	adds	r0, #36	; 0x24
    41d8:	9905      	ldr	r1, [sp, #20]
    41da:	4b34      	ldr	r3, [pc, #208]	; (42ac <xQueueGenericReceive+0x350>)
    41dc:	58e3      	ldr	r3, [r4, r3]
    41de:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    41e0:	1c28      	adds	r0, r5, #0
    41e2:	4b33      	ldr	r3, [pc, #204]	; (42b0 <xQueueGenericReceive+0x354>)
    41e4:	447b      	add	r3, pc
    41e6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    41e8:	4b32      	ldr	r3, [pc, #200]	; (42b4 <xQueueGenericReceive+0x358>)
    41ea:	58e3      	ldr	r3, [r4, r3]
    41ec:	4798      	blx	r3
    41ee:	2800      	cmp	r0, #0
    41f0:	d000      	beq.n	41f4 <xQueueGenericReceive+0x298>
    41f2:	e6dd      	b.n	3fb0 <xQueueGenericReceive+0x54>
				{
					portYIELD_WITHIN_API();
    41f4:	4b26      	ldr	r3, [pc, #152]	; (4290 <xQueueGenericReceive+0x334>)
    41f6:	58e3      	ldr	r3, [r4, r3]
    41f8:	4798      	blx	r3
    41fa:	e6d9      	b.n	3fb0 <xQueueGenericReceive+0x54>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    41fc:	1c28      	adds	r0, r5, #0
    41fe:	4b2e      	ldr	r3, [pc, #184]	; (42b8 <xQueueGenericReceive+0x35c>)
    4200:	447b      	add	r3, pc
    4202:	4798      	blx	r3
				( void ) xTaskResumeAll();
    4204:	4b2b      	ldr	r3, [pc, #172]	; (42b4 <xQueueGenericReceive+0x358>)
    4206:	58e3      	ldr	r3, [r4, r3]
    4208:	4798      	blx	r3
    420a:	e6d1      	b.n	3fb0 <xQueueGenericReceive+0x54>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    420c:	1c28      	adds	r0, r5, #0
    420e:	4b2b      	ldr	r3, [pc, #172]	; (42bc <xQueueGenericReceive+0x360>)
    4210:	447b      	add	r3, pc
    4212:	4798      	blx	r3
			( void ) xTaskResumeAll();
    4214:	4b27      	ldr	r3, [pc, #156]	; (42b4 <xQueueGenericReceive+0x358>)
    4216:	58e3      	ldr	r3, [r4, r3]
    4218:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
    421a:	1c28      	adds	r0, r5, #0
    421c:	4b13      	ldr	r3, [pc, #76]	; (426c <xQueueGenericReceive+0x310>)
    421e:	58e3      	ldr	r3, [r4, r3]
    4220:	9301      	str	r3, [sp, #4]
    4222:	4798      	blx	r3
    4224:	4b12      	ldr	r3, [pc, #72]	; (4270 <xQueueGenericReceive+0x314>)
    4226:	58e6      	ldr	r6, [r4, r3]
    4228:	5c33      	ldrb	r3, [r6, r0]
    422a:	3350      	adds	r3, #80	; 0x50
    422c:	b2df      	uxtb	r7, r3
    422e:	1c28      	adds	r0, r5, #0
    4230:	9b01      	ldr	r3, [sp, #4]
    4232:	4798      	blx	r3
    4234:	5c36      	ldrb	r6, [r6, r0]
    4236:	1c28      	adds	r0, r5, #0
    4238:	4b0e      	ldr	r3, [pc, #56]	; (4274 <xQueueGenericReceive+0x318>)
    423a:	58e3      	ldr	r3, [r4, r3]
    423c:	4798      	blx	r3
    423e:	1c02      	adds	r2, r0, #0
    4240:	1c38      	adds	r0, r7, #0
    4242:	1c31      	adds	r1, r6, #0
    4244:	4b0c      	ldr	r3, [pc, #48]	; (4278 <xQueueGenericReceive+0x31c>)
    4246:	58e3      	ldr	r3, [r4, r3]
    4248:	4798      	blx	r3
			return errQUEUE_EMPTY;
    424a:	2000      	movs	r0, #0
		}
	}
}
    424c:	b009      	add	sp, #36	; 0x24
    424e:	bc3c      	pop	{r2, r3, r4, r5}
    4250:	4690      	mov	r8, r2
    4252:	4699      	mov	r9, r3
    4254:	46a2      	mov	sl, r4
    4256:	46ab      	mov	fp, r5
    4258:	bdf0      	pop	{r4, r5, r6, r7, pc}
    425a:	46c0      	nop			; (mov r8, r8)
    425c:	00003e90 	.word	0x00003e90
    4260:	0000027c 	.word	0x0000027c
    4264:	000002b4 	.word	0x000002b4
    4268:	fffff883 	.word	0xfffff883
    426c:	0000019c 	.word	0x0000019c
    4270:	000002a8 	.word	0x000002a8
    4274:	00000070 	.word	0x00000070
    4278:	0000024c 	.word	0x0000024c
    427c:	00000008 	.word	0x00000008
    4280:	00000084 	.word	0x00000084
    4284:	000002a4 	.word	0x000002a4
    4288:	000001dc 	.word	0x000001dc
    428c:	00000110 	.word	0x00000110
    4290:	00000194 	.word	0x00000194
    4294:	00000014 	.word	0x00000014
    4298:	000002b0 	.word	0x000002b0
    429c:	00000138 	.word	0x00000138
    42a0:	00000130 	.word	0x00000130
    42a4:	0000022c 	.word	0x0000022c
    42a8:	00000160 	.word	0x00000160
    42ac:	0000006c 	.word	0x0000006c
    42b0:	fffff69d 	.word	0xfffff69d
    42b4:	00000200 	.word	0x00000200
    42b8:	fffff681 	.word	0xfffff681
    42bc:	fffff671 	.word	0xfffff671

000042c0 <uxQueueGetQueueNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
    42c0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	}
    42c2:	4770      	bx	lr

000042c4 <ucQueueGetQueueType>:

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
		return ( ( Queue_t * ) xQueue )->ucQueueType;
    42c4:	2350      	movs	r3, #80	; 0x50
    42c6:	5cc0      	ldrb	r0, [r0, r3]
	}
    42c8:	4770      	bx	lr
    42ca:	46c0      	nop			; (mov r8, r8)

000042cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
    42cc:	b570      	push	{r4, r5, r6, lr}
    42ce:	b082      	sub	sp, #8
    42d0:	1c04      	adds	r4, r0, #0
    42d2:	1c0e      	adds	r6, r1, #0
    42d4:	4d10      	ldr	r5, [pc, #64]	; (4318 <vQueueWaitForMessageRestricted+0x4c>)
    42d6:	447d      	add	r5, pc
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    42d8:	4b10      	ldr	r3, [pc, #64]	; (431c <vQueueWaitForMessageRestricted+0x50>)
    42da:	58eb      	ldr	r3, [r5, r3]
    42dc:	4798      	blx	r3
    42de:	6c63      	ldr	r3, [r4, #68]	; 0x44
    42e0:	3301      	adds	r3, #1
    42e2:	d101      	bne.n	42e8 <vQueueWaitForMessageRestricted+0x1c>
    42e4:	2300      	movs	r3, #0
    42e6:	6463      	str	r3, [r4, #68]	; 0x44
    42e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    42ea:	3301      	adds	r3, #1
    42ec:	d101      	bne.n	42f2 <vQueueWaitForMessageRestricted+0x26>
    42ee:	2300      	movs	r3, #0
    42f0:	64a3      	str	r3, [r4, #72]	; 0x48
    42f2:	4b0b      	ldr	r3, [pc, #44]	; (4320 <vQueueWaitForMessageRestricted+0x54>)
    42f4:	58eb      	ldr	r3, [r5, r3]
    42f6:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    42f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    42fa:	2b00      	cmp	r3, #0
    42fc:	d105      	bne.n	430a <vQueueWaitForMessageRestricted+0x3e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    42fe:	1c20      	adds	r0, r4, #0
    4300:	3024      	adds	r0, #36	; 0x24
    4302:	1c31      	adds	r1, r6, #0
    4304:	4b07      	ldr	r3, [pc, #28]	; (4324 <vQueueWaitForMessageRestricted+0x58>)
    4306:	58eb      	ldr	r3, [r5, r3]
    4308:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    430a:	1c20      	adds	r0, r4, #0
    430c:	4b06      	ldr	r3, [pc, #24]	; (4328 <vQueueWaitForMessageRestricted+0x5c>)
    430e:	447b      	add	r3, pc
    4310:	4798      	blx	r3
	}
    4312:	b002      	add	sp, #8
    4314:	bd70      	pop	{r4, r5, r6, pc}
    4316:	46c0      	nop			; (mov r8, r8)
    4318:	00003b2e 	.word	0x00003b2e
    431c:	000002b4 	.word	0x000002b4
    4320:	00000014 	.word	0x00000014
    4324:	00000170 	.word	0x00000170
    4328:	fffff573 	.word	0xfffff573

0000432c <prvTaskIsTaskSuspended>:

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
    432c:	2800      	cmp	r0, #0
    432e:	d101      	bne.n	4334 <prvTaskIsTaskSuspended+0x8>
    4330:	b672      	cpsid	i
    4332:	e7fe      	b.n	4332 <prvTaskIsTaskSuspended+0x6>

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
	BaseType_t xReturn = pdFALSE;
    4334:	2300      	movs	r3, #0

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4336:	4a08      	ldr	r2, [pc, #32]	; (4358 <prvTaskIsTaskSuspended+0x2c>)
    4338:	447a      	add	r2, pc
    433a:	6941      	ldr	r1, [r0, #20]
    433c:	4291      	cmp	r1, r2
    433e:	d109      	bne.n	4354 <prvTaskIsTaskSuspended+0x28>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    4340:	6a83      	ldr	r3, [r0, #40]	; 0x28
    4342:	4a06      	ldr	r2, [pc, #24]	; (435c <prvTaskIsTaskSuspended+0x30>)
    4344:	447a      	add	r2, pc
    4346:	3214      	adds	r2, #20
    4348:	4293      	cmp	r3, r2
    434a:	d002      	beq.n	4352 <prvTaskIsTaskSuspended+0x26>

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
	BaseType_t xReturn = pdFALSE;
    434c:	425a      	negs	r2, r3
    434e:	4153      	adcs	r3, r2
    4350:	e000      	b.n	4354 <prvTaskIsTaskSuspended+0x28>
    4352:	2300      	movs	r3, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    4354:	1c18      	adds	r0, r3, #0
    4356:	4770      	bx	lr
    4358:	1fffd1e8 	.word	0x1fffd1e8
    435c:	1fffd1dc 	.word	0x1fffd1dc

00004360 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4360:	4b0a      	ldr	r3, [pc, #40]	; (438c <prvResetNextTaskUnblockTime+0x2c>)
    4362:	447b      	add	r3, pc
    4364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4366:	681b      	ldr	r3, [r3, #0]
    4368:	2b00      	cmp	r3, #0
    436a:	d105      	bne.n	4378 <prvResetNextTaskUnblockTime+0x18>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    436c:	2201      	movs	r2, #1
    436e:	4252      	negs	r2, r2
    4370:	4b07      	ldr	r3, [pc, #28]	; (4390 <prvResetNextTaskUnblockTime+0x30>)
    4372:	447b      	add	r3, pc
    4374:	601a      	str	r2, [r3, #0]
    4376:	e008      	b.n	438a <prvResetNextTaskUnblockTime+0x2a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4378:	4b06      	ldr	r3, [pc, #24]	; (4394 <prvResetNextTaskUnblockTime+0x34>)
    437a:	447b      	add	r3, pc
    437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    437e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    4380:	68db      	ldr	r3, [r3, #12]
    4382:	685a      	ldr	r2, [r3, #4]
    4384:	4b04      	ldr	r3, [pc, #16]	; (4398 <prvResetNextTaskUnblockTime+0x38>)
    4386:	447b      	add	r3, pc
    4388:	601a      	str	r2, [r3, #0]
	}
}
    438a:	4770      	bx	lr
    438c:	1fffd1be 	.word	0x1fffd1be
    4390:	1fffbc9e 	.word	0x1fffbc9e
    4394:	1fffd1a6 	.word	0x1fffd1a6
    4398:	1fffbc8a 	.word	0x1fffbc8a

0000439c <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    439c:	b510      	push	{r4, lr}
    439e:	b082      	sub	sp, #8
    43a0:	1c04      	adds	r4, r0, #0
    43a2:	4b16      	ldr	r3, [pc, #88]	; (43fc <prvAddCurrentTaskToDelayedList+0x60>)
    43a4:	447b      	add	r3, pc
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    43a6:	4a16      	ldr	r2, [pc, #88]	; (4400 <prvAddCurrentTaskToDelayedList+0x64>)
    43a8:	589a      	ldr	r2, [r3, r2]
    43aa:	6812      	ldr	r2, [r2, #0]
    43ac:	6050      	str	r0, [r2, #4]

	if( xTimeToWake < xTickCount )
    43ae:	4a15      	ldr	r2, [pc, #84]	; (4404 <prvAddCurrentTaskToDelayedList+0x68>)
    43b0:	447a      	add	r2, pc
    43b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    43b4:	4290      	cmp	r0, r2
    43b6:	d20b      	bcs.n	43d0 <prvAddCurrentTaskToDelayedList+0x34>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    43b8:	4a13      	ldr	r2, [pc, #76]	; (4408 <prvAddCurrentTaskToDelayedList+0x6c>)
    43ba:	447a      	add	r2, pc
    43bc:	6b10      	ldr	r0, [r2, #48]	; 0x30
    43be:	4a10      	ldr	r2, [pc, #64]	; (4400 <prvAddCurrentTaskToDelayedList+0x64>)
    43c0:	589a      	ldr	r2, [r3, r2]
    43c2:	6811      	ldr	r1, [r2, #0]
    43c4:	3104      	adds	r1, #4
    43c6:	4a11      	ldr	r2, [pc, #68]	; (440c <prvAddCurrentTaskToDelayedList+0x70>)
    43c8:	589a      	ldr	r2, [r3, r2]
    43ca:	9201      	str	r2, [sp, #4]
    43cc:	4790      	blx	r2
    43ce:	e012      	b.n	43f6 <prvAddCurrentTaskToDelayedList+0x5a>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    43d0:	4a0f      	ldr	r2, [pc, #60]	; (4410 <prvAddCurrentTaskToDelayedList+0x74>)
    43d2:	447a      	add	r2, pc
    43d4:	6a90      	ldr	r0, [r2, #40]	; 0x28
    43d6:	4a0a      	ldr	r2, [pc, #40]	; (4400 <prvAddCurrentTaskToDelayedList+0x64>)
    43d8:	589a      	ldr	r2, [r3, r2]
    43da:	6811      	ldr	r1, [r2, #0]
    43dc:	3104      	adds	r1, #4
    43de:	4a0b      	ldr	r2, [pc, #44]	; (440c <prvAddCurrentTaskToDelayedList+0x70>)
    43e0:	589a      	ldr	r2, [r3, r2]
    43e2:	9201      	str	r2, [sp, #4]
    43e4:	4790      	blx	r2

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    43e6:	4b0b      	ldr	r3, [pc, #44]	; (4414 <prvAddCurrentTaskToDelayedList+0x78>)
    43e8:	447b      	add	r3, pc
    43ea:	681b      	ldr	r3, [r3, #0]
    43ec:	429c      	cmp	r4, r3
    43ee:	d202      	bcs.n	43f6 <prvAddCurrentTaskToDelayedList+0x5a>
		{
			xNextTaskUnblockTime = xTimeToWake;
    43f0:	4b09      	ldr	r3, [pc, #36]	; (4418 <prvAddCurrentTaskToDelayedList+0x7c>)
    43f2:	447b      	add	r3, pc
    43f4:	601c      	str	r4, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    43f6:	b002      	add	sp, #8
    43f8:	bd10      	pop	{r4, pc}
    43fa:	46c0      	nop			; (mov r8, r8)
    43fc:	00003a60 	.word	0x00003a60
    4400:	00000054 	.word	0x00000054
    4404:	1fffd170 	.word	0x1fffd170
    4408:	1fffd166 	.word	0x1fffd166
    440c:	000001bc 	.word	0x000001bc
    4410:	1fffd14e 	.word	0x1fffd14e
    4414:	1fffbc28 	.word	0x1fffbc28
    4418:	1fffbc1e 	.word	0x1fffbc1e

0000441c <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    441c:	b5f0      	push	{r4, r5, r6, r7, lr}
    441e:	465f      	mov	r7, fp
    4420:	4656      	mov	r6, sl
    4422:	464d      	mov	r5, r9
    4424:	4644      	mov	r4, r8
    4426:	b4f0      	push	{r4, r5, r6, r7}
    4428:	b085      	sub	sp, #20
    442a:	4681      	mov	r9, r0
    442c:	1c0f      	adds	r7, r1, #0
    442e:	1c16      	adds	r6, r2, #0
    4430:	469a      	mov	sl, r3
    4432:	4d8e      	ldr	r5, [pc, #568]	; (466c <xTaskGenericCreate+0x250>)
    4434:	447d      	add	r5, pc
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
    4436:	2800      	cmp	r0, #0
    4438:	d101      	bne.n	443e <xTaskGenericCreate+0x22>
    443a:	b672      	cpsid	i
    443c:	e7fe      	b.n	443c <xTaskGenericCreate+0x20>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
    443e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4440:	2a04      	cmp	r2, #4
    4442:	d901      	bls.n	4448 <xTaskGenericCreate+0x2c>
    4444:	b672      	cpsid	i
    4446:	e7fe      	b.n	4446 <xTaskGenericCreate+0x2a>
{
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    4448:	2048      	movs	r0, #72	; 0x48
    444a:	4b89      	ldr	r3, [pc, #548]	; (4670 <xTaskGenericCreate+0x254>)
    444c:	58eb      	ldr	r3, [r5, r3]
    444e:	4798      	blx	r3
    4450:	1e04      	subs	r4, r0, #0

	if( pxNewTCB != NULL )
    4452:	d100      	bne.n	4456 <xTaskGenericCreate+0x3a>
    4454:	e0c8      	b.n	45e8 <xTaskGenericCreate+0x1cc>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4456:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4458:	2b00      	cmp	r3, #0
    445a:	d000      	beq.n	445e <xTaskGenericCreate+0x42>
    445c:	e0c0      	b.n	45e0 <xTaskGenericCreate+0x1c4>
    445e:	00b0      	lsls	r0, r6, #2
    4460:	4b83      	ldr	r3, [pc, #524]	; (4670 <xTaskGenericCreate+0x254>)
    4462:	58eb      	ldr	r3, [r5, r3]
    4464:	4798      	blx	r3
    4466:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    4468:	2800      	cmp	r0, #0
    446a:	d104      	bne.n	4476 <xTaskGenericCreate+0x5a>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    446c:	1c20      	adds	r0, r4, #0
    446e:	4b81      	ldr	r3, [pc, #516]	; (4674 <xTaskGenericCreate+0x258>)
    4470:	58eb      	ldr	r3, [r5, r3]
    4472:	4798      	blx	r3
    4474:	e0b8      	b.n	45e8 <xTaskGenericCreate+0x1cc>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
    4476:	00b2      	lsls	r2, r6, #2
    4478:	21a5      	movs	r1, #165	; 0xa5
    447a:	4b7f      	ldr	r3, [pc, #508]	; (4678 <xTaskGenericCreate+0x25c>)
    447c:	58eb      	ldr	r3, [r5, r3]
    447e:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
    4480:	4a7e      	ldr	r2, [pc, #504]	; (467c <xTaskGenericCreate+0x260>)
    4482:	18b3      	adds	r3, r6, r2
    4484:	009b      	lsls	r3, r3, #2
    4486:	6b22      	ldr	r2, [r4, #48]	; 0x30
    4488:	18d3      	adds	r3, r2, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    448a:	2207      	movs	r2, #7
    448c:	4393      	bics	r3, r2
    448e:	469b      	mov	fp, r3
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    4490:	783a      	ldrb	r2, [r7, #0]
    4492:	2334      	movs	r3, #52	; 0x34
    4494:	54e2      	strb	r2, [r4, r3]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    4496:	783b      	ldrb	r3, [r7, #0]
    4498:	2b00      	cmp	r3, #0
    449a:	d00a      	beq.n	44b2 <xTaskGenericCreate+0x96>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    449c:	2301      	movs	r3, #1
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    449e:	5cf9      	ldrb	r1, [r7, r3]
    44a0:	18e2      	adds	r2, r4, r3
    44a2:	3234      	adds	r2, #52	; 0x34
    44a4:	7011      	strb	r1, [r2, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    44a6:	5cfa      	ldrb	r2, [r7, r3]
    44a8:	2a00      	cmp	r2, #0
    44aa:	d002      	beq.n	44b2 <xTaskGenericCreate+0x96>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    44ac:	3301      	adds	r3, #1
    44ae:	2b05      	cmp	r3, #5
    44b0:	d1f5      	bne.n	449e <xTaskGenericCreate+0x82>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    44b2:	2200      	movs	r2, #0
    44b4:	2338      	movs	r3, #56	; 0x38
    44b6:	54e2      	strb	r2, [r4, r3]
    44b8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    44ba:	2e04      	cmp	r6, #4
    44bc:	d900      	bls.n	44c0 <xTaskGenericCreate+0xa4>
    44be:	2604      	movs	r6, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    44c0:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    44c2:	6466      	str	r6, [r4, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    44c4:	1d23      	adds	r3, r4, #4
    44c6:	4698      	mov	r8, r3
    44c8:	1c18      	adds	r0, r3, #0
    44ca:	4b6d      	ldr	r3, [pc, #436]	; (4680 <xTaskGenericCreate+0x264>)
    44cc:	58ef      	ldr	r7, [r5, r3]
    44ce:	47b8      	blx	r7
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    44d0:	1c20      	adds	r0, r4, #0
    44d2:	3018      	adds	r0, #24
    44d4:	47b8      	blx	r7

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    44d6:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    44d8:	2305      	movs	r3, #5
    44da:	1b9e      	subs	r6, r3, r6
    44dc:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    44de:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    44e0:	4658      	mov	r0, fp
    44e2:	4649      	mov	r1, r9
    44e4:	4652      	mov	r2, sl
    44e6:	4b67      	ldr	r3, [pc, #412]	; (4684 <xTaskGenericCreate+0x268>)
    44e8:	58eb      	ldr	r3, [r5, r3]
    44ea:	4798      	blx	r3
    44ec:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    44ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    44f0:	2a00      	cmp	r2, #0
    44f2:	d000      	beq.n	44f6 <xTaskGenericCreate+0xda>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    44f4:	6014      	str	r4, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    44f6:	4b64      	ldr	r3, [pc, #400]	; (4688 <xTaskGenericCreate+0x26c>)
    44f8:	58eb      	ldr	r3, [r5, r3]
    44fa:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
    44fc:	4b63      	ldr	r3, [pc, #396]	; (468c <xTaskGenericCreate+0x270>)
    44fe:	447b      	add	r3, pc
    4500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    4502:	3201      	adds	r2, #1
    4504:	635a      	str	r2, [r3, #52]	; 0x34
			if( pxCurrentTCB == NULL )
    4506:	4b62      	ldr	r3, [pc, #392]	; (4690 <xTaskGenericCreate+0x274>)
    4508:	58eb      	ldr	r3, [r5, r3]
    450a:	681b      	ldr	r3, [r3, #0]
    450c:	2b00      	cmp	r3, #0
    450e:	d134      	bne.n	457a <xTaskGenericCreate+0x15e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    4510:	4b5f      	ldr	r3, [pc, #380]	; (4690 <xTaskGenericCreate+0x274>)
    4512:	58eb      	ldr	r3, [r5, r3]
    4514:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    4516:	4b5f      	ldr	r3, [pc, #380]	; (4694 <xTaskGenericCreate+0x278>)
    4518:	447b      	add	r3, pc
    451a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    451c:	2b01      	cmp	r3, #1
    451e:	d16c      	bne.n	45fa <xTaskGenericCreate+0x1de>
    4520:	4b5d      	ldr	r3, [pc, #372]	; (4698 <xTaskGenericCreate+0x27c>)
    4522:	447b      	add	r3, pc
    4524:	1c1e      	adds	r6, r3, #0
    4526:	3638      	adds	r6, #56	; 0x38
    4528:	1c1f      	adds	r7, r3, #0
    452a:	379c      	adds	r7, #156	; 0x9c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    452c:	4b5b      	ldr	r3, [pc, #364]	; (469c <xTaskGenericCreate+0x280>)
    452e:	58eb      	ldr	r3, [r5, r3]
    4530:	9301      	str	r3, [sp, #4]
    4532:	1c30      	adds	r0, r6, #0
    4534:	9b01      	ldr	r3, [sp, #4]
    4536:	4798      	blx	r3
    4538:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    453a:	42be      	cmp	r6, r7
    453c:	d1f9      	bne.n	4532 <xTaskGenericCreate+0x116>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    453e:	4a58      	ldr	r2, [pc, #352]	; (46a0 <xTaskGenericCreate+0x284>)
    4540:	447a      	add	r2, pc
    4542:	4691      	mov	r9, r2
    4544:	231c      	movs	r3, #28
    4546:	469b      	mov	fp, r3
    4548:	44cb      	add	fp, r9
    454a:	4658      	mov	r0, fp
    454c:	4b53      	ldr	r3, [pc, #332]	; (469c <xTaskGenericCreate+0x280>)
    454e:	58ee      	ldr	r6, [r5, r3]
    4550:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    4552:	2230      	movs	r2, #48	; 0x30
    4554:	4692      	mov	sl, r2
    4556:	44ca      	add	sl, r9
    4558:	4650      	mov	r0, sl
    455a:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    455c:	4f51      	ldr	r7, [pc, #324]	; (46a4 <xTaskGenericCreate+0x288>)
    455e:	447f      	add	r7, pc
    4560:	1c38      	adds	r0, r7, #0
    4562:	3014      	adds	r0, #20
    4564:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    4566:	4648      	mov	r0, r9
    4568:	3044      	adds	r0, #68	; 0x44
    456a:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    456c:	1c38      	adds	r0, r7, #0
    456e:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    4570:	465b      	mov	r3, fp
    4572:	62bb      	str	r3, [r7, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    4574:	4652      	mov	r2, sl
    4576:	633a      	str	r2, [r7, #48]	; 0x30
    4578:	e03f      	b.n	45fa <xTaskGenericCreate+0x1de>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    457a:	4b4b      	ldr	r3, [pc, #300]	; (46a8 <xTaskGenericCreate+0x28c>)
    457c:	447b      	add	r3, pc
    457e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    4580:	2b00      	cmp	r3, #0
    4582:	d13a      	bne.n	45fa <xTaskGenericCreate+0x1de>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    4584:	4b42      	ldr	r3, [pc, #264]	; (4690 <xTaskGenericCreate+0x274>)
    4586:	58eb      	ldr	r3, [r5, r3]
    4588:	681b      	ldr	r3, [r3, #0]
    458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    458c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    458e:	429a      	cmp	r2, r3
    4590:	d333      	bcc.n	45fa <xTaskGenericCreate+0x1de>
					{
						pxCurrentTCB = pxNewTCB;
    4592:	4b3f      	ldr	r3, [pc, #252]	; (4690 <xTaskGenericCreate+0x274>)
    4594:	58eb      	ldr	r3, [r5, r3]
    4596:	601c      	str	r4, [r3, #0]
    4598:	e02f      	b.n	45fa <xTaskGenericCreate+0x1de>
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    459a:	4a44      	ldr	r2, [pc, #272]	; (46ac <xTaskGenericCreate+0x290>)
    459c:	447a      	add	r2, pc
    459e:	65d3      	str	r3, [r2, #92]	; 0x5c
    45a0:	009a      	lsls	r2, r3, #2
    45a2:	18d3      	adds	r3, r2, r3
    45a4:	009b      	lsls	r3, r3, #2
    45a6:	4842      	ldr	r0, [pc, #264]	; (46b0 <xTaskGenericCreate+0x294>)
    45a8:	4478      	add	r0, pc
    45aa:	3038      	adds	r0, #56	; 0x38
    45ac:	18c0      	adds	r0, r0, r3
    45ae:	4641      	mov	r1, r8
    45b0:	4b40      	ldr	r3, [pc, #256]	; (46b4 <xTaskGenericCreate+0x298>)
    45b2:	58eb      	ldr	r3, [r5, r3]
    45b4:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    45b6:	4b40      	ldr	r3, [pc, #256]	; (46b8 <xTaskGenericCreate+0x29c>)
    45b8:	58eb      	ldr	r3, [r5, r3]
    45ba:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    45bc:	4b3f      	ldr	r3, [pc, #252]	; (46bc <xTaskGenericCreate+0x2a0>)
    45be:	447b      	add	r3, pc
    45c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
    45c2:	2001      	movs	r0, #1
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    45c4:	2b00      	cmp	r3, #0
    45c6:	d049      	beq.n	465c <xTaskGenericCreate+0x240>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    45c8:	4b31      	ldr	r3, [pc, #196]	; (4690 <xTaskGenericCreate+0x274>)
    45ca:	58eb      	ldr	r3, [r5, r3]
    45cc:	681b      	ldr	r3, [r3, #0]
    45ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    45d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    45d2:	429a      	cmp	r2, r3
    45d4:	d942      	bls.n	465c <xTaskGenericCreate+0x240>
			{
				taskYIELD_IF_USING_PREEMPTION();
    45d6:	4b3a      	ldr	r3, [pc, #232]	; (46c0 <xTaskGenericCreate+0x2a4>)
    45d8:	58eb      	ldr	r3, [r5, r3]
    45da:	4798      	blx	r3
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
    45dc:	2001      	movs	r0, #1
    45de:	e03d      	b.n	465c <xTaskGenericCreate+0x240>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    45e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    45e2:	6303      	str	r3, [r0, #48]	; 0x30
    45e4:	1c18      	adds	r0, r3, #0
    45e6:	e746      	b.n	4476 <xTaskGenericCreate+0x5a>
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
		traceTASK_CREATE_FAILED();
    45e8:	2043      	movs	r0, #67	; 0x43
    45ea:	2103      	movs	r1, #3
    45ec:	2200      	movs	r2, #0
    45ee:	4b35      	ldr	r3, [pc, #212]	; (46c4 <xTaskGenericCreate+0x2a8>)
    45f0:	58eb      	ldr	r3, [r5, r3]
    45f2:	4798      	blx	r3
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    45f4:	2001      	movs	r0, #1
    45f6:	4240      	negs	r0, r0
    45f8:	e030      	b.n	465c <xTaskGenericCreate+0x240>
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    45fa:	4f33      	ldr	r7, [pc, #204]	; (46c8 <xTaskGenericCreate+0x2ac>)
    45fc:	447f      	add	r7, pc
    45fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4600:	3301      	adds	r3, #1
    4602:	663b      	str	r3, [r7, #96]	; 0x60

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
    4604:	63e3      	str	r3, [r4, #60]	; 0x3c
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );
    4606:	2003      	movs	r0, #3
    4608:	4b30      	ldr	r3, [pc, #192]	; (46cc <xTaskGenericCreate+0x2b0>)
    460a:	58eb      	ldr	r3, [r5, r3]
    460c:	4798      	blx	r3
    460e:	6420      	str	r0, [r4, #64]	; 0x40
    4610:	1c20      	adds	r0, r4, #0
    4612:	4b2f      	ldr	r3, [pc, #188]	; (46d0 <xTaskGenericCreate+0x2b4>)
    4614:	58ee      	ldr	r6, [r5, r3]
    4616:	47b0      	blx	r6
    4618:	1c01      	adds	r1, r0, #0
    461a:	1c22      	adds	r2, r4, #0
    461c:	3234      	adds	r2, #52	; 0x34
    461e:	2003      	movs	r0, #3
    4620:	4b2c      	ldr	r3, [pc, #176]	; (46d4 <xTaskGenericCreate+0x2b8>)
    4622:	58eb      	ldr	r3, [r5, r3]
    4624:	4798      	blx	r3
    4626:	1c20      	adds	r0, r4, #0
    4628:	47b0      	blx	r6
    462a:	1c01      	adds	r1, r0, #0
    462c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    462e:	b2da      	uxtb	r2, r3
    4630:	2003      	movs	r0, #3
    4632:	4b29      	ldr	r3, [pc, #164]	; (46d8 <xTaskGenericCreate+0x2bc>)
    4634:	58eb      	ldr	r3, [r5, r3]
    4636:	4798      	blx	r3
    4638:	1c20      	adds	r0, r4, #0
    463a:	47b0      	blx	r6
    463c:	1c02      	adds	r2, r0, #0
    463e:	201b      	movs	r0, #27
    4640:	2103      	movs	r1, #3
    4642:	4b20      	ldr	r3, [pc, #128]	; (46c4 <xTaskGenericCreate+0x2a8>)
    4644:	58eb      	ldr	r3, [r5, r3]
    4646:	4798      	blx	r3

			prvAddTaskToReadyList( pxNewTCB );
    4648:	1c20      	adds	r0, r4, #0
    464a:	47b0      	blx	r6
    464c:	4b23      	ldr	r3, [pc, #140]	; (46dc <xTaskGenericCreate+0x2c0>)
    464e:	58eb      	ldr	r3, [r5, r3]
    4650:	4798      	blx	r3
    4652:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4654:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    4656:	4293      	cmp	r3, r2
    4658:	d89f      	bhi.n	459a <xTaskGenericCreate+0x17e>
    465a:	e7a1      	b.n	45a0 <xTaskGenericCreate+0x184>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
    465c:	b005      	add	sp, #20
    465e:	bc3c      	pop	{r2, r3, r4, r5}
    4660:	4690      	mov	r8, r2
    4662:	4699      	mov	r9, r3
    4664:	46a2      	mov	sl, r4
    4666:	46ab      	mov	fp, r5
    4668:	bdf0      	pop	{r4, r5, r6, r7, pc}
    466a:	46c0      	nop			; (mov r8, r8)
    466c:	000039d0 	.word	0x000039d0
    4670:	000000e0 	.word	0x000000e0
    4674:	0000008c 	.word	0x0000008c
    4678:	000001ac 	.word	0x000001ac
    467c:	3fffffff 	.word	0x3fffffff
    4680:	000000b8 	.word	0x000000b8
    4684:	0000029c 	.word	0x0000029c
    4688:	000002b4 	.word	0x000002b4
    468c:	1fffd022 	.word	0x1fffd022
    4690:	00000054 	.word	0x00000054
    4694:	1fffd008 	.word	0x1fffd008
    4698:	1fffcffe 	.word	0x1fffcffe
    469c:	000000f8 	.word	0x000000f8
    46a0:	1fffd060 	.word	0x1fffd060
    46a4:	1fffcfc2 	.word	0x1fffcfc2
    46a8:	1fffd024 	.word	0x1fffd024
    46ac:	1fffd004 	.word	0x1fffd004
    46b0:	1fffcf78 	.word	0x1fffcf78
    46b4:	000000a0 	.word	0x000000a0
    46b8:	00000014 	.word	0x00000014
    46bc:	1fffcfe2 	.word	0x1fffcfe2
    46c0:	00000194 	.word	0x00000194
    46c4:	0000024c 	.word	0x0000024c
    46c8:	1fffcfa4 	.word	0x1fffcfa4
    46cc:	000002bc 	.word	0x000002bc
    46d0:	00000084 	.word	0x00000084
    46d4:	0000014c 	.word	0x0000014c
    46d8:	00000270 	.word	0x00000270
    46dc:	000001d4 	.word	0x000001d4

000046e0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    46e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    46e2:	b083      	sub	sp, #12
    46e4:	1c05      	adds	r5, r0, #0
    46e6:	4c25      	ldr	r4, [pc, #148]	; (477c <vTaskResume+0x9c>)
    46e8:	447c      	add	r4, pc
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
    46ea:	2800      	cmp	r0, #0
    46ec:	d101      	bne.n	46f2 <vTaskResume+0x12>
    46ee:	b672      	cpsid	i
    46f0:	e7fe      	b.n	46f0 <vTaskResume+0x10>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    46f2:	4b23      	ldr	r3, [pc, #140]	; (4780 <vTaskResume+0xa0>)
    46f4:	58e3      	ldr	r3, [r4, r3]
    46f6:	681b      	ldr	r3, [r3, #0]
    46f8:	4298      	cmp	r0, r3
    46fa:	d03d      	beq.n	4778 <vTaskResume+0x98>
		{
			taskENTER_CRITICAL();
    46fc:	4b21      	ldr	r3, [pc, #132]	; (4784 <vTaskResume+0xa4>)
    46fe:	58e3      	ldr	r3, [r4, r3]
    4700:	4798      	blx	r3
			{
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4702:	1c28      	adds	r0, r5, #0
    4704:	4b20      	ldr	r3, [pc, #128]	; (4788 <vTaskResume+0xa8>)
    4706:	447b      	add	r3, pc
    4708:	4798      	blx	r3
    470a:	2801      	cmp	r0, #1
    470c:	d131      	bne.n	4772 <vTaskResume+0x92>
				{
					traceTASK_RESUME( pxTCB );
    470e:	1c28      	adds	r0, r5, #0
    4710:	4b1e      	ldr	r3, [pc, #120]	; (478c <vTaskResume+0xac>)
    4712:	58e6      	ldr	r6, [r4, r3]
    4714:	47b0      	blx	r6
    4716:	1c02      	adds	r2, r0, #0
    4718:	208b      	movs	r0, #139	; 0x8b
    471a:	2103      	movs	r1, #3
    471c:	4b1c      	ldr	r3, [pc, #112]	; (4790 <vTaskResume+0xb0>)
    471e:	58e3      	ldr	r3, [r4, r3]
    4720:	4798      	blx	r3

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
    4722:	1d2f      	adds	r7, r5, #4
    4724:	1c38      	adds	r0, r7, #0
    4726:	4b1b      	ldr	r3, [pc, #108]	; (4794 <vTaskResume+0xb4>)
    4728:	58e3      	ldr	r3, [r4, r3]
    472a:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    472c:	1c28      	adds	r0, r5, #0
    472e:	47b0      	blx	r6
    4730:	4b19      	ldr	r3, [pc, #100]	; (4798 <vTaskResume+0xb8>)
    4732:	58e3      	ldr	r3, [r4, r3]
    4734:	4798      	blx	r3
    4736:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    4738:	4a18      	ldr	r2, [pc, #96]	; (479c <vTaskResume+0xbc>)
    473a:	447a      	add	r2, pc
    473c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    473e:	4293      	cmp	r3, r2
    4740:	d902      	bls.n	4748 <vTaskResume+0x68>
    4742:	4a17      	ldr	r2, [pc, #92]	; (47a0 <vTaskResume+0xc0>)
    4744:	447a      	add	r2, pc
    4746:	65d3      	str	r3, [r2, #92]	; 0x5c
    4748:	009a      	lsls	r2, r3, #2
    474a:	18d3      	adds	r3, r2, r3
    474c:	009b      	lsls	r3, r3, #2
    474e:	4815      	ldr	r0, [pc, #84]	; (47a4 <vTaskResume+0xc4>)
    4750:	4478      	add	r0, pc
    4752:	3038      	adds	r0, #56	; 0x38
    4754:	18c0      	adds	r0, r0, r3
    4756:	1c39      	adds	r1, r7, #0
    4758:	4b13      	ldr	r3, [pc, #76]	; (47a8 <vTaskResume+0xc8>)
    475a:	58e3      	ldr	r3, [r4, r3]
    475c:	4798      	blx	r3

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    475e:	4b08      	ldr	r3, [pc, #32]	; (4780 <vTaskResume+0xa0>)
    4760:	58e3      	ldr	r3, [r4, r3]
    4762:	681b      	ldr	r3, [r3, #0]
    4764:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    4766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4768:	429a      	cmp	r2, r3
    476a:	d302      	bcc.n	4772 <vTaskResume+0x92>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    476c:	4b0f      	ldr	r3, [pc, #60]	; (47ac <vTaskResume+0xcc>)
    476e:	58e3      	ldr	r3, [r4, r3]
    4770:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    4772:	4b0f      	ldr	r3, [pc, #60]	; (47b0 <vTaskResume+0xd0>)
    4774:	58e3      	ldr	r3, [r4, r3]
    4776:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4778:	b003      	add	sp, #12
    477a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    477c:	0000371c 	.word	0x0000371c
    4780:	00000054 	.word	0x00000054
    4784:	000002b4 	.word	0x000002b4
    4788:	fffffc23 	.word	0xfffffc23
    478c:	00000084 	.word	0x00000084
    4790:	0000024c 	.word	0x0000024c
    4794:	00000148 	.word	0x00000148
    4798:	000001d4 	.word	0x000001d4
    479c:	1fffce66 	.word	0x1fffce66
    47a0:	1fffce5c 	.word	0x1fffce5c
    47a4:	1fffcdd0 	.word	0x1fffcdd0
    47a8:	000000a0 	.word	0x000000a0
    47ac:	00000194 	.word	0x00000194
    47b0:	00000014 	.word	0x00000014

000047b4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    47b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    47b6:	4647      	mov	r7, r8
    47b8:	b480      	push	{r7}
    47ba:	b082      	sub	sp, #8
    47bc:	1c05      	adds	r5, r0, #0
    47be:	4c2d      	ldr	r4, [pc, #180]	; (4874 <xTaskResumeFromISR+0xc0>)
    47c0:	447c      	add	r4, pc
	BaseType_t xYieldRequired = pdFALSE;
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
    47c2:	2800      	cmp	r0, #0
    47c4:	d101      	bne.n	47ca <xTaskResumeFromISR+0x16>
    47c6:	b672      	cpsid	i
    47c8:	e7fe      	b.n	47c8 <xTaskResumeFromISR+0x14>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    47ca:	4b2b      	ldr	r3, [pc, #172]	; (4878 <xTaskResumeFromISR+0xc4>)
    47cc:	58e3      	ldr	r3, [r4, r3]
    47ce:	4798      	blx	r3
    47d0:	4680      	mov	r8, r0
		{
			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    47d2:	1c28      	adds	r0, r5, #0
    47d4:	4b29      	ldr	r3, [pc, #164]	; (487c <xTaskResumeFromISR+0xc8>)
    47d6:	447b      	add	r3, pc
    47d8:	4798      	blx	r3

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
	BaseType_t xYieldRequired = pdFALSE;
    47da:	2600      	movs	r6, #0
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    47dc:	2801      	cmp	r0, #1
    47de:	d13f      	bne.n	4860 <xTaskResumeFromISR+0xac>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );
    47e0:	1c28      	adds	r0, r5, #0
    47e2:	4b27      	ldr	r3, [pc, #156]	; (4880 <xTaskResumeFromISR+0xcc>)
    47e4:	58e3      	ldr	r3, [r4, r3]
    47e6:	4798      	blx	r3
    47e8:	1c02      	adds	r2, r0, #0
    47ea:	208c      	movs	r0, #140	; 0x8c
    47ec:	2103      	movs	r1, #3
    47ee:	4b25      	ldr	r3, [pc, #148]	; (4884 <xTaskResumeFromISR+0xd0>)
    47f0:	58e3      	ldr	r3, [r4, r3]
    47f2:	4798      	blx	r3

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    47f4:	4b24      	ldr	r3, [pc, #144]	; (4888 <xTaskResumeFromISR+0xd4>)
    47f6:	447b      	add	r3, pc
    47f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    47fa:	2b00      	cmp	r3, #0
    47fc:	d127      	bne.n	484e <xTaskResumeFromISR+0x9a>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    47fe:	4b23      	ldr	r3, [pc, #140]	; (488c <xTaskResumeFromISR+0xd8>)
    4800:	58e3      	ldr	r3, [r4, r3]
    4802:	681b      	ldr	r3, [r3, #0]
    4804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4806:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    4808:	429a      	cmp	r2, r3
    480a:	4176      	adcs	r6, r6
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
    480c:	1d2f      	adds	r7, r5, #4
    480e:	1c38      	adds	r0, r7, #0
    4810:	4b1f      	ldr	r3, [pc, #124]	; (4890 <xTaskResumeFromISR+0xdc>)
    4812:	58e3      	ldr	r3, [r4, r3]
    4814:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    4816:	1c28      	adds	r0, r5, #0
    4818:	4b19      	ldr	r3, [pc, #100]	; (4880 <xTaskResumeFromISR+0xcc>)
    481a:	58e3      	ldr	r3, [r4, r3]
    481c:	4798      	blx	r3
    481e:	4b1d      	ldr	r3, [pc, #116]	; (4894 <xTaskResumeFromISR+0xe0>)
    4820:	58e3      	ldr	r3, [r4, r3]
    4822:	4798      	blx	r3
    4824:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    4826:	4a1c      	ldr	r2, [pc, #112]	; (4898 <xTaskResumeFromISR+0xe4>)
    4828:	447a      	add	r2, pc
    482a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    482c:	4293      	cmp	r3, r2
    482e:	d902      	bls.n	4836 <xTaskResumeFromISR+0x82>
    4830:	4a1a      	ldr	r2, [pc, #104]	; (489c <xTaskResumeFromISR+0xe8>)
    4832:	447a      	add	r2, pc
    4834:	65d3      	str	r3, [r2, #92]	; 0x5c
    4836:	009a      	lsls	r2, r3, #2
    4838:	18d3      	adds	r3, r2, r3
    483a:	009b      	lsls	r3, r3, #2
    483c:	4818      	ldr	r0, [pc, #96]	; (48a0 <xTaskResumeFromISR+0xec>)
    483e:	4478      	add	r0, pc
    4840:	3038      	adds	r0, #56	; 0x38
    4842:	18c0      	adds	r0, r0, r3
    4844:	1c39      	adds	r1, r7, #0
    4846:	4b17      	ldr	r3, [pc, #92]	; (48a4 <xTaskResumeFromISR+0xf0>)
    4848:	58e3      	ldr	r3, [r4, r3]
    484a:	4798      	blx	r3
    484c:	e008      	b.n	4860 <xTaskResumeFromISR+0xac>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    484e:	1c29      	adds	r1, r5, #0
    4850:	3118      	adds	r1, #24
    4852:	4815      	ldr	r0, [pc, #84]	; (48a8 <xTaskResumeFromISR+0xf4>)
    4854:	4478      	add	r0, pc
    4856:	3014      	adds	r0, #20
    4858:	4b12      	ldr	r3, [pc, #72]	; (48a4 <xTaskResumeFromISR+0xf0>)
    485a:	58e3      	ldr	r3, [r4, r3]
    485c:	4798      	blx	r3

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
	BaseType_t xYieldRequired = pdFALSE;
    485e:	2600      	movs	r6, #0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4860:	4640      	mov	r0, r8
    4862:	4b12      	ldr	r3, [pc, #72]	; (48ac <xTaskResumeFromISR+0xf8>)
    4864:	58e3      	ldr	r3, [r4, r3]
    4866:	4798      	blx	r3

		return xYieldRequired;
	}
    4868:	1c30      	adds	r0, r6, #0
    486a:	b002      	add	sp, #8
    486c:	bc04      	pop	{r2}
    486e:	4690      	mov	r8, r2
    4870:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4872:	46c0      	nop			; (mov r8, r8)
    4874:	00003644 	.word	0x00003644
    4878:	00000274 	.word	0x00000274
    487c:	fffffb53 	.word	0xfffffb53
    4880:	00000084 	.word	0x00000084
    4884:	0000024c 	.word	0x0000024c
    4888:	1fffcdaa 	.word	0x1fffcdaa
    488c:	00000054 	.word	0x00000054
    4890:	00000148 	.word	0x00000148
    4894:	000001d4 	.word	0x000001d4
    4898:	1fffcd78 	.word	0x1fffcd78
    489c:	1fffcd6e 	.word	0x1fffcd6e
    48a0:	1fffcce2 	.word	0x1fffcce2
    48a4:	000000a0 	.word	0x000000a0
    48a8:	1fffcccc 	.word	0x1fffcccc
    48ac:	00000134 	.word	0x00000134

000048b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    48b0:	b530      	push	{r4, r5, lr}
    48b2:	b087      	sub	sp, #28
    48b4:	4c14      	ldr	r4, [pc, #80]	; (4908 <vTaskStartScheduler+0x58>)
    48b6:	447c      	add	r4, pc
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    48b8:	2300      	movs	r3, #0
    48ba:	9300      	str	r3, [sp, #0]
    48bc:	9301      	str	r3, [sp, #4]
    48be:	9302      	str	r3, [sp, #8]
    48c0:	9303      	str	r3, [sp, #12]
    48c2:	4812      	ldr	r0, [pc, #72]	; (490c <vTaskStartScheduler+0x5c>)
    48c4:	4478      	add	r0, pc
    48c6:	4912      	ldr	r1, [pc, #72]	; (4910 <vTaskStartScheduler+0x60>)
    48c8:	4479      	add	r1, pc
    48ca:	228c      	movs	r2, #140	; 0x8c
    48cc:	4d11      	ldr	r5, [pc, #68]	; (4914 <vTaskStartScheduler+0x64>)
    48ce:	5965      	ldr	r5, [r4, r5]
    48d0:	47a8      	blx	r5
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    48d2:	2801      	cmp	r0, #1
    48d4:	d111      	bne.n	48fa <vTaskStartScheduler+0x4a>
		{
			xReturn = xTimerCreateTimerTask();
    48d6:	4b10      	ldr	r3, [pc, #64]	; (4918 <vTaskStartScheduler+0x68>)
    48d8:	58e3      	ldr	r3, [r4, r3]
    48da:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    48dc:	2801      	cmp	r0, #1
    48de:	d10c      	bne.n	48fa <vTaskStartScheduler+0x4a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    48e0:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
    48e2:	2201      	movs	r2, #1
    48e4:	4b0d      	ldr	r3, [pc, #52]	; (491c <vTaskStartScheduler+0x6c>)
    48e6:	447b      	add	r3, pc
    48e8:	659a      	str	r2, [r3, #88]	; 0x58
		xTickCount = ( TickType_t ) 0U;
    48ea:	2200      	movs	r2, #0
    48ec:	4b0c      	ldr	r3, [pc, #48]	; (4920 <vTaskStartScheduler+0x70>)
    48ee:	447b      	add	r3, pc
    48f0:	62da      	str	r2, [r3, #44]	; 0x2c
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    48f2:	4b0c      	ldr	r3, [pc, #48]	; (4924 <vTaskStartScheduler+0x74>)
    48f4:	58e3      	ldr	r3, [r4, r3]
    48f6:	4798      	blx	r3
    48f8:	e003      	b.n	4902 <vTaskStartScheduler+0x52>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
    48fa:	2800      	cmp	r0, #0
    48fc:	d101      	bne.n	4902 <vTaskStartScheduler+0x52>
    48fe:	b672      	cpsid	i
    4900:	e7fe      	b.n	4900 <vTaskStartScheduler+0x50>
	}
}
    4902:	b007      	add	sp, #28
    4904:	bd30      	pop	{r4, r5, pc}
    4906:	46c0      	nop			; (mov r8, r8)
    4908:	0000354e 	.word	0x0000354e
    490c:	00000421 	.word	0x00000421
    4910:	00003500 	.word	0x00003500
    4914:	00000074 	.word	0x00000074
    4918:	000001c4 	.word	0x000001c4
    491c:	1fffccba 	.word	0x1fffccba
    4920:	1fffcc32 	.word	0x1fffcc32
    4924:	00000064 	.word	0x00000064

00004928 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    4928:	4b02      	ldr	r3, [pc, #8]	; (4934 <vTaskSuspendAll+0xc>)
    492a:	447b      	add	r3, pc
    492c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    492e:	3201      	adds	r2, #1
    4930:	669a      	str	r2, [r3, #104]	; 0x68
}
    4932:	4770      	bx	lr
    4934:	1fffcc76 	.word	0x1fffcc76

00004938 <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    4938:	b530      	push	{r4, r5, lr}
    493a:	b083      	sub	sp, #12
    493c:	4c06      	ldr	r4, [pc, #24]	; (4958 <xTaskGetTickCount+0x20>)
    493e:	447c      	add	r4, pc
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    4940:	4b06      	ldr	r3, [pc, #24]	; (495c <xTaskGetTickCount+0x24>)
    4942:	58e3      	ldr	r3, [r4, r3]
    4944:	4798      	blx	r3
	{
		xTicks = xTickCount;
    4946:	4b06      	ldr	r3, [pc, #24]	; (4960 <xTaskGetTickCount+0x28>)
    4948:	447b      	add	r3, pc
    494a:	6add      	ldr	r5, [r3, #44]	; 0x2c
	}
	taskEXIT_CRITICAL();
    494c:	4b05      	ldr	r3, [pc, #20]	; (4964 <xTaskGetTickCount+0x2c>)
    494e:	58e3      	ldr	r3, [r4, r3]
    4950:	4798      	blx	r3

	return xTicks;
}
    4952:	1c28      	adds	r0, r5, #0
    4954:	b003      	add	sp, #12
    4956:	bd30      	pop	{r4, r5, pc}
    4958:	000034c6 	.word	0x000034c6
    495c:	000002b4 	.word	0x000002b4
    4960:	1fffcbd8 	.word	0x1fffcbd8
    4964:	00000014 	.word	0x00000014

00004968 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    4968:	b530      	push	{r4, r5, lr}
    496a:	b083      	sub	sp, #12
    496c:	4c06      	ldr	r4, [pc, #24]	; (4988 <xTaskGetTickCountFromISR+0x20>)
    496e:	447c      	add	r4, pc
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4970:	4b06      	ldr	r3, [pc, #24]	; (498c <xTaskGetTickCountFromISR+0x24>)
    4972:	58e3      	ldr	r3, [r4, r3]
    4974:	4798      	blx	r3
	{
		xReturn = xTickCount;
    4976:	4b06      	ldr	r3, [pc, #24]	; (4990 <xTaskGetTickCountFromISR+0x28>)
    4978:	447b      	add	r3, pc
    497a:	6add      	ldr	r5, [r3, #44]	; 0x2c
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    497c:	4b05      	ldr	r3, [pc, #20]	; (4994 <xTaskGetTickCountFromISR+0x2c>)
    497e:	58e3      	ldr	r3, [r4, r3]
    4980:	4798      	blx	r3

	return xReturn;
}
    4982:	1c28      	adds	r0, r5, #0
    4984:	b003      	add	sp, #12
    4986:	bd30      	pop	{r4, r5, pc}
    4988:	00003496 	.word	0x00003496
    498c:	00000274 	.word	0x00000274
    4990:	1fffcba8 	.word	0x1fffcba8
    4994:	00000134 	.word	0x00000134

00004998 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    4998:	b5f0      	push	{r4, r5, r6, r7, lr}
    499a:	4657      	mov	r7, sl
    499c:	464e      	mov	r6, r9
    499e:	4645      	mov	r5, r8
    49a0:	b4e0      	push	{r5, r6, r7}
    49a2:	b082      	sub	sp, #8
    49a4:	4c58      	ldr	r4, [pc, #352]	; (4b08 <xTaskIncrementTick+0x170>)
    49a6:	447c      	add	r4, pc
BaseType_t xSwitchRequired = pdFALSE;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
    49a8:	4b58      	ldr	r3, [pc, #352]	; (4b0c <xTaskIncrementTick+0x174>)
    49aa:	447b      	add	r3, pc
    49ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    49ae:	2b01      	cmp	r3, #1
    49b0:	d004      	beq.n	49bc <xTaskIncrementTick+0x24>
    49b2:	4b57      	ldr	r3, [pc, #348]	; (4b10 <xTaskIncrementTick+0x178>)
    49b4:	447b      	add	r3, pc
    49b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    49b8:	2b00      	cmp	r3, #0
    49ba:	d108      	bne.n	49ce <xTaskIncrementTick+0x36>
    49bc:	4b55      	ldr	r3, [pc, #340]	; (4b14 <xTaskIncrementTick+0x17c>)
    49be:	58e3      	ldr	r3, [r4, r3]
    49c0:	681a      	ldr	r2, [r3, #0]
    49c2:	3201      	adds	r2, #1
    49c4:	601a      	str	r2, [r3, #0]
    49c6:	2000      	movs	r0, #0
    49c8:	4b53      	ldr	r3, [pc, #332]	; (4b18 <xTaskIncrementTick+0x180>)
    49ca:	58e3      	ldr	r3, [r4, r3]
    49cc:	4798      	blx	r3
    49ce:	4b53      	ldr	r3, [pc, #332]	; (4b1c <xTaskIncrementTick+0x184>)
    49d0:	447b      	add	r3, pc
    49d2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    49d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    49d6:	2b00      	cmp	r3, #0
    49d8:	d000      	beq.n	49dc <xTaskIncrementTick+0x44>
    49da:	e07f      	b.n	4adc <xTaskIncrementTick+0x144>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    49dc:	4b50      	ldr	r3, [pc, #320]	; (4b20 <xTaskIncrementTick+0x188>)
    49de:	447b      	add	r3, pc
    49e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    49e2:	3201      	adds	r2, #1
    49e4:	62da      	str	r2, [r3, #44]	; 0x2c

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    49e6:	6adf      	ldr	r7, [r3, #44]	; 0x2c

			if( xConstTickCount == ( TickType_t ) 0U )
    49e8:	2f00      	cmp	r7, #0
    49ea:	d115      	bne.n	4a18 <xTaskIncrementTick+0x80>
			{
				taskSWITCH_DELAYED_LISTS();
    49ec:	4b4d      	ldr	r3, [pc, #308]	; (4b24 <xTaskIncrementTick+0x18c>)
    49ee:	447b      	add	r3, pc
    49f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    49f2:	681b      	ldr	r3, [r3, #0]
    49f4:	2b00      	cmp	r3, #0
    49f6:	d001      	beq.n	49fc <xTaskIncrementTick+0x64>
    49f8:	b672      	cpsid	i
    49fa:	e7fe      	b.n	49fa <xTaskIncrementTick+0x62>
    49fc:	4b4a      	ldr	r3, [pc, #296]	; (4b28 <xTaskIncrementTick+0x190>)
    49fe:	447b      	add	r3, pc
    4a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4a02:	6b19      	ldr	r1, [r3, #48]	; 0x30
    4a04:	6299      	str	r1, [r3, #40]	; 0x28
    4a06:	631a      	str	r2, [r3, #48]	; 0x30
    4a08:	4b48      	ldr	r3, [pc, #288]	; (4b2c <xTaskIncrementTick+0x194>)
    4a0a:	447b      	add	r3, pc
    4a0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    4a0e:	3201      	adds	r2, #1
    4a10:	671a      	str	r2, [r3, #112]	; 0x70
    4a12:	4b47      	ldr	r3, [pc, #284]	; (4b30 <xTaskIncrementTick+0x198>)
    4a14:	447b      	add	r3, pc
    4a16:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    4a18:	4b46      	ldr	r3, [pc, #280]	; (4b34 <xTaskIncrementTick+0x19c>)
    4a1a:	447b      	add	r3, pc
    4a1c:	681b      	ldr	r3, [r3, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    4a1e:	2600      	movs	r6, #0

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    4a20:	429f      	cmp	r7, r3
    4a22:	d34d      	bcc.n	4ac0 <xTaskIncrementTick+0x128>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4a24:	4a44      	ldr	r2, [pc, #272]	; (4b38 <xTaskIncrementTick+0x1a0>)
    4a26:	447a      	add	r2, pc
    4a28:	4692      	mov	sl, r2
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    4a2a:	4b44      	ldr	r3, [pc, #272]	; (4b3c <xTaskIncrementTick+0x1a4>)
    4a2c:	447b      	add	r3, pc
    4a2e:	3338      	adds	r3, #56	; 0x38
    4a30:	4699      	mov	r9, r3
    4a32:	e000      	b.n	4a36 <xTaskIncrementTick+0x9e>
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
							{
								xSwitchRequired = pdTRUE;
    4a34:	2601      	movs	r6, #1
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4a36:	4652      	mov	r2, sl
    4a38:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4a3a:	681b      	ldr	r3, [r3, #0]
    4a3c:	2b00      	cmp	r3, #0
    4a3e:	d105      	bne.n	4a4c <xTaskIncrementTick+0xb4>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    4a40:	2201      	movs	r2, #1
    4a42:	4252      	negs	r2, r2
    4a44:	4b3e      	ldr	r3, [pc, #248]	; (4b40 <xTaskIncrementTick+0x1a8>)
    4a46:	447b      	add	r3, pc
    4a48:	601a      	str	r2, [r3, #0]
						break;
    4a4a:	e039      	b.n	4ac0 <xTaskIncrementTick+0x128>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4a4c:	4b3d      	ldr	r3, [pc, #244]	; (4b44 <xTaskIncrementTick+0x1ac>)
    4a4e:	447b      	add	r3, pc
    4a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4a52:	68db      	ldr	r3, [r3, #12]
    4a54:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    4a56:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
    4a58:	429f      	cmp	r7, r3
    4a5a:	d203      	bcs.n	4a64 <xTaskIncrementTick+0xcc>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
    4a5c:	4a3a      	ldr	r2, [pc, #232]	; (4b48 <xTaskIncrementTick+0x1b0>)
    4a5e:	447a      	add	r2, pc
    4a60:	6013      	str	r3, [r2, #0]
							break;
    4a62:	e02d      	b.n	4ac0 <xTaskIncrementTick+0x128>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    4a64:	1d2b      	adds	r3, r5, #4
    4a66:	4698      	mov	r8, r3
    4a68:	1c18      	adds	r0, r3, #0
    4a6a:	4b38      	ldr	r3, [pc, #224]	; (4b4c <xTaskIncrementTick+0x1b4>)
    4a6c:	58e3      	ldr	r3, [r4, r3]
    4a6e:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    4a70:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4a72:	2a00      	cmp	r2, #0
    4a74:	d004      	beq.n	4a80 <xTaskIncrementTick+0xe8>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4a76:	1c28      	adds	r0, r5, #0
    4a78:	3018      	adds	r0, #24
    4a7a:	4b34      	ldr	r3, [pc, #208]	; (4b4c <xTaskIncrementTick+0x1b4>)
    4a7c:	58e3      	ldr	r3, [r4, r3]
    4a7e:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    4a80:	1c28      	adds	r0, r5, #0
    4a82:	4b33      	ldr	r3, [pc, #204]	; (4b50 <xTaskIncrementTick+0x1b8>)
    4a84:	58e3      	ldr	r3, [r4, r3]
    4a86:	4798      	blx	r3
    4a88:	4b32      	ldr	r3, [pc, #200]	; (4b54 <xTaskIncrementTick+0x1bc>)
    4a8a:	58e3      	ldr	r3, [r4, r3]
    4a8c:	4798      	blx	r3
    4a8e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    4a90:	4a31      	ldr	r2, [pc, #196]	; (4b58 <xTaskIncrementTick+0x1c0>)
    4a92:	447a      	add	r2, pc
    4a94:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    4a96:	4293      	cmp	r3, r2
    4a98:	d902      	bls.n	4aa0 <xTaskIncrementTick+0x108>
    4a9a:	4a30      	ldr	r2, [pc, #192]	; (4b5c <xTaskIncrementTick+0x1c4>)
    4a9c:	447a      	add	r2, pc
    4a9e:	65d3      	str	r3, [r2, #92]	; 0x5c
    4aa0:	0098      	lsls	r0, r3, #2
    4aa2:	18c0      	adds	r0, r0, r3
    4aa4:	0080      	lsls	r0, r0, #2
    4aa6:	4448      	add	r0, r9
    4aa8:	4641      	mov	r1, r8
    4aaa:	4b2d      	ldr	r3, [pc, #180]	; (4b60 <xTaskIncrementTick+0x1c8>)
    4aac:	58e3      	ldr	r3, [r4, r3]
    4aae:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4ab0:	4b2c      	ldr	r3, [pc, #176]	; (4b64 <xTaskIncrementTick+0x1cc>)
    4ab2:	58e3      	ldr	r3, [r4, r3]
    4ab4:	681b      	ldr	r3, [r3, #0]
    4ab6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    4ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4aba:	429a      	cmp	r2, r3
    4abc:	d2ba      	bcs.n	4a34 <xTaskIncrementTick+0x9c>
    4abe:	e7ba      	b.n	4a36 <xTaskIncrementTick+0x9e>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    4ac0:	4b28      	ldr	r3, [pc, #160]	; (4b64 <xTaskIncrementTick+0x1cc>)
    4ac2:	58e3      	ldr	r3, [r4, r3]
    4ac4:	681b      	ldr	r3, [r3, #0]
    4ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4ac8:	009a      	lsls	r2, r3, #2
    4aca:	18d3      	adds	r3, r2, r3
    4acc:	009b      	lsls	r3, r3, #2
    4ace:	4a26      	ldr	r2, [pc, #152]	; (4b68 <xTaskIncrementTick+0x1d0>)
    4ad0:	447a      	add	r2, pc
    4ad2:	18d3      	adds	r3, r2, r3
    4ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4ad6:	2b01      	cmp	r3, #1
    4ad8:	d807      	bhi.n	4aea <xTaskIncrementTick+0x152>
    4ada:	e007      	b.n	4aec <xTaskIncrementTick+0x154>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    4adc:	4b23      	ldr	r3, [pc, #140]	; (4b6c <xTaskIncrementTick+0x1d4>)
    4ade:	447b      	add	r3, pc
    4ae0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    4ae2:	3201      	adds	r2, #1
    4ae4:	66da      	str	r2, [r3, #108]	; 0x6c

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    4ae6:	2600      	movs	r6, #0
    4ae8:	e000      	b.n	4aec <xTaskIncrementTick+0x154>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
    4aea:	2601      	movs	r6, #1
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    4aec:	4b20      	ldr	r3, [pc, #128]	; (4b70 <xTaskIncrementTick+0x1d8>)
    4aee:	447b      	add	r3, pc
    4af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    4af2:	2b00      	cmp	r3, #0
    4af4:	d000      	beq.n	4af8 <xTaskIncrementTick+0x160>
		{
			xSwitchRequired = pdTRUE;
    4af6:	2601      	movs	r6, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
    4af8:	1c30      	adds	r0, r6, #0
    4afa:	b002      	add	sp, #8
    4afc:	bc1c      	pop	{r2, r3, r4}
    4afe:	4690      	mov	r8, r2
    4b00:	4699      	mov	r9, r3
    4b02:	46a2      	mov	sl, r4
    4b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b06:	46c0      	nop			; (mov r8, r8)
    4b08:	0000345e 	.word	0x0000345e
    4b0c:	1fffcbf6 	.word	0x1fffcbf6
    4b10:	1fffcbec 	.word	0x1fffcbec
    4b14:	00000228 	.word	0x00000228
    4b18:	00000058 	.word	0x00000058
    4b1c:	1fffcbd0 	.word	0x1fffcbd0
    4b20:	1fffcb42 	.word	0x1fffcb42
    4b24:	1fffcb32 	.word	0x1fffcb32
    4b28:	1fffcb22 	.word	0x1fffcb22
    4b2c:	1fffcb96 	.word	0x1fffcb96
    4b30:	fffff949 	.word	0xfffff949
    4b34:	1fffb5f6 	.word	0x1fffb5f6
    4b38:	1fffcafa 	.word	0x1fffcafa
    4b3c:	1fffcaf4 	.word	0x1fffcaf4
    4b40:	1fffb5ca 	.word	0x1fffb5ca
    4b44:	1fffcad2 	.word	0x1fffcad2
    4b48:	1fffb5b2 	.word	0x1fffb5b2
    4b4c:	00000148 	.word	0x00000148
    4b50:	00000084 	.word	0x00000084
    4b54:	000001d4 	.word	0x000001d4
    4b58:	1fffcb0e 	.word	0x1fffcb0e
    4b5c:	1fffcb04 	.word	0x1fffcb04
    4b60:	000000a0 	.word	0x000000a0
    4b64:	00000054 	.word	0x00000054
    4b68:	1fffca50 	.word	0x1fffca50
    4b6c:	1fffcac2 	.word	0x1fffcac2
    4b70:	1fffcab2 	.word	0x1fffcab2

00004b74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    4b74:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b76:	464f      	mov	r7, r9
    4b78:	b480      	push	{r7}
    4b7a:	b082      	sub	sp, #8
    4b7c:	4c42      	ldr	r4, [pc, #264]	; (4c88 <xTaskResumeAll+0x114>)
    4b7e:	447c      	add	r4, pc
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    4b80:	4b42      	ldr	r3, [pc, #264]	; (4c8c <xTaskResumeAll+0x118>)
    4b82:	447b      	add	r3, pc
    4b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4b86:	2b00      	cmp	r3, #0
    4b88:	d101      	bne.n	4b8e <xTaskResumeAll+0x1a>
    4b8a:	b672      	cpsid	i
    4b8c:	e7fe      	b.n	4b8c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    4b8e:	4b40      	ldr	r3, [pc, #256]	; (4c90 <xTaskResumeAll+0x11c>)
    4b90:	58e3      	ldr	r3, [r4, r3]
    4b92:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    4b94:	4b3f      	ldr	r3, [pc, #252]	; (4c94 <xTaskResumeAll+0x120>)
    4b96:	447b      	add	r3, pc
    4b98:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    4b9a:	3a01      	subs	r2, #1
    4b9c:	669a      	str	r2, [r3, #104]	; 0x68

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    4ba0:	2500      	movs	r5, #0
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4ba2:	2b00      	cmp	r3, #0
    4ba4:	d168      	bne.n	4c78 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    4ba6:	4b3c      	ldr	r3, [pc, #240]	; (4c98 <xTaskResumeAll+0x124>)
    4ba8:	447b      	add	r3, pc
    4baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4bac:	2b00      	cmp	r3, #0
    4bae:	d063      	beq.n	4c78 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    4bb0:	4a3a      	ldr	r2, [pc, #232]	; (4c9c <xTaskResumeAll+0x128>)
    4bb2:	447a      	add	r2, pc
    4bb4:	4691      	mov	r9, r2
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
    4bb6:	4b3a      	ldr	r3, [pc, #232]	; (4ca0 <xTaskResumeAll+0x12c>)
    4bb8:	447b      	add	r3, pc
    4bba:	1c1e      	adds	r6, r3, #0
    4bbc:	3638      	adds	r6, #56	; 0x38
    4bbe:	e030      	b.n	4c22 <xTaskResumeAll+0xae>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    4bc0:	4b38      	ldr	r3, [pc, #224]	; (4ca4 <xTaskResumeAll+0x130>)
    4bc2:	447b      	add	r3, pc
    4bc4:	6a1b      	ldr	r3, [r3, #32]
    4bc6:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4bc8:	1c28      	adds	r0, r5, #0
    4bca:	3018      	adds	r0, #24
    4bcc:	4b36      	ldr	r3, [pc, #216]	; (4ca8 <xTaskResumeAll+0x134>)
    4bce:	58e3      	ldr	r3, [r4, r3]
    4bd0:	9301      	str	r3, [sp, #4]
    4bd2:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    4bd4:	1d2f      	adds	r7, r5, #4
    4bd6:	1c38      	adds	r0, r7, #0
    4bd8:	9b01      	ldr	r3, [sp, #4]
    4bda:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    4bdc:	1c28      	adds	r0, r5, #0
    4bde:	4b33      	ldr	r3, [pc, #204]	; (4cac <xTaskResumeAll+0x138>)
    4be0:	58e3      	ldr	r3, [r4, r3]
    4be2:	4798      	blx	r3
    4be4:	4b32      	ldr	r3, [pc, #200]	; (4cb0 <xTaskResumeAll+0x13c>)
    4be6:	58e3      	ldr	r3, [r4, r3]
    4be8:	4798      	blx	r3
    4bea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    4bec:	4a31      	ldr	r2, [pc, #196]	; (4cb4 <xTaskResumeAll+0x140>)
    4bee:	447a      	add	r2, pc
    4bf0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    4bf2:	4293      	cmp	r3, r2
    4bf4:	d902      	bls.n	4bfc <xTaskResumeAll+0x88>
    4bf6:	4a30      	ldr	r2, [pc, #192]	; (4cb8 <xTaskResumeAll+0x144>)
    4bf8:	447a      	add	r2, pc
    4bfa:	65d3      	str	r3, [r2, #92]	; 0x5c
    4bfc:	0098      	lsls	r0, r3, #2
    4bfe:	18c0      	adds	r0, r0, r3
    4c00:	0080      	lsls	r0, r0, #2
    4c02:	1830      	adds	r0, r6, r0
    4c04:	1c39      	adds	r1, r7, #0
    4c06:	4b2d      	ldr	r3, [pc, #180]	; (4cbc <xTaskResumeAll+0x148>)
    4c08:	58e3      	ldr	r3, [r4, r3]
    4c0a:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4c0c:	4b2c      	ldr	r3, [pc, #176]	; (4cc0 <xTaskResumeAll+0x14c>)
    4c0e:	58e3      	ldr	r3, [r4, r3]
    4c10:	681b      	ldr	r3, [r3, #0]
    4c12:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    4c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4c16:	429a      	cmp	r2, r3
    4c18:	d303      	bcc.n	4c22 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
    4c1a:	2201      	movs	r2, #1
    4c1c:	4b29      	ldr	r3, [pc, #164]	; (4cc4 <xTaskResumeAll+0x150>)
    4c1e:	447b      	add	r3, pc
    4c20:	675a      	str	r2, [r3, #116]	; 0x74
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    4c22:	464a      	mov	r2, r9
    4c24:	6952      	ldr	r2, [r2, #20]
    4c26:	2a00      	cmp	r2, #0
    4c28:	d1ca      	bne.n	4bc0 <xTaskResumeAll+0x4c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    4c2a:	4b27      	ldr	r3, [pc, #156]	; (4cc8 <xTaskResumeAll+0x154>)
    4c2c:	447b      	add	r3, pc
    4c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    4c30:	2b00      	cmp	r3, #0
    4c32:	d017      	beq.n	4c64 <xTaskResumeAll+0xf0>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    4c34:	4b25      	ldr	r3, [pc, #148]	; (4ccc <xTaskResumeAll+0x158>)
    4c36:	447b      	add	r3, pc
    4c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    4c3a:	2b00      	cmp	r3, #0
    4c3c:	d012      	beq.n	4c64 <xTaskResumeAll+0xf0>
					{
						if( xTaskIncrementTick() != pdFALSE )
    4c3e:	4b24      	ldr	r3, [pc, #144]	; (4cd0 <xTaskResumeAll+0x15c>)
    4c40:	58e3      	ldr	r3, [r4, r3]
    4c42:	9301      	str	r3, [sp, #4]
						{
							xYieldPending = pdTRUE;
    4c44:	4e23      	ldr	r6, [pc, #140]	; (4cd4 <xTaskResumeAll+0x160>)
    4c46:	447e      	add	r6, pc
    4c48:	2501      	movs	r5, #1
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
    4c4a:	9b01      	ldr	r3, [sp, #4]
    4c4c:	4798      	blx	r3
    4c4e:	2800      	cmp	r0, #0
    4c50:	d000      	beq.n	4c54 <xTaskResumeAll+0xe0>
						{
							xYieldPending = pdTRUE;
    4c52:	6775      	str	r5, [r6, #116]	; 0x74
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    4c54:	4b20      	ldr	r3, [pc, #128]	; (4cd8 <xTaskResumeAll+0x164>)
    4c56:	447b      	add	r3, pc
    4c58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    4c5a:	3a01      	subs	r2, #1
    4c5c:	66da      	str	r2, [r3, #108]	; 0x6c
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    4c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    4c60:	2b00      	cmp	r3, #0
    4c62:	d1f2      	bne.n	4c4a <xTaskResumeAll+0xd6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    4c64:	4b1d      	ldr	r3, [pc, #116]	; (4cdc <xTaskResumeAll+0x168>)
    4c66:	447b      	add	r3, pc
    4c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    4c6a:	2500      	movs	r5, #0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    4c6c:	2b01      	cmp	r3, #1
    4c6e:	d103      	bne.n	4c78 <xTaskResumeAll+0x104>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    4c70:	4b1b      	ldr	r3, [pc, #108]	; (4ce0 <xTaskResumeAll+0x16c>)
    4c72:	58e3      	ldr	r3, [r4, r3]
    4c74:	4798      	blx	r3

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    4c76:	2501      	movs	r5, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    4c78:	4b1a      	ldr	r3, [pc, #104]	; (4ce4 <xTaskResumeAll+0x170>)
    4c7a:	58e3      	ldr	r3, [r4, r3]
    4c7c:	4798      	blx	r3

	return xAlreadyYielded;
}
    4c7e:	1c28      	adds	r0, r5, #0
    4c80:	b002      	add	sp, #8
    4c82:	bc04      	pop	{r2}
    4c84:	4691      	mov	r9, r2
    4c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c88:	00003286 	.word	0x00003286
    4c8c:	1fffca1e 	.word	0x1fffca1e
    4c90:	000002b4 	.word	0x000002b4
    4c94:	1fffca0a 	.word	0x1fffca0a
    4c98:	1fffc978 	.word	0x1fffc978
    4c9c:	1fffc96e 	.word	0x1fffc96e
    4ca0:	1fffc968 	.word	0x1fffc968
    4ca4:	1fffc95e 	.word	0x1fffc95e
    4ca8:	00000148 	.word	0x00000148
    4cac:	00000084 	.word	0x00000084
    4cb0:	000001d4 	.word	0x000001d4
    4cb4:	1fffc9b2 	.word	0x1fffc9b2
    4cb8:	1fffc9a8 	.word	0x1fffc9a8
    4cbc:	000000a0 	.word	0x000000a0
    4cc0:	00000054 	.word	0x00000054
    4cc4:	1fffc982 	.word	0x1fffc982
    4cc8:	1fffc974 	.word	0x1fffc974
    4ccc:	1fffc96a 	.word	0x1fffc96a
    4cd0:	00000244 	.word	0x00000244
    4cd4:	1fffc95a 	.word	0x1fffc95a
    4cd8:	1fffc94a 	.word	0x1fffc94a
    4cdc:	1fffc93a 	.word	0x1fffc93a
    4ce0:	00000194 	.word	0x00000194
    4ce4:	00000014 	.word	0x00000014

00004ce8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    4ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cea:	464f      	mov	r7, r9
    4cec:	4646      	mov	r6, r8
    4cee:	b4c0      	push	{r6, r7}
    4cf0:	b083      	sub	sp, #12
    4cf2:	4c1e      	ldr	r4, [pc, #120]	; (4d6c <prvIdleTask+0x84>)
    4cf4:	447c      	add	r4, pc
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    4cf6:	4e1e      	ldr	r6, [pc, #120]	; (4d70 <prvIdleTask+0x88>)
    4cf8:	447e      	add	r6, pc

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    4cfa:	4a1e      	ldr	r2, [pc, #120]	; (4d74 <prvIdleTask+0x8c>)
    4cfc:	447a      	add	r2, pc
    4cfe:	4690      	mov	r8, r2
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    4d00:	4f1d      	ldr	r7, [pc, #116]	; (4d78 <prvIdleTask+0x90>)
    4d02:	447f      	add	r7, pc
    4d04:	e027      	b.n	4d56 <prvIdleTask+0x6e>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    4d06:	4b1d      	ldr	r3, [pc, #116]	; (4d7c <prvIdleTask+0x94>)
    4d08:	58e3      	ldr	r3, [r4, r3]
    4d0a:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    4d0c:	6c7d      	ldr	r5, [r7, #68]	; 0x44
			}
			( void ) xTaskResumeAll();
    4d0e:	4b1c      	ldr	r3, [pc, #112]	; (4d80 <prvIdleTask+0x98>)
    4d10:	58e3      	ldr	r3, [r4, r3]
    4d12:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    4d14:	2d00      	cmp	r5, #0
    4d16:	d01e      	beq.n	4d56 <prvIdleTask+0x6e>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    4d18:	4b1a      	ldr	r3, [pc, #104]	; (4d84 <prvIdleTask+0x9c>)
    4d1a:	58e3      	ldr	r3, [r4, r3]
    4d1c:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    4d1e:	4d1a      	ldr	r5, [pc, #104]	; (4d88 <prvIdleTask+0xa0>)
    4d20:	447d      	add	r5, pc
    4d22:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    4d24:	68da      	ldr	r2, [r3, #12]
    4d26:	4691      	mov	r9, r2
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    4d28:	1c10      	adds	r0, r2, #0
    4d2a:	3004      	adds	r0, #4
    4d2c:	4b17      	ldr	r3, [pc, #92]	; (4d8c <prvIdleTask+0xa4>)
    4d2e:	58e3      	ldr	r3, [r4, r3]
    4d30:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    4d32:	4b17      	ldr	r3, [pc, #92]	; (4d90 <prvIdleTask+0xa8>)
    4d34:	447b      	add	r3, pc
    4d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    4d38:	3a01      	subs	r2, #1
    4d3a:	635a      	str	r2, [r3, #52]	; 0x34
					--uxTasksDeleted;
    4d3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    4d3e:	3b01      	subs	r3, #1
    4d40:	666b      	str	r3, [r5, #100]	; 0x64
				}
				taskEXIT_CRITICAL();
    4d42:	4b14      	ldr	r3, [pc, #80]	; (4d94 <prvIdleTask+0xac>)
    4d44:	58e3      	ldr	r3, [r4, r3]
    4d46:	4798      	blx	r3
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
    4d48:	464b      	mov	r3, r9
    4d4a:	6b18      	ldr	r0, [r3, #48]	; 0x30
    4d4c:	4b12      	ldr	r3, [pc, #72]	; (4d98 <prvIdleTask+0xb0>)
    4d4e:	58e5      	ldr	r5, [r4, r3]
    4d50:	47a8      	blx	r5
		vPortFree( pxTCB );
    4d52:	4648      	mov	r0, r9
    4d54:	47a8      	blx	r5
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    4d56:	6e73      	ldr	r3, [r6, #100]	; 0x64
    4d58:	2b00      	cmp	r3, #0
    4d5a:	d1d4      	bne.n	4d06 <prvIdleTask+0x1e>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    4d5c:	4642      	mov	r2, r8
    4d5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
    4d60:	2a01      	cmp	r2, #1
    4d62:	d9f8      	bls.n	4d56 <prvIdleTask+0x6e>
			{
				taskYIELD();
    4d64:	4b0d      	ldr	r3, [pc, #52]	; (4d9c <prvIdleTask+0xb4>)
    4d66:	58e3      	ldr	r3, [r4, r3]
    4d68:	4798      	blx	r3
    4d6a:	e7f4      	b.n	4d56 <prvIdleTask+0x6e>
    4d6c:	00003110 	.word	0x00003110
    4d70:	1fffc8a8 	.word	0x1fffc8a8
    4d74:	1fffc824 	.word	0x1fffc824
    4d78:	1fffc89e 	.word	0x1fffc89e
    4d7c:	00000138 	.word	0x00000138
    4d80:	00000200 	.word	0x00000200
    4d84:	000002b4 	.word	0x000002b4
    4d88:	1fffc880 	.word	0x1fffc880
    4d8c:	00000148 	.word	0x00000148
    4d90:	1fffc7ec 	.word	0x1fffc7ec
    4d94:	00000014 	.word	0x00000014
    4d98:	0000008c 	.word	0x0000008c
    4d9c:	00000194 	.word	0x00000194

00004da0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    4da0:	b530      	push	{r4, r5, lr}
    4da2:	b083      	sub	sp, #12
    4da4:	4c2c      	ldr	r4, [pc, #176]	; (4e58 <vTaskSwitchContext+0xb8>)
    4da6:	447c      	add	r4, pc
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    4da8:	4b2c      	ldr	r3, [pc, #176]	; (4e5c <vTaskSwitchContext+0xbc>)
    4daa:	447b      	add	r3, pc
    4dac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4dae:	2b00      	cmp	r3, #0
    4db0:	d004      	beq.n	4dbc <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    4db2:	2201      	movs	r2, #1
    4db4:	4b2a      	ldr	r3, [pc, #168]	; (4e60 <vTaskSwitchContext+0xc0>)
    4db6:	447b      	add	r3, pc
    4db8:	675a      	str	r2, [r3, #116]	; 0x74
    4dba:	e04a      	b.n	4e52 <vTaskSwitchContext+0xb2>
	}
	else
	{
		xYieldPending = pdFALSE;
    4dbc:	4b29      	ldr	r3, [pc, #164]	; (4e64 <vTaskSwitchContext+0xc4>)
    4dbe:	447b      	add	r3, pc
    4dc0:	2200      	movs	r2, #0
    4dc2:	675a      	str	r2, [r3, #116]	; 0x74
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    4dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    4dc6:	009a      	lsls	r2, r3, #2
    4dc8:	18d3      	adds	r3, r2, r3
    4dca:	009b      	lsls	r3, r3, #2
    4dcc:	4a26      	ldr	r2, [pc, #152]	; (4e68 <vTaskSwitchContext+0xc8>)
    4dce:	447a      	add	r2, pc
    4dd0:	18d3      	adds	r3, r2, r3
    4dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4dd4:	2b00      	cmp	r3, #0
    4dd6:	d11b      	bne.n	4e10 <vTaskSwitchContext+0x70>
    4dd8:	4b24      	ldr	r3, [pc, #144]	; (4e6c <vTaskSwitchContext+0xcc>)
    4dda:	447b      	add	r3, pc
    4ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    4dde:	2b00      	cmp	r3, #0
    4de0:	d105      	bne.n	4dee <vTaskSwitchContext+0x4e>
    4de2:	e002      	b.n	4dea <vTaskSwitchContext+0x4a>
    4de4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    4de6:	2a00      	cmp	r2, #0
    4de8:	d107      	bne.n	4dfa <vTaskSwitchContext+0x5a>
    4dea:	b672      	cpsid	i
    4dec:	e7fe      	b.n	4dec <vTaskSwitchContext+0x4c>
    4dee:	4b20      	ldr	r3, [pc, #128]	; (4e70 <vTaskSwitchContext+0xd0>)
    4df0:	447b      	add	r3, pc
    4df2:	4d20      	ldr	r5, [pc, #128]	; (4e74 <vTaskSwitchContext+0xd4>)
    4df4:	447d      	add	r5, pc
    4df6:	4820      	ldr	r0, [pc, #128]	; (4e78 <vTaskSwitchContext+0xd8>)
    4df8:	4478      	add	r0, pc
    4dfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    4dfc:	3a01      	subs	r2, #1
    4dfe:	65da      	str	r2, [r3, #92]	; 0x5c
    4e00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    4e02:	0091      	lsls	r1, r2, #2
    4e04:	188a      	adds	r2, r1, r2
    4e06:	0092      	lsls	r2, r2, #2
    4e08:	18aa      	adds	r2, r5, r2
    4e0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
    4e0c:	2a00      	cmp	r2, #0
    4e0e:	d0e9      	beq.n	4de4 <vTaskSwitchContext+0x44>
    4e10:	4b1a      	ldr	r3, [pc, #104]	; (4e7c <vTaskSwitchContext+0xdc>)
    4e12:	447b      	add	r3, pc
    4e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    4e16:	009a      	lsls	r2, r3, #2
    4e18:	18d3      	adds	r3, r2, r3
    4e1a:	009b      	lsls	r3, r3, #2
    4e1c:	4a18      	ldr	r2, [pc, #96]	; (4e80 <vTaskSwitchContext+0xe0>)
    4e1e:	447a      	add	r2, pc
    4e20:	3238      	adds	r2, #56	; 0x38
    4e22:	18d3      	adds	r3, r2, r3
    4e24:	685a      	ldr	r2, [r3, #4]
    4e26:	6852      	ldr	r2, [r2, #4]
    4e28:	605a      	str	r2, [r3, #4]
    4e2a:	1c19      	adds	r1, r3, #0
    4e2c:	3108      	adds	r1, #8
    4e2e:	428a      	cmp	r2, r1
    4e30:	d101      	bne.n	4e36 <vTaskSwitchContext+0x96>
    4e32:	6852      	ldr	r2, [r2, #4]
    4e34:	605a      	str	r2, [r3, #4]
    4e36:	685b      	ldr	r3, [r3, #4]
    4e38:	68da      	ldr	r2, [r3, #12]
    4e3a:	4b12      	ldr	r3, [pc, #72]	; (4e84 <vTaskSwitchContext+0xe4>)
    4e3c:	58e3      	ldr	r3, [r4, r3]
    4e3e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
    4e40:	4b11      	ldr	r3, [pc, #68]	; (4e88 <vTaskSwitchContext+0xe8>)
    4e42:	58e3      	ldr	r3, [r4, r3]
    4e44:	4798      	blx	r3
    4e46:	4b11      	ldr	r3, [pc, #68]	; (4e8c <vTaskSwitchContext+0xec>)
    4e48:	58e3      	ldr	r3, [r4, r3]
    4e4a:	4798      	blx	r3
    4e4c:	4b10      	ldr	r3, [pc, #64]	; (4e90 <vTaskSwitchContext+0xf0>)
    4e4e:	58e3      	ldr	r3, [r4, r3]
    4e50:	4798      	blx	r3
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    4e52:	b003      	add	sp, #12
    4e54:	bd30      	pop	{r4, r5, pc}
    4e56:	46c0      	nop			; (mov r8, r8)
    4e58:	0000305e 	.word	0x0000305e
    4e5c:	1fffc7f6 	.word	0x1fffc7f6
    4e60:	1fffc7ea 	.word	0x1fffc7ea
    4e64:	1fffc7e2 	.word	0x1fffc7e2
    4e68:	1fffc752 	.word	0x1fffc752
    4e6c:	1fffc7c6 	.word	0x1fffc7c6
    4e70:	1fffc7b0 	.word	0x1fffc7b0
    4e74:	1fffc72c 	.word	0x1fffc72c
    4e78:	1fffc7a8 	.word	0x1fffc7a8
    4e7c:	1fffc78e 	.word	0x1fffc78e
    4e80:	1fffc702 	.word	0x1fffc702
    4e84:	00000054 	.word	0x00000054
    4e88:	00000008 	.word	0x00000008
    4e8c:	00000084 	.word	0x00000084
    4e90:	00000050 	.word	0x00000050

00004e94 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    4e94:	b570      	push	{r4, r5, r6, lr}
    4e96:	b082      	sub	sp, #8
    4e98:	1c05      	adds	r5, r0, #0
    4e9a:	4c31      	ldr	r4, [pc, #196]	; (4f60 <vTaskSuspend+0xcc>)
    4e9c:	447c      	add	r4, pc
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    4e9e:	4b31      	ldr	r3, [pc, #196]	; (4f64 <vTaskSuspend+0xd0>)
    4ea0:	58e3      	ldr	r3, [r4, r3]
    4ea2:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    4ea4:	2d00      	cmp	r5, #0
    4ea6:	d102      	bne.n	4eae <vTaskSuspend+0x1a>
    4ea8:	4b2f      	ldr	r3, [pc, #188]	; (4f68 <vTaskSuspend+0xd4>)
    4eaa:	58e3      	ldr	r3, [r4, r3]
    4eac:	681d      	ldr	r5, [r3, #0]

			traceTASK_SUSPEND( pxTCB );
    4eae:	1c28      	adds	r0, r5, #0
    4eb0:	4b2e      	ldr	r3, [pc, #184]	; (4f6c <vTaskSuspend+0xd8>)
    4eb2:	58e6      	ldr	r6, [r4, r3]
    4eb4:	47b0      	blx	r6
    4eb6:	1c02      	adds	r2, r0, #0
    4eb8:	208a      	movs	r0, #138	; 0x8a
    4eba:	2103      	movs	r1, #3
    4ebc:	4b2c      	ldr	r3, [pc, #176]	; (4f70 <vTaskSuspend+0xdc>)
    4ebe:	58e3      	ldr	r3, [r4, r3]
    4ec0:	4798      	blx	r3
    4ec2:	1c28      	adds	r0, r5, #0
    4ec4:	47b0      	blx	r6
    4ec6:	4b2b      	ldr	r3, [pc, #172]	; (4f74 <vTaskSuspend+0xe0>)
    4ec8:	58e3      	ldr	r3, [r4, r3]
    4eca:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    4ecc:	1d2e      	adds	r6, r5, #4
    4ece:	1c30      	adds	r0, r6, #0
    4ed0:	4b29      	ldr	r3, [pc, #164]	; (4f78 <vTaskSuspend+0xe4>)
    4ed2:	58e3      	ldr	r3, [r4, r3]
    4ed4:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    4ed6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4ed8:	2b00      	cmp	r3, #0
    4eda:	d004      	beq.n	4ee6 <vTaskSuspend+0x52>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4edc:	1c28      	adds	r0, r5, #0
    4ede:	3018      	adds	r0, #24
    4ee0:	4b25      	ldr	r3, [pc, #148]	; (4f78 <vTaskSuspend+0xe4>)
    4ee2:	58e3      	ldr	r3, [r4, r3]
    4ee4:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4ee6:	4825      	ldr	r0, [pc, #148]	; (4f7c <vTaskSuspend+0xe8>)
    4ee8:	4478      	add	r0, pc
    4eea:	1c31      	adds	r1, r6, #0
    4eec:	4b24      	ldr	r3, [pc, #144]	; (4f80 <vTaskSuspend+0xec>)
    4eee:	58e3      	ldr	r3, [r4, r3]
    4ef0:	4798      	blx	r3
		}
		taskEXIT_CRITICAL();
    4ef2:	4b24      	ldr	r3, [pc, #144]	; (4f84 <vTaskSuspend+0xf0>)
    4ef4:	58e3      	ldr	r3, [r4, r3]
    4ef6:	4798      	blx	r3

		if( pxTCB == pxCurrentTCB )
    4ef8:	4b1b      	ldr	r3, [pc, #108]	; (4f68 <vTaskSuspend+0xd4>)
    4efa:	58e3      	ldr	r3, [r4, r3]
    4efc:	681b      	ldr	r3, [r3, #0]
    4efe:	429d      	cmp	r5, r3
    4f00:	d11e      	bne.n	4f40 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4f02:	4b21      	ldr	r3, [pc, #132]	; (4f88 <vTaskSuspend+0xf4>)
    4f04:	447b      	add	r3, pc
    4f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    4f08:	2b00      	cmp	r3, #0
    4f0a:	d00a      	beq.n	4f22 <vTaskSuspend+0x8e>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
    4f0c:	4b1f      	ldr	r3, [pc, #124]	; (4f8c <vTaskSuspend+0xf8>)
    4f0e:	447b      	add	r3, pc
    4f10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4f12:	2b00      	cmp	r3, #0
    4f14:	d001      	beq.n	4f1a <vTaskSuspend+0x86>
    4f16:	b672      	cpsid	i
    4f18:	e7fe      	b.n	4f18 <vTaskSuspend+0x84>
				portYIELD_WITHIN_API();
    4f1a:	4b1d      	ldr	r3, [pc, #116]	; (4f90 <vTaskSuspend+0xfc>)
    4f1c:	58e3      	ldr	r3, [r4, r3]
    4f1e:	4798      	blx	r3
    4f20:	e01c      	b.n	4f5c <vTaskSuspend+0xc8>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4f22:	4b1c      	ldr	r3, [pc, #112]	; (4f94 <vTaskSuspend+0x100>)
    4f24:	447b      	add	r3, pc
    4f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    4f28:	681b      	ldr	r3, [r3, #0]
    4f2a:	4293      	cmp	r3, r2
    4f2c:	d104      	bne.n	4f38 <vTaskSuspend+0xa4>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4f2e:	4b0e      	ldr	r3, [pc, #56]	; (4f68 <vTaskSuspend+0xd4>)
    4f30:	58e3      	ldr	r3, [r4, r3]
    4f32:	2200      	movs	r2, #0
    4f34:	601a      	str	r2, [r3, #0]
    4f36:	e011      	b.n	4f5c <vTaskSuspend+0xc8>
				}
				else
				{
					vTaskSwitchContext();
    4f38:	4b17      	ldr	r3, [pc, #92]	; (4f98 <vTaskSuspend+0x104>)
    4f3a:	58e3      	ldr	r3, [r4, r3]
    4f3c:	4798      	blx	r3
    4f3e:	e00d      	b.n	4f5c <vTaskSuspend+0xc8>
				}
			}
		}
		else
		{
			if( xSchedulerRunning != pdFALSE )
    4f40:	4b16      	ldr	r3, [pc, #88]	; (4f9c <vTaskSuspend+0x108>)
    4f42:	447b      	add	r3, pc
    4f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    4f46:	2b00      	cmp	r3, #0
    4f48:	d008      	beq.n	4f5c <vTaskSuspend+0xc8>
			{
				/* A task other than the currently running task was suspended,
				reset the next expected unblock time in case it referred to the
				task that is now in the Suspended state. */
				taskENTER_CRITICAL();
    4f4a:	4b06      	ldr	r3, [pc, #24]	; (4f64 <vTaskSuspend+0xd0>)
    4f4c:	58e3      	ldr	r3, [r4, r3]
    4f4e:	4798      	blx	r3
				{
					prvResetNextTaskUnblockTime();
    4f50:	4b13      	ldr	r3, [pc, #76]	; (4fa0 <vTaskSuspend+0x10c>)
    4f52:	447b      	add	r3, pc
    4f54:	4798      	blx	r3
				}
				taskEXIT_CRITICAL();
    4f56:	4b0b      	ldr	r3, [pc, #44]	; (4f84 <vTaskSuspend+0xf0>)
    4f58:	58e3      	ldr	r3, [r4, r3]
    4f5a:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    4f5c:	b002      	add	sp, #8
    4f5e:	bd70      	pop	{r4, r5, r6, pc}
    4f60:	00002f68 	.word	0x00002f68
    4f64:	000002b4 	.word	0x000002b4
    4f68:	00000054 	.word	0x00000054
    4f6c:	00000084 	.word	0x00000084
    4f70:	0000024c 	.word	0x0000024c
    4f74:	0000022c 	.word	0x0000022c
    4f78:	00000148 	.word	0x00000148
    4f7c:	1fffc638 	.word	0x1fffc638
    4f80:	000000a0 	.word	0x000000a0
    4f84:	00000014 	.word	0x00000014
    4f88:	1fffc69c 	.word	0x1fffc69c
    4f8c:	1fffc692 	.word	0x1fffc692
    4f90:	00000194 	.word	0x00000194
    4f94:	1fffc5fc 	.word	0x1fffc5fc
    4f98:	0000016c 	.word	0x0000016c
    4f9c:	1fffc65e 	.word	0x1fffc65e
    4fa0:	fffff40b 	.word	0xfffff40b

00004fa4 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    4fa4:	b570      	push	{r4, r5, r6, lr}
    4fa6:	b082      	sub	sp, #8
    4fa8:	1c0d      	adds	r5, r1, #0
    4faa:	4c13      	ldr	r4, [pc, #76]	; (4ff8 <vTaskPlaceOnEventList+0x54>)
    4fac:	447c      	add	r4, pc
TickType_t xTimeToWake;

	configASSERT( pxEventList );
    4fae:	2800      	cmp	r0, #0
    4fb0:	d101      	bne.n	4fb6 <vTaskPlaceOnEventList+0x12>
    4fb2:	b672      	cpsid	i
    4fb4:	e7fe      	b.n	4fb4 <vTaskPlaceOnEventList+0x10>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    4fb6:	4b11      	ldr	r3, [pc, #68]	; (4ffc <vTaskPlaceOnEventList+0x58>)
    4fb8:	58e6      	ldr	r6, [r4, r3]
    4fba:	6831      	ldr	r1, [r6, #0]
    4fbc:	3118      	adds	r1, #24
    4fbe:	4b10      	ldr	r3, [pc, #64]	; (5000 <vTaskPlaceOnEventList+0x5c>)
    4fc0:	58e3      	ldr	r3, [r4, r3]
    4fc2:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    4fc4:	6830      	ldr	r0, [r6, #0]
    4fc6:	3004      	adds	r0, #4
    4fc8:	4b0e      	ldr	r3, [pc, #56]	; (5004 <vTaskPlaceOnEventList+0x60>)
    4fca:	58e3      	ldr	r3, [r4, r3]
    4fcc:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    4fce:	1c6b      	adds	r3, r5, #1
    4fd0:	d109      	bne.n	4fe6 <vTaskPlaceOnEventList+0x42>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    4fd2:	4b0a      	ldr	r3, [pc, #40]	; (4ffc <vTaskPlaceOnEventList+0x58>)
    4fd4:	58e3      	ldr	r3, [r4, r3]
    4fd6:	6819      	ldr	r1, [r3, #0]
    4fd8:	3104      	adds	r1, #4
    4fda:	480b      	ldr	r0, [pc, #44]	; (5008 <vTaskPlaceOnEventList+0x64>)
    4fdc:	4478      	add	r0, pc
    4fde:	4b0b      	ldr	r3, [pc, #44]	; (500c <vTaskPlaceOnEventList+0x68>)
    4fe0:	58e3      	ldr	r3, [r4, r3]
    4fe2:	4798      	blx	r3
    4fe4:	e006      	b.n	4ff4 <vTaskPlaceOnEventList+0x50>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    4fe6:	4b0a      	ldr	r3, [pc, #40]	; (5010 <vTaskPlaceOnEventList+0x6c>)
    4fe8:	447b      	add	r3, pc
    4fea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    4fec:	1828      	adds	r0, r5, r0
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    4fee:	4b09      	ldr	r3, [pc, #36]	; (5014 <vTaskPlaceOnEventList+0x70>)
    4ff0:	447b      	add	r3, pc
    4ff2:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    4ff4:	b002      	add	sp, #8
    4ff6:	bd70      	pop	{r4, r5, r6, pc}
    4ff8:	00002e58 	.word	0x00002e58
    4ffc:	00000054 	.word	0x00000054
    5000:	000001bc 	.word	0x000001bc
    5004:	00000148 	.word	0x00000148
    5008:	1fffc544 	.word	0x1fffc544
    500c:	000000a0 	.word	0x000000a0
    5010:	1fffc538 	.word	0x1fffc538
    5014:	fffff3a9 	.word	0xfffff3a9

00005018 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
    5018:	b5f0      	push	{r4, r5, r6, r7, lr}
    501a:	b083      	sub	sp, #12
    501c:	1c0e      	adds	r6, r1, #0
    501e:	4c16      	ldr	r4, [pc, #88]	; (5078 <vTaskPlaceOnEventListRestricted+0x60>)
    5020:	447c      	add	r4, pc
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
    5022:	2800      	cmp	r0, #0
    5024:	d101      	bne.n	502a <vTaskPlaceOnEventListRestricted+0x12>
    5026:	b672      	cpsid	i
    5028:	e7fe      	b.n	5028 <vTaskPlaceOnEventListRestricted+0x10>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    502a:	4b14      	ldr	r3, [pc, #80]	; (507c <vTaskPlaceOnEventListRestricted+0x64>)
    502c:	58e5      	ldr	r5, [r4, r3]
    502e:	6829      	ldr	r1, [r5, #0]
    5030:	3118      	adds	r1, #24
    5032:	4b13      	ldr	r3, [pc, #76]	; (5080 <vTaskPlaceOnEventListRestricted+0x68>)
    5034:	58e3      	ldr	r3, [r4, r3]
    5036:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    5038:	6828      	ldr	r0, [r5, #0]
    503a:	3004      	adds	r0, #4
    503c:	4b11      	ldr	r3, [pc, #68]	; (5084 <vTaskPlaceOnEventListRestricted+0x6c>)
    503e:	58e3      	ldr	r3, [r4, r3]
    5040:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
    5042:	4b11      	ldr	r3, [pc, #68]	; (5088 <vTaskPlaceOnEventListRestricted+0x70>)
    5044:	447b      	add	r3, pc
    5046:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    5048:	19f7      	adds	r7, r6, r7

		traceTASK_DELAY_UNTIL();
    504a:	2088      	movs	r0, #136	; 0x88
    504c:	1c39      	adds	r1, r7, #0
    504e:	4b0f      	ldr	r3, [pc, #60]	; (508c <vTaskPlaceOnEventListRestricted+0x74>)
    5050:	58e3      	ldr	r3, [r4, r3]
    5052:	4798      	blx	r3
    5054:	6828      	ldr	r0, [r5, #0]
    5056:	4b0e      	ldr	r3, [pc, #56]	; (5090 <vTaskPlaceOnEventListRestricted+0x78>)
    5058:	58e6      	ldr	r6, [r4, r3]
    505a:	47b0      	blx	r6
    505c:	4b0d      	ldr	r3, [pc, #52]	; (5094 <vTaskPlaceOnEventListRestricted+0x7c>)
    505e:	58e5      	ldr	r5, [r4, r3]
    5060:	47a8      	blx	r5
    5062:	4b0d      	ldr	r3, [pc, #52]	; (5098 <vTaskPlaceOnEventListRestricted+0x80>)
    5064:	58e3      	ldr	r3, [r4, r3]
    5066:	4798      	blx	r3
    5068:	47b0      	blx	r6
    506a:	47a8      	blx	r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    506c:	1c38      	adds	r0, r7, #0
    506e:	4b0b      	ldr	r3, [pc, #44]	; (509c <vTaskPlaceOnEventListRestricted+0x84>)
    5070:	447b      	add	r3, pc
    5072:	4798      	blx	r3
	}
    5074:	b003      	add	sp, #12
    5076:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5078:	00002de4 	.word	0x00002de4
    507c:	00000054 	.word	0x00000054
    5080:	000000a0 	.word	0x000000a0
    5084:	00000148 	.word	0x00000148
    5088:	1fffc4dc 	.word	0x1fffc4dc
    508c:	0000001c 	.word	0x0000001c
    5090:	00000084 	.word	0x00000084
    5094:	0000022c 	.word	0x0000022c
    5098:	00000008 	.word	0x00000008
    509c:	fffff329 	.word	0xfffff329

000050a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    50a0:	b570      	push	{r4, r5, r6, lr}
    50a2:	b082      	sub	sp, #8
    50a4:	4c24      	ldr	r4, [pc, #144]	; (5138 <xTaskRemoveFromEventList+0x98>)
    50a6:	447c      	add	r4, pc
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    50a8:	68c3      	ldr	r3, [r0, #12]
    50aa:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
    50ac:	2d00      	cmp	r5, #0
    50ae:	d101      	bne.n	50b4 <xTaskRemoveFromEventList+0x14>
    50b0:	b672      	cpsid	i
    50b2:	e7fe      	b.n	50b2 <xTaskRemoveFromEventList+0x12>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    50b4:	1c2e      	adds	r6, r5, #0
    50b6:	3618      	adds	r6, #24
    50b8:	1c30      	adds	r0, r6, #0
    50ba:	4b20      	ldr	r3, [pc, #128]	; (513c <xTaskRemoveFromEventList+0x9c>)
    50bc:	58e3      	ldr	r3, [r4, r3]
    50be:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    50c0:	4b1f      	ldr	r3, [pc, #124]	; (5140 <xTaskRemoveFromEventList+0xa0>)
    50c2:	447b      	add	r3, pc
    50c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    50c6:	2b00      	cmp	r3, #0
    50c8:	d120      	bne.n	510c <xTaskRemoveFromEventList+0x6c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    50ca:	1d2e      	adds	r6, r5, #4
    50cc:	1c30      	adds	r0, r6, #0
    50ce:	4b1b      	ldr	r3, [pc, #108]	; (513c <xTaskRemoveFromEventList+0x9c>)
    50d0:	58e3      	ldr	r3, [r4, r3]
    50d2:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    50d4:	1c28      	adds	r0, r5, #0
    50d6:	4b1b      	ldr	r3, [pc, #108]	; (5144 <xTaskRemoveFromEventList+0xa4>)
    50d8:	58e3      	ldr	r3, [r4, r3]
    50da:	4798      	blx	r3
    50dc:	4b1a      	ldr	r3, [pc, #104]	; (5148 <xTaskRemoveFromEventList+0xa8>)
    50de:	58e3      	ldr	r3, [r4, r3]
    50e0:	4798      	blx	r3
    50e2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    50e4:	4a19      	ldr	r2, [pc, #100]	; (514c <xTaskRemoveFromEventList+0xac>)
    50e6:	447a      	add	r2, pc
    50e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    50ea:	4293      	cmp	r3, r2
    50ec:	d902      	bls.n	50f4 <xTaskRemoveFromEventList+0x54>
    50ee:	4a18      	ldr	r2, [pc, #96]	; (5150 <xTaskRemoveFromEventList+0xb0>)
    50f0:	447a      	add	r2, pc
    50f2:	65d3      	str	r3, [r2, #92]	; 0x5c
    50f4:	009a      	lsls	r2, r3, #2
    50f6:	18d3      	adds	r3, r2, r3
    50f8:	009b      	lsls	r3, r3, #2
    50fa:	4816      	ldr	r0, [pc, #88]	; (5154 <xTaskRemoveFromEventList+0xb4>)
    50fc:	4478      	add	r0, pc
    50fe:	3038      	adds	r0, #56	; 0x38
    5100:	18c0      	adds	r0, r0, r3
    5102:	1c31      	adds	r1, r6, #0
    5104:	4b14      	ldr	r3, [pc, #80]	; (5158 <xTaskRemoveFromEventList+0xb8>)
    5106:	58e3      	ldr	r3, [r4, r3]
    5108:	4798      	blx	r3
    510a:	e006      	b.n	511a <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    510c:	4813      	ldr	r0, [pc, #76]	; (515c <xTaskRemoveFromEventList+0xbc>)
    510e:	4478      	add	r0, pc
    5110:	3014      	adds	r0, #20
    5112:	1c31      	adds	r1, r6, #0
    5114:	4b10      	ldr	r3, [pc, #64]	; (5158 <xTaskRemoveFromEventList+0xb8>)
    5116:	58e3      	ldr	r3, [r4, r3]
    5118:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    511a:	4b11      	ldr	r3, [pc, #68]	; (5160 <xTaskRemoveFromEventList+0xc0>)
    511c:	58e3      	ldr	r3, [r4, r3]
    511e:	681b      	ldr	r3, [r3, #0]
    5120:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    5122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xReturn = pdFALSE;
    5124:	2000      	movs	r0, #0
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    5126:	429a      	cmp	r2, r3
    5128:	d904      	bls.n	5134 <xTaskRemoveFromEventList+0x94>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    512a:	2201      	movs	r2, #1
    512c:	4b0d      	ldr	r3, [pc, #52]	; (5164 <xTaskRemoveFromEventList+0xc4>)
    512e:	447b      	add	r3, pc
    5130:	675a      	str	r2, [r3, #116]	; 0x74
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    5132:	2001      	movs	r0, #1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    5134:	b002      	add	sp, #8
    5136:	bd70      	pop	{r4, r5, r6, pc}
    5138:	00002d5e 	.word	0x00002d5e
    513c:	00000148 	.word	0x00000148
    5140:	1fffc4de 	.word	0x1fffc4de
    5144:	00000084 	.word	0x00000084
    5148:	000001d4 	.word	0x000001d4
    514c:	1fffc4ba 	.word	0x1fffc4ba
    5150:	1fffc4b0 	.word	0x1fffc4b0
    5154:	1fffc424 	.word	0x1fffc424
    5158:	000000a0 	.word	0x000000a0
    515c:	1fffc412 	.word	0x1fffc412
    5160:	00000054 	.word	0x00000054
    5164:	1fffc472 	.word	0x1fffc472

00005168 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
    5168:	2800      	cmp	r0, #0
    516a:	d101      	bne.n	5170 <vTaskSetTimeOutState+0x8>
    516c:	b672      	cpsid	i
    516e:	e7fe      	b.n	516e <vTaskSetTimeOutState+0x6>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    5170:	4b04      	ldr	r3, [pc, #16]	; (5184 <vTaskSetTimeOutState+0x1c>)
    5172:	447b      	add	r3, pc
    5174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5176:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    5178:	4b03      	ldr	r3, [pc, #12]	; (5188 <vTaskSetTimeOutState+0x20>)
    517a:	447b      	add	r3, pc
    517c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    517e:	6043      	str	r3, [r0, #4]
}
    5180:	4770      	bx	lr
    5182:	46c0      	nop			; (mov r8, r8)
    5184:	1fffc42e 	.word	0x1fffc42e
    5188:	1fffc3a6 	.word	0x1fffc3a6

0000518c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    518c:	b5f0      	push	{r4, r5, r6, r7, lr}
    518e:	b083      	sub	sp, #12
    5190:	1c04      	adds	r4, r0, #0
    5192:	1c0f      	adds	r7, r1, #0
    5194:	4e18      	ldr	r6, [pc, #96]	; (51f8 <xTaskCheckForTimeOut+0x6c>)
    5196:	447e      	add	r6, pc
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    5198:	2800      	cmp	r0, #0
    519a:	d101      	bne.n	51a0 <xTaskCheckForTimeOut+0x14>
    519c:	b672      	cpsid	i
    519e:	e7fe      	b.n	519e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    51a0:	2900      	cmp	r1, #0
    51a2:	d101      	bne.n	51a8 <xTaskCheckForTimeOut+0x1c>
    51a4:	b672      	cpsid	i
    51a6:	e7fe      	b.n	51a6 <xTaskCheckForTimeOut+0x1a>

	taskENTER_CRITICAL();
    51a8:	4b14      	ldr	r3, [pc, #80]	; (51fc <xTaskCheckForTimeOut+0x70>)
    51aa:	58f3      	ldr	r3, [r6, r3]
    51ac:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    51ae:	4b14      	ldr	r3, [pc, #80]	; (5200 <xTaskCheckForTimeOut+0x74>)
    51b0:	447b      	add	r3, pc
    51b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    51b4:	683b      	ldr	r3, [r7, #0]
    51b6:	1c58      	adds	r0, r3, #1
    51b8:	d017      	beq.n	51ea <xTaskCheckForTimeOut+0x5e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    51ba:	4912      	ldr	r1, [pc, #72]	; (5204 <xTaskCheckForTimeOut+0x78>)
    51bc:	4479      	add	r1, pc
    51be:	6f09      	ldr	r1, [r1, #112]	; 0x70
    51c0:	6820      	ldr	r0, [r4, #0]
    51c2:	4288      	cmp	r0, r1
    51c4:	d003      	beq.n	51ce <xTaskCheckForTimeOut+0x42>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    51c6:	2501      	movs	r5, #1
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    51c8:	6861      	ldr	r1, [r4, #4]
    51ca:	428a      	cmp	r2, r1
    51cc:	d20e      	bcs.n	51ec <xTaskCheckForTimeOut+0x60>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    51ce:	6861      	ldr	r1, [r4, #4]
    51d0:	1a50      	subs	r0, r2, r1
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    51d2:	2501      	movs	r5, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    51d4:	4283      	cmp	r3, r0
    51d6:	d909      	bls.n	51ec <xTaskCheckForTimeOut+0x60>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    51d8:	1a8a      	subs	r2, r1, r2
    51da:	18d3      	adds	r3, r2, r3
    51dc:	603b      	str	r3, [r7, #0]
			vTaskSetTimeOutState( pxTimeOut );
    51de:	1c20      	adds	r0, r4, #0
    51e0:	4b09      	ldr	r3, [pc, #36]	; (5208 <xTaskCheckForTimeOut+0x7c>)
    51e2:	58f3      	ldr	r3, [r6, r3]
    51e4:	4798      	blx	r3
			xReturn = pdFALSE;
    51e6:	2500      	movs	r5, #0
    51e8:	e000      	b.n	51ec <xTaskCheckForTimeOut+0x60>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
    51ea:	2500      	movs	r5, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    51ec:	4b07      	ldr	r3, [pc, #28]	; (520c <xTaskCheckForTimeOut+0x80>)
    51ee:	58f3      	ldr	r3, [r6, r3]
    51f0:	4798      	blx	r3

	return xReturn;
}
    51f2:	1c28      	adds	r0, r5, #0
    51f4:	b003      	add	sp, #12
    51f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51f8:	00002c6e 	.word	0x00002c6e
    51fc:	000002b4 	.word	0x000002b4
    5200:	1fffc370 	.word	0x1fffc370
    5204:	1fffc3e4 	.word	0x1fffc3e4
    5208:	000002b0 	.word	0x000002b0
    520c:	00000014 	.word	0x00000014

00005210 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    5210:	2201      	movs	r2, #1
    5212:	4b02      	ldr	r3, [pc, #8]	; (521c <vTaskMissedYield+0xc>)
    5214:	447b      	add	r3, pc
    5216:	675a      	str	r2, [r3, #116]	; 0x74
}
    5218:	4770      	bx	lr
    521a:	46c0      	nop			; (mov r8, r8)
    521c:	1fffc38c 	.word	0x1fffc38c

00005220 <uxTaskGetTaskNumber>:
	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
    5220:	2800      	cmp	r0, #0
    5222:	d001      	beq.n	5228 <uxTaskGetTaskNumber+0x8>
		{
			pxTCB = ( TCB_t * ) xTask;
			uxReturn = pxTCB->uxTaskNumber;
    5224:	6c00      	ldr	r0, [r0, #64]	; 0x40
    5226:	e000      	b.n	522a <uxTaskGetTaskNumber+0xa>
		}
		else
		{
			uxReturn = 0U;
    5228:	2000      	movs	r0, #0
		}

		return uxReturn;
	}
    522a:	4770      	bx	lr

0000522c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    522c:	4b02      	ldr	r3, [pc, #8]	; (5238 <xTaskGetCurrentTaskHandle+0xc>)
    522e:	447b      	add	r3, pc
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    5230:	4a02      	ldr	r2, [pc, #8]	; (523c <xTaskGetCurrentTaskHandle+0x10>)
    5232:	589b      	ldr	r3, [r3, r2]
    5234:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    5236:	4770      	bx	lr
    5238:	00002bd6 	.word	0x00002bd6
    523c:	00000054 	.word	0x00000054

00005240 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    5240:	4b06      	ldr	r3, [pc, #24]	; (525c <xTaskGetSchedulerState+0x1c>)
    5242:	447b      	add	r3, pc
    5244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    5246:	2001      	movs	r0, #1

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    5248:	2b00      	cmp	r3, #0
    524a:	d005      	beq.n	5258 <xTaskGetSchedulerState+0x18>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    524c:	4b04      	ldr	r3, [pc, #16]	; (5260 <xTaskGetSchedulerState+0x20>)
    524e:	447b      	add	r3, pc
    5250:	6e98      	ldr	r0, [r3, #104]	; 0x68
			{
				xReturn = taskSCHEDULER_RUNNING;
    5252:	4243      	negs	r3, r0
    5254:	4158      	adcs	r0, r3
    5256:	0040      	lsls	r0, r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
    5258:	4770      	bx	lr
    525a:	46c0      	nop			; (mov r8, r8)
    525c:	1fffc35e 	.word	0x1fffc35e
    5260:	1fffc352 	.word	0x1fffc352

00005264 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    5264:	b5f0      	push	{r4, r5, r6, r7, lr}
    5266:	b083      	sub	sp, #12
    5268:	1c05      	adds	r5, r0, #0
    526a:	4c35      	ldr	r4, [pc, #212]	; (5340 <vTaskPriorityInherit+0xdc>)
    526c:	447c      	add	r4, pc
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    526e:	2800      	cmp	r0, #0
    5270:	d064      	beq.n	533c <vTaskPriorityInherit+0xd8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    5272:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    5274:	4a33      	ldr	r2, [pc, #204]	; (5344 <vTaskPriorityInherit+0xe0>)
    5276:	58a2      	ldr	r2, [r4, r2]
    5278:	6812      	ldr	r2, [r2, #0]
    527a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    527c:	4293      	cmp	r3, r2
    527e:	d25d      	bcs.n	533c <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    5280:	6982      	ldr	r2, [r0, #24]
    5282:	2a00      	cmp	r2, #0
    5284:	db06      	blt.n	5294 <vTaskPriorityInherit+0x30>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5286:	4a2f      	ldr	r2, [pc, #188]	; (5344 <vTaskPriorityInherit+0xe0>)
    5288:	58a2      	ldr	r2, [r4, r2]
    528a:	6812      	ldr	r2, [r2, #0]
    528c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    528e:	2105      	movs	r1, #5
    5290:	1a8a      	subs	r2, r1, r2
    5292:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    5294:	009a      	lsls	r2, r3, #2
    5296:	18d3      	adds	r3, r2, r3
    5298:	009b      	lsls	r3, r3, #2
    529a:	4a2b      	ldr	r2, [pc, #172]	; (5348 <vTaskPriorityInherit+0xe4>)
    529c:	447a      	add	r2, pc
    529e:	3238      	adds	r2, #56	; 0x38
    52a0:	18d3      	adds	r3, r2, r3
    52a2:	696f      	ldr	r7, [r5, #20]
    52a4:	429f      	cmp	r7, r3
    52a6:	d125      	bne.n	52f4 <vTaskPriorityInherit+0x90>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    52a8:	1d2e      	adds	r6, r5, #4
    52aa:	1c30      	adds	r0, r6, #0
    52ac:	4b27      	ldr	r3, [pc, #156]	; (534c <vTaskPriorityInherit+0xe8>)
    52ae:	58e3      	ldr	r3, [r4, r3]
    52b0:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    52b2:	4b24      	ldr	r3, [pc, #144]	; (5344 <vTaskPriorityInherit+0xe0>)
    52b4:	58e3      	ldr	r3, [r4, r3]
    52b6:	681b      	ldr	r3, [r3, #0]
    52b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    52ba:	62eb      	str	r3, [r5, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    52bc:	1c28      	adds	r0, r5, #0
    52be:	4b24      	ldr	r3, [pc, #144]	; (5350 <vTaskPriorityInherit+0xec>)
    52c0:	58e3      	ldr	r3, [r4, r3]
    52c2:	4798      	blx	r3
    52c4:	4b23      	ldr	r3, [pc, #140]	; (5354 <vTaskPriorityInherit+0xf0>)
    52c6:	58e3      	ldr	r3, [r4, r3]
    52c8:	4798      	blx	r3
    52ca:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    52cc:	4a22      	ldr	r2, [pc, #136]	; (5358 <vTaskPriorityInherit+0xf4>)
    52ce:	447a      	add	r2, pc
    52d0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    52d2:	4293      	cmp	r3, r2
    52d4:	d902      	bls.n	52dc <vTaskPriorityInherit+0x78>
    52d6:	4a21      	ldr	r2, [pc, #132]	; (535c <vTaskPriorityInherit+0xf8>)
    52d8:	447a      	add	r2, pc
    52da:	65d3      	str	r3, [r2, #92]	; 0x5c
    52dc:	0098      	lsls	r0, r3, #2
    52de:	18c3      	adds	r3, r0, r3
    52e0:	009b      	lsls	r3, r3, #2
    52e2:	481f      	ldr	r0, [pc, #124]	; (5360 <vTaskPriorityInherit+0xfc>)
    52e4:	4478      	add	r0, pc
    52e6:	3038      	adds	r0, #56	; 0x38
    52e8:	18c0      	adds	r0, r0, r3
    52ea:	1c31      	adds	r1, r6, #0
    52ec:	4b1d      	ldr	r3, [pc, #116]	; (5364 <vTaskPriorityInherit+0x100>)
    52ee:	58e3      	ldr	r3, [r4, r3]
    52f0:	4798      	blx	r3
    52f2:	e004      	b.n	52fe <vTaskPriorityInherit+0x9a>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    52f4:	4b13      	ldr	r3, [pc, #76]	; (5344 <vTaskPriorityInherit+0xe0>)
    52f6:	58e3      	ldr	r3, [r4, r3]
    52f8:	681b      	ldr	r3, [r3, #0]
    52fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    52fc:	62eb      	str	r3, [r5, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
    52fe:	1c28      	adds	r0, r5, #0
    5300:	4b13      	ldr	r3, [pc, #76]	; (5350 <vTaskPriorityInherit+0xec>)
    5302:	58e6      	ldr	r6, [r4, r3]
    5304:	47b0      	blx	r6
    5306:	1c07      	adds	r7, r0, #0
    5308:	1c28      	adds	r0, r5, #0
    530a:	47b0      	blx	r6
    530c:	1c01      	adds	r1, r0, #0
    530e:	2003      	movs	r0, #3
    5310:	4b15      	ldr	r3, [pc, #84]	; (5368 <vTaskPriorityInherit+0x104>)
    5312:	58e3      	ldr	r3, [r4, r3]
    5314:	4798      	blx	r3
    5316:	1c03      	adds	r3, r0, #0
    5318:	208e      	movs	r0, #142	; 0x8e
    531a:	2103      	movs	r1, #3
    531c:	1c3a      	adds	r2, r7, #0
    531e:	4f13      	ldr	r7, [pc, #76]	; (536c <vTaskPriorityInherit+0x108>)
    5320:	59e7      	ldr	r7, [r4, r7]
    5322:	47b8      	blx	r7
    5324:	1c28      	adds	r0, r5, #0
    5326:	47b0      	blx	r6
    5328:	1c01      	adds	r1, r0, #0
    532a:	4b06      	ldr	r3, [pc, #24]	; (5344 <vTaskPriorityInherit+0xe0>)
    532c:	58e3      	ldr	r3, [r4, r3]
    532e:	681b      	ldr	r3, [r3, #0]
    5330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5332:	b2d2      	uxtb	r2, r2
    5334:	2003      	movs	r0, #3
    5336:	4b0e      	ldr	r3, [pc, #56]	; (5370 <vTaskPriorityInherit+0x10c>)
    5338:	58e3      	ldr	r3, [r4, r3]
    533a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    533c:	b003      	add	sp, #12
    533e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5340:	00002b98 	.word	0x00002b98
    5344:	00000054 	.word	0x00000054
    5348:	1fffc284 	.word	0x1fffc284
    534c:	00000148 	.word	0x00000148
    5350:	00000084 	.word	0x00000084
    5354:	000001d4 	.word	0x000001d4
    5358:	1fffc2d2 	.word	0x1fffc2d2
    535c:	1fffc2c8 	.word	0x1fffc2c8
    5360:	1fffc23c 	.word	0x1fffc23c
    5364:	000000a0 	.word	0x000000a0
    5368:	000000d8 	.word	0x000000d8
    536c:	000001f4 	.word	0x000001f4
    5370:	00000270 	.word	0x00000270

00005374 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    5374:	b5f0      	push	{r4, r5, r6, r7, lr}
    5376:	b083      	sub	sp, #12
    5378:	1c04      	adds	r4, r0, #0
    537a:	4d28      	ldr	r5, [pc, #160]	; (541c <vTaskPriorityDisinherit+0xa8>)
    537c:	447d      	add	r5, pc
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    537e:	2800      	cmp	r0, #0
    5380:	d04a      	beq.n	5418 <vTaskPriorityDisinherit+0xa4>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    5382:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    5384:	6c43      	ldr	r3, [r0, #68]	; 0x44
    5386:	429a      	cmp	r2, r3
    5388:	d046      	beq.n	5418 <vTaskPriorityDisinherit+0xa4>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    538a:	1d07      	adds	r7, r0, #4
    538c:	1c38      	adds	r0, r7, #0
    538e:	4b24      	ldr	r3, [pc, #144]	; (5420 <vTaskPriorityDisinherit+0xac>)
    5390:	58eb      	ldr	r3, [r5, r3]
    5392:	4798      	blx	r3
					mtCOVERAGE_TEST_MARKER();
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    5394:	1c20      	adds	r0, r4, #0
    5396:	4b23      	ldr	r3, [pc, #140]	; (5424 <vTaskPriorityDisinherit+0xb0>)
    5398:	58eb      	ldr	r3, [r5, r3]
    539a:	9300      	str	r3, [sp, #0]
    539c:	4798      	blx	r3
    539e:	1c06      	adds	r6, r0, #0
    53a0:	1c20      	adds	r0, r4, #0
    53a2:	9a00      	ldr	r2, [sp, #0]
    53a4:	4790      	blx	r2
    53a6:	1c01      	adds	r1, r0, #0
    53a8:	2003      	movs	r0, #3
    53aa:	4b1f      	ldr	r3, [pc, #124]	; (5428 <vTaskPriorityDisinherit+0xb4>)
    53ac:	58eb      	ldr	r3, [r5, r3]
    53ae:	4798      	blx	r3
    53b0:	1c03      	adds	r3, r0, #0
    53b2:	208f      	movs	r0, #143	; 0x8f
    53b4:	2103      	movs	r1, #3
    53b6:	1c32      	adds	r2, r6, #0
    53b8:	4e1c      	ldr	r6, [pc, #112]	; (542c <vTaskPriorityDisinherit+0xb8>)
    53ba:	59ae      	ldr	r6, [r5, r6]
    53bc:	47b0      	blx	r6
    53be:	1c20      	adds	r0, r4, #0
    53c0:	9e00      	ldr	r6, [sp, #0]
    53c2:	47b0      	blx	r6
    53c4:	1c01      	adds	r1, r0, #0
    53c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    53c8:	b2da      	uxtb	r2, r3
    53ca:	2003      	movs	r0, #3
    53cc:	4b18      	ldr	r3, [pc, #96]	; (5430 <vTaskPriorityDisinherit+0xbc>)
    53ce:	58eb      	ldr	r3, [r5, r3]
    53d0:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    53d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    53d4:	62e3      	str	r3, [r4, #44]	; 0x2c

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    53d6:	69a6      	ldr	r6, [r4, #24]
    53d8:	2e00      	cmp	r6, #0
    53da:	db02      	blt.n	53e2 <vTaskPriorityDisinherit+0x6e>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    53dc:	2205      	movs	r2, #5
    53de:	1ad3      	subs	r3, r2, r3
    53e0:	61a3      	str	r3, [r4, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
    53e2:	1c20      	adds	r0, r4, #0
    53e4:	4b0f      	ldr	r3, [pc, #60]	; (5424 <vTaskPriorityDisinherit+0xb0>)
    53e6:	58eb      	ldr	r3, [r5, r3]
    53e8:	4798      	blx	r3
    53ea:	4b12      	ldr	r3, [pc, #72]	; (5434 <vTaskPriorityDisinherit+0xc0>)
    53ec:	58eb      	ldr	r3, [r5, r3]
    53ee:	4798      	blx	r3
    53f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    53f2:	4a11      	ldr	r2, [pc, #68]	; (5438 <vTaskPriorityDisinherit+0xc4>)
    53f4:	447a      	add	r2, pc
    53f6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    53f8:	4293      	cmp	r3, r2
    53fa:	d902      	bls.n	5402 <vTaskPriorityDisinherit+0x8e>
    53fc:	4a0f      	ldr	r2, [pc, #60]	; (543c <vTaskPriorityDisinherit+0xc8>)
    53fe:	447a      	add	r2, pc
    5400:	65d3      	str	r3, [r2, #92]	; 0x5c
    5402:	0098      	lsls	r0, r3, #2
    5404:	18c3      	adds	r3, r0, r3
    5406:	009b      	lsls	r3, r3, #2
    5408:	480d      	ldr	r0, [pc, #52]	; (5440 <vTaskPriorityDisinherit+0xcc>)
    540a:	4478      	add	r0, pc
    540c:	3038      	adds	r0, #56	; 0x38
    540e:	18c0      	adds	r0, r0, r3
    5410:	1c39      	adds	r1, r7, #0
    5412:	4b0c      	ldr	r3, [pc, #48]	; (5444 <vTaskPriorityDisinherit+0xd0>)
    5414:	58eb      	ldr	r3, [r5, r3]
    5416:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    5418:	b003      	add	sp, #12
    541a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    541c:	00002a88 	.word	0x00002a88
    5420:	00000148 	.word	0x00000148
    5424:	00000084 	.word	0x00000084
    5428:	000000d8 	.word	0x000000d8
    542c:	000001f4 	.word	0x000001f4
    5430:	00000270 	.word	0x00000270
    5434:	000001d4 	.word	0x000001d4
    5438:	1fffc1ac 	.word	0x1fffc1ac
    543c:	1fffc1a2 	.word	0x1fffc1a2
    5440:	1fffc116 	.word	0x1fffc116
    5444:	000000a0 	.word	0x000000a0

00005448 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    5448:	b530      	push	{r4, r5, lr}
    544a:	b083      	sub	sp, #12
    544c:	1c04      	adds	r4, r0, #0
    544e:	4d11      	ldr	r5, [pc, #68]	; (5494 <prvInsertTimerInActiveList+0x4c>)
    5450:	447d      	add	r5, pc
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    5452:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    5454:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
    5456:	4291      	cmp	r1, r2
    5458:	d80d      	bhi.n	5476 <prvInsertTimerInActiveList+0x2e>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    545a:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    545c:	2001      	movs	r0, #1

	if( xNextExpiryTime <= xTimeNow )
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    545e:	69a3      	ldr	r3, [r4, #24]
    5460:	429a      	cmp	r2, r3
    5462:	d215      	bcs.n	5490 <prvInsertTimerInActiveList+0x48>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    5464:	4b0c      	ldr	r3, [pc, #48]	; (5498 <prvInsertTimerInActiveList+0x50>)
    5466:	447b      	add	r3, pc
    5468:	6818      	ldr	r0, [r3, #0]
    546a:	1d21      	adds	r1, r4, #4
    546c:	4b0b      	ldr	r3, [pc, #44]	; (549c <prvInsertTimerInActiveList+0x54>)
    546e:	58eb      	ldr	r3, [r5, r3]
    5470:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    5472:	2000      	movs	r0, #0
    5474:	e00c      	b.n	5490 <prvInsertTimerInActiveList+0x48>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    5476:	429a      	cmp	r2, r3
    5478:	d202      	bcs.n	5480 <prvInsertTimerInActiveList+0x38>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    547a:	2001      	movs	r0, #1
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    547c:	4299      	cmp	r1, r3
    547e:	d207      	bcs.n	5490 <prvInsertTimerInActiveList+0x48>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    5480:	4b07      	ldr	r3, [pc, #28]	; (54a0 <prvInsertTimerInActiveList+0x58>)
    5482:	447b      	add	r3, pc
    5484:	6858      	ldr	r0, [r3, #4]
    5486:	1d21      	adds	r1, r4, #4
    5488:	4b04      	ldr	r3, [pc, #16]	; (549c <prvInsertTimerInActiveList+0x54>)
    548a:	58eb      	ldr	r3, [r5, r3]
    548c:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    548e:	2000      	movs	r0, #0
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
    5490:	b003      	add	sp, #12
    5492:	bd30      	pop	{r4, r5, pc}
    5494:	000029b4 	.word	0x000029b4
    5498:	1fffc1b6 	.word	0x1fffc1b6
    549c:	000001bc 	.word	0x000001bc
    54a0:	1fffc19a 	.word	0x1fffc19a

000054a4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    54a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    54a6:	b083      	sub	sp, #12
    54a8:	4c16      	ldr	r4, [pc, #88]	; (5504 <prvCheckForValidListAndQueue+0x60>)
    54aa:	447c      	add	r4, pc
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    54ac:	4b16      	ldr	r3, [pc, #88]	; (5508 <prvCheckForValidListAndQueue+0x64>)
    54ae:	58e3      	ldr	r3, [r4, r3]
    54b0:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    54b2:	4b16      	ldr	r3, [pc, #88]	; (550c <prvCheckForValidListAndQueue+0x68>)
    54b4:	447b      	add	r3, pc
    54b6:	689b      	ldr	r3, [r3, #8]
    54b8:	2b00      	cmp	r3, #0
    54ba:	d11d      	bne.n	54f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
    54bc:	4d14      	ldr	r5, [pc, #80]	; (5510 <prvCheckForValidListAndQueue+0x6c>)
    54be:	447d      	add	r5, pc
    54c0:	1c2e      	adds	r6, r5, #0
    54c2:	360c      	adds	r6, #12
    54c4:	1c30      	adds	r0, r6, #0
    54c6:	4b13      	ldr	r3, [pc, #76]	; (5514 <prvCheckForValidListAndQueue+0x70>)
    54c8:	58e3      	ldr	r3, [r4, r3]
    54ca:	9301      	str	r3, [sp, #4]
    54cc:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    54ce:	1c2f      	adds	r7, r5, #0
    54d0:	3720      	adds	r7, #32
    54d2:	1c38      	adds	r0, r7, #0
    54d4:	9b01      	ldr	r3, [sp, #4]
    54d6:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    54d8:	606e      	str	r6, [r5, #4]
			pxOverflowTimerList = &xActiveTimerList2;
    54da:	602f      	str	r7, [r5, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    54dc:	2002      	movs	r0, #2
    54de:	210c      	movs	r1, #12
    54e0:	2200      	movs	r2, #0
    54e2:	4b0d      	ldr	r3, [pc, #52]	; (5518 <prvCheckForValidListAndQueue+0x74>)
    54e4:	58e3      	ldr	r3, [r4, r3]
    54e6:	4798      	blx	r3
			configASSERT( xTimerQueue );
    54e8:	2800      	cmp	r0, #0
    54ea:	d003      	beq.n	54f4 <prvCheckForValidListAndQueue+0x50>
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    54ec:	4b0b      	ldr	r3, [pc, #44]	; (551c <prvCheckForValidListAndQueue+0x78>)
    54ee:	447b      	add	r3, pc
    54f0:	6098      	str	r0, [r3, #8]
    54f2:	e001      	b.n	54f8 <prvCheckForValidListAndQueue+0x54>
			configASSERT( xTimerQueue );
    54f4:	b672      	cpsid	i
    54f6:	e7fe      	b.n	54f6 <prvCheckForValidListAndQueue+0x52>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    54f8:	4b09      	ldr	r3, [pc, #36]	; (5520 <prvCheckForValidListAndQueue+0x7c>)
    54fa:	58e3      	ldr	r3, [r4, r3]
    54fc:	4798      	blx	r3
}
    54fe:	b003      	add	sp, #12
    5500:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5502:	46c0      	nop			; (mov r8, r8)
    5504:	0000295a 	.word	0x0000295a
    5508:	000002b4 	.word	0x000002b4
    550c:	1fffc168 	.word	0x1fffc168
    5510:	1fffc15e 	.word	0x1fffc15e
    5514:	000000f8 	.word	0x000000f8
    5518:	000001e0 	.word	0x000001e0
    551c:	1fffc12e 	.word	0x1fffc12e
    5520:	00000014 	.word	0x00000014

00005524 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    5524:	b530      	push	{r4, r5, lr}
    5526:	b087      	sub	sp, #28
    5528:	4c10      	ldr	r4, [pc, #64]	; (556c <xTimerCreateTimerTask+0x48>)
    552a:	447c      	add	r4, pc

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    552c:	4b10      	ldr	r3, [pc, #64]	; (5570 <xTimerCreateTimerTask+0x4c>)
    552e:	447b      	add	r3, pc
    5530:	4798      	blx	r3

	if( xTimerQueue != NULL )
    5532:	4b10      	ldr	r3, [pc, #64]	; (5574 <xTimerCreateTimerTask+0x50>)
    5534:	447b      	add	r3, pc
    5536:	689b      	ldr	r3, [r3, #8]
    5538:	2b00      	cmp	r3, #0
    553a:	d013      	beq.n	5564 <xTimerCreateTimerTask+0x40>
	{
		#if ( INCLUDE_xTimerGetTimerDaemonTaskHandle == 1 )
		{
			/* Create the timer task, storing its handle in xTimerTaskHandle so
			it can be returned by the xTimerGetTimerDaemonTaskHandle() function. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
    553c:	2303      	movs	r3, #3
    553e:	9300      	str	r3, [sp, #0]
    5540:	4b0d      	ldr	r3, [pc, #52]	; (5578 <xTimerCreateTimerTask+0x54>)
    5542:	447b      	add	r3, pc
    5544:	3334      	adds	r3, #52	; 0x34
    5546:	9301      	str	r3, [sp, #4]
    5548:	2300      	movs	r3, #0
    554a:	9302      	str	r3, [sp, #8]
    554c:	9303      	str	r3, [sp, #12]
    554e:	480b      	ldr	r0, [pc, #44]	; (557c <xTimerCreateTimerTask+0x58>)
    5550:	4478      	add	r0, pc
    5552:	490b      	ldr	r1, [pc, #44]	; (5580 <xTimerCreateTimerTask+0x5c>)
    5554:	4479      	add	r1, pc
    5556:	22aa      	movs	r2, #170	; 0xaa
    5558:	4d0a      	ldr	r5, [pc, #40]	; (5584 <xTimerCreateTimerTask+0x60>)
    555a:	5965      	ldr	r5, [r4, r5]
    555c:	9505      	str	r5, [sp, #20]
    555e:	47a8      	blx	r5
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    5560:	2800      	cmp	r0, #0
    5562:	d101      	bne.n	5568 <xTimerCreateTimerTask+0x44>
    5564:	b672      	cpsid	i
    5566:	e7fe      	b.n	5566 <xTimerCreateTimerTask+0x42>
	return xReturn;
}
    5568:	b007      	add	sp, #28
    556a:	bd30      	pop	{r4, r5, pc}
    556c:	000028da 	.word	0x000028da
    5570:	ffffff73 	.word	0xffffff73
    5574:	1fffc0e8 	.word	0x1fffc0e8
    5578:	1fffc0da 	.word	0x1fffc0da
    557c:	000002f1 	.word	0x000002f1
    5580:	0000287c 	.word	0x0000287c
    5584:	00000074 	.word	0x00000074

00005588 <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    5588:	b5f0      	push	{r4, r5, r6, r7, lr}
    558a:	464f      	mov	r7, r9
    558c:	4646      	mov	r6, r8
    558e:	b4c0      	push	{r6, r7}
    5590:	b083      	sub	sp, #12
    5592:	4681      	mov	r9, r0
    5594:	1c0e      	adds	r6, r1, #0
    5596:	4690      	mov	r8, r2
    5598:	1c1f      	adds	r7, r3, #0
    559a:	4d20      	ldr	r5, [pc, #128]	; (561c <xTimerCreate+0x94>)
    559c:	447d      	add	r5, pc
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
    559e:	2900      	cmp	r1, #0
    55a0:	d033      	beq.n	560a <xTimerCreate+0x82>
	{
		pxNewTimer = NULL;
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    55a2:	202c      	movs	r0, #44	; 0x2c
    55a4:	4b1e      	ldr	r3, [pc, #120]	; (5620 <xTimerCreate+0x98>)
    55a6:	58eb      	ldr	r3, [r5, r3]
    55a8:	4798      	blx	r3
    55aa:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
    55ac:	d022      	beq.n	55f4 <xTimerCreate+0x6c>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
    55ae:	4b1d      	ldr	r3, [pc, #116]	; (5624 <xTimerCreate+0x9c>)
    55b0:	447b      	add	r3, pc
    55b2:	4798      	blx	r3

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
    55b4:	464b      	mov	r3, r9
    55b6:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    55b8:	61a6      	str	r6, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
    55ba:	4643      	mov	r3, r8
    55bc:	61e3      	str	r3, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
    55be:	6227      	str	r7, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    55c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    55c2:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    55c4:	1d20      	adds	r0, r4, #4
    55c6:	4b18      	ldr	r3, [pc, #96]	; (5628 <xTimerCreate+0xa0>)
    55c8:	58eb      	ldr	r3, [r5, r3]
    55ca:	4798      	blx	r3

			traceTIMER_CREATE( pxNewTimer );
    55cc:	2005      	movs	r0, #5
    55ce:	4b17      	ldr	r3, [pc, #92]	; (562c <xTimerCreate+0xa4>)
    55d0:	58eb      	ldr	r3, [r5, r3]
    55d2:	4798      	blx	r3
    55d4:	1c01      	adds	r1, r0, #0
    55d6:	62a0      	str	r0, [r4, #40]	; 0x28
    55d8:	2005      	movs	r0, #5
    55da:	6822      	ldr	r2, [r4, #0]
    55dc:	4b14      	ldr	r3, [pc, #80]	; (5630 <xTimerCreate+0xa8>)
    55de:	58eb      	ldr	r3, [r5, r3]
    55e0:	4798      	blx	r3
    55e2:	22ff      	movs	r2, #255	; 0xff
    55e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    55e6:	401a      	ands	r2, r3
    55e8:	20b0      	movs	r0, #176	; 0xb0
    55ea:	2105      	movs	r1, #5
    55ec:	4b11      	ldr	r3, [pc, #68]	; (5634 <xTimerCreate+0xac>)
    55ee:	58eb      	ldr	r3, [r5, r3]
    55f0:	4798      	blx	r3
    55f2:	e00c      	b.n	560e <xTimerCreate+0x86>
		}
		else
		{
			traceTIMER_CREATE_FAILED();
    55f4:	2300      	movs	r3, #0
    55f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    55f8:	23ff      	movs	r3, #255	; 0xff
    55fa:	401a      	ands	r2, r3
    55fc:	20b9      	movs	r0, #185	; 0xb9
    55fe:	2105      	movs	r1, #5
    5600:	4b0c      	ldr	r3, [pc, #48]	; (5634 <xTimerCreate+0xac>)
    5602:	58eb      	ldr	r3, [r5, r3]
    5604:	4798      	blx	r3
    5606:	e002      	b.n	560e <xTimerCreate+0x86>
    5608:	e7fe      	b.n	5608 <xTimerCreate+0x80>
		}
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
    560a:	b672      	cpsid	i
    560c:	e7fc      	b.n	5608 <xTimerCreate+0x80>

	return ( TimerHandle_t ) pxNewTimer;
}
    560e:	1c20      	adds	r0, r4, #0
    5610:	b003      	add	sp, #12
    5612:	bc0c      	pop	{r2, r3}
    5614:	4690      	mov	r8, r2
    5616:	4699      	mov	r9, r3
    5618:	bdf0      	pop	{r4, r5, r6, r7, pc}
    561a:	46c0      	nop			; (mov r8, r8)
    561c:	00002868 	.word	0x00002868
    5620:	000000e0 	.word	0x000000e0
    5624:	fffffef1 	.word	0xfffffef1
    5628:	000000b8 	.word	0x000000b8
    562c:	000002bc 	.word	0x000002bc
    5630:	0000014c 	.word	0x0000014c
    5634:	0000024c 	.word	0x0000024c

00005638 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    5638:	b5f0      	push	{r4, r5, r6, r7, lr}
    563a:	4647      	mov	r7, r8
    563c:	b480      	push	{r7}
    563e:	b086      	sub	sp, #24
    5640:	1c07      	adds	r7, r0, #0
    5642:	1c0c      	adds	r4, r1, #0
    5644:	4690      	mov	r8, r2
    5646:	4d39      	ldr	r5, [pc, #228]	; (572c <xTimerGenericCommand+0xf4>)
    5648:	447d      	add	r5, pc
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    564a:	4939      	ldr	r1, [pc, #228]	; (5730 <xTimerGenericCommand+0xf8>)
    564c:	4479      	add	r1, pc
    564e:	6888      	ldr	r0, [r1, #8]
    5650:	2800      	cmp	r0, #0
    5652:	d065      	beq.n	5720 <xTimerGenericCommand+0xe8>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    5654:	9403      	str	r4, [sp, #12]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    5656:	9204      	str	r2, [sp, #16]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    5658:	9705      	str	r7, [sp, #20]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    565a:	2c05      	cmp	r4, #5
    565c:	dc1a      	bgt.n	5694 <xTimerGenericCommand+0x5c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    565e:	4b35      	ldr	r3, [pc, #212]	; (5734 <xTimerGenericCommand+0xfc>)
    5660:	58eb      	ldr	r3, [r5, r3]
    5662:	4798      	blx	r3
    5664:	2802      	cmp	r0, #2
    5666:	d10a      	bne.n	567e <xTimerGenericCommand+0x46>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    5668:	4b33      	ldr	r3, [pc, #204]	; (5738 <xTimerGenericCommand+0x100>)
    566a:	447b      	add	r3, pc
    566c:	6898      	ldr	r0, [r3, #8]
    566e:	a903      	add	r1, sp, #12
    5670:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5672:	2300      	movs	r3, #0
    5674:	4e31      	ldr	r6, [pc, #196]	; (573c <xTimerGenericCommand+0x104>)
    5676:	59ae      	ldr	r6, [r5, r6]
    5678:	47b0      	blx	r6
    567a:	1c06      	adds	r6, r0, #0
    567c:	e011      	b.n	56a2 <xTimerGenericCommand+0x6a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    567e:	4b30      	ldr	r3, [pc, #192]	; (5740 <xTimerGenericCommand+0x108>)
    5680:	447b      	add	r3, pc
    5682:	6898      	ldr	r0, [r3, #8]
    5684:	a903      	add	r1, sp, #12
    5686:	2200      	movs	r2, #0
    5688:	2300      	movs	r3, #0
    568a:	4e2c      	ldr	r6, [pc, #176]	; (573c <xTimerGenericCommand+0x104>)
    568c:	59ae      	ldr	r6, [r5, r6]
    568e:	47b0      	blx	r6
    5690:	1c06      	adds	r6, r0, #0
    5692:	e006      	b.n	56a2 <xTimerGenericCommand+0x6a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    5694:	a903      	add	r1, sp, #12
    5696:	1c1a      	adds	r2, r3, #0
    5698:	2300      	movs	r3, #0
    569a:	4e2a      	ldr	r6, [pc, #168]	; (5744 <xTimerGenericCommand+0x10c>)
    569c:	59ae      	ldr	r6, [r5, r6]
    569e:	47b0      	blx	r6
    56a0:	1c06      	adds	r6, r0, #0
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
    56a2:	2c00      	cmp	r4, #0
    56a4:	dd3d      	ble.n	5722 <xTimerGenericCommand+0xea>
    56a6:	2c04      	cmp	r4, #4
    56a8:	d10c      	bne.n	56c4 <xTimerGenericCommand+0x8c>
    56aa:	20bd      	movs	r0, #189	; 0xbd
    56ac:	2e01      	cmp	r6, #1
    56ae:	d100      	bne.n	56b2 <xTimerGenericCommand+0x7a>
    56b0:	20b4      	movs	r0, #180	; 0xb4
    56b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    56b4:	23ff      	movs	r3, #255	; 0xff
    56b6:	401a      	ands	r2, r3
    56b8:	2105      	movs	r1, #5
    56ba:	4643      	mov	r3, r8
    56bc:	4c22      	ldr	r4, [pc, #136]	; (5748 <xTimerGenericCommand+0x110>)
    56be:	592c      	ldr	r4, [r5, r4]
    56c0:	47a0      	blx	r4
    56c2:	e02e      	b.n	5722 <xTimerGenericCommand+0xea>
    56c4:	2c05      	cmp	r4, #5
    56c6:	d11d      	bne.n	5704 <xTimerGenericCommand+0xcc>
    56c8:	24b5      	movs	r4, #181	; 0xb5
    56ca:	2e01      	cmp	r6, #1
    56cc:	d11e      	bne.n	570c <xTimerGenericCommand+0xd4>
    56ce:	22ff      	movs	r2, #255	; 0xff
    56d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    56d2:	401a      	ands	r2, r3
    56d4:	20b5      	movs	r0, #181	; 0xb5
    56d6:	2105      	movs	r1, #5
    56d8:	4b1c      	ldr	r3, [pc, #112]	; (574c <xTimerGenericCommand+0x114>)
    56da:	58eb      	ldr	r3, [r5, r3]
    56dc:	4798      	blx	r3
    56de:	6abc      	ldr	r4, [r7, #40]	; 0x28
    56e0:	b2e0      	uxtb	r0, r4
    56e2:	2105      	movs	r1, #5
    56e4:	4b1a      	ldr	r3, [pc, #104]	; (5750 <xTimerGenericCommand+0x118>)
    56e6:	58eb      	ldr	r3, [r5, r3]
    56e8:	4798      	blx	r3
    56ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
    56ec:	b2d0      	uxtb	r0, r2
    56ee:	2105      	movs	r1, #5
    56f0:	4b18      	ldr	r3, [pc, #96]	; (5754 <xTimerGenericCommand+0x11c>)
    56f2:	58eb      	ldr	r3, [r5, r3]
    56f4:	4798      	blx	r3
    56f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    56f8:	b2c9      	uxtb	r1, r1
    56fa:	2005      	movs	r0, #5
    56fc:	4b16      	ldr	r3, [pc, #88]	; (5758 <xTimerGenericCommand+0x120>)
    56fe:	58eb      	ldr	r3, [r5, r3]
    5700:	4798      	blx	r3
    5702:	e00e      	b.n	5722 <xTimerGenericCommand+0xea>
    5704:	34b0      	adds	r4, #176	; 0xb0
    5706:	2300      	movs	r3, #0
    5708:	2e01      	cmp	r6, #1
    570a:	d000      	beq.n	570e <xTimerGenericCommand+0xd6>
    570c:	2309      	movs	r3, #9
    570e:	18e0      	adds	r0, r4, r3
    5710:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5712:	23ff      	movs	r3, #255	; 0xff
    5714:	401a      	ands	r2, r3
    5716:	2105      	movs	r1, #5
    5718:	4b0c      	ldr	r3, [pc, #48]	; (574c <xTimerGenericCommand+0x114>)
    571a:	58eb      	ldr	r3, [r5, r3]
    571c:	4798      	blx	r3
    571e:	e000      	b.n	5722 <xTimerGenericCommand+0xea>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    5720:	2600      	movs	r6, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    5722:	1c30      	adds	r0, r6, #0
    5724:	b006      	add	sp, #24
    5726:	bc04      	pop	{r2}
    5728:	4690      	mov	r8, r2
    572a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    572c:	000027bc 	.word	0x000027bc
    5730:	1fffbfd0 	.word	0x1fffbfd0
    5734:	0000027c 	.word	0x0000027c
    5738:	1fffbfb2 	.word	0x1fffbfb2
    573c:	00000108 	.word	0x00000108
    5740:	1fffbf9c 	.word	0x1fffbf9c
    5744:	00000038 	.word	0x00000038
    5748:	000001f4 	.word	0x000001f4
    574c:	0000024c 	.word	0x0000024c
    5750:	00000080 	.word	0x00000080
    5754:	00000090 	.word	0x00000090
    5758:	000000a4 	.word	0x000000a4

0000575c <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    575c:	b5f0      	push	{r4, r5, r6, r7, lr}
    575e:	465f      	mov	r7, fp
    5760:	4656      	mov	r6, sl
    5762:	464d      	mov	r5, r9
    5764:	4644      	mov	r4, r8
    5766:	b4f0      	push	{r4, r5, r6, r7}
    5768:	b085      	sub	sp, #20
    576a:	4682      	mov	sl, r0
    576c:	4e2b      	ldr	r6, [pc, #172]	; (581c <prvSampleTimeNow+0xc0>)
    576e:	447e      	add	r6, pc
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    5770:	4b2b      	ldr	r3, [pc, #172]	; (5820 <prvSampleTimeNow+0xc4>)
    5772:	58f3      	ldr	r3, [r6, r3]
    5774:	4798      	blx	r3
    5776:	4681      	mov	r9, r0

	if( xTimeNow < xLastTime )
    5778:	4b2a      	ldr	r3, [pc, #168]	; (5824 <prvSampleTimeNow+0xc8>)
    577a:	447b      	add	r3, pc
    577c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    577e:	4298      	cmp	r0, r3
    5780:	d23d      	bcs.n	57fe <prvSampleTimeNow+0xa2>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    5782:	4929      	ldr	r1, [pc, #164]	; (5828 <prvSampleTimeNow+0xcc>)
    5784:	4479      	add	r1, pc
    5786:	4688      	mov	r8, r1
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    5788:	2200      	movs	r2, #0
    578a:	4693      	mov	fp, r2
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
			if( xReloadTime > xNextExpireTime )
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    578c:	4c27      	ldr	r4, [pc, #156]	; (582c <prvSampleTimeNow+0xd0>)
    578e:	447c      	add	r4, pc
    5790:	9403      	str	r4, [sp, #12]
    5792:	e026      	b.n	57e2 <prvSampleTimeNow+0x86>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    5794:	68db      	ldr	r3, [r3, #12]
    5796:	681f      	ldr	r7, [r3, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    5798:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    579a:	1d25      	adds	r5, r4, #4
    579c:	1c28      	adds	r0, r5, #0
    579e:	4b24      	ldr	r3, [pc, #144]	; (5830 <prvSampleTimeNow+0xd4>)
    57a0:	58f3      	ldr	r3, [r6, r3]
    57a2:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    57a4:	1c20      	adds	r0, r4, #0
    57a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    57a8:	4788      	blx	r1

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    57aa:	69e2      	ldr	r2, [r4, #28]
    57ac:	2a01      	cmp	r2, #1
    57ae:	d118      	bne.n	57e2 <prvSampleTimeNow+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    57b0:	69a1      	ldr	r1, [r4, #24]
    57b2:	187b      	adds	r3, r7, r1
			if( xReloadTime > xNextExpireTime )
    57b4:	42bb      	cmp	r3, r7
    57b6:	d908      	bls.n	57ca <prvSampleTimeNow+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    57b8:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    57ba:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    57bc:	9c03      	ldr	r4, [sp, #12]
    57be:	6860      	ldr	r0, [r4, #4]
    57c0:	1c29      	adds	r1, r5, #0
    57c2:	4b1c      	ldr	r3, [pc, #112]	; (5834 <prvSampleTimeNow+0xd8>)
    57c4:	58f3      	ldr	r3, [r6, r3]
    57c6:	4798      	blx	r3
    57c8:	e00b      	b.n	57e2 <prvSampleTimeNow+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    57ca:	4659      	mov	r1, fp
    57cc:	9100      	str	r1, [sp, #0]
    57ce:	1c20      	adds	r0, r4, #0
    57d0:	1c3a      	adds	r2, r7, #0
    57d2:	465b      	mov	r3, fp
    57d4:	4c18      	ldr	r4, [pc, #96]	; (5838 <prvSampleTimeNow+0xdc>)
    57d6:	5934      	ldr	r4, [r6, r4]
    57d8:	47a0      	blx	r4
				configASSERT( xResult );
    57da:	2800      	cmp	r0, #0
    57dc:	d101      	bne.n	57e2 <prvSampleTimeNow+0x86>
    57de:	b672      	cpsid	i
    57e0:	e7fe      	b.n	57e0 <prvSampleTimeNow+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    57e2:	4642      	mov	r2, r8
    57e4:	6853      	ldr	r3, [r2, #4]
    57e6:	681c      	ldr	r4, [r3, #0]
    57e8:	2c00      	cmp	r4, #0
    57ea:	d1d3      	bne.n	5794 <prvSampleTimeNow+0x38>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    57ec:	4a13      	ldr	r2, [pc, #76]	; (583c <prvSampleTimeNow+0xe0>)
    57ee:	447a      	add	r2, pc
    57f0:	6811      	ldr	r1, [r2, #0]
    57f2:	6051      	str	r1, [r2, #4]
	pxOverflowTimerList = pxTemp;
    57f4:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
    57f6:	2301      	movs	r3, #1
    57f8:	4652      	mov	r2, sl
    57fa:	6013      	str	r3, [r2, #0]
    57fc:	e002      	b.n	5804 <prvSampleTimeNow+0xa8>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    57fe:	2300      	movs	r3, #0
    5800:	4654      	mov	r4, sl
    5802:	6023      	str	r3, [r4, #0]
	}

	xLastTime = xTimeNow;
    5804:	4b0e      	ldr	r3, [pc, #56]	; (5840 <prvSampleTimeNow+0xe4>)
    5806:	447b      	add	r3, pc
    5808:	4649      	mov	r1, r9
    580a:	6399      	str	r1, [r3, #56]	; 0x38

	return xTimeNow;
}
    580c:	4648      	mov	r0, r9
    580e:	b005      	add	sp, #20
    5810:	bc3c      	pop	{r2, r3, r4, r5}
    5812:	4690      	mov	r8, r2
    5814:	4699      	mov	r9, r3
    5816:	46a2      	mov	sl, r4
    5818:	46ab      	mov	fp, r5
    581a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    581c:	00002696 	.word	0x00002696
    5820:	00000104 	.word	0x00000104
    5824:	1fffbea2 	.word	0x1fffbea2
    5828:	1fffbe98 	.word	0x1fffbe98
    582c:	1fffbe8e 	.word	0x1fffbe8e
    5830:	00000148 	.word	0x00000148
    5834:	000001bc 	.word	0x000001bc
    5838:	00000184 	.word	0x00000184
    583c:	1fffbe2e 	.word	0x1fffbe2e
    5840:	1fffbe16 	.word	0x1fffbe16

00005844 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    5844:	b5f0      	push	{r4, r5, r6, r7, lr}
    5846:	465f      	mov	r7, fp
    5848:	4656      	mov	r6, sl
    584a:	464d      	mov	r5, r9
    584c:	4644      	mov	r4, r8
    584e:	b4f0      	push	{r4, r5, r6, r7}
    5850:	b089      	sub	sp, #36	; 0x24
    5852:	4869      	ldr	r0, [pc, #420]	; (59f8 <prvTimerTask+0x1b4>)
    5854:	4478      	add	r0, pc
    5856:	4683      	mov	fp, r0
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    5858:	4968      	ldr	r1, [pc, #416]	; (59fc <prvTimerTask+0x1b8>)
    585a:	4479      	add	r1, pc
    585c:	4689      	mov	r9, r1
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    585e:	ac05      	add	r4, sp, #20
    5860:	4a67      	ldr	r2, [pc, #412]	; (5a00 <prvTimerTask+0x1bc>)
    5862:	447a      	add	r2, pc
    5864:	4692      	mov	sl, r2
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    5866:	464d      	mov	r5, r9
    5868:	686b      	ldr	r3, [r5, #4]
	if( *pxListWasEmpty == pdFALSE )
    586a:	681e      	ldr	r6, [r3, #0]
    586c:	2e00      	cmp	r6, #0
    586e:	d100      	bne.n	5872 <prvTimerTask+0x2e>
    5870:	e0b5      	b.n	59de <prvTimerTask+0x19a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    5872:	68db      	ldr	r3, [r3, #12]
    5874:	681d      	ldr	r5, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    5876:	4b63      	ldr	r3, [pc, #396]	; (5a04 <prvTimerTask+0x1c0>)
    5878:	465f      	mov	r7, fp
    587a:	58fb      	ldr	r3, [r7, r3]
    587c:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    587e:	1c20      	adds	r0, r4, #0
    5880:	4b61      	ldr	r3, [pc, #388]	; (5a08 <prvTimerTask+0x1c4>)
    5882:	447b      	add	r3, pc
    5884:	4798      	blx	r3
    5886:	1c06      	adds	r6, r0, #0
		if( xTimerListsWereSwitched == pdFALSE )
    5888:	9805      	ldr	r0, [sp, #20]
    588a:	2800      	cmp	r0, #0
    588c:	d140      	bne.n	5910 <prvTimerTask+0xcc>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    588e:	42b5      	cmp	r5, r6
    5890:	d82d      	bhi.n	58ee <prvTimerTask+0xaa>
			{
				( void ) xTaskResumeAll();
    5892:	4b5e      	ldr	r3, [pc, #376]	; (5a0c <prvTimerTask+0x1c8>)
    5894:	58fb      	ldr	r3, [r7, r3]
    5896:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    5898:	4b5d      	ldr	r3, [pc, #372]	; (5a10 <prvTimerTask+0x1cc>)
    589a:	447b      	add	r3, pc
    589c:	685b      	ldr	r3, [r3, #4]
    589e:	68db      	ldr	r3, [r3, #12]
    58a0:	68d9      	ldr	r1, [r3, #12]
    58a2:	4688      	mov	r8, r1

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    58a4:	1c08      	adds	r0, r1, #0
    58a6:	3004      	adds	r0, #4
    58a8:	4b5a      	ldr	r3, [pc, #360]	; (5a14 <prvTimerTask+0x1d0>)
    58aa:	58fb      	ldr	r3, [r7, r3]
    58ac:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    58ae:	4642      	mov	r2, r8
    58b0:	69d2      	ldr	r2, [r2, #28]
    58b2:	2a01      	cmp	r2, #1
    58b4:	d116      	bne.n	58e4 <prvTimerTask+0xa0>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    58b6:	4643      	mov	r3, r8
    58b8:	699b      	ldr	r3, [r3, #24]
    58ba:	18e9      	adds	r1, r5, r3
    58bc:	4640      	mov	r0, r8
    58be:	1c32      	adds	r2, r6, #0
    58c0:	1c2b      	adds	r3, r5, #0
    58c2:	4e55      	ldr	r6, [pc, #340]	; (5a18 <prvTimerTask+0x1d4>)
    58c4:	447e      	add	r6, pc
    58c6:	47b0      	blx	r6
    58c8:	2801      	cmp	r0, #1
    58ca:	d10b      	bne.n	58e4 <prvTimerTask+0xa0>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    58cc:	2300      	movs	r3, #0
    58ce:	9300      	str	r3, [sp, #0]
    58d0:	4640      	mov	r0, r8
    58d2:	2100      	movs	r1, #0
    58d4:	1c2a      	adds	r2, r5, #0
    58d6:	4d51      	ldr	r5, [pc, #324]	; (5a1c <prvTimerTask+0x1d8>)
    58d8:	597d      	ldr	r5, [r7, r5]
    58da:	47a8      	blx	r5
			configASSERT( xResult );
    58dc:	2800      	cmp	r0, #0
    58de:	d101      	bne.n	58e4 <prvTimerTask+0xa0>
    58e0:	b672      	cpsid	i
    58e2:	e7fe      	b.n	58e2 <prvTimerTask+0x9e>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    58e4:	4645      	mov	r5, r8
    58e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    58e8:	4640      	mov	r0, r8
    58ea:	4798      	blx	r3
    58ec:	e014      	b.n	5918 <prvTimerTask+0xd4>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    58ee:	4b4c      	ldr	r3, [pc, #304]	; (5a20 <prvTimerTask+0x1dc>)
    58f0:	447b      	add	r3, pc
    58f2:	6898      	ldr	r0, [r3, #8]
    58f4:	1ba9      	subs	r1, r5, r6
    58f6:	4b4b      	ldr	r3, [pc, #300]	; (5a24 <prvTimerTask+0x1e0>)
    58f8:	465e      	mov	r6, fp
    58fa:	58f3      	ldr	r3, [r6, r3]
    58fc:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    58fe:	4b43      	ldr	r3, [pc, #268]	; (5a0c <prvTimerTask+0x1c8>)
    5900:	58f3      	ldr	r3, [r6, r3]
    5902:	4798      	blx	r3
    5904:	2800      	cmp	r0, #0
    5906:	d107      	bne.n	5918 <prvTimerTask+0xd4>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
    5908:	4b47      	ldr	r3, [pc, #284]	; (5a28 <prvTimerTask+0x1e4>)
    590a:	58f3      	ldr	r3, [r6, r3]
    590c:	4798      	blx	r3
    590e:	e003      	b.n	5918 <prvTimerTask+0xd4>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    5910:	4b3e      	ldr	r3, [pc, #248]	; (5a0c <prvTimerTask+0x1c8>)
    5912:	465f      	mov	r7, fp
    5914:	58fb      	ldr	r3, [r7, r3]
    5916:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    5918:	4e44      	ldr	r6, [pc, #272]	; (5a2c <prvTimerTask+0x1e8>)
    591a:	447e      	add	r6, pc
    591c:	4b44      	ldr	r3, [pc, #272]	; (5a30 <prvTimerTask+0x1ec>)
    591e:	4658      	mov	r0, fp
    5920:	58c5      	ldr	r5, [r0, r3]
    5922:	e054      	b.n	59ce <prvTimerTask+0x18a>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    5924:	6821      	ldr	r1, [r4, #0]
    5926:	2900      	cmp	r1, #0
    5928:	db51      	blt.n	59ce <prvTimerTask+0x18a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    592a:	68a2      	ldr	r2, [r4, #8]
    592c:	4690      	mov	r8, r2

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    592e:	6953      	ldr	r3, [r2, #20]
    5930:	2b00      	cmp	r3, #0
    5932:	d005      	beq.n	5940 <prvTimerTask+0xfc>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    5934:	1c10      	adds	r0, r2, #0
    5936:	3004      	adds	r0, #4
    5938:	4b36      	ldr	r3, [pc, #216]	; (5a14 <prvTimerTask+0x1d0>)
    593a:	465f      	mov	r7, fp
    593c:	58fb      	ldr	r3, [r7, r3]
    593e:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    5940:	a804      	add	r0, sp, #16
    5942:	4b3c      	ldr	r3, [pc, #240]	; (5a34 <prvTimerTask+0x1f0>)
    5944:	447b      	add	r3, pc
    5946:	4798      	blx	r3
    5948:	1c03      	adds	r3, r0, #0

			switch( xMessage.xMessageID )
    594a:	6820      	ldr	r0, [r4, #0]
    594c:	2809      	cmp	r0, #9
    594e:	d83e      	bhi.n	59ce <prvTimerTask+0x18a>
    5950:	f000 fdf2 	bl	6538 <__gnu_thumb1_case_uqi>
    5954:	3d050505 	.word	0x3d050505
    5958:	0505382a 	.word	0x0505382a
    595c:	2a3d      	.short	0x2a3d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    595e:	6867      	ldr	r7, [r4, #4]
    5960:	4640      	mov	r0, r8
    5962:	6980      	ldr	r0, [r0, #24]
    5964:	1839      	adds	r1, r7, r0
    5966:	4640      	mov	r0, r8
    5968:	1c1a      	adds	r2, r3, #0
    596a:	1c3b      	adds	r3, r7, #0
    596c:	4f32      	ldr	r7, [pc, #200]	; (5a38 <prvTimerTask+0x1f4>)
    596e:	447f      	add	r7, pc
    5970:	47b8      	blx	r7
    5972:	2801      	cmp	r0, #1
    5974:	d12b      	bne.n	59ce <prvTimerTask+0x18a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    5976:	4640      	mov	r0, r8
    5978:	6a41      	ldr	r1, [r0, #36]	; 0x24
    597a:	4788      	blx	r1
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    597c:	4642      	mov	r2, r8
    597e:	69d2      	ldr	r2, [r2, #28]
    5980:	2a01      	cmp	r2, #1
    5982:	d124      	bne.n	59ce <prvTimerTask+0x18a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    5984:	4643      	mov	r3, r8
    5986:	699b      	ldr	r3, [r3, #24]
    5988:	6867      	ldr	r7, [r4, #4]
    598a:	19da      	adds	r2, r3, r7
    598c:	2300      	movs	r3, #0
    598e:	9300      	str	r3, [sp, #0]
    5990:	4640      	mov	r0, r8
    5992:	2100      	movs	r1, #0
    5994:	4f21      	ldr	r7, [pc, #132]	; (5a1c <prvTimerTask+0x1d8>)
    5996:	46bc      	mov	ip, r7
    5998:	465f      	mov	r7, fp
    599a:	4467      	add	r7, ip
    599c:	683f      	ldr	r7, [r7, #0]
    599e:	47b8      	blx	r7
							configASSERT( xResult );
    59a0:	2800      	cmp	r0, #0
    59a2:	d114      	bne.n	59ce <prvTimerTask+0x18a>
    59a4:	b672      	cpsid	i
    59a6:	e7fe      	b.n	59a6 <prvTimerTask+0x162>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    59a8:	6861      	ldr	r1, [r4, #4]
    59aa:	4640      	mov	r0, r8
    59ac:	6181      	str	r1, [r0, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    59ae:	2900      	cmp	r1, #0
    59b0:	d101      	bne.n	59b6 <prvTimerTask+0x172>
    59b2:	b672      	cpsid	i
    59b4:	e7fe      	b.n	59b4 <prvTimerTask+0x170>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    59b6:	1859      	adds	r1, r3, r1
    59b8:	4640      	mov	r0, r8
    59ba:	1c1a      	adds	r2, r3, #0
    59bc:	4f1f      	ldr	r7, [pc, #124]	; (5a3c <prvTimerTask+0x1f8>)
    59be:	447f      	add	r7, pc
    59c0:	47b8      	blx	r7
    59c2:	e004      	b.n	59ce <prvTimerTask+0x18a>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    59c4:	4640      	mov	r0, r8
    59c6:	4b1e      	ldr	r3, [pc, #120]	; (5a40 <prvTimerTask+0x1fc>)
    59c8:	4659      	mov	r1, fp
    59ca:	58cb      	ldr	r3, [r1, r3]
    59cc:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    59ce:	68b0      	ldr	r0, [r6, #8]
    59d0:	1c21      	adds	r1, r4, #0
    59d2:	2200      	movs	r2, #0
    59d4:	2300      	movs	r3, #0
    59d6:	47a8      	blx	r5
    59d8:	2800      	cmp	r0, #0
    59da:	d1a3      	bne.n	5924 <prvTimerTask+0xe0>
    59dc:	e743      	b.n	5866 <prvTimerTask+0x22>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    59de:	4b09      	ldr	r3, [pc, #36]	; (5a04 <prvTimerTask+0x1c0>)
    59e0:	465a      	mov	r2, fp
    59e2:	58d3      	ldr	r3, [r2, r3]
    59e4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    59e6:	1c20      	adds	r0, r4, #0
    59e8:	47d0      	blx	sl
    59ea:	1c06      	adds	r6, r0, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    59ec:	2500      	movs	r5, #0
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
    59ee:	9b05      	ldr	r3, [sp, #20]
    59f0:	42ab      	cmp	r3, r5
    59f2:	d100      	bne.n	59f6 <prvTimerTask+0x1b2>
    59f4:	e77b      	b.n	58ee <prvTimerTask+0xaa>
    59f6:	e78b      	b.n	5910 <prvTimerTask+0xcc>
    59f8:	000025b0 	.word	0x000025b0
    59fc:	1fffbdc2 	.word	0x1fffbdc2
    5a00:	fffffef7 	.word	0xfffffef7
    5a04:	00000138 	.word	0x00000138
    5a08:	fffffed7 	.word	0xfffffed7
    5a0c:	00000200 	.word	0x00000200
    5a10:	1fffbd82 	.word	0x1fffbd82
    5a14:	00000148 	.word	0x00000148
    5a18:	fffffb81 	.word	0xfffffb81
    5a1c:	00000184 	.word	0x00000184
    5a20:	1fffbd2c 	.word	0x1fffbd2c
    5a24:	00000020 	.word	0x00000020
    5a28:	00000194 	.word	0x00000194
    5a2c:	1fffbd02 	.word	0x1fffbd02
    5a30:	0000023c 	.word	0x0000023c
    5a34:	fffffe15 	.word	0xfffffe15
    5a38:	fffffad7 	.word	0xfffffad7
    5a3c:	fffffa87 	.word	0xfffffa87
    5a40:	0000008c 	.word	0x0000008c

00005a44 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    5a44:	e7fe      	b.n	5a44 <Dummy_Handler>
    5a46:	46c0      	nop			; (mov r8, r8)

00005a48 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    5a48:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a4a:	b083      	sub	sp, #12
    5a4c:	4c3b      	ldr	r4, [pc, #236]	; (5b3c <Reset_Handler+0xf4>)
    5a4e:	447c      	add	r4, pc

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    5a50:	4b3b      	ldr	r3, [pc, #236]	; (5b40 <Reset_Handler+0xf8>)
    5a52:	58e3      	ldr	r3, [r4, r3]
    5a54:	9300      	str	r3, [sp, #0]
    5a56:	4b3b      	ldr	r3, [pc, #236]	; (5b44 <Reset_Handler+0xfc>)
    5a58:	58e3      	ldr	r3, [r4, r3]
    5a5a:	9800      	ldr	r0, [sp, #0]
    5a5c:	4298      	cmp	r0, r3
    5a5e:	d007      	beq.n	5a70 <Reset_Handler+0x28>
                for (; pDest < &_erelocate;) {
    5a60:	4b38      	ldr	r3, [pc, #224]	; (5b44 <Reset_Handler+0xfc>)
    5a62:	58e3      	ldr	r3, [r4, r3]
    5a64:	9300      	str	r3, [sp, #0]
    5a66:	4b38      	ldr	r3, [pc, #224]	; (5b48 <Reset_Handler+0x100>)
    5a68:	58e3      	ldr	r3, [r4, r3]
    5a6a:	9a00      	ldr	r2, [sp, #0]
    5a6c:	429a      	cmp	r2, r3
    5a6e:	d308      	bcc.n	5a82 <Reset_Handler+0x3a>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5a70:	4b36      	ldr	r3, [pc, #216]	; (5b4c <Reset_Handler+0x104>)
    5a72:	58e3      	ldr	r3, [r4, r3]
    5a74:	9300      	str	r3, [sp, #0]
    5a76:	4b36      	ldr	r3, [pc, #216]	; (5b50 <Reset_Handler+0x108>)
    5a78:	58e3      	ldr	r3, [r4, r3]
    5a7a:	9d00      	ldr	r5, [sp, #0]
    5a7c:	429d      	cmp	r5, r3
    5a7e:	d318      	bcc.n	5ab2 <Reset_Handler+0x6a>
    5a80:	e026      	b.n	5ad0 <Reset_Handler+0x88>
    5a82:	4b31      	ldr	r3, [pc, #196]	; (5b48 <Reset_Handler+0x100>)
    5a84:	58e3      	ldr	r3, [r4, r3]
    5a86:	9300      	str	r3, [sp, #0]
    5a88:	4b2e      	ldr	r3, [pc, #184]	; (5b44 <Reset_Handler+0xfc>)
    5a8a:	58e3      	ldr	r3, [r4, r3]
    5a8c:	43d9      	mvns	r1, r3
    5a8e:	9800      	ldr	r0, [sp, #0]
    5a90:	1809      	adds	r1, r1, r0
    5a92:	0889      	lsrs	r1, r1, #2
    5a94:	3101      	adds	r1, #1
    5a96:	0089      	lsls	r1, r1, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    5a98:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    5a9a:	4a2a      	ldr	r2, [pc, #168]	; (5b44 <Reset_Handler+0xfc>)
    5a9c:	58a2      	ldr	r2, [r4, r2]
    5a9e:	9201      	str	r2, [sp, #4]
    5aa0:	4a27      	ldr	r2, [pc, #156]	; (5b40 <Reset_Handler+0xf8>)
    5aa2:	58a2      	ldr	r2, [r4, r2]
    5aa4:	58d0      	ldr	r0, [r2, r3]
    5aa6:	9d01      	ldr	r5, [sp, #4]
    5aa8:	50e8      	str	r0, [r5, r3]
    5aaa:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    5aac:	428b      	cmp	r3, r1
    5aae:	d1f9      	bne.n	5aa4 <Reset_Handler+0x5c>
    5ab0:	e7de      	b.n	5a70 <Reset_Handler+0x28>
    5ab2:	4b26      	ldr	r3, [pc, #152]	; (5b4c <Reset_Handler+0x104>)
    5ab4:	58e3      	ldr	r3, [r4, r3]
    5ab6:	1d1a      	adds	r2, r3, #4
    5ab8:	4925      	ldr	r1, [pc, #148]	; (5b50 <Reset_Handler+0x108>)
    5aba:	5861      	ldr	r1, [r4, r1]
    5abc:	9100      	str	r1, [sp, #0]
    5abe:	3103      	adds	r1, #3
    5ac0:	1a89      	subs	r1, r1, r2
    5ac2:	0889      	lsrs	r1, r1, #2
    5ac4:	0089      	lsls	r1, r1, #2
    5ac6:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    5ac8:	2100      	movs	r1, #0
    5aca:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5acc:	4293      	cmp	r3, r2
    5ace:	d1fc      	bne.n	5aca <Reset_Handler+0x82>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    5ad0:	4b20      	ldr	r3, [pc, #128]	; (5b54 <Reset_Handler+0x10c>)
    5ad2:	58e3      	ldr	r3, [r4, r3]
    5ad4:	9300      	str	r3, [sp, #0]
    5ad6:	23ff      	movs	r3, #255	; 0xff
    5ad8:	9a00      	ldr	r2, [sp, #0]
    5ada:	439a      	bics	r2, r3
    5adc:	4b1e      	ldr	r3, [pc, #120]	; (5b58 <Reset_Handler+0x110>)
    5ade:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    5ae0:	2102      	movs	r1, #2
    5ae2:	2390      	movs	r3, #144	; 0x90
    5ae4:	005b      	lsls	r3, r3, #1
    5ae6:	4a1d      	ldr	r2, [pc, #116]	; (5b5c <Reset_Handler+0x114>)
    5ae8:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    5aea:	4b1d      	ldr	r3, [pc, #116]	; (5b60 <Reset_Handler+0x118>)
    5aec:	78d8      	ldrb	r0, [r3, #3]
    5aee:	2103      	movs	r1, #3
    5af0:	4388      	bics	r0, r1
    5af2:	2202      	movs	r2, #2
    5af4:	4310      	orrs	r0, r2
    5af6:	70d8      	strb	r0, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    5af8:	78de      	ldrb	r6, [r3, #3]
    5afa:	250c      	movs	r5, #12
    5afc:	43ae      	bics	r6, r5
    5afe:	2008      	movs	r0, #8
    5b00:	4306      	orrs	r6, r0
    5b02:	70de      	strb	r6, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    5b04:	4b17      	ldr	r3, [pc, #92]	; (5b64 <Reset_Handler+0x11c>)
    5b06:	7b9f      	ldrb	r7, [r3, #14]
    5b08:	2630      	movs	r6, #48	; 0x30
    5b0a:	43b7      	bics	r7, r6
    5b0c:	2620      	movs	r6, #32
    5b0e:	433e      	orrs	r6, r7
    5b10:	739e      	strb	r6, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    5b12:	7b9e      	ldrb	r6, [r3, #14]
    5b14:	43ae      	bics	r6, r5
    5b16:	4330      	orrs	r0, r6
    5b18:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    5b1a:	7b98      	ldrb	r0, [r3, #14]
    5b1c:	4388      	bics	r0, r1
    5b1e:	4302      	orrs	r2, r0
    5b20:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    5b22:	4b11      	ldr	r3, [pc, #68]	; (5b68 <Reset_Handler+0x120>)
    5b24:	6859      	ldr	r1, [r3, #4]
    5b26:	2280      	movs	r2, #128	; 0x80
    5b28:	430a      	orrs	r2, r1
    5b2a:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    5b2c:	4b0f      	ldr	r3, [pc, #60]	; (5b6c <Reset_Handler+0x124>)
    5b2e:	58e3      	ldr	r3, [r4, r3]
    5b30:	4798      	blx	r3

        /* Branch to main function */
        main();
    5b32:	4b0f      	ldr	r3, [pc, #60]	; (5b70 <Reset_Handler+0x128>)
    5b34:	58e3      	ldr	r3, [r4, r3]
    5b36:	4798      	blx	r3
    5b38:	e7fe      	b.n	5b38 <Reset_Handler+0xf0>
    5b3a:	46c0      	nop			; (mov r8, r8)
    5b3c:	000023b6 	.word	0x000023b6
    5b40:	0000005c 	.word	0x0000005c
    5b44:	00000078 	.word	0x00000078
    5b48:	00000258 	.word	0x00000258
    5b4c:	00000060 	.word	0x00000060
    5b50:	000001cc 	.word	0x000001cc
    5b54:	00000044 	.word	0x00000044
    5b58:	e000ed00 	.word	0xe000ed00
    5b5c:	41007000 	.word	0x41007000
    5b60:	41005000 	.word	0x41005000
    5b64:	41004800 	.word	0x41004800
    5b68:	41004000 	.word	0x41004000
    5b6c:	000000d4 	.word	0x000000d4
    5b70:	000001b4 	.word	0x000001b4

00005b74 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    5b74:	b500      	push	{lr}
    5b76:	b083      	sub	sp, #12
    5b78:	4b23      	ldr	r3, [pc, #140]	; (5c08 <system_clock_source_get_hz+0x94>)
    5b7a:	447b      	add	r3, pc
	switch (clock_source) {
    5b7c:	2808      	cmp	r0, #8
    5b7e:	d83e      	bhi.n	5bfe <system_clock_source_get_hz+0x8a>
    5b80:	f000 fcda 	bl	6538 <__gnu_thumb1_case_uqi>
    5b84:	053d3d08 	.word	0x053d3d08
    5b88:	180c1405 	.word	0x180c1405
    5b8c:	33          	.byte	0x33
    5b8d:	00          	.byte	0x00

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    5b8e:	2080      	movs	r0, #128	; 0x80
    5b90:	0200      	lsls	r0, r0, #8
    5b92:	e037      	b.n	5c04 <system_clock_source_get_hz+0x90>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    5b94:	4b1d      	ldr	r3, [pc, #116]	; (5c0c <system_clock_source_get_hz+0x98>)
    5b96:	447b      	add	r3, pc
    5b98:	6918      	ldr	r0, [r3, #16]
    5b9a:	e033      	b.n	5c04 <system_clock_source_get_hz+0x90>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    5b9c:	4b1c      	ldr	r3, [pc, #112]	; (5c10 <system_clock_source_get_hz+0x9c>)
    5b9e:	6a18      	ldr	r0, [r3, #32]
    5ba0:	0580      	lsls	r0, r0, #22
    5ba2:	0f80      	lsrs	r0, r0, #30
    5ba4:	4b1b      	ldr	r3, [pc, #108]	; (5c14 <system_clock_source_get_hz+0xa0>)
    5ba6:	40c3      	lsrs	r3, r0
    5ba8:	1c18      	adds	r0, r3, #0
    5baa:	e02b      	b.n	5c04 <system_clock_source_get_hz+0x90>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    5bac:	4b1a      	ldr	r3, [pc, #104]	; (5c18 <system_clock_source_get_hz+0xa4>)
    5bae:	447b      	add	r3, pc
    5bb0:	6958      	ldr	r0, [r3, #20]
    5bb2:	e027      	b.n	5c04 <system_clock_source_get_hz+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    5bb4:	4a19      	ldr	r2, [pc, #100]	; (5c1c <system_clock_source_get_hz+0xa8>)
    5bb6:	447a      	add	r2, pc
    5bb8:	6812      	ldr	r2, [r2, #0]
    5bba:	2002      	movs	r0, #2
    5bbc:	4010      	ands	r0, r2
    5bbe:	d021      	beq.n	5c04 <system_clock_source_get_hz+0x90>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5bc0:	4813      	ldr	r0, [pc, #76]	; (5c10 <system_clock_source_get_hz+0x9c>)
    5bc2:	2110      	movs	r1, #16
    5bc4:	68c2      	ldr	r2, [r0, #12]
    5bc6:	4211      	tst	r1, r2
    5bc8:	d0fc      	beq.n	5bc4 <system_clock_source_get_hz+0x50>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    5bca:	4a15      	ldr	r2, [pc, #84]	; (5c20 <system_clock_source_get_hz+0xac>)
    5bcc:	447a      	add	r2, pc
    5bce:	6812      	ldr	r2, [r2, #0]
    5bd0:	0751      	lsls	r1, r2, #29
    5bd2:	d516      	bpl.n	5c02 <system_clock_source_get_hz+0x8e>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5bd4:	2000      	movs	r0, #0
    5bd6:	4a13      	ldr	r2, [pc, #76]	; (5c24 <system_clock_source_get_hz+0xb0>)
    5bd8:	589a      	ldr	r2, [r3, r2]
    5bda:	4790      	blx	r2
					(_system_clock_inst.dfll.mul & 0xffff);
    5bdc:	4b12      	ldr	r3, [pc, #72]	; (5c28 <system_clock_source_get_hz+0xb4>)
    5bde:	447b      	add	r3, pc
    5be0:	689b      	ldr	r3, [r3, #8]
    5be2:	041b      	lsls	r3, r3, #16
    5be4:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5be6:	4358      	muls	r0, r3
    5be8:	e00c      	b.n	5c04 <system_clock_source_get_hz+0x90>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5bea:	2350      	movs	r3, #80	; 0x50
    5bec:	4a08      	ldr	r2, [pc, #32]	; (5c10 <system_clock_source_get_hz+0x9c>)
    5bee:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    5bf0:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5bf2:	075a      	lsls	r2, r3, #29
    5bf4:	d506      	bpl.n	5c04 <system_clock_source_get_hz+0x90>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    5bf6:	4b0d      	ldr	r3, [pc, #52]	; (5c2c <system_clock_source_get_hz+0xb8>)
    5bf8:	447b      	add	r3, pc
    5bfa:	68d8      	ldr	r0, [r3, #12]
    5bfc:	e002      	b.n	5c04 <system_clock_source_get_hz+0x90>
#endif

	default:
		return 0;
    5bfe:	2000      	movs	r0, #0
    5c00:	e000      	b.n	5c04 <system_clock_source_get_hz+0x90>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    5c02:	480b      	ldr	r0, [pc, #44]	; (5c30 <system_clock_source_get_hz+0xbc>)
#endif

	default:
		return 0;
	}
}
    5c04:	b003      	add	sp, #12
    5c06:	bd00      	pop	{pc}
    5c08:	0000228a 	.word	0x0000228a
    5c0c:	1fffbac2 	.word	0x1fffbac2
    5c10:	40000800 	.word	0x40000800
    5c14:	007a1200 	.word	0x007a1200
    5c18:	1fffbaaa 	.word	0x1fffbaaa
    5c1c:	1fffbaa2 	.word	0x1fffbaa2
    5c20:	1fffba8c 	.word	0x1fffba8c
    5c24:	00000154 	.word	0x00000154
    5c28:	1fffba7a 	.word	0x1fffba7a
    5c2c:	1fffba60 	.word	0x1fffba60
    5c30:	02dc6c00 	.word	0x02dc6c00

00005c34 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    5c34:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    5c36:	4b0c      	ldr	r3, [pc, #48]	; (5c68 <system_clock_source_osc8m_set_config+0x34>)
    5c38:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    5c3a:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    5c3c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    5c3e:	7840      	ldrb	r0, [r0, #1]
    5c40:	2201      	movs	r2, #1
    5c42:	4010      	ands	r0, r2
    5c44:	0180      	lsls	r0, r0, #6
    5c46:	2640      	movs	r6, #64	; 0x40
    5c48:	43b4      	bics	r4, r6
    5c4a:	4304      	orrs	r4, r0
    5c4c:	402a      	ands	r2, r5
    5c4e:	01d0      	lsls	r0, r2, #7
    5c50:	2280      	movs	r2, #128	; 0x80
    5c52:	4394      	bics	r4, r2
    5c54:	1c22      	adds	r2, r4, #0
    5c56:	4302      	orrs	r2, r0
    5c58:	2003      	movs	r0, #3
    5c5a:	4001      	ands	r1, r0
    5c5c:	0209      	lsls	r1, r1, #8
    5c5e:	4803      	ldr	r0, [pc, #12]	; (5c6c <system_clock_source_osc8m_set_config+0x38>)
    5c60:	4002      	ands	r2, r0
    5c62:	430a      	orrs	r2, r1
    5c64:	621a      	str	r2, [r3, #32]
}
    5c66:	bd70      	pop	{r4, r5, r6, pc}
    5c68:	40000800 	.word	0x40000800
    5c6c:	fffffcff 	.word	0xfffffcff

00005c70 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    5c70:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c72:	465f      	mov	r7, fp
    5c74:	4656      	mov	r6, sl
    5c76:	464d      	mov	r5, r9
    5c78:	4644      	mov	r4, r8
    5c7a:	b4f0      	push	{r4, r5, r6, r7}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    5c7c:	4a26      	ldr	r2, [pc, #152]	; (5d18 <system_clock_source_xosc32k_set_config+0xa8>)
    5c7e:	8a94      	ldrh	r4, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
    5c80:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    5c82:	7803      	ldrb	r3, [r0, #0]
    5c84:	4259      	negs	r1, r3
    5c86:	4159      	adcs	r1, r3
    5c88:	468a      	mov	sl, r1
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    5c8a:	7883      	ldrb	r3, [r0, #2]
    5c8c:	469c      	mov	ip, r3
	temp.bit.EN1K = config->enable_1khz_output;
    5c8e:	78c1      	ldrb	r1, [r0, #3]
    5c90:	4688      	mov	r8, r1
	temp.bit.EN32K = config->enable_32khz_output;
    5c92:	7903      	ldrb	r3, [r0, #4]
    5c94:	4699      	mov	r9, r3

	temp.bit.ONDEMAND = config->on_demand;
    5c96:	7b46      	ldrb	r6, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5c98:	7b07      	ldrb	r7, [r0, #12]
	temp.bit.WRTLOCK  = config->write_once;
    5c9a:	7b81      	ldrb	r1, [r0, #14]
    5c9c:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    5c9e:	6880      	ldr	r0, [r0, #8]
    5ca0:	4b1e      	ldr	r3, [pc, #120]	; (5d1c <system_clock_source_xosc32k_set_config+0xac>)
    5ca2:	447b      	add	r3, pc
    5ca4:	6158      	str	r0, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    5ca6:	2301      	movs	r3, #1
    5ca8:	4651      	mov	r1, sl
    5caa:	0088      	lsls	r0, r1, #2
    5cac:	2104      	movs	r1, #4
    5cae:	438c      	bics	r4, r1
    5cb0:	4304      	orrs	r4, r0
    5cb2:	4648      	mov	r0, r9
    5cb4:	4018      	ands	r0, r3
    5cb6:	00c0      	lsls	r0, r0, #3
    5cb8:	2108      	movs	r1, #8
    5cba:	438c      	bics	r4, r1
    5cbc:	4304      	orrs	r4, r0
    5cbe:	4640      	mov	r0, r8
    5cc0:	4018      	ands	r0, r3
    5cc2:	0100      	lsls	r0, r0, #4
    5cc4:	2110      	movs	r1, #16
    5cc6:	438c      	bics	r4, r1
    5cc8:	4304      	orrs	r4, r0
    5cca:	4660      	mov	r0, ip
    5ccc:	4018      	ands	r0, r3
    5cce:	0140      	lsls	r0, r0, #5
    5cd0:	2120      	movs	r1, #32
    5cd2:	438c      	bics	r4, r1
    5cd4:	4304      	orrs	r4, r0
    5cd6:	1c18      	adds	r0, r3, #0
    5cd8:	4038      	ands	r0, r7
    5cda:	0180      	lsls	r0, r0, #6
    5cdc:	2740      	movs	r7, #64	; 0x40
    5cde:	43bc      	bics	r4, r7
    5ce0:	4304      	orrs	r4, r0
    5ce2:	1c18      	adds	r0, r3, #0
    5ce4:	4030      	ands	r0, r6
    5ce6:	01c0      	lsls	r0, r0, #7
    5ce8:	2680      	movs	r6, #128	; 0x80
    5cea:	43b4      	bics	r4, r6
    5cec:	4304      	orrs	r4, r0
    5cee:	2007      	movs	r0, #7
    5cf0:	4028      	ands	r0, r5
    5cf2:	0200      	lsls	r0, r0, #8
    5cf4:	4d0a      	ldr	r5, [pc, #40]	; (5d20 <system_clock_source_xosc32k_set_config+0xb0>)
    5cf6:	402c      	ands	r4, r5
    5cf8:	4304      	orrs	r4, r0
    5cfa:	4659      	mov	r1, fp
    5cfc:	400b      	ands	r3, r1
    5cfe:	0319      	lsls	r1, r3, #12
    5d00:	4808      	ldr	r0, [pc, #32]	; (5d24 <system_clock_source_xosc32k_set_config+0xb4>)
    5d02:	1c23      	adds	r3, r4, #0
    5d04:	4003      	ands	r3, r0
    5d06:	430b      	orrs	r3, r1
    5d08:	8293      	strh	r3, [r2, #20]
}
    5d0a:	bc3c      	pop	{r2, r3, r4, r5}
    5d0c:	4690      	mov	r8, r2
    5d0e:	4699      	mov	r9, r3
    5d10:	46a2      	mov	sl, r4
    5d12:	46ab      	mov	fp, r5
    5d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d16:	46c0      	nop			; (mov r8, r8)
    5d18:	40000800 	.word	0x40000800
    5d1c:	1fffb9b6 	.word	0x1fffb9b6
    5d20:	fffff8ff 	.word	0xfffff8ff
    5d24:	ffffefff 	.word	0xffffefff

00005d28 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    5d28:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d2a:	b083      	sub	sp, #12
    5d2c:	1c04      	adds	r4, r0, #0
    5d2e:	4e26      	ldr	r6, [pc, #152]	; (5dc8 <system_clock_source_dpll_set_config+0xa0>)
    5d30:	447e      	add	r6, pc

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    5d32:	68c5      	ldr	r5, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    5d34:	7d03      	ldrb	r3, [r0, #20]
    5d36:	2b01      	cmp	r3, #1
    5d38:	d107      	bne.n	5d4a <system_clock_source_dpll_set_config+0x22>
		refclk = refclk / (2 * (config->reference_divider + 1));
    5d3a:	8a01      	ldrh	r1, [r0, #16]
    5d3c:	3101      	adds	r1, #1
    5d3e:	0049      	lsls	r1, r1, #1
    5d40:	4b22      	ldr	r3, [pc, #136]	; (5dcc <system_clock_source_dpll_set_config+0xa4>)
    5d42:	58f3      	ldr	r3, [r6, r3]
    5d44:	1c28      	adds	r0, r5, #0
    5d46:	4798      	blx	r3
    5d48:	1c05      	adds	r5, r0, #0
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    5d4a:	68a3      	ldr	r3, [r4, #8]
    5d4c:	0118      	lsls	r0, r3, #4
    5d4e:	4b1f      	ldr	r3, [pc, #124]	; (5dcc <system_clock_source_dpll_set_config+0xa4>)
    5d50:	58f3      	ldr	r3, [r6, r3]
    5d52:	1c29      	adds	r1, r5, #0
    5d54:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    5d56:	220f      	movs	r2, #15
    5d58:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    5d5a:	0900      	lsrs	r0, r0, #4

	SYSCTRL->DPLLCTRLA.reg =
    5d5c:	7866      	ldrb	r6, [r4, #1]
    5d5e:	01b6      	lsls	r6, r6, #6
    5d60:	7823      	ldrb	r3, [r4, #0]
    5d62:	01db      	lsls	r3, r3, #7
    5d64:	431e      	orrs	r6, r3
    5d66:	b2f6      	uxtb	r6, r6
    5d68:	4b19      	ldr	r3, [pc, #100]	; (5dd0 <system_clock_source_dpll_set_config+0xa8>)
    5d6a:	2144      	movs	r1, #68	; 0x44
    5d6c:	545e      	strb	r6, [r3, r1]
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    5d6e:	0416      	lsls	r6, r2, #16
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
	tmpldrfrac = tmpldr & 0x0f;
	tmpldr = (tmpldr >> 4) - 1;
    5d70:	1e41      	subs	r1, r0, #1
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
    5d72:	0509      	lsls	r1, r1, #20
    5d74:	0d09      	lsrs	r1, r1, #20
	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    5d76:	4331      	orrs	r1, r6

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
    5d78:	6499      	str	r1, [r3, #72]	; 0x48
	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    5d7a:	78e6      	ldrb	r6, [r4, #3]
    5d7c:	00f6      	lsls	r6, r6, #3
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    5d7e:	78a1      	ldrb	r1, [r4, #2]
    5d80:	0309      	lsls	r1, r1, #12
	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    5d82:	4331      	orrs	r1, r6
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    5d84:	7926      	ldrb	r6, [r4, #4]
    5d86:	00b6      	lsls	r6, r6, #2
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    5d88:	4331      	orrs	r1, r6
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
    5d8a:	7ca6      	ldrb	r6, [r4, #18]
    5d8c:	2703      	movs	r7, #3
    5d8e:	403e      	ands	r6, r7
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    5d90:	4331      	orrs	r1, r6
	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    5d92:	8a26      	ldrh	r6, [r4, #16]
    5d94:	0436      	lsls	r6, r6, #16
    5d96:	4f0f      	ldr	r7, [pc, #60]	; (5dd4 <system_clock_source_dpll_set_config+0xac>)
    5d98:	403e      	ands	r6, r7
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    5d9a:	4331      	orrs	r1, r6
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    5d9c:	7ce7      	ldrb	r7, [r4, #19]
    5d9e:	023f      	lsls	r7, r7, #8
    5da0:	26e0      	movs	r6, #224	; 0xe0
    5da2:	00f6      	lsls	r6, r6, #3
    5da4:	403e      	ands	r6, r7
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    5da6:	4331      	orrs	r1, r6

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    5da8:	7d24      	ldrb	r4, [r4, #20]
    5daa:	0124      	lsls	r4, r4, #4
    5dac:	2630      	movs	r6, #48	; 0x30
    5dae:	4034      	ands	r4, r6
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    5db0:	4321      	orrs	r1, r4

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
    5db2:	64d9      	str	r1, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
    5db4:	0100      	lsls	r0, r0, #4
    5db6:	1812      	adds	r2, r2, r0
    5db8:	4355      	muls	r5, r2
    5dba:	092d      	lsrs	r5, r5, #4
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
    5dbc:	4b06      	ldr	r3, [pc, #24]	; (5dd8 <system_clock_source_dpll_set_config+0xb0>)
    5dbe:	447b      	add	r3, pc
    5dc0:	60dd      	str	r5, [r3, #12]
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
}
    5dc2:	b003      	add	sp, #12
    5dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5dc6:	46c0      	nop			; (mov r8, r8)
    5dc8:	000020d4 	.word	0x000020d4
    5dcc:	000001c0 	.word	0x000001c0
    5dd0:	40000800 	.word	0x40000800
    5dd4:	07ff0000 	.word	0x07ff0000
    5dd8:	1fffb89a 	.word	0x1fffb89a

00005ddc <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    5ddc:	b500      	push	{lr}
	switch (clock_source) {
    5dde:	2808      	cmp	r0, #8
    5de0:	d84f      	bhi.n	5e82 <system_clock_source_enable+0xa6>
    5de2:	f000 fba9 	bl	6538 <__gnu_thumb1_case_uqi>
    5de6:	4e15      	.short	0x4e15
    5de8:	1c0e054e 	.word	0x1c0e054e
    5dec:	2307      	.short	0x2307
    5dee:	46          	.byte	0x46
    5def:	00          	.byte	0x00
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    5df0:	2000      	movs	r0, #0
    5df2:	e047      	b.n	5e84 <system_clock_source_enable+0xa8>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    5df4:	4b24      	ldr	r3, [pc, #144]	; (5e88 <system_clock_source_enable+0xac>)
    5df6:	6a19      	ldr	r1, [r3, #32]
    5df8:	2202      	movs	r2, #2
    5dfa:	430a      	orrs	r2, r1
    5dfc:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    5dfe:	2000      	movs	r0, #0
    5e00:	e040      	b.n	5e84 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    5e02:	4b21      	ldr	r3, [pc, #132]	; (5e88 <system_clock_source_enable+0xac>)
    5e04:	6999      	ldr	r1, [r3, #24]
    5e06:	2202      	movs	r2, #2
    5e08:	430a      	orrs	r2, r1
    5e0a:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5e0c:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    5e0e:	e039      	b.n	5e84 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    5e10:	4b1d      	ldr	r3, [pc, #116]	; (5e88 <system_clock_source_enable+0xac>)
    5e12:	8a19      	ldrh	r1, [r3, #16]
    5e14:	2202      	movs	r2, #2
    5e16:	430a      	orrs	r2, r1
    5e18:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5e1a:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    5e1c:	e032      	b.n	5e84 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    5e1e:	4b1a      	ldr	r3, [pc, #104]	; (5e88 <system_clock_source_enable+0xac>)
    5e20:	8a99      	ldrh	r1, [r3, #20]
    5e22:	2202      	movs	r2, #2
    5e24:	430a      	orrs	r2, r1
    5e26:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5e28:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    5e2a:	e02b      	b.n	5e84 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    5e2c:	4a17      	ldr	r2, [pc, #92]	; (5e8c <system_clock_source_enable+0xb0>)
    5e2e:	447a      	add	r2, pc
    5e30:	6811      	ldr	r1, [r2, #0]
    5e32:	2302      	movs	r3, #2
    5e34:	4319      	orrs	r1, r3
    5e36:	6011      	str	r1, [r2, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    5e38:	4a13      	ldr	r2, [pc, #76]	; (5e88 <system_clock_source_enable+0xac>)
    5e3a:	8493      	strh	r3, [r2, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5e3c:	1c11      	adds	r1, r2, #0
    5e3e:	2210      	movs	r2, #16
    5e40:	68cb      	ldr	r3, [r1, #12]
    5e42:	421a      	tst	r2, r3
    5e44:	d0fc      	beq.n	5e40 <system_clock_source_enable+0x64>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    5e46:	4a12      	ldr	r2, [pc, #72]	; (5e90 <system_clock_source_enable+0xb4>)
    5e48:	447a      	add	r2, pc
    5e4a:	6891      	ldr	r1, [r2, #8]
    5e4c:	4b0e      	ldr	r3, [pc, #56]	; (5e88 <system_clock_source_enable+0xac>)
    5e4e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5e50:	6852      	ldr	r2, [r2, #4]
    5e52:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    5e54:	2200      	movs	r2, #0
    5e56:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5e58:	1c19      	adds	r1, r3, #0
    5e5a:	2210      	movs	r2, #16
    5e5c:	68cb      	ldr	r3, [r1, #12]
    5e5e:	421a      	tst	r2, r3
    5e60:	d0fc      	beq.n	5e5c <system_clock_source_enable+0x80>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5e62:	4b0c      	ldr	r3, [pc, #48]	; (5e94 <system_clock_source_enable+0xb8>)
    5e64:	447b      	add	r3, pc
    5e66:	681a      	ldr	r2, [r3, #0]
    5e68:	b292      	uxth	r2, r2
    5e6a:	4b07      	ldr	r3, [pc, #28]	; (5e88 <system_clock_source_enable+0xac>)
    5e6c:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5e6e:	2000      	movs	r0, #0
    5e70:	e008      	b.n	5e84 <system_clock_source_enable+0xa8>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    5e72:	4a05      	ldr	r2, [pc, #20]	; (5e88 <system_clock_source_enable+0xac>)
    5e74:	2344      	movs	r3, #68	; 0x44
    5e76:	5cd0      	ldrb	r0, [r2, r3]
    5e78:	2102      	movs	r1, #2
    5e7a:	4301      	orrs	r1, r0
    5e7c:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5e7e:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    5e80:	e000      	b.n	5e84 <system_clock_source_enable+0xa8>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5e82:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    5e84:	bd00      	pop	{pc}
    5e86:	46c0      	nop			; (mov r8, r8)
    5e88:	40000800 	.word	0x40000800
    5e8c:	1fffb82a 	.word	0x1fffb82a
    5e90:	1fffb810 	.word	0x1fffb810
    5e94:	1fffb7f4 	.word	0x1fffb7f4

00005e98 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    5e98:	b500      	push	{lr}
	uint32_t mask = 0;

	switch (clock_source) {
    5e9a:	2808      	cmp	r0, #8
    5e9c:	d823      	bhi.n	5ee6 <system_clock_source_is_ready+0x4e>
    5e9e:	f000 fb4b 	bl	6538 <__gnu_thumb1_case_uqi>
    5ea2:	2207      	.short	0x2207
    5ea4:	09190522 	.word	0x09190522
    5ea8:	0b17      	.short	0x0b17
    5eaa:	0d          	.byte	0x0d
    5eab:	00          	.byte	0x00
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    5eac:	2001      	movs	r0, #1
    5eae:	e01b      	b.n	5ee8 <system_clock_source_is_ready+0x50>
	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    5eb0:	2301      	movs	r3, #1
		break;
    5eb2:	e010      	b.n	5ed6 <system_clock_source_is_ready+0x3e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    5eb4:	2302      	movs	r3, #2
		break;
    5eb6:	e00e      	b.n	5ed6 <system_clock_source_is_ready+0x3e>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    5eb8:	2310      	movs	r3, #16
		}
		break;
    5eba:	e00c      	b.n	5ed6 <system_clock_source_is_ready+0x3e>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    5ebc:	2350      	movs	r3, #80	; 0x50
    5ebe:	4a0b      	ldr	r2, [pc, #44]	; (5eec <system_clock_source_is_ready+0x54>)
    5ec0:	5cd0      	ldrb	r0, [r2, r3]
    5ec2:	2303      	movs	r3, #3
    5ec4:	4018      	ands	r0, r3
    5ec6:	3803      	subs	r0, #3
    5ec8:	4243      	negs	r3, r0
    5eca:	4158      	adcs	r0, r3
    5ecc:	b2c0      	uxtb	r0, r0
    5ece:	e00b      	b.n	5ee8 <system_clock_source_is_ready+0x50>
{
	uint32_t mask = 0;

	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    5ed0:	2308      	movs	r3, #8
    5ed2:	e000      	b.n	5ed6 <system_clock_source_is_ready+0x3e>
		break;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    5ed4:	2304      	movs	r3, #4

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5ed6:	4a05      	ldr	r2, [pc, #20]	; (5eec <system_clock_source_is_ready+0x54>)
    5ed8:	68d0      	ldr	r0, [r2, #12]
    5eda:	4018      	ands	r0, r3
    5edc:	1ac0      	subs	r0, r0, r3
    5ede:	4243      	negs	r3, r0
    5ee0:	4158      	adcs	r0, r3
    5ee2:	b2c0      	uxtb	r0, r0
    5ee4:	e000      	b.n	5ee8 <system_clock_source_is_ready+0x50>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;

	default:
		return false;
    5ee6:	2000      	movs	r0, #0
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
}
    5ee8:	bd00      	pop	{pc}
    5eea:	46c0      	nop			; (mov r8, r8)
    5eec:	40000800 	.word	0x40000800

00005ef0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ef2:	b091      	sub	sp, #68	; 0x44
    5ef4:	4f48      	ldr	r7, [pc, #288]	; (6018 <system_clock_init+0x128>)
    5ef6:	447f      	add	r7, pc
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    5ef8:	22c2      	movs	r2, #194	; 0xc2
    5efa:	00d2      	lsls	r2, r2, #3
    5efc:	4b47      	ldr	r3, [pc, #284]	; (601c <system_clock_init+0x12c>)
    5efe:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5f00:	4a47      	ldr	r2, [pc, #284]	; (6020 <system_clock_init+0x130>)
    5f02:	6851      	ldr	r1, [r2, #4]
    5f04:	231e      	movs	r3, #30
    5f06:	4399      	bics	r1, r3
    5f08:	2302      	movs	r3, #2
    5f0a:	4319      	orrs	r1, r3
    5f0c:	6051      	str	r1, [r2, #4]
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    5f0e:	aa02      	add	r2, sp, #8
    5f10:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5f12:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    5f14:	1c16      	adds	r6, r2, #0
    5f16:	4b43      	ldr	r3, [pc, #268]	; (6024 <system_clock_init+0x134>)
    5f18:	58fd      	ldr	r5, [r7, r3]
    5f1a:	b2e0      	uxtb	r0, r4
    5f1c:	1c31      	adds	r1, r6, #0
    5f1e:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5f20:	3401      	adds	r4, #1
    5f22:	2c25      	cmp	r4, #37	; 0x25
    5f24:	d1f9      	bne.n	5f1a <system_clock_init+0x2a>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5f26:	2300      	movs	r3, #0
    5f28:	a80c      	add	r0, sp, #48	; 0x30
    5f2a:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
    5f2c:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    5f2e:	2280      	movs	r2, #128	; 0x80
    5f30:	0212      	lsls	r2, r2, #8
    5f32:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    5f34:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    5f36:	2201      	movs	r2, #1
    5f38:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    5f3a:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    5f3c:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    5f3e:	2206      	movs	r2, #6
    5f40:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    5f42:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    5f44:	4b38      	ldr	r3, [pc, #224]	; (6028 <system_clock_init+0x138>)
    5f46:	58fb      	ldr	r3, [r7, r3]
    5f48:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    5f4a:	2005      	movs	r0, #5
    5f4c:	4b37      	ldr	r3, [pc, #220]	; (602c <system_clock_init+0x13c>)
    5f4e:	58fb      	ldr	r3, [r7, r3]
    5f50:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    5f52:	4b37      	ldr	r3, [pc, #220]	; (6030 <system_clock_init+0x140>)
    5f54:	58fc      	ldr	r4, [r7, r3]
    5f56:	2005      	movs	r0, #5
    5f58:	47a0      	blx	r4
    5f5a:	2800      	cmp	r0, #0
    5f5c:	d0fb      	beq.n	5f56 <system_clock_init+0x66>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    5f5e:	4b2f      	ldr	r3, [pc, #188]	; (601c <system_clock_init+0x12c>)
    5f60:	8a99      	ldrh	r1, [r3, #20]
    5f62:	2280      	movs	r2, #128	; 0x80
    5f64:	430a      	orrs	r2, r1
    5f66:	829a      	strh	r2, [r3, #20]
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    5f68:	2400      	movs	r4, #0
    5f6a:	a80b      	add	r0, sp, #44	; 0x2c
    5f6c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    5f6e:	2601      	movs	r6, #1
    5f70:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    5f72:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    5f74:	4b2f      	ldr	r3, [pc, #188]	; (6034 <system_clock_init+0x144>)
    5f76:	58fb      	ldr	r3, [r7, r3]
    5f78:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    5f7a:	2006      	movs	r0, #6
    5f7c:	4b2b      	ldr	r3, [pc, #172]	; (602c <system_clock_init+0x13c>)
    5f7e:	58fd      	ldr	r5, [r7, r3]
    5f80:	47a8      	blx	r5


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    5f82:	4b2d      	ldr	r3, [pc, #180]	; (6038 <system_clock_init+0x148>)
    5f84:	58fb      	ldr	r3, [r7, r3]
    5f86:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    5f88:	a902      	add	r1, sp, #8
    5f8a:	604e      	str	r6, [r1, #4]
	config->high_when_disabled = false;
    5f8c:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    5f8e:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    5f90:	724c      	strb	r4, [r1, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    5f92:	2305      	movs	r3, #5
    5f94:	700b      	strb	r3, [r1, #0]
    5f96:	2001      	movs	r0, #1
    5f98:	4b28      	ldr	r3, [pc, #160]	; (603c <system_clock_init+0x14c>)
    5f9a:	58fb      	ldr	r3, [r7, r3]
    5f9c:	4798      	blx	r3
    5f9e:	2001      	movs	r0, #1
    5fa0:	4b27      	ldr	r3, [pc, #156]	; (6040 <system_clock_init+0x150>)
    5fa2:	58fb      	ldr	r3, [r7, r3]
    5fa4:	4798      	blx	r3
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
	config->on_demand           = true;
	config->run_in_standby      = false;
    5fa6:	a805      	add	r0, sp, #20
    5fa8:	7044      	strb	r4, [r0, #1]
	config->lock_bypass         = false;
    5faa:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    5fac:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;
    5fae:	7104      	strb	r4, [r0, #4]

	config->output_frequency    = 48000000;
    5fb0:	4b24      	ldr	r3, [pc, #144]	; (6044 <system_clock_init+0x154>)
    5fb2:	6083      	str	r3, [r0, #8]
	config->reference_frequency = 32768;
    5fb4:	2380      	movs	r3, #128	; 0x80
    5fb6:	021b      	lsls	r3, r3, #8
    5fb8:	60c3      	str	r3, [r0, #12]
	config->reference_divider   = 1;
    5fba:	8206      	strh	r6, [r0, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
    5fbc:	7504      	strb	r4, [r0, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    5fbe:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    5fc0:	7484      	strb	r4, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    5fc2:	7004      	strb	r4, [r0, #0]
	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
    5fc4:	4b20      	ldr	r3, [pc, #128]	; (6048 <system_clock_init+0x158>)
    5fc6:	58fb      	ldr	r3, [r7, r3]
    5fc8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    5fca:	2008      	movs	r0, #8
    5fcc:	47a8      	blx	r5
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    5fce:	4b18      	ldr	r3, [pc, #96]	; (6030 <system_clock_init+0x140>)
    5fd0:	58fc      	ldr	r4, [r7, r3]
    5fd2:	2008      	movs	r0, #8
    5fd4:	47a0      	blx	r4
    5fd6:	2800      	cmp	r0, #0
    5fd8:	d0fb      	beq.n	5fd2 <system_clock_init+0xe2>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    5fda:	4a10      	ldr	r2, [pc, #64]	; (601c <system_clock_init+0x12c>)
    5fdc:	2344      	movs	r3, #68	; 0x44
    5fde:	5cd0      	ldrb	r0, [r2, r3]
    5fe0:	2180      	movs	r1, #128	; 0x80
    5fe2:	4249      	negs	r1, r1
    5fe4:	4301      	orrs	r1, r0
    5fe6:	54d1      	strb	r1, [r2, r3]
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    5fe8:	4a18      	ldr	r2, [pc, #96]	; (604c <system_clock_init+0x15c>)
    5fea:	2300      	movs	r3, #0
    5fec:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    5fee:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    5ff0:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    5ff2:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    5ff4:	2201      	movs	r2, #1
    5ff6:	a902      	add	r1, sp, #8
    5ff8:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    5ffa:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    5ffc:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    5ffe:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    6000:	2308      	movs	r3, #8
    6002:	700b      	strb	r3, [r1, #0]
    6004:	2000      	movs	r0, #0
    6006:	4b0d      	ldr	r3, [pc, #52]	; (603c <system_clock_init+0x14c>)
    6008:	58fb      	ldr	r3, [r7, r3]
    600a:	4798      	blx	r3
    600c:	2000      	movs	r0, #0
    600e:	4b0c      	ldr	r3, [pc, #48]	; (6040 <system_clock_init+0x150>)
    6010:	58fb      	ldr	r3, [r7, r3]
    6012:	4798      	blx	r3
#endif
}
    6014:	b011      	add	sp, #68	; 0x44
    6016:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6018:	00001f0e 	.word	0x00001f0e
    601c:	40000800 	.word	0x40000800
    6020:	41004000 	.word	0x41004000
    6024:	00000094 	.word	0x00000094
    6028:	000001e4 	.word	0x000001e4
    602c:	00000234 	.word	0x00000234
    6030:	00000260 	.word	0x00000260
    6034:	000000fc 	.word	0x000000fc
    6038:	000002a0 	.word	0x000002a0
    603c:	000000c8 	.word	0x000000c8
    6040:	0000017c 	.word	0x0000017c
    6044:	02dc6c00 	.word	0x02dc6c00
    6048:	00000004 	.word	0x00000004
    604c:	40000400 	.word	0x40000400

00006050 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    6050:	4b06      	ldr	r3, [pc, #24]	; (606c <system_gclk_init+0x1c>)
    6052:	6999      	ldr	r1, [r3, #24]
    6054:	2208      	movs	r2, #8
    6056:	430a      	orrs	r2, r1
    6058:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    605a:	2201      	movs	r2, #1
    605c:	4b04      	ldr	r3, [pc, #16]	; (6070 <system_gclk_init+0x20>)
    605e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    6060:	1c19      	adds	r1, r3, #0
    6062:	780b      	ldrb	r3, [r1, #0]
    6064:	4213      	tst	r3, r2
    6066:	d1fc      	bne.n	6062 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    6068:	4770      	bx	lr
    606a:	46c0      	nop			; (mov r8, r8)
    606c:	40000400 	.word	0x40000400
    6070:	40000c00 	.word	0x40000c00

00006074 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    6074:	b5f0      	push	{r4, r5, r6, r7, lr}
    6076:	4647      	mov	r7, r8
    6078:	b480      	push	{r7}
    607a:	b082      	sub	sp, #8
    607c:	1c07      	adds	r7, r0, #0
    607e:	4e2d      	ldr	r6, [pc, #180]	; (6134 <system_gclk_gen_set_config+0xc0>)
    6080:	447e      	add	r6, pc
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    6082:	4680      	mov	r8, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    6084:	780d      	ldrb	r5, [r1, #0]
    6086:	022d      	lsls	r5, r5, #8
    6088:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    608a:	784b      	ldrb	r3, [r1, #1]
    608c:	2b00      	cmp	r3, #0
    608e:	d002      	beq.n	6096 <system_gclk_gen_set_config+0x22>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    6090:	2380      	movs	r3, #128	; 0x80
    6092:	02db      	lsls	r3, r3, #11
    6094:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    6096:	7a4b      	ldrb	r3, [r1, #9]
    6098:	2b00      	cmp	r3, #0
    609a:	d002      	beq.n	60a2 <system_gclk_gen_set_config+0x2e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    609c:	2380      	movs	r3, #128	; 0x80
    609e:	031b      	lsls	r3, r3, #12
    60a0:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    60a2:	684c      	ldr	r4, [r1, #4]
    60a4:	2c01      	cmp	r4, #1
    60a6:	d919      	bls.n	60dc <system_gclk_gen_set_config+0x68>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    60a8:	1e63      	subs	r3, r4, #1
    60aa:	421c      	tst	r4, r3
    60ac:	d110      	bne.n	60d0 <system_gclk_gen_set_config+0x5c>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    60ae:	2c02      	cmp	r4, #2
    60b0:	d906      	bls.n	60c0 <system_gclk_gen_set_config+0x4c>
    60b2:	2302      	movs	r3, #2
    60b4:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    60b6:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    60b8:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    60ba:	429c      	cmp	r4, r3
    60bc:	d8fb      	bhi.n	60b6 <system_gclk_gen_set_config+0x42>
    60be:	e000      	b.n	60c2 <system_gclk_gen_set_config+0x4e>
    60c0:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    60c2:	0212      	lsls	r2, r2, #8
    60c4:	433a      	orrs	r2, r7
    60c6:	4690      	mov	r8, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    60c8:	2380      	movs	r3, #128	; 0x80
    60ca:	035b      	lsls	r3, r3, #13
    60cc:	431d      	orrs	r5, r3
    60ce:	e005      	b.n	60dc <system_gclk_gen_set_config+0x68>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    60d0:	0224      	lsls	r4, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    60d2:	433c      	orrs	r4, r7
    60d4:	46a0      	mov	r8, r4
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    60d6:	2380      	movs	r3, #128	; 0x80
    60d8:	029b      	lsls	r3, r3, #10
    60da:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    60dc:	7a0b      	ldrb	r3, [r1, #8]
    60de:	2b00      	cmp	r3, #0
    60e0:	d002      	beq.n	60e8 <system_gclk_gen_set_config+0x74>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    60e2:	2380      	movs	r3, #128	; 0x80
    60e4:	039b      	lsls	r3, r3, #14
    60e6:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    60e8:	4a13      	ldr	r2, [pc, #76]	; (6138 <system_gclk_gen_set_config+0xc4>)
    60ea:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    60ec:	b25b      	sxtb	r3, r3
    60ee:	2b00      	cmp	r3, #0
    60f0:	dbfb      	blt.n	60ea <system_gclk_gen_set_config+0x76>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    60f2:	4b12      	ldr	r3, [pc, #72]	; (613c <system_gclk_gen_set_config+0xc8>)
    60f4:	58f3      	ldr	r3, [r6, r3]
    60f6:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    60f8:	4b11      	ldr	r3, [pc, #68]	; (6140 <system_gclk_gen_set_config+0xcc>)
    60fa:	701f      	strb	r7, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    60fc:	4a0e      	ldr	r2, [pc, #56]	; (6138 <system_gclk_gen_set_config+0xc4>)
    60fe:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    6100:	b25b      	sxtb	r3, r3
    6102:	2b00      	cmp	r3, #0
    6104:	dbfb      	blt.n	60fe <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    6106:	4b0c      	ldr	r3, [pc, #48]	; (6138 <system_gclk_gen_set_config+0xc4>)
    6108:	4642      	mov	r2, r8
    610a:	609a      	str	r2, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    610c:	1c1a      	adds	r2, r3, #0
    610e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    6110:	b25b      	sxtb	r3, r3
    6112:	2b00      	cmp	r3, #0
    6114:	dbfb      	blt.n	610e <system_gclk_gen_set_config+0x9a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    6116:	4b08      	ldr	r3, [pc, #32]	; (6138 <system_gclk_gen_set_config+0xc4>)
    6118:	6859      	ldr	r1, [r3, #4]
    611a:	2280      	movs	r2, #128	; 0x80
    611c:	0252      	lsls	r2, r2, #9
    611e:	400a      	ands	r2, r1
    6120:	4315      	orrs	r5, r2
    6122:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    6124:	4b07      	ldr	r3, [pc, #28]	; (6144 <system_gclk_gen_set_config+0xd0>)
    6126:	58f3      	ldr	r3, [r6, r3]
    6128:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    612a:	b002      	add	sp, #8
    612c:	bc04      	pop	{r2}
    612e:	4690      	mov	r8, r2
    6130:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6132:	46c0      	nop			; (mov r8, r8)
    6134:	00001d84 	.word	0x00001d84
    6138:	40000c00 	.word	0x40000c00
    613c:	000000ac 	.word	0x000000ac
    6140:	40000c08 	.word	0x40000c08
    6144:	0000000c 	.word	0x0000000c

00006148 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6148:	b530      	push	{r4, r5, lr}
    614a:	b083      	sub	sp, #12
    614c:	1c05      	adds	r5, r0, #0
    614e:	4c0e      	ldr	r4, [pc, #56]	; (6188 <system_gclk_gen_enable+0x40>)
    6150:	447c      	add	r4, pc
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6152:	4a0e      	ldr	r2, [pc, #56]	; (618c <system_gclk_gen_enable+0x44>)
    6154:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    6156:	b25b      	sxtb	r3, r3
    6158:	2b00      	cmp	r3, #0
    615a:	dbfb      	blt.n	6154 <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    615c:	4b0c      	ldr	r3, [pc, #48]	; (6190 <system_gclk_gen_enable+0x48>)
    615e:	58e3      	ldr	r3, [r4, r3]
    6160:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6162:	4b0c      	ldr	r3, [pc, #48]	; (6194 <system_gclk_gen_enable+0x4c>)
    6164:	701d      	strb	r5, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6166:	4a09      	ldr	r2, [pc, #36]	; (618c <system_gclk_gen_enable+0x44>)
    6168:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    616a:	b25b      	sxtb	r3, r3
    616c:	2b00      	cmp	r3, #0
    616e:	dbfb      	blt.n	6168 <system_gclk_gen_enable+0x20>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    6170:	4b06      	ldr	r3, [pc, #24]	; (618c <system_gclk_gen_enable+0x44>)
    6172:	6859      	ldr	r1, [r3, #4]
    6174:	2280      	movs	r2, #128	; 0x80
    6176:	0252      	lsls	r2, r2, #9
    6178:	430a      	orrs	r2, r1
    617a:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    617c:	4b06      	ldr	r3, [pc, #24]	; (6198 <system_gclk_gen_enable+0x50>)
    617e:	58e3      	ldr	r3, [r4, r3]
    6180:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6182:	b003      	add	sp, #12
    6184:	bd30      	pop	{r4, r5, pc}
    6186:	46c0      	nop			; (mov r8, r8)
    6188:	00001cb4 	.word	0x00001cb4
    618c:	40000c00 	.word	0x40000c00
    6190:	000000ac 	.word	0x000000ac
    6194:	40000c04 	.word	0x40000c04
    6198:	0000000c 	.word	0x0000000c

0000619c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    619c:	b5f0      	push	{r4, r5, r6, r7, lr}
    619e:	b083      	sub	sp, #12
    61a0:	1c05      	adds	r5, r0, #0
    61a2:	4c1e      	ldr	r4, [pc, #120]	; (621c <system_gclk_gen_get_hz+0x80>)
    61a4:	447c      	add	r4, pc
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    61a6:	4a1e      	ldr	r2, [pc, #120]	; (6220 <system_gclk_gen_get_hz+0x84>)
    61a8:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    61aa:	b25b      	sxtb	r3, r3
    61ac:	2b00      	cmp	r3, #0
    61ae:	dbfb      	blt.n	61a8 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    61b0:	4b1c      	ldr	r3, [pc, #112]	; (6224 <system_gclk_gen_get_hz+0x88>)
    61b2:	58e3      	ldr	r3, [r4, r3]
    61b4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    61b6:	4b1c      	ldr	r3, [pc, #112]	; (6228 <system_gclk_gen_get_hz+0x8c>)
    61b8:	701d      	strb	r5, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    61ba:	4a19      	ldr	r2, [pc, #100]	; (6220 <system_gclk_gen_get_hz+0x84>)
    61bc:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    61be:	b25b      	sxtb	r3, r3
    61c0:	2b00      	cmp	r3, #0
    61c2:	dbfb      	blt.n	61bc <system_gclk_gen_get_hz+0x20>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    61c4:	4f16      	ldr	r7, [pc, #88]	; (6220 <system_gclk_gen_get_hz+0x84>)
    61c6:	6878      	ldr	r0, [r7, #4]
    61c8:	04c0      	lsls	r0, r0, #19
    61ca:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    61cc:	4b17      	ldr	r3, [pc, #92]	; (622c <system_gclk_gen_get_hz+0x90>)
    61ce:	58e3      	ldr	r3, [r4, r3]
    61d0:	4798      	blx	r3
    61d2:	1c06      	adds	r6, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    61d4:	4b14      	ldr	r3, [pc, #80]	; (6228 <system_gclk_gen_get_hz+0x8c>)
    61d6:	701d      	strb	r5, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    61d8:	687f      	ldr	r7, [r7, #4]
    61da:	02ff      	lsls	r7, r7, #11
    61dc:	0fff      	lsrs	r7, r7, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    61de:	4b14      	ldr	r3, [pc, #80]	; (6230 <system_gclk_gen_get_hz+0x94>)
    61e0:	701d      	strb	r5, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    61e2:	4a0f      	ldr	r2, [pc, #60]	; (6220 <system_gclk_gen_get_hz+0x84>)
    61e4:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    61e6:	b25b      	sxtb	r3, r3
    61e8:	2b00      	cmp	r3, #0
    61ea:	dbfb      	blt.n	61e4 <system_gclk_gen_get_hz+0x48>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    61ec:	4b0c      	ldr	r3, [pc, #48]	; (6220 <system_gclk_gen_get_hz+0x84>)
    61ee:	689d      	ldr	r5, [r3, #8]
    61f0:	0a2d      	lsrs	r5, r5, #8
    61f2:	b2ad      	uxth	r5, r5
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    61f4:	4b0f      	ldr	r3, [pc, #60]	; (6234 <system_gclk_gen_get_hz+0x98>)
    61f6:	58e3      	ldr	r3, [r4, r3]
    61f8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    61fa:	2f00      	cmp	r7, #0
    61fc:	d108      	bne.n	6210 <system_gclk_gen_get_hz+0x74>
    61fe:	2d01      	cmp	r5, #1
    6200:	d908      	bls.n	6214 <system_gclk_gen_get_hz+0x78>
		gen_input_hz /= divider;
    6202:	4b0d      	ldr	r3, [pc, #52]	; (6238 <system_gclk_gen_get_hz+0x9c>)
    6204:	58e3      	ldr	r3, [r4, r3]
    6206:	1c30      	adds	r0, r6, #0
    6208:	1c29      	adds	r1, r5, #0
    620a:	4798      	blx	r3
    620c:	1c06      	adds	r6, r0, #0
    620e:	e001      	b.n	6214 <system_gclk_gen_get_hz+0x78>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    6210:	3501      	adds	r5, #1
    6212:	40ee      	lsrs	r6, r5
	}

	return gen_input_hz;
}
    6214:	1c30      	adds	r0, r6, #0
    6216:	b003      	add	sp, #12
    6218:	bdf0      	pop	{r4, r5, r6, r7, pc}
    621a:	46c0      	nop			; (mov r8, r8)
    621c:	00001c60 	.word	0x00001c60
    6220:	40000c00 	.word	0x40000c00
    6224:	000000ac 	.word	0x000000ac
    6228:	40000c04 	.word	0x40000c04
    622c:	00000248 	.word	0x00000248
    6230:	40000c08 	.word	0x40000c08
    6234:	0000000c 	.word	0x0000000c
    6238:	000001c0 	.word	0x000001c0

0000623c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    623c:	b530      	push	{r4, r5, lr}
    623e:	b083      	sub	sp, #12
    6240:	1c05      	adds	r5, r0, #0
    6242:	4c09      	ldr	r4, [pc, #36]	; (6268 <system_gclk_chan_enable+0x2c>)
    6244:	447c      	add	r4, pc
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    6246:	4b09      	ldr	r3, [pc, #36]	; (626c <system_gclk_chan_enable+0x30>)
    6248:	58e3      	ldr	r3, [r4, r3]
    624a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    624c:	4b08      	ldr	r3, [pc, #32]	; (6270 <system_gclk_chan_enable+0x34>)
    624e:	701d      	strb	r5, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    6250:	4b08      	ldr	r3, [pc, #32]	; (6274 <system_gclk_chan_enable+0x38>)
    6252:	8859      	ldrh	r1, [r3, #2]
    6254:	2280      	movs	r2, #128	; 0x80
    6256:	01d2      	lsls	r2, r2, #7
    6258:	430a      	orrs	r2, r1
    625a:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    625c:	4b06      	ldr	r3, [pc, #24]	; (6278 <system_gclk_chan_enable+0x3c>)
    625e:	58e3      	ldr	r3, [r4, r3]
    6260:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6262:	b003      	add	sp, #12
    6264:	bd30      	pop	{r4, r5, pc}
    6266:	46c0      	nop			; (mov r8, r8)
    6268:	00001bc0 	.word	0x00001bc0
    626c:	000000ac 	.word	0x000000ac
    6270:	40000c02 	.word	0x40000c02
    6274:	40000c00 	.word	0x40000c00
    6278:	0000000c 	.word	0x0000000c

0000627c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    627c:	b530      	push	{r4, r5, lr}
    627e:	b083      	sub	sp, #12
    6280:	1c05      	adds	r5, r0, #0
    6282:	4c12      	ldr	r4, [pc, #72]	; (62cc <system_gclk_chan_disable+0x50>)
    6284:	447c      	add	r4, pc
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    6286:	4b12      	ldr	r3, [pc, #72]	; (62d0 <system_gclk_chan_disable+0x54>)
    6288:	58e3      	ldr	r3, [r4, r3]
    628a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    628c:	4b11      	ldr	r3, [pc, #68]	; (62d4 <system_gclk_chan_disable+0x58>)
    628e:	701d      	strb	r5, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    6290:	4b11      	ldr	r3, [pc, #68]	; (62d8 <system_gclk_chan_disable+0x5c>)
    6292:	8858      	ldrh	r0, [r3, #2]
    6294:	0500      	lsls	r0, r0, #20
    6296:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    6298:	8859      	ldrh	r1, [r3, #2]
    629a:	4a10      	ldr	r2, [pc, #64]	; (62dc <system_gclk_chan_disable+0x60>)
    629c:	400a      	ands	r2, r1
    629e:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    62a0:	8859      	ldrh	r1, [r3, #2]
    62a2:	4a0f      	ldr	r2, [pc, #60]	; (62e0 <system_gclk_chan_disable+0x64>)
    62a4:	400a      	ands	r2, r1
    62a6:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    62a8:	1c19      	adds	r1, r3, #0
    62aa:	2280      	movs	r2, #128	; 0x80
    62ac:	01d2      	lsls	r2, r2, #7
    62ae:	884b      	ldrh	r3, [r1, #2]
    62b0:	4213      	tst	r3, r2
    62b2:	d1fc      	bne.n	62ae <system_gclk_chan_disable+0x32>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    62b4:	4b08      	ldr	r3, [pc, #32]	; (62d8 <system_gclk_chan_disable+0x5c>)
    62b6:	0201      	lsls	r1, r0, #8
    62b8:	8858      	ldrh	r0, [r3, #2]
    62ba:	4a08      	ldr	r2, [pc, #32]	; (62dc <system_gclk_chan_disable+0x60>)
    62bc:	4002      	ands	r2, r0
    62be:	430a      	orrs	r2, r1
    62c0:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    62c2:	4b08      	ldr	r3, [pc, #32]	; (62e4 <system_gclk_chan_disable+0x68>)
    62c4:	58e3      	ldr	r3, [r4, r3]
    62c6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    62c8:	b003      	add	sp, #12
    62ca:	bd30      	pop	{r4, r5, pc}
    62cc:	00001b80 	.word	0x00001b80
    62d0:	000000ac 	.word	0x000000ac
    62d4:	40000c02 	.word	0x40000c02
    62d8:	40000c00 	.word	0x40000c00
    62dc:	fffff0ff 	.word	0xfffff0ff
    62e0:	ffffbfff 	.word	0xffffbfff
    62e4:	0000000c 	.word	0x0000000c

000062e8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    62e8:	b510      	push	{r4, lr}
    62ea:	b082      	sub	sp, #8
    62ec:	4b06      	ldr	r3, [pc, #24]	; (6308 <system_gclk_chan_set_config+0x20>)
    62ee:	447b      	add	r3, pc

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    62f0:	780c      	ldrb	r4, [r1, #0]
    62f2:	0224      	lsls	r4, r4, #8
    62f4:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    62f6:	4a05      	ldr	r2, [pc, #20]	; (630c <system_gclk_chan_set_config+0x24>)
    62f8:	589a      	ldr	r2, [r3, r2]
    62fa:	9201      	str	r2, [sp, #4]
    62fc:	4790      	blx	r2

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    62fe:	b2a4      	uxth	r4, r4
    6300:	4b03      	ldr	r3, [pc, #12]	; (6310 <system_gclk_chan_set_config+0x28>)
    6302:	805c      	strh	r4, [r3, #2]
}
    6304:	b002      	add	sp, #8
    6306:	bd10      	pop	{r4, pc}
    6308:	00001b16 	.word	0x00001b16
    630c:	0000026c 	.word	0x0000026c
    6310:	40000c00 	.word	0x40000c00

00006314 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6314:	b530      	push	{r4, r5, lr}
    6316:	b083      	sub	sp, #12
    6318:	1c05      	adds	r5, r0, #0
    631a:	4c0a      	ldr	r4, [pc, #40]	; (6344 <system_gclk_chan_get_hz+0x30>)
    631c:	447c      	add	r4, pc
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    631e:	4b0a      	ldr	r3, [pc, #40]	; (6348 <system_gclk_chan_get_hz+0x34>)
    6320:	58e3      	ldr	r3, [r4, r3]
    6322:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6324:	4b09      	ldr	r3, [pc, #36]	; (634c <system_gclk_chan_get_hz+0x38>)
    6326:	701d      	strb	r5, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6328:	4b09      	ldr	r3, [pc, #36]	; (6350 <system_gclk_chan_get_hz+0x3c>)
    632a:	885d      	ldrh	r5, [r3, #2]
    632c:	052d      	lsls	r5, r5, #20
    632e:	0f2d      	lsrs	r5, r5, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    6330:	4b08      	ldr	r3, [pc, #32]	; (6354 <system_gclk_chan_get_hz+0x40>)
    6332:	58e3      	ldr	r3, [r4, r3]
    6334:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6336:	1c28      	adds	r0, r5, #0
    6338:	4b07      	ldr	r3, [pc, #28]	; (6358 <system_gclk_chan_get_hz+0x44>)
    633a:	58e3      	ldr	r3, [r4, r3]
    633c:	4798      	blx	r3
}
    633e:	b003      	add	sp, #12
    6340:	bd30      	pop	{r4, r5, pc}
    6342:	46c0      	nop			; (mov r8, r8)
    6344:	00001ae8 	.word	0x00001ae8
    6348:	000000ac 	.word	0x000000ac
    634c:	40000c02 	.word	0x40000c02
    6350:	40000c00 	.word	0x40000c00
    6354:	0000000c 	.word	0x0000000c
    6358:	000000b0 	.word	0x000000b0

0000635c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    635c:	4770      	bx	lr
    635e:	46c0      	nop			; (mov r8, r8)

00006360 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6360:	b510      	push	{r4, lr}
    6362:	b082      	sub	sp, #8
    6364:	4c09      	ldr	r4, [pc, #36]	; (638c <system_init+0x2c>)
    6366:	447c      	add	r4, pc
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6368:	4b09      	ldr	r3, [pc, #36]	; (6390 <system_init+0x30>)
    636a:	58e3      	ldr	r3, [r4, r3]
    636c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    636e:	4b09      	ldr	r3, [pc, #36]	; (6394 <system_init+0x34>)
    6370:	58e3      	ldr	r3, [r4, r3]
    6372:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6374:	4b08      	ldr	r3, [pc, #32]	; (6398 <system_init+0x38>)
    6376:	58e3      	ldr	r3, [r4, r3]
    6378:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    637a:	4b08      	ldr	r3, [pc, #32]	; (639c <system_init+0x3c>)
    637c:	58e3      	ldr	r3, [r4, r3]
    637e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6380:	4b07      	ldr	r3, [pc, #28]	; (63a0 <system_init+0x40>)
    6382:	58e3      	ldr	r3, [r4, r3]
    6384:	4798      	blx	r3
}
    6386:	b002      	add	sp, #8
    6388:	bd10      	pop	{r4, pc}
    638a:	46c0      	nop			; (mov r8, r8)
    638c:	00001a9e 	.word	0x00001a9e
    6390:	00000224 	.word	0x00000224
    6394:	00000174 	.word	0x00000174
    6398:	00000220 	.word	0x00000220
    639c:	0000012c 	.word	0x0000012c
    63a0:	000000a8 	.word	0x000000a8

000063a4 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    63a4:	b082      	sub	sp, #8
    63a6:	4b11      	ldr	r3, [pc, #68]	; (63ec <cpu_irq_enter_critical+0x48>)
    63a8:	447b      	add	r3, pc
	if (cpu_irq_critical_section_counter == 0) {
    63aa:	4a11      	ldr	r2, [pc, #68]	; (63f0 <cpu_irq_enter_critical+0x4c>)
    63ac:	447a      	add	r2, pc
    63ae:	6812      	ldr	r2, [r2, #0]
    63b0:	2a00      	cmp	r2, #0
    63b2:	d113      	bne.n	63dc <cpu_irq_enter_critical+0x38>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    63b4:	f3ef 8210 	mrs	r2, PRIMASK
		if (cpu_irq_is_enabled()) {
    63b8:	2a00      	cmp	r2, #0
    63ba:	d10b      	bne.n	63d4 <cpu_irq_enter_critical+0x30>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    63bc:	b672      	cpsid	i
    63be:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    63c2:	4a0c      	ldr	r2, [pc, #48]	; (63f4 <cpu_irq_enter_critical+0x50>)
    63c4:	589a      	ldr	r2, [r3, r2]
    63c6:	2300      	movs	r3, #0
    63c8:	7013      	strb	r3, [r2, #0]
			cpu_irq_prev_interrupt_state = true;
    63ca:	2201      	movs	r2, #1
    63cc:	4b0a      	ldr	r3, [pc, #40]	; (63f8 <cpu_irq_enter_critical+0x54>)
    63ce:	447b      	add	r3, pc
    63d0:	711a      	strb	r2, [r3, #4]
    63d2:	e003      	b.n	63dc <cpu_irq_enter_critical+0x38>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    63d4:	2200      	movs	r2, #0
    63d6:	4b09      	ldr	r3, [pc, #36]	; (63fc <cpu_irq_enter_critical+0x58>)
    63d8:	447b      	add	r3, pc
    63da:	711a      	strb	r2, [r3, #4]
		}

	}

	cpu_irq_critical_section_counter++;
    63dc:	4b08      	ldr	r3, [pc, #32]	; (6400 <cpu_irq_enter_critical+0x5c>)
    63de:	447b      	add	r3, pc
    63e0:	681a      	ldr	r2, [r3, #0]
    63e2:	3201      	adds	r2, #1
    63e4:	601a      	str	r2, [r3, #0]
}
    63e6:	b002      	add	sp, #8
    63e8:	4770      	bx	lr
    63ea:	46c0      	nop			; (mov r8, r8)
    63ec:	00001a5c 	.word	0x00001a5c
    63f0:	1fffb2cc 	.word	0x1fffb2cc
    63f4:	000000bc 	.word	0x000000bc
    63f8:	1fffb2aa 	.word	0x1fffb2aa
    63fc:	1fffb2a0 	.word	0x1fffb2a0
    6400:	1fffb29a 	.word	0x1fffb29a

00006404 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    6404:	b082      	sub	sp, #8
    6406:	4a0d      	ldr	r2, [pc, #52]	; (643c <cpu_irq_leave_critical+0x38>)
    6408:	447a      	add	r2, pc
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    640a:	4b0d      	ldr	r3, [pc, #52]	; (6440 <cpu_irq_leave_critical+0x3c>)
    640c:	447b      	add	r3, pc
    640e:	6819      	ldr	r1, [r3, #0]
    6410:	3901      	subs	r1, #1
    6412:	6019      	str	r1, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    6414:	681b      	ldr	r3, [r3, #0]
    6416:	2b00      	cmp	r3, #0
    6418:	d10d      	bne.n	6436 <cpu_irq_leave_critical+0x32>
    641a:	4b0a      	ldr	r3, [pc, #40]	; (6444 <cpu_irq_leave_critical+0x40>)
    641c:	447b      	add	r3, pc
    641e:	791b      	ldrb	r3, [r3, #4]
    6420:	2b00      	cmp	r3, #0
    6422:	d008      	beq.n	6436 <cpu_irq_leave_critical+0x32>
		cpu_irq_enable();
    6424:	4b08      	ldr	r3, [pc, #32]	; (6448 <cpu_irq_leave_critical+0x44>)
    6426:	58d3      	ldr	r3, [r2, r3]
    6428:	9301      	str	r3, [sp, #4]
    642a:	2301      	movs	r3, #1
    642c:	9a01      	ldr	r2, [sp, #4]
    642e:	7013      	strb	r3, [r2, #0]
    6430:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    6434:	b662      	cpsie	i
	}
}
    6436:	b002      	add	sp, #8
    6438:	4770      	bx	lr
    643a:	46c0      	nop			; (mov r8, r8)
    643c:	000019fc 	.word	0x000019fc
    6440:	1fffb26c 	.word	0x1fffb26c
    6444:	1fffb25c 	.word	0x1fffb25c
    6448:	000000bc 	.word	0x000000bc

0000644c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    644c:	b510      	push	{r4, lr}
    644e:	b084      	sub	sp, #16
    6450:	4a08      	ldr	r2, [pc, #32]	; (6474 <port_pin_set_config+0x28>)
    6452:	447a      	add	r2, pc
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6454:	2480      	movs	r4, #128	; 0x80
    6456:	ab03      	add	r3, sp, #12
    6458:	701c      	strb	r4, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    645a:	780c      	ldrb	r4, [r1, #0]
    645c:	705c      	strb	r4, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    645e:	784c      	ldrb	r4, [r1, #1]
    6460:	709c      	strb	r4, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    6462:	7889      	ldrb	r1, [r1, #2]
    6464:	70d9      	strb	r1, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    6466:	1c19      	adds	r1, r3, #0
    6468:	4b03      	ldr	r3, [pc, #12]	; (6478 <port_pin_set_config+0x2c>)
    646a:	58d3      	ldr	r3, [r2, r3]
    646c:	4798      	blx	r3
}
    646e:	b004      	add	sp, #16
    6470:	bd10      	pop	{r4, pc}
    6472:	46c0      	nop			; (mov r8, r8)
    6474:	000019b2 	.word	0x000019b2
    6478:	00000294 	.word	0x00000294

0000647c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    647c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    647e:	78d3      	ldrb	r3, [r2, #3]
    6480:	2b00      	cmp	r3, #0
    6482:	d11e      	bne.n	64c2 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6484:	7813      	ldrb	r3, [r2, #0]
    6486:	2b80      	cmp	r3, #128	; 0x80
    6488:	d004      	beq.n	6494 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    648a:	061b      	lsls	r3, r3, #24
    648c:	2480      	movs	r4, #128	; 0x80
    648e:	0264      	lsls	r4, r4, #9
    6490:	4323      	orrs	r3, r4
    6492:	e000      	b.n	6496 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    6494:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6496:	7854      	ldrb	r4, [r2, #1]
    6498:	2502      	movs	r5, #2
    649a:	43ac      	bics	r4, r5
    649c:	d10a      	bne.n	64b4 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    649e:	7894      	ldrb	r4, [r2, #2]
    64a0:	2c00      	cmp	r4, #0
    64a2:	d103      	bne.n	64ac <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    64a4:	2480      	movs	r4, #128	; 0x80
    64a6:	02a4      	lsls	r4, r4, #10
    64a8:	4323      	orrs	r3, r4
    64aa:	e002      	b.n	64b2 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    64ac:	24c0      	movs	r4, #192	; 0xc0
    64ae:	02e4      	lsls	r4, r4, #11
    64b0:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    64b2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    64b4:	7854      	ldrb	r4, [r2, #1]
    64b6:	3c01      	subs	r4, #1
    64b8:	2c01      	cmp	r4, #1
    64ba:	d804      	bhi.n	64c6 <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    64bc:	4c11      	ldr	r4, [pc, #68]	; (6504 <_system_pinmux_config+0x88>)
    64be:	4023      	ands	r3, r4
    64c0:	e001      	b.n	64c6 <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    64c2:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    64c4:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    64c6:	040d      	lsls	r5, r1, #16
    64c8:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    64ca:	24a0      	movs	r4, #160	; 0xa0
    64cc:	05e4      	lsls	r4, r4, #23
    64ce:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    64d0:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    64d2:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    64d4:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    64d6:	24d0      	movs	r4, #208	; 0xd0
    64d8:	0624      	lsls	r4, r4, #24
    64da:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    64dc:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    64de:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    64e0:	78d4      	ldrb	r4, [r2, #3]
    64e2:	2c00      	cmp	r4, #0
    64e4:	d10c      	bne.n	6500 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    64e6:	035c      	lsls	r4, r3, #13
    64e8:	d505      	bpl.n	64f6 <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    64ea:	7893      	ldrb	r3, [r2, #2]
    64ec:	2b01      	cmp	r3, #1
    64ee:	d101      	bne.n	64f4 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    64f0:	6181      	str	r1, [r0, #24]
    64f2:	e000      	b.n	64f6 <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    64f4:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    64f6:	7853      	ldrb	r3, [r2, #1]
    64f8:	3b01      	subs	r3, #1
    64fa:	2b01      	cmp	r3, #1
    64fc:	d800      	bhi.n	6500 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    64fe:	6081      	str	r1, [r0, #8]
		}
	}
}
    6500:	bd30      	pop	{r4, r5, pc}
    6502:	46c0      	nop			; (mov r8, r8)
    6504:	fffbffff 	.word	0xfffbffff

00006508 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6508:	b508      	push	{r3, lr}
    650a:	1c03      	adds	r3, r0, #0
    650c:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    650e:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    6510:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    6512:	2900      	cmp	r1, #0
    6514:	d103      	bne.n	651e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    6516:	0958      	lsrs	r0, r3, #5
    6518:	01c0      	lsls	r0, r0, #7
    651a:	4905      	ldr	r1, [pc, #20]	; (6530 <system_pinmux_pin_set_config+0x28>)
    651c:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    651e:	211f      	movs	r1, #31
    6520:	400b      	ands	r3, r1
    6522:	2101      	movs	r1, #1
    6524:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    6526:	4b03      	ldr	r3, [pc, #12]	; (6534 <system_pinmux_pin_set_config+0x2c>)
    6528:	447b      	add	r3, pc
    652a:	4798      	blx	r3
}
    652c:	bd08      	pop	{r3, pc}
    652e:	46c0      	nop			; (mov r8, r8)
    6530:	41004400 	.word	0x41004400
    6534:	ffffff51 	.word	0xffffff51

00006538 <__gnu_thumb1_case_uqi>:
    6538:	b402      	push	{r1}
    653a:	4671      	mov	r1, lr
    653c:	0849      	lsrs	r1, r1, #1
    653e:	0049      	lsls	r1, r1, #1
    6540:	5c09      	ldrb	r1, [r1, r0]
    6542:	0049      	lsls	r1, r1, #1
    6544:	448e      	add	lr, r1
    6546:	bc02      	pop	{r1}
    6548:	4770      	bx	lr
    654a:	46c0      	nop			; (mov r8, r8)

0000654c <__gnu_thumb1_case_uhi>:
    654c:	b403      	push	{r0, r1}
    654e:	4671      	mov	r1, lr
    6550:	0849      	lsrs	r1, r1, #1
    6552:	0040      	lsls	r0, r0, #1
    6554:	0049      	lsls	r1, r1, #1
    6556:	5a09      	ldrh	r1, [r1, r0]
    6558:	0049      	lsls	r1, r1, #1
    655a:	448e      	add	lr, r1
    655c:	bc03      	pop	{r0, r1}
    655e:	4770      	bx	lr

00006560 <__udivsi3>:
    6560:	2900      	cmp	r1, #0
    6562:	d034      	beq.n	65ce <.udivsi3_skip_div0_test+0x6a>

00006564 <.udivsi3_skip_div0_test>:
    6564:	2301      	movs	r3, #1
    6566:	2200      	movs	r2, #0
    6568:	b410      	push	{r4}
    656a:	4288      	cmp	r0, r1
    656c:	d32c      	bcc.n	65c8 <.udivsi3_skip_div0_test+0x64>
    656e:	2401      	movs	r4, #1
    6570:	0724      	lsls	r4, r4, #28
    6572:	42a1      	cmp	r1, r4
    6574:	d204      	bcs.n	6580 <.udivsi3_skip_div0_test+0x1c>
    6576:	4281      	cmp	r1, r0
    6578:	d202      	bcs.n	6580 <.udivsi3_skip_div0_test+0x1c>
    657a:	0109      	lsls	r1, r1, #4
    657c:	011b      	lsls	r3, r3, #4
    657e:	e7f8      	b.n	6572 <.udivsi3_skip_div0_test+0xe>
    6580:	00e4      	lsls	r4, r4, #3
    6582:	42a1      	cmp	r1, r4
    6584:	d204      	bcs.n	6590 <.udivsi3_skip_div0_test+0x2c>
    6586:	4281      	cmp	r1, r0
    6588:	d202      	bcs.n	6590 <.udivsi3_skip_div0_test+0x2c>
    658a:	0049      	lsls	r1, r1, #1
    658c:	005b      	lsls	r3, r3, #1
    658e:	e7f8      	b.n	6582 <.udivsi3_skip_div0_test+0x1e>
    6590:	4288      	cmp	r0, r1
    6592:	d301      	bcc.n	6598 <.udivsi3_skip_div0_test+0x34>
    6594:	1a40      	subs	r0, r0, r1
    6596:	431a      	orrs	r2, r3
    6598:	084c      	lsrs	r4, r1, #1
    659a:	42a0      	cmp	r0, r4
    659c:	d302      	bcc.n	65a4 <.udivsi3_skip_div0_test+0x40>
    659e:	1b00      	subs	r0, r0, r4
    65a0:	085c      	lsrs	r4, r3, #1
    65a2:	4322      	orrs	r2, r4
    65a4:	088c      	lsrs	r4, r1, #2
    65a6:	42a0      	cmp	r0, r4
    65a8:	d302      	bcc.n	65b0 <.udivsi3_skip_div0_test+0x4c>
    65aa:	1b00      	subs	r0, r0, r4
    65ac:	089c      	lsrs	r4, r3, #2
    65ae:	4322      	orrs	r2, r4
    65b0:	08cc      	lsrs	r4, r1, #3
    65b2:	42a0      	cmp	r0, r4
    65b4:	d302      	bcc.n	65bc <.udivsi3_skip_div0_test+0x58>
    65b6:	1b00      	subs	r0, r0, r4
    65b8:	08dc      	lsrs	r4, r3, #3
    65ba:	4322      	orrs	r2, r4
    65bc:	2800      	cmp	r0, #0
    65be:	d003      	beq.n	65c8 <.udivsi3_skip_div0_test+0x64>
    65c0:	091b      	lsrs	r3, r3, #4
    65c2:	d001      	beq.n	65c8 <.udivsi3_skip_div0_test+0x64>
    65c4:	0909      	lsrs	r1, r1, #4
    65c6:	e7e3      	b.n	6590 <.udivsi3_skip_div0_test+0x2c>
    65c8:	1c10      	adds	r0, r2, #0
    65ca:	bc10      	pop	{r4}
    65cc:	4770      	bx	lr
    65ce:	2800      	cmp	r0, #0
    65d0:	d001      	beq.n	65d6 <.udivsi3_skip_div0_test+0x72>
    65d2:	2000      	movs	r0, #0
    65d4:	43c0      	mvns	r0, r0
    65d6:	b407      	push	{r0, r1, r2}
    65d8:	4802      	ldr	r0, [pc, #8]	; (65e4 <.udivsi3_skip_div0_test+0x80>)
    65da:	a102      	add	r1, pc, #8	; (adr r1, 65e4 <.udivsi3_skip_div0_test+0x80>)
    65dc:	1840      	adds	r0, r0, r1
    65de:	9002      	str	r0, [sp, #8]
    65e0:	bd03      	pop	{r0, r1, pc}
    65e2:	46c0      	nop			; (mov r8, r8)
    65e4:	00000019 	.word	0x00000019

000065e8 <__aeabi_uidivmod>:
    65e8:	2900      	cmp	r1, #0
    65ea:	d0f0      	beq.n	65ce <.udivsi3_skip_div0_test+0x6a>
    65ec:	b503      	push	{r0, r1, lr}
    65ee:	f7ff ffb9 	bl	6564 <.udivsi3_skip_div0_test>
    65f2:	bc0e      	pop	{r1, r2, r3}
    65f4:	4342      	muls	r2, r0
    65f6:	1a89      	subs	r1, r1, r2
    65f8:	4718      	bx	r3
    65fa:	46c0      	nop			; (mov r8, r8)

000065fc <__aeabi_idiv0>:
    65fc:	4770      	bx	lr
    65fe:	46c0      	nop			; (mov r8, r8)

00006600 <__muldi3>:
    6600:	469c      	mov	ip, r3
    6602:	0403      	lsls	r3, r0, #16
    6604:	b5f0      	push	{r4, r5, r6, r7, lr}
    6606:	0c1b      	lsrs	r3, r3, #16
    6608:	0417      	lsls	r7, r2, #16
    660a:	0c3f      	lsrs	r7, r7, #16
    660c:	0c15      	lsrs	r5, r2, #16
    660e:	1c1e      	adds	r6, r3, #0
    6610:	1c04      	adds	r4, r0, #0
    6612:	0c00      	lsrs	r0, r0, #16
    6614:	437e      	muls	r6, r7
    6616:	436b      	muls	r3, r5
    6618:	4347      	muls	r7, r0
    661a:	4345      	muls	r5, r0
    661c:	18fb      	adds	r3, r7, r3
    661e:	0c30      	lsrs	r0, r6, #16
    6620:	1818      	adds	r0, r3, r0
    6622:	4287      	cmp	r7, r0
    6624:	d902      	bls.n	662c <__muldi3+0x2c>
    6626:	2380      	movs	r3, #128	; 0x80
    6628:	025b      	lsls	r3, r3, #9
    662a:	18ed      	adds	r5, r5, r3
    662c:	0c03      	lsrs	r3, r0, #16
    662e:	18ed      	adds	r5, r5, r3
    6630:	4663      	mov	r3, ip
    6632:	435c      	muls	r4, r3
    6634:	434a      	muls	r2, r1
    6636:	0436      	lsls	r6, r6, #16
    6638:	0c36      	lsrs	r6, r6, #16
    663a:	18a1      	adds	r1, r4, r2
    663c:	0400      	lsls	r0, r0, #16
    663e:	1980      	adds	r0, r0, r6
    6640:	1949      	adds	r1, r1, r5
    6642:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006644 <__aeabi_d2f>:
    6644:	b5f0      	push	{r4, r5, r6, r7, lr}
    6646:	004b      	lsls	r3, r1, #1
    6648:	030d      	lsls	r5, r1, #12
    664a:	0f42      	lsrs	r2, r0, #29
    664c:	0d5b      	lsrs	r3, r3, #21
    664e:	0a6d      	lsrs	r5, r5, #9
    6650:	4315      	orrs	r5, r2
    6652:	1c5a      	adds	r2, r3, #1
    6654:	0552      	lsls	r2, r2, #21
    6656:	0fcc      	lsrs	r4, r1, #31
    6658:	00c6      	lsls	r6, r0, #3
    665a:	0d52      	lsrs	r2, r2, #21
    665c:	2a01      	cmp	r2, #1
    665e:	dd27      	ble.n	66b0 <__aeabi_d2f+0x6c>
    6660:	4f39      	ldr	r7, [pc, #228]	; (6748 <__aeabi_d2f+0x104>)
    6662:	19da      	adds	r2, r3, r7
    6664:	2afe      	cmp	r2, #254	; 0xfe
    6666:	dc1a      	bgt.n	669e <__aeabi_d2f+0x5a>
    6668:	2a00      	cmp	r2, #0
    666a:	dd35      	ble.n	66d8 <__aeabi_d2f+0x94>
    666c:	0180      	lsls	r0, r0, #6
    666e:	00ed      	lsls	r5, r5, #3
    6670:	1e43      	subs	r3, r0, #1
    6672:	4198      	sbcs	r0, r3
    6674:	4328      	orrs	r0, r5
    6676:	0f76      	lsrs	r6, r6, #29
    6678:	4330      	orrs	r0, r6
    667a:	0743      	lsls	r3, r0, #29
    667c:	d004      	beq.n	6688 <__aeabi_d2f+0x44>
    667e:	230f      	movs	r3, #15
    6680:	4003      	ands	r3, r0
    6682:	2b04      	cmp	r3, #4
    6684:	d000      	beq.n	6688 <__aeabi_d2f+0x44>
    6686:	3004      	adds	r0, #4
    6688:	2180      	movs	r1, #128	; 0x80
    668a:	04c9      	lsls	r1, r1, #19
    668c:	4001      	ands	r1, r0
    668e:	d027      	beq.n	66e0 <__aeabi_d2f+0x9c>
    6690:	3201      	adds	r2, #1
    6692:	2aff      	cmp	r2, #255	; 0xff
    6694:	d01d      	beq.n	66d2 <__aeabi_d2f+0x8e>
    6696:	0183      	lsls	r3, r0, #6
    6698:	0a5b      	lsrs	r3, r3, #9
    669a:	b2d1      	uxtb	r1, r2
    669c:	e001      	b.n	66a2 <__aeabi_d2f+0x5e>
    669e:	21ff      	movs	r1, #255	; 0xff
    66a0:	2300      	movs	r3, #0
    66a2:	0258      	lsls	r0, r3, #9
    66a4:	05c9      	lsls	r1, r1, #23
    66a6:	0a40      	lsrs	r0, r0, #9
    66a8:	07e4      	lsls	r4, r4, #31
    66aa:	4308      	orrs	r0, r1
    66ac:	4320      	orrs	r0, r4
    66ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    66b0:	2b00      	cmp	r3, #0
    66b2:	d106      	bne.n	66c2 <__aeabi_d2f+0x7e>
    66b4:	4335      	orrs	r5, r6
    66b6:	d111      	bne.n	66dc <__aeabi_d2f+0x98>
    66b8:	2100      	movs	r1, #0
    66ba:	2000      	movs	r0, #0
    66bc:	0243      	lsls	r3, r0, #9
    66be:	0a5b      	lsrs	r3, r3, #9
    66c0:	e7ef      	b.n	66a2 <__aeabi_d2f+0x5e>
    66c2:	432e      	orrs	r6, r5
    66c4:	d0eb      	beq.n	669e <__aeabi_d2f+0x5a>
    66c6:	2080      	movs	r0, #128	; 0x80
    66c8:	00ed      	lsls	r5, r5, #3
    66ca:	0480      	lsls	r0, r0, #18
    66cc:	4328      	orrs	r0, r5
    66ce:	22ff      	movs	r2, #255	; 0xff
    66d0:	e7d3      	b.n	667a <__aeabi_d2f+0x36>
    66d2:	21ff      	movs	r1, #255	; 0xff
    66d4:	2300      	movs	r3, #0
    66d6:	e7e4      	b.n	66a2 <__aeabi_d2f+0x5e>
    66d8:	3217      	adds	r2, #23
    66da:	da0d      	bge.n	66f8 <__aeabi_d2f+0xb4>
    66dc:	2005      	movs	r0, #5
    66de:	2200      	movs	r2, #0
    66e0:	08c0      	lsrs	r0, r0, #3
    66e2:	b2d1      	uxtb	r1, r2
    66e4:	2aff      	cmp	r2, #255	; 0xff
    66e6:	d1e9      	bne.n	66bc <__aeabi_d2f+0x78>
    66e8:	2800      	cmp	r0, #0
    66ea:	d0d9      	beq.n	66a0 <__aeabi_d2f+0x5c>
    66ec:	2380      	movs	r3, #128	; 0x80
    66ee:	03db      	lsls	r3, r3, #15
    66f0:	4303      	orrs	r3, r0
    66f2:	025b      	lsls	r3, r3, #9
    66f4:	0a5b      	lsrs	r3, r3, #9
    66f6:	e7d4      	b.n	66a2 <__aeabi_d2f+0x5e>
    66f8:	2280      	movs	r2, #128	; 0x80
    66fa:	4914      	ldr	r1, [pc, #80]	; (674c <__aeabi_d2f+0x108>)
    66fc:	0412      	lsls	r2, r2, #16
    66fe:	4315      	orrs	r5, r2
    6700:	1ac9      	subs	r1, r1, r3
    6702:	291f      	cmp	r1, #31
    6704:	dc0d      	bgt.n	6722 <__aeabi_d2f+0xde>
    6706:	4a12      	ldr	r2, [pc, #72]	; (6750 <__aeabi_d2f+0x10c>)
    6708:	1c37      	adds	r7, r6, #0
    670a:	189b      	adds	r3, r3, r2
    670c:	1c28      	adds	r0, r5, #0
    670e:	409f      	lsls	r7, r3
    6710:	4098      	lsls	r0, r3
    6712:	1c3b      	adds	r3, r7, #0
    6714:	1e5a      	subs	r2, r3, #1
    6716:	4193      	sbcs	r3, r2
    6718:	4318      	orrs	r0, r3
    671a:	40ce      	lsrs	r6, r1
    671c:	4330      	orrs	r0, r6
    671e:	2200      	movs	r2, #0
    6720:	e7ab      	b.n	667a <__aeabi_d2f+0x36>
    6722:	4f0c      	ldr	r7, [pc, #48]	; (6754 <__aeabi_d2f+0x110>)
    6724:	1c2a      	adds	r2, r5, #0
    6726:	1aff      	subs	r7, r7, r3
    6728:	40fa      	lsrs	r2, r7
    672a:	1c17      	adds	r7, r2, #0
    672c:	2920      	cmp	r1, #32
    672e:	d009      	beq.n	6744 <__aeabi_d2f+0x100>
    6730:	4a09      	ldr	r2, [pc, #36]	; (6758 <__aeabi_d2f+0x114>)
    6732:	1898      	adds	r0, r3, r2
    6734:	4085      	lsls	r5, r0
    6736:	1c28      	adds	r0, r5, #0
    6738:	4330      	orrs	r0, r6
    673a:	1e46      	subs	r6, r0, #1
    673c:	41b0      	sbcs	r0, r6
    673e:	4338      	orrs	r0, r7
    6740:	2200      	movs	r2, #0
    6742:	e79a      	b.n	667a <__aeabi_d2f+0x36>
    6744:	2000      	movs	r0, #0
    6746:	e7f7      	b.n	6738 <__aeabi_d2f+0xf4>
    6748:	fffffc80 	.word	0xfffffc80
    674c:	0000039e 	.word	0x0000039e
    6750:	fffffc82 	.word	0xfffffc82
    6754:	0000037e 	.word	0x0000037e
    6758:	fffffca2 	.word	0xfffffca2

0000675c <__libc_init_array>:
    675c:	b570      	push	{r4, r5, r6, lr}
    675e:	4e0d      	ldr	r6, [pc, #52]	; (6794 <__libc_init_array+0x38>)
    6760:	4d0d      	ldr	r5, [pc, #52]	; (6798 <__libc_init_array+0x3c>)
    6762:	2400      	movs	r4, #0
    6764:	1bad      	subs	r5, r5, r6
    6766:	10ad      	asrs	r5, r5, #2
    6768:	d005      	beq.n	6776 <__libc_init_array+0x1a>
    676a:	00a3      	lsls	r3, r4, #2
    676c:	58f3      	ldr	r3, [r6, r3]
    676e:	3401      	adds	r4, #1
    6770:	4798      	blx	r3
    6772:	42a5      	cmp	r5, r4
    6774:	d1f9      	bne.n	676a <__libc_init_array+0xe>
    6776:	f001 fb35 	bl	7de4 <_init>
    677a:	4e08      	ldr	r6, [pc, #32]	; (679c <__libc_init_array+0x40>)
    677c:	4d08      	ldr	r5, [pc, #32]	; (67a0 <__libc_init_array+0x44>)
    677e:	2400      	movs	r4, #0
    6780:	1bad      	subs	r5, r5, r6
    6782:	10ad      	asrs	r5, r5, #2
    6784:	d005      	beq.n	6792 <__libc_init_array+0x36>
    6786:	00a3      	lsls	r3, r4, #2
    6788:	58f3      	ldr	r3, [r6, r3]
    678a:	3401      	adds	r4, #1
    678c:	4798      	blx	r3
    678e:	42a5      	cmp	r5, r4
    6790:	d1f9      	bne.n	6786 <__libc_init_array+0x2a>
    6792:	bd70      	pop	{r4, r5, r6, pc}
    6794:	00007df0 	.word	0x00007df0
    6798:	00007df0 	.word	0x00007df0
    679c:	00007df0 	.word	0x00007df0
    67a0:	00007df8 	.word	0x00007df8

000067a4 <memcpy>:
    67a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    67a6:	2a0f      	cmp	r2, #15
    67a8:	d935      	bls.n	6816 <memcpy+0x72>
    67aa:	1c03      	adds	r3, r0, #0
    67ac:	430b      	orrs	r3, r1
    67ae:	079c      	lsls	r4, r3, #30
    67b0:	d135      	bne.n	681e <memcpy+0x7a>
    67b2:	1c16      	adds	r6, r2, #0
    67b4:	3e10      	subs	r6, #16
    67b6:	0936      	lsrs	r6, r6, #4
    67b8:	0135      	lsls	r5, r6, #4
    67ba:	1945      	adds	r5, r0, r5
    67bc:	3510      	adds	r5, #16
    67be:	1c0c      	adds	r4, r1, #0
    67c0:	1c03      	adds	r3, r0, #0
    67c2:	6827      	ldr	r7, [r4, #0]
    67c4:	601f      	str	r7, [r3, #0]
    67c6:	6867      	ldr	r7, [r4, #4]
    67c8:	605f      	str	r7, [r3, #4]
    67ca:	68a7      	ldr	r7, [r4, #8]
    67cc:	609f      	str	r7, [r3, #8]
    67ce:	68e7      	ldr	r7, [r4, #12]
    67d0:	3410      	adds	r4, #16
    67d2:	60df      	str	r7, [r3, #12]
    67d4:	3310      	adds	r3, #16
    67d6:	42ab      	cmp	r3, r5
    67d8:	d1f3      	bne.n	67c2 <memcpy+0x1e>
    67da:	1c73      	adds	r3, r6, #1
    67dc:	011b      	lsls	r3, r3, #4
    67de:	18c5      	adds	r5, r0, r3
    67e0:	18c9      	adds	r1, r1, r3
    67e2:	230f      	movs	r3, #15
    67e4:	4013      	ands	r3, r2
    67e6:	2b03      	cmp	r3, #3
    67e8:	d91b      	bls.n	6822 <memcpy+0x7e>
    67ea:	1f1c      	subs	r4, r3, #4
    67ec:	08a4      	lsrs	r4, r4, #2
    67ee:	3401      	adds	r4, #1
    67f0:	00a4      	lsls	r4, r4, #2
    67f2:	2300      	movs	r3, #0
    67f4:	58ce      	ldr	r6, [r1, r3]
    67f6:	50ee      	str	r6, [r5, r3]
    67f8:	3304      	adds	r3, #4
    67fa:	42a3      	cmp	r3, r4
    67fc:	d1fa      	bne.n	67f4 <memcpy+0x50>
    67fe:	18ed      	adds	r5, r5, r3
    6800:	18c9      	adds	r1, r1, r3
    6802:	2303      	movs	r3, #3
    6804:	401a      	ands	r2, r3
    6806:	d005      	beq.n	6814 <memcpy+0x70>
    6808:	2300      	movs	r3, #0
    680a:	5ccc      	ldrb	r4, [r1, r3]
    680c:	54ec      	strb	r4, [r5, r3]
    680e:	3301      	adds	r3, #1
    6810:	4293      	cmp	r3, r2
    6812:	d1fa      	bne.n	680a <memcpy+0x66>
    6814:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6816:	1c05      	adds	r5, r0, #0
    6818:	2a00      	cmp	r2, #0
    681a:	d1f5      	bne.n	6808 <memcpy+0x64>
    681c:	e7fa      	b.n	6814 <memcpy+0x70>
    681e:	1c05      	adds	r5, r0, #0
    6820:	e7f2      	b.n	6808 <memcpy+0x64>
    6822:	1c1a      	adds	r2, r3, #0
    6824:	e7f8      	b.n	6818 <memcpy+0x74>
    6826:	46c0      	nop			; (mov r8, r8)

00006828 <memset>:
    6828:	b5f0      	push	{r4, r5, r6, r7, lr}
    682a:	0783      	lsls	r3, r0, #30
    682c:	d046      	beq.n	68bc <memset+0x94>
    682e:	1e54      	subs	r4, r2, #1
    6830:	2a00      	cmp	r2, #0
    6832:	d042      	beq.n	68ba <memset+0x92>
    6834:	b2ce      	uxtb	r6, r1
    6836:	1c03      	adds	r3, r0, #0
    6838:	2503      	movs	r5, #3
    683a:	e003      	b.n	6844 <memset+0x1c>
    683c:	1e62      	subs	r2, r4, #1
    683e:	2c00      	cmp	r4, #0
    6840:	d03b      	beq.n	68ba <memset+0x92>
    6842:	1c14      	adds	r4, r2, #0
    6844:	3301      	adds	r3, #1
    6846:	1e5a      	subs	r2, r3, #1
    6848:	7016      	strb	r6, [r2, #0]
    684a:	422b      	tst	r3, r5
    684c:	d1f6      	bne.n	683c <memset+0x14>
    684e:	2c03      	cmp	r4, #3
    6850:	d92b      	bls.n	68aa <memset+0x82>
    6852:	25ff      	movs	r5, #255	; 0xff
    6854:	400d      	ands	r5, r1
    6856:	022a      	lsls	r2, r5, #8
    6858:	4315      	orrs	r5, r2
    685a:	042a      	lsls	r2, r5, #16
    685c:	4315      	orrs	r5, r2
    685e:	2c0f      	cmp	r4, #15
    6860:	d915      	bls.n	688e <memset+0x66>
    6862:	1c27      	adds	r7, r4, #0
    6864:	3f10      	subs	r7, #16
    6866:	093f      	lsrs	r7, r7, #4
    6868:	1c1e      	adds	r6, r3, #0
    686a:	013a      	lsls	r2, r7, #4
    686c:	3610      	adds	r6, #16
    686e:	18b6      	adds	r6, r6, r2
    6870:	1c1a      	adds	r2, r3, #0
    6872:	6015      	str	r5, [r2, #0]
    6874:	6055      	str	r5, [r2, #4]
    6876:	6095      	str	r5, [r2, #8]
    6878:	60d5      	str	r5, [r2, #12]
    687a:	3210      	adds	r2, #16
    687c:	42b2      	cmp	r2, r6
    687e:	d1f8      	bne.n	6872 <memset+0x4a>
    6880:	3701      	adds	r7, #1
    6882:	013f      	lsls	r7, r7, #4
    6884:	220f      	movs	r2, #15
    6886:	19db      	adds	r3, r3, r7
    6888:	4014      	ands	r4, r2
    688a:	2c03      	cmp	r4, #3
    688c:	d90d      	bls.n	68aa <memset+0x82>
    688e:	1f27      	subs	r7, r4, #4
    6890:	08bf      	lsrs	r7, r7, #2
    6892:	00ba      	lsls	r2, r7, #2
    6894:	1d1e      	adds	r6, r3, #4
    6896:	18b6      	adds	r6, r6, r2
    6898:	1c1a      	adds	r2, r3, #0
    689a:	c220      	stmia	r2!, {r5}
    689c:	42b2      	cmp	r2, r6
    689e:	d1fc      	bne.n	689a <memset+0x72>
    68a0:	3701      	adds	r7, #1
    68a2:	00bf      	lsls	r7, r7, #2
    68a4:	2203      	movs	r2, #3
    68a6:	19db      	adds	r3, r3, r7
    68a8:	4014      	ands	r4, r2
    68aa:	2c00      	cmp	r4, #0
    68ac:	d005      	beq.n	68ba <memset+0x92>
    68ae:	191c      	adds	r4, r3, r4
    68b0:	b2c9      	uxtb	r1, r1
    68b2:	7019      	strb	r1, [r3, #0]
    68b4:	3301      	adds	r3, #1
    68b6:	42a3      	cmp	r3, r4
    68b8:	d1fb      	bne.n	68b2 <memset+0x8a>
    68ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68bc:	1c14      	adds	r4, r2, #0
    68be:	1c03      	adds	r3, r0, #0
    68c0:	e7c5      	b.n	684e <memset+0x26>
    68c2:	46c0      	nop			; (mov r8, r8)

000068c4 <strncmp>:
    68c4:	b570      	push	{r4, r5, r6, lr}
    68c6:	1c05      	adds	r5, r0, #0
    68c8:	2000      	movs	r0, #0
    68ca:	2a00      	cmp	r2, #0
    68cc:	d02c      	beq.n	6928 <strncmp+0x64>
    68ce:	1c2b      	adds	r3, r5, #0
    68d0:	430b      	orrs	r3, r1
    68d2:	079c      	lsls	r4, r3, #30
    68d4:	d129      	bne.n	692a <strncmp+0x66>
    68d6:	2a03      	cmp	r2, #3
    68d8:	d927      	bls.n	692a <strncmp+0x66>
    68da:	682c      	ldr	r4, [r5, #0]
    68dc:	680e      	ldr	r6, [r1, #0]
    68de:	42b4      	cmp	r4, r6
    68e0:	d123      	bne.n	692a <strncmp+0x66>
    68e2:	1f13      	subs	r3, r2, #4
    68e4:	2b00      	cmp	r3, #0
    68e6:	d01f      	beq.n	6928 <strncmp+0x64>
    68e8:	4e22      	ldr	r6, [pc, #136]	; (6974 <strncmp+0xb0>)
    68ea:	19a2      	adds	r2, r4, r6
    68ec:	4e22      	ldr	r6, [pc, #136]	; (6978 <strncmp+0xb4>)
    68ee:	43a2      	bics	r2, r4
    68f0:	4232      	tst	r2, r6
    68f2:	d00e      	beq.n	6912 <strncmp+0x4e>
    68f4:	e018      	b.n	6928 <strncmp+0x64>
    68f6:	686a      	ldr	r2, [r5, #4]
    68f8:	6849      	ldr	r1, [r1, #4]
    68fa:	428a      	cmp	r2, r1
    68fc:	d12e      	bne.n	695c <strncmp+0x98>
    68fe:	3b04      	subs	r3, #4
    6900:	2b00      	cmp	r3, #0
    6902:	d010      	beq.n	6926 <strncmp+0x62>
    6904:	4d1b      	ldr	r5, [pc, #108]	; (6974 <strncmp+0xb0>)
    6906:	1951      	adds	r1, r2, r5
    6908:	4391      	bics	r1, r2
    690a:	4231      	tst	r1, r6
    690c:	d10b      	bne.n	6926 <strncmp+0x62>
    690e:	1c21      	adds	r1, r4, #0
    6910:	1c05      	adds	r5, r0, #0
    6912:	1d28      	adds	r0, r5, #4
    6914:	1d0c      	adds	r4, r1, #4
    6916:	2b03      	cmp	r3, #3
    6918:	d8ed      	bhi.n	68f6 <strncmp+0x32>
    691a:	1e5a      	subs	r2, r3, #1
    691c:	2b00      	cmp	r3, #0
    691e:	d021      	beq.n	6964 <strncmp+0xa0>
    6920:	1c21      	adds	r1, r4, #0
    6922:	1c05      	adds	r5, r0, #0
    6924:	e002      	b.n	692c <strncmp+0x68>
    6926:	2000      	movs	r0, #0
    6928:	bd70      	pop	{r4, r5, r6, pc}
    692a:	3a01      	subs	r2, #1
    692c:	782c      	ldrb	r4, [r5, #0]
    692e:	7808      	ldrb	r0, [r1, #0]
    6930:	4284      	cmp	r4, r0
    6932:	d11b      	bne.n	696c <strncmp+0xa8>
    6934:	2a00      	cmp	r2, #0
    6936:	d0f6      	beq.n	6926 <strncmp+0x62>
    6938:	2c00      	cmp	r4, #0
    693a:	d0f4      	beq.n	6926 <strncmp+0x62>
    693c:	1c6b      	adds	r3, r5, #1
    693e:	3101      	adds	r1, #1
    6940:	18ad      	adds	r5, r5, r2
    6942:	e005      	b.n	6950 <strncmp+0x8c>
    6944:	42ab      	cmp	r3, r5
    6946:	d0ee      	beq.n	6926 <strncmp+0x62>
    6948:	2c00      	cmp	r4, #0
    694a:	d0ec      	beq.n	6926 <strncmp+0x62>
    694c:	3301      	adds	r3, #1
    694e:	3101      	adds	r1, #1
    6950:	781c      	ldrb	r4, [r3, #0]
    6952:	780a      	ldrb	r2, [r1, #0]
    6954:	4294      	cmp	r4, r2
    6956:	d0f5      	beq.n	6944 <strncmp+0x80>
    6958:	1aa0      	subs	r0, r4, r2
    695a:	e7e5      	b.n	6928 <strncmp+0x64>
    695c:	1e5a      	subs	r2, r3, #1
    695e:	1c21      	adds	r1, r4, #0
    6960:	1c05      	adds	r5, r0, #0
    6962:	e7e3      	b.n	692c <strncmp+0x68>
    6964:	792c      	ldrb	r4, [r5, #4]
    6966:	790a      	ldrb	r2, [r1, #4]
    6968:	1aa0      	subs	r0, r4, r2
    696a:	e7dd      	b.n	6928 <strncmp+0x64>
    696c:	1c02      	adds	r2, r0, #0
    696e:	1aa0      	subs	r0, r4, r2
    6970:	e7da      	b.n	6928 <strncmp+0x64>
    6972:	46c0      	nop			; (mov r8, r8)
    6974:	fefefeff 	.word	0xfefefeff
    6978:	80808080 	.word	0x80808080

0000697c <strncpy>:
    697c:	1c03      	adds	r3, r0, #0
    697e:	430b      	orrs	r3, r1
    6980:	b5f0      	push	{r4, r5, r6, r7, lr}
    6982:	1c04      	adds	r4, r0, #0
    6984:	079d      	lsls	r5, r3, #30
    6986:	d101      	bne.n	698c <strncpy+0x10>
    6988:	2a03      	cmp	r2, #3
    698a:	d815      	bhi.n	69b8 <strncpy+0x3c>
    698c:	2a00      	cmp	r2, #0
    698e:	d012      	beq.n	69b6 <strncpy+0x3a>
    6990:	780d      	ldrb	r5, [r1, #0]
    6992:	3a01      	subs	r2, #1
    6994:	1c63      	adds	r3, r4, #1
    6996:	1c4e      	adds	r6, r1, #1
    6998:	7025      	strb	r5, [r4, #0]
    699a:	2d00      	cmp	r5, #0
    699c:	d01b      	beq.n	69d6 <strncpy+0x5a>
    699e:	1c31      	adds	r1, r6, #0
    69a0:	e007      	b.n	69b2 <strncpy+0x36>
    69a2:	780c      	ldrb	r4, [r1, #0]
    69a4:	3301      	adds	r3, #1
    69a6:	1e5d      	subs	r5, r3, #1
    69a8:	3a01      	subs	r2, #1
    69aa:	702c      	strb	r4, [r5, #0]
    69ac:	3101      	adds	r1, #1
    69ae:	2c00      	cmp	r4, #0
    69b0:	d011      	beq.n	69d6 <strncpy+0x5a>
    69b2:	2a00      	cmp	r2, #0
    69b4:	d1f5      	bne.n	69a2 <strncpy+0x26>
    69b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69b8:	4e0b      	ldr	r6, [pc, #44]	; (69e8 <strncpy+0x6c>)
    69ba:	680b      	ldr	r3, [r1, #0]
    69bc:	4f0b      	ldr	r7, [pc, #44]	; (69ec <strncpy+0x70>)
    69be:	19dd      	adds	r5, r3, r7
    69c0:	439d      	bics	r5, r3
    69c2:	4235      	tst	r5, r6
    69c4:	d1e2      	bne.n	698c <strncpy+0x10>
    69c6:	3404      	adds	r4, #4
    69c8:	1f25      	subs	r5, r4, #4
    69ca:	3a04      	subs	r2, #4
    69cc:	3104      	adds	r1, #4
    69ce:	602b      	str	r3, [r5, #0]
    69d0:	2a03      	cmp	r2, #3
    69d2:	d8f2      	bhi.n	69ba <strncpy+0x3e>
    69d4:	e7da      	b.n	698c <strncpy+0x10>
    69d6:	189c      	adds	r4, r3, r2
    69d8:	2100      	movs	r1, #0
    69da:	2a00      	cmp	r2, #0
    69dc:	d0eb      	beq.n	69b6 <strncpy+0x3a>
    69de:	7019      	strb	r1, [r3, #0]
    69e0:	3301      	adds	r3, #1
    69e2:	42a3      	cmp	r3, r4
    69e4:	d1fb      	bne.n	69de <strncpy+0x62>
    69e6:	e7e6      	b.n	69b6 <strncpy+0x3a>
    69e8:	80808080 	.word	0x80808080
    69ec:	fefefeff 	.word	0xfefefeff

000069f0 <register_fini>:
    69f0:	b508      	push	{r3, lr}
    69f2:	4b03      	ldr	r3, [pc, #12]	; (6a00 <register_fini+0x10>)
    69f4:	2b00      	cmp	r3, #0
    69f6:	d002      	beq.n	69fe <register_fini+0xe>
    69f8:	4802      	ldr	r0, [pc, #8]	; (6a04 <register_fini+0x14>)
    69fa:	f000 f805 	bl	6a08 <atexit>
    69fe:	bd08      	pop	{r3, pc}
    6a00:	00000000 	.word	0x00000000
    6a04:	00006a19 	.word	0x00006a19

00006a08 <atexit>:
    6a08:	b508      	push	{r3, lr}
    6a0a:	1c01      	adds	r1, r0, #0
    6a0c:	2200      	movs	r2, #0
    6a0e:	2000      	movs	r0, #0
    6a10:	2300      	movs	r3, #0
    6a12:	f000 f819 	bl	6a48 <__register_exitproc>
    6a16:	bd08      	pop	{r3, pc}

00006a18 <__libc_fini_array>:
    6a18:	b538      	push	{r3, r4, r5, lr}
    6a1a:	4b09      	ldr	r3, [pc, #36]	; (6a40 <__libc_fini_array+0x28>)
    6a1c:	4d09      	ldr	r5, [pc, #36]	; (6a44 <__libc_fini_array+0x2c>)
    6a1e:	1aed      	subs	r5, r5, r3
    6a20:	10ad      	asrs	r5, r5, #2
    6a22:	d009      	beq.n	6a38 <__libc_fini_array+0x20>
    6a24:	3d01      	subs	r5, #1
    6a26:	00ac      	lsls	r4, r5, #2
    6a28:	18e4      	adds	r4, r4, r3
    6a2a:	e000      	b.n	6a2e <__libc_fini_array+0x16>
    6a2c:	3d01      	subs	r5, #1
    6a2e:	6823      	ldr	r3, [r4, #0]
    6a30:	4798      	blx	r3
    6a32:	3c04      	subs	r4, #4
    6a34:	2d00      	cmp	r5, #0
    6a36:	d1f9      	bne.n	6a2c <__libc_fini_array+0x14>
    6a38:	f001 f9de 	bl	7df8 <_fini>
    6a3c:	bd38      	pop	{r3, r4, r5, pc}
    6a3e:	46c0      	nop			; (mov r8, r8)
    6a40:	00007e04 	.word	0x00007e04
    6a44:	00007e08 	.word	0x00007e08

00006a48 <__register_exitproc>:
    6a48:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a4a:	464f      	mov	r7, r9
    6a4c:	4646      	mov	r6, r8
    6a4e:	b4c0      	push	{r6, r7}
    6a50:	4698      	mov	r8, r3
    6a52:	4b2b      	ldr	r3, [pc, #172]	; (6b00 <__register_exitproc+0xb8>)
    6a54:	25a4      	movs	r5, #164	; 0xa4
    6a56:	681b      	ldr	r3, [r3, #0]
    6a58:	006d      	lsls	r5, r5, #1
    6a5a:	595c      	ldr	r4, [r3, r5]
    6a5c:	b083      	sub	sp, #12
    6a5e:	1c06      	adds	r6, r0, #0
    6a60:	1c0f      	adds	r7, r1, #0
    6a62:	4691      	mov	r9, r2
    6a64:	9301      	str	r3, [sp, #4]
    6a66:	2c00      	cmp	r4, #0
    6a68:	d044      	beq.n	6af4 <__register_exitproc+0xac>
    6a6a:	6865      	ldr	r5, [r4, #4]
    6a6c:	2d1f      	cmp	r5, #31
    6a6e:	dd1a      	ble.n	6aa6 <__register_exitproc+0x5e>
    6a70:	4b24      	ldr	r3, [pc, #144]	; (6b04 <__register_exitproc+0xbc>)
    6a72:	2b00      	cmp	r3, #0
    6a74:	d102      	bne.n	6a7c <__register_exitproc+0x34>
    6a76:	2001      	movs	r0, #1
    6a78:	4240      	negs	r0, r0
    6a7a:	e01c      	b.n	6ab6 <__register_exitproc+0x6e>
    6a7c:	20c8      	movs	r0, #200	; 0xc8
    6a7e:	0040      	lsls	r0, r0, #1
    6a80:	e000      	b.n	6a84 <__register_exitproc+0x3c>
    6a82:	bf00      	nop
    6a84:	1e04      	subs	r4, r0, #0
    6a86:	d0f6      	beq.n	6a76 <__register_exitproc+0x2e>
    6a88:	2500      	movs	r5, #0
    6a8a:	6045      	str	r5, [r0, #4]
    6a8c:	23a4      	movs	r3, #164	; 0xa4
    6a8e:	9801      	ldr	r0, [sp, #4]
    6a90:	005b      	lsls	r3, r3, #1
    6a92:	58c0      	ldr	r0, [r0, r3]
    6a94:	9901      	ldr	r1, [sp, #4]
    6a96:	6020      	str	r0, [r4, #0]
    6a98:	50cc      	str	r4, [r1, r3]
    6a9a:	23c4      	movs	r3, #196	; 0xc4
    6a9c:	005b      	lsls	r3, r3, #1
    6a9e:	50e5      	str	r5, [r4, r3]
    6aa0:	23c6      	movs	r3, #198	; 0xc6
    6aa2:	005b      	lsls	r3, r3, #1
    6aa4:	50e5      	str	r5, [r4, r3]
    6aa6:	2e00      	cmp	r6, #0
    6aa8:	d10a      	bne.n	6ac0 <__register_exitproc+0x78>
    6aaa:	1c6b      	adds	r3, r5, #1
    6aac:	3502      	adds	r5, #2
    6aae:	00ad      	lsls	r5, r5, #2
    6ab0:	6063      	str	r3, [r4, #4]
    6ab2:	2000      	movs	r0, #0
    6ab4:	512f      	str	r7, [r5, r4]
    6ab6:	b003      	add	sp, #12
    6ab8:	bc0c      	pop	{r2, r3}
    6aba:	4690      	mov	r8, r2
    6abc:	4699      	mov	r9, r3
    6abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ac0:	00ab      	lsls	r3, r5, #2
    6ac2:	18e3      	adds	r3, r4, r3
    6ac4:	2288      	movs	r2, #136	; 0x88
    6ac6:	4648      	mov	r0, r9
    6ac8:	5098      	str	r0, [r3, r2]
    6aca:	20c4      	movs	r0, #196	; 0xc4
    6acc:	0040      	lsls	r0, r0, #1
    6ace:	1822      	adds	r2, r4, r0
    6ad0:	6810      	ldr	r0, [r2, #0]
    6ad2:	2101      	movs	r1, #1
    6ad4:	40a9      	lsls	r1, r5
    6ad6:	4308      	orrs	r0, r1
    6ad8:	6010      	str	r0, [r2, #0]
    6ada:	2284      	movs	r2, #132	; 0x84
    6adc:	0052      	lsls	r2, r2, #1
    6ade:	4640      	mov	r0, r8
    6ae0:	5098      	str	r0, [r3, r2]
    6ae2:	2e02      	cmp	r6, #2
    6ae4:	d1e1      	bne.n	6aaa <__register_exitproc+0x62>
    6ae6:	22c6      	movs	r2, #198	; 0xc6
    6ae8:	0052      	lsls	r2, r2, #1
    6aea:	18a3      	adds	r3, r4, r2
    6aec:	6818      	ldr	r0, [r3, #0]
    6aee:	4301      	orrs	r1, r0
    6af0:	6019      	str	r1, [r3, #0]
    6af2:	e7da      	b.n	6aaa <__register_exitproc+0x62>
    6af4:	1c1c      	adds	r4, r3, #0
    6af6:	344d      	adds	r4, #77	; 0x4d
    6af8:	34ff      	adds	r4, #255	; 0xff
    6afa:	515c      	str	r4, [r3, r5]
    6afc:	e7b5      	b.n	6a6a <__register_exitproc+0x22>
    6afe:	46c0      	nop			; (mov r8, r8)
    6b00:	00007de0 	.word	0x00007de0
    6b04:	00000000 	.word	0x00000000
    6b08:	676e6950 	.word	0x676e6950
    6b0c:	214f5420 	.word	0x214f5420
    6b10:	00000000 	.word	0x00000000
    6b14:	75626544 	.word	0x75626544
    6b18:	00000067 	.word	0x00000067
    6b1c:	41447249 	.word	0x41447249
    6b20:	00000000 	.word	0x00000000
    6b24:	676e6950 	.word	0x676e6950
    6b28:	00000000 	.word	0x00000000
    6b2c:	42000800 	.word	0x42000800
    6b30:	42000c00 	.word	0x42000c00
    6b34:	42001000 	.word	0x42001000
    6b38:	42001400 	.word	0x42001400
    6b3c:	6c656959 	.word	0x6c656959
    6b40:	53492064 	.word	0x53492064
    6b44:	00002152 	.word	0x00002152
    6b48:	59206f4e 	.word	0x59206f4e
    6b4c:	646c6569 	.word	0x646c6569
    6b50:	68432021 	.word	0x68432021
    6b54:	65676e61 	.word	0x65676e61
    6b58:	6f742064 	.word	0x6f742064
    6b5c:	4e495020 	.word	0x4e495020
    6b60:	00000047 	.word	0x00000047
    6b64:	6e6f7257 	.word	0x6e6f7257
    6b68:	61442067 	.word	0x61442067
    6b6c:	00216174 	.word	0x00216174
    6b70:	0c0b0a09 	.word	0x0c0b0a09
    6b74:	43415254 	.word	0x43415254
    6b78:	53415f45 	.word	0x53415f45
    6b7c:	54524553 	.word	0x54524553
    6b80:	5476203a 	.word	0x5476203a
    6b84:	65636172 	.word	0x65636172
    6b88:	6f727245 	.word	0x6f727245
    6b8c:	6d203a72 	.word	0x6d203a72
    6b90:	3d206773 	.word	0x3d206773
    6b94:	554e203d 	.word	0x554e203d
    6b98:	00004c4c 	.word	0x00004c4c
    6b9c:	43415254 	.word	0x43415254
    6ba0:	53415f45 	.word	0x53415f45
    6ba4:	54524553 	.word	0x54524553
    6ba8:	5476203a 	.word	0x5476203a
    6bac:	65636172 	.word	0x65636172
    6bb0:	6f727245 	.word	0x6f727245
    6bb4:	52203a72 	.word	0x52203a72
    6bb8:	726f6365 	.word	0x726f6365
    6bbc:	44726564 	.word	0x44726564
    6bc0:	50617461 	.word	0x50617461
    6bc4:	3d207274 	.word	0x3d207274
    6bc8:	554e203d 	.word	0x554e203d
    6bcc:	00004c4c 	.word	0x00004c4c
    6bd0:	63617254 	.word	0x63617254
    6bd4:	65522065 	.word	0x65522065
    6bd8:	64726f63 	.word	0x64726f63
    6bdc:	44207265 	.word	0x44207265
    6be0:	006f6d65 	.word	0x006f6d65
    6be4:	63617254 	.word	0x63617254
    6be8:	74732065 	.word	0x74732065
    6bec:	20747261 	.word	0x20747261
    6bf0:	6b72616d 	.word	0x6b72616d
    6bf4:	20737265 	.word	0x20737265
    6bf8:	65726c61 	.word	0x65726c61
    6bfc:	20796461 	.word	0x20796461
    6c00:	74696e69 	.word	0x74696e69
    6c04:	696c6169 	.word	0x696c6169
    6c08:	2164657a 	.word	0x2164657a
    6c0c:	00000000 	.word	0x00000000
    6c10:	65747441 	.word	0x65747441
    6c14:	2074706d 	.word	0x2074706d
    6c18:	69206f74 	.word	0x69206f74
    6c1c:	7865646e 	.word	0x7865646e
    6c20:	74756f20 	.word	0x74756f20
    6c24:	65646973 	.word	0x65646973
    6c28:	65766520 	.word	0x65766520
    6c2c:	6220746e 	.word	0x6220746e
    6c30:	65666675 	.word	0x65666675
    6c34:	00002172 	.word	0x00002172
    6c38:	43415254 	.word	0x43415254
    6c3c:	53415f45 	.word	0x53415f45
    6c40:	54524553 	.word	0x54524553
    6c44:	6975203a 	.word	0x6975203a
    6c48:	65646e49 	.word	0x65646e49
    6c4c:	4f664f78 	.word	0x4f664f78
    6c50:	63656a62 	.word	0x63656a62
    6c54:	49203a74 	.word	0x49203a74
    6c58:	6c61766e 	.word	0x6c61766e
    6c5c:	76206469 	.word	0x76206469
    6c60:	65756c61 	.word	0x65756c61
    6c64:	726f6620 	.word	0x726f6620
    6c68:	6a626f20 	.word	0x6a626f20
    6c6c:	63746365 	.word	0x63746365
    6c70:	7373616c 	.word	0x7373616c
    6c74:	00000000 	.word	0x00000000
    6c78:	43415254 	.word	0x43415254
    6c7c:	53415f45 	.word	0x53415f45
    6c80:	54524553 	.word	0x54524553
    6c84:	6975203a 	.word	0x6975203a
    6c88:	65646e49 	.word	0x65646e49
    6c8c:	4f664f78 	.word	0x4f664f78
    6c90:	63656a62 	.word	0x63656a62
    6c94:	49203a74 	.word	0x49203a74
    6c98:	6c61766e 	.word	0x6c61766e
    6c9c:	76206469 	.word	0x76206469
    6ca0:	65756c61 	.word	0x65756c61
    6ca4:	726f6620 	.word	0x726f6620
    6ca8:	6a626f20 	.word	0x6a626f20
    6cac:	68746365 	.word	0x68746365
    6cb0:	6c646e61 	.word	0x6c646e61
    6cb4:	00000065 	.word	0x00000065
    6cb8:	43415254 	.word	0x43415254
    6cbc:	53415f45 	.word	0x53415f45
    6cc0:	54524553 	.word	0x54524553
    6cc4:	5478203a 	.word	0x5478203a
    6cc8:	65636172 	.word	0x65636172
    6ccc:	4f746547 	.word	0x4f746547
    6cd0:	63656a62 	.word	0x63656a62
    6cd4:	6e614874 	.word	0x6e614874
    6cd8:	3a656c64 	.word	0x3a656c64
    6cdc:	766e4920 	.word	0x766e4920
    6ce0:	64696c61 	.word	0x64696c61
    6ce4:	6c617620 	.word	0x6c617620
    6ce8:	66206575 	.word	0x66206575
    6cec:	6f20726f 	.word	0x6f20726f
    6cf0:	63656a62 	.word	0x63656a62
    6cf4:	616c6374 	.word	0x616c6374
    6cf8:	00007373 	.word	0x00007373
    6cfc:	43415254 	.word	0x43415254
    6d00:	53415f45 	.word	0x53415f45
    6d04:	54524553 	.word	0x54524553
    6d08:	5476203a 	.word	0x5476203a
    6d0c:	65636172 	.word	0x65636172
    6d10:	65657246 	.word	0x65657246
    6d14:	656a624f 	.word	0x656a624f
    6d18:	61487463 	.word	0x61487463
    6d1c:	656c646e 	.word	0x656c646e
    6d20:	6e49203a 	.word	0x6e49203a
    6d24:	696c6176 	.word	0x696c6176
    6d28:	61762064 	.word	0x61762064
    6d2c:	2065756c 	.word	0x2065756c
    6d30:	20726f66 	.word	0x20726f66
    6d34:	656a626f 	.word	0x656a626f
    6d38:	6c637463 	.word	0x6c637463
    6d3c:	00737361 	.word	0x00737361
    6d40:	43415254 	.word	0x43415254
    6d44:	53415f45 	.word	0x53415f45
    6d48:	54524553 	.word	0x54524553
    6d4c:	5476203a 	.word	0x5476203a
    6d50:	65636172 	.word	0x65636172
    6d54:	65657246 	.word	0x65657246
    6d58:	656a624f 	.word	0x656a624f
    6d5c:	61487463 	.word	0x61487463
    6d60:	656c646e 	.word	0x656c646e
    6d64:	6e49203a 	.word	0x6e49203a
    6d68:	696c6176 	.word	0x696c6176
    6d6c:	61762064 	.word	0x61762064
    6d70:	2065756c 	.word	0x2065756c
    6d74:	20726f66 	.word	0x20726f66
    6d78:	646e6168 	.word	0x646e6168
    6d7c:	0000656c 	.word	0x0000656c
    6d80:	65747441 	.word	0x65747441
    6d84:	2074706d 	.word	0x2074706d
    6d88:	66206f74 	.word	0x66206f74
    6d8c:	20656572 	.word	0x20656572
    6d90:	65726f6d 	.word	0x65726f6d
    6d94:	6e616820 	.word	0x6e616820
    6d98:	73656c64 	.word	0x73656c64
    6d9c:	61687420 	.word	0x61687420
    6da0:	6c61206e 	.word	0x6c61206e
    6da4:	61636f6c 	.word	0x61636f6c
    6da8:	21646574 	.word	0x21646574
    6dac:	00000000 	.word	0x00000000
    6db0:	43415254 	.word	0x43415254
    6db4:	53415f45 	.word	0x53415f45
    6db8:	54524553 	.word	0x54524553
    6dbc:	5476203a 	.word	0x5476203a
    6dc0:	65636172 	.word	0x65636172
    6dc4:	4f746553 	.word	0x4f746553
    6dc8:	63656a62 	.word	0x63656a62
    6dcc:	6d614e74 	.word	0x6d614e74
    6dd0:	6e203a65 	.word	0x6e203a65
    6dd4:	20656d61 	.word	0x20656d61
    6dd8:	4e203d3d 	.word	0x4e203d3d
    6ddc:	004c4c55 	.word	0x004c4c55
    6de0:	656c6c49 	.word	0x656c6c49
    6de4:	206c6167 	.word	0x206c6167
    6de8:	656a626f 	.word	0x656a626f
    6dec:	63207463 	.word	0x63207463
    6df0:	7373616c 	.word	0x7373616c
    6df4:	206e6920 	.word	0x206e6920
    6df8:	61725476 	.word	0x61725476
    6dfc:	65536563 	.word	0x65536563
    6e00:	6a624f74 	.word	0x6a624f74
    6e04:	4e746365 	.word	0x4e746365
    6e08:	00656d61 	.word	0x00656d61
    6e0c:	656c6c49 	.word	0x656c6c49
    6e10:	206c6167 	.word	0x206c6167
    6e14:	646e6168 	.word	0x646e6168
    6e18:	2820656c 	.word	0x2820656c
    6e1c:	69202930 	.word	0x69202930
    6e20:	5476206e 	.word	0x5476206e
    6e24:	65636172 	.word	0x65636172
    6e28:	4f746553 	.word	0x4f746553
    6e2c:	63656a62 	.word	0x63656a62
    6e30:	6d614e74 	.word	0x6d614e74
    6e34:	00002e65 	.word	0x00002e65
    6e38:	43415254 	.word	0x43415254
    6e3c:	53415f45 	.word	0x53415f45
    6e40:	54524553 	.word	0x54524553
    6e44:	7270203a 	.word	0x7270203a
    6e48:	65684376 	.word	0x65684376
    6e4c:	61446b63 	.word	0x61446b63
    6e50:	6f546174 	.word	0x6f546174
    6e54:	764f6542 	.word	0x764f6542
    6e58:	72777265 	.word	0x72777265
    6e5c:	65747469 	.word	0x65747469
    6e60:	726f466e 	.word	0x726f466e
    6e64:	746c754d 	.word	0x746c754d
    6e68:	746e4569 	.word	0x746e4569
    6e6c:	76457972 	.word	0x76457972
    6e70:	73746e65 	.word	0x73746e65
    6e74:	6f6e203a 	.word	0x6f6e203a
    6e78:	746e4566 	.word	0x746e4566
    6e7c:	73656972 	.word	0x73656972
    6e80:	68436f54 	.word	0x68436f54
    6e84:	206b6365 	.word	0x206b6365
    6e88:	30203d3d 	.word	0x30203d3d
    6e8c:	00000000 	.word	0x00000000
    6e90:	43415254 	.word	0x43415254
    6e94:	53415f45 	.word	0x53415f45
    6e98:	54524553 	.word	0x54524553
    6e9c:	7270203a 	.word	0x7270203a
    6ea0:	61725476 	.word	0x61725476
    6ea4:	65476563 	.word	0x65476563
    6ea8:	53544474 	.word	0x53544474
    6eac:	6e49203a 	.word	0x6e49203a
    6eb0:	696c6176 	.word	0x696c6176
    6eb4:	61762064 	.word	0x61762064
    6eb8:	2065756c 	.word	0x2065756c
    6ebc:	20726f66 	.word	0x20726f66
    6ec0:	61726170 	.word	0x61726170
    6ec4:	616d5f6d 	.word	0x616d5f6d
    6ec8:	53544478 	.word	0x53544478
    6ecc:	00000000 	.word	0x00000000
    6ed0:	20646142 	.word	0x20646142
    6ed4:	61726170 	.word	0x61726170
    6ed8:	616d5f6d 	.word	0x616d5f6d
    6edc:	53544478 	.word	0x53544478
    6ee0:	206e6920 	.word	0x206e6920
    6ee4:	54767270 	.word	0x54767270
    6ee8:	65636172 	.word	0x65636172
    6eec:	44746547 	.word	0x44746547
    6ef0:	00005354 	.word	0x00005354
    6ef4:	43415254 	.word	0x43415254
    6ef8:	53415f45 	.word	0x53415f45
    6efc:	54524553 	.word	0x54524553
    6f00:	7270203a 	.word	0x7270203a
    6f04:	61725476 	.word	0x61725476
    6f08:	6f4c6563 	.word	0x6f4c6563
    6f0c:	70756b6f 	.word	0x70756b6f
    6f10:	626d7953 	.word	0x626d7953
    6f14:	61546c6f 	.word	0x61546c6f
    6f18:	45656c62 	.word	0x45656c62
    6f1c:	7972746e 	.word	0x7972746e
    6f20:	616e203a 	.word	0x616e203a
    6f24:	3d20656d 	.word	0x3d20656d
    6f28:	554e203d 	.word	0x554e203d
    6f2c:	00004c4c 	.word	0x00004c4c
    6f30:	43415254 	.word	0x43415254
    6f34:	53415f45 	.word	0x53415f45
    6f38:	54524553 	.word	0x54524553
    6f3c:	7270203a 	.word	0x7270203a
    6f40:	61725476 	.word	0x61725476
    6f44:	6f4c6563 	.word	0x6f4c6563
    6f48:	70756b6f 	.word	0x70756b6f
    6f4c:	626d7953 	.word	0x626d7953
    6f50:	61546c6f 	.word	0x61546c6f
    6f54:	45656c62 	.word	0x45656c62
    6f58:	7972746e 	.word	0x7972746e
    6f5c:	656c203a 	.word	0x656c203a
    6f60:	3d3d206e 	.word	0x3d3d206e
    6f64:	00003020 	.word	0x00003020
    6f68:	43415254 	.word	0x43415254
    6f6c:	53415f45 	.word	0x53415f45
    6f70:	54524553 	.word	0x54524553
    6f74:	7270203a 	.word	0x7270203a
    6f78:	61725476 	.word	0x61725476
    6f7c:	72436563 	.word	0x72436563
    6f80:	65746165 	.word	0x65746165
    6f84:	626d7953 	.word	0x626d7953
    6f88:	61546c6f 	.word	0x61546c6f
    6f8c:	45656c62 	.word	0x45656c62
    6f90:	7972746e 	.word	0x7972746e
    6f94:	616e203a 	.word	0x616e203a
    6f98:	3d20656d 	.word	0x3d20656d
    6f9c:	554e203d 	.word	0x554e203d
    6fa0:	00004c4c 	.word	0x00004c4c
    6fa4:	43415254 	.word	0x43415254
    6fa8:	53415f45 	.word	0x53415f45
    6fac:	54524553 	.word	0x54524553
    6fb0:	7270203a 	.word	0x7270203a
    6fb4:	61725476 	.word	0x61725476
    6fb8:	72436563 	.word	0x72436563
    6fbc:	65746165 	.word	0x65746165
    6fc0:	626d7953 	.word	0x626d7953
    6fc4:	61546c6f 	.word	0x61546c6f
    6fc8:	45656c62 	.word	0x45656c62
    6fcc:	7972746e 	.word	0x7972746e
    6fd0:	656c203a 	.word	0x656c203a
    6fd4:	3d3d206e 	.word	0x3d3d206e
    6fd8:	00003020 	.word	0x00003020
    6fdc:	626d7953 	.word	0x626d7953
    6fe0:	74206c6f 	.word	0x74206c6f
    6fe4:	656c6261 	.word	0x656c6261
    6fe8:	6c756620 	.word	0x6c756620
    6fec:	49202e6c 	.word	0x49202e6c
    6ff0:	6572636e 	.word	0x6572636e
    6ff4:	20657361 	.word	0x20657361
    6ff8:	424d5953 	.word	0x424d5953
    6ffc:	545f4c4f 	.word	0x545f4c4f
    7000:	454c4241 	.word	0x454c4241
    7004:	5a49535f 	.word	0x5a49535f
    7008:	6e692045 	.word	0x6e692045
    700c:	63727420 	.word	0x63727420
    7010:	666e6f43 	.word	0x666e6f43
    7014:	682e6769 	.word	0x682e6769
    7018:	00000000 	.word	0x00000000
    701c:	43415254 	.word	0x43415254
    7020:	53415f45 	.word	0x53415f45
    7024:	54524553 	.word	0x54524553
    7028:	7270203a 	.word	0x7270203a
    702c:	61725476 	.word	0x61725476
    7030:	65476563 	.word	0x65476563
    7034:	65684374 	.word	0x65684374
    7038:	75736b63 	.word	0x75736b63
    703c:	70203a6d 	.word	0x70203a6d
    7040:	656d616e 	.word	0x656d616e
    7044:	203d3d20 	.word	0x203d3d20
    7048:	4c4c554e 	.word	0x4c4c554e
    704c:	00000000 	.word	0x00000000
    7050:	43415254 	.word	0x43415254
    7054:	53415f45 	.word	0x53415f45
    7058:	54524553 	.word	0x54524553
    705c:	7270203a 	.word	0x7270203a
    7060:	61725476 	.word	0x61725476
    7064:	65476563 	.word	0x65476563
    7068:	65684374 	.word	0x65684374
    706c:	75736b63 	.word	0x75736b63
    7070:	70203a6d 	.word	0x70203a6d
    7074:	20637263 	.word	0x20637263
    7078:	4e203d3d 	.word	0x4e203d3d
    707c:	004c4c55 	.word	0x004c4c55
    7080:	43415254 	.word	0x43415254
    7084:	53415f45 	.word	0x53415f45
    7088:	54524553 	.word	0x54524553
    708c:	7270203a 	.word	0x7270203a
    7090:	61725476 	.word	0x61725476
    7094:	65476563 	.word	0x65476563
    7098:	65684374 	.word	0x65684374
    709c:	75736b63 	.word	0x75736b63
    70a0:	70203a6d 	.word	0x70203a6d
    70a4:	676e656c 	.word	0x676e656c
    70a8:	3d206874 	.word	0x3d206874
    70ac:	554e203d 	.word	0x554e203d
    70b0:	00004c4c 	.word	0x00004c4c
    70b4:	43415254 	.word	0x43415254
    70b8:	53415f45 	.word	0x53415f45
    70bc:	54524553 	.word	0x54524553
    70c0:	7270203a 	.word	0x7270203a
    70c4:	61725476 	.word	0x61725476
    70c8:	704f6563 	.word	0x704f6563
    70cc:	79536e65 	.word	0x79536e65
    70d0:	6c6f626d 	.word	0x6c6f626d
    70d4:	616e203a 	.word	0x616e203a
    70d8:	3d20656d 	.word	0x3d20656d
    70dc:	554e203d 	.word	0x554e203d
    70e0:	00004c4c 	.word	0x00004c4c
    70e4:	43415254 	.word	0x43415254
    70e8:	53415f45 	.word	0x53415f45
    70ec:	54524553 	.word	0x54524553
    70f0:	5476203a 	.word	0x5476203a
    70f4:	65636172 	.word	0x65636172
    70f8:	726f7453 	.word	0x726f7453
    70fc:	73615465 	.word	0x73615465
    7100:	6165526b 	.word	0x6165526b
    7104:	203a7964 	.word	0x203a7964
    7108:	61766e49 	.word	0x61766e49
    710c:	2064696c 	.word	0x2064696c
    7110:	756c6176 	.word	0x756c6176
    7114:	6f662065 	.word	0x6f662065
    7118:	61682072 	.word	0x61682072
    711c:	656c646e 	.word	0x656c646e
    7120:	00000000 	.word	0x00000000
    7124:	6f636552 	.word	0x6f636552
    7128:	72656472 	.word	0x72656472
    712c:	73756220 	.word	0x73756220
    7130:	202d2079 	.word	0x202d2079
    7134:	68676968 	.word	0x68676968
    7138:	69727020 	.word	0x69727020
    713c:	7469726f 	.word	0x7469726f
    7140:	53492079 	.word	0x53492079
    7144:	73752052 	.word	0x73752052
    7148:	20676e69 	.word	0x20676e69
    714c:	63737973 	.word	0x63737973
    7150:	3f6c6c61 	.word	0x3f6c6c61
    7154:	29312820 	.word	0x29312820
    7158:	00000000 	.word	0x00000000
    715c:	43415254 	.word	0x43415254
    7160:	53415f45 	.word	0x53415f45
    7164:	54524553 	.word	0x54524553
    7168:	5476203a 	.word	0x5476203a
    716c:	65636172 	.word	0x65636172
    7170:	726f7453 	.word	0x726f7453
    7174:	776f4c65 	.word	0x776f4c65
    7178:	65776f50 	.word	0x65776f50
    717c:	49203a72 	.word	0x49203a72
    7180:	6c61766e 	.word	0x6c61766e
    7184:	66206469 	.word	0x66206469
    7188:	2067616c 	.word	0x2067616c
    718c:	756c6176 	.word	0x756c6176
    7190:	00000065 	.word	0x00000065
    7194:	43415254 	.word	0x43415254
    7198:	53415f45 	.word	0x53415f45
    719c:	54524553 	.word	0x54524553
    71a0:	5476203a 	.word	0x5476203a
    71a4:	65636172 	.word	0x65636172
    71a8:	726f7453 	.word	0x726f7453
    71ac:	72654b65 	.word	0x72654b65
    71b0:	436c656e 	.word	0x436c656e
    71b4:	3a6c6c61 	.word	0x3a6c6c61
    71b8:	6f636520 	.word	0x6f636520
    71bc:	3e206564 	.word	0x3e206564
    71c0:	7830203d 	.word	0x7830203d
    71c4:	00004646 	.word	0x00004646
    71c8:	43415254 	.word	0x43415254
    71cc:	53415f45 	.word	0x53415f45
    71d0:	54524553 	.word	0x54524553
    71d4:	5476203a 	.word	0x5476203a
    71d8:	65636172 	.word	0x65636172
    71dc:	726f7453 	.word	0x726f7453
    71e0:	72654b65 	.word	0x72654b65
    71e4:	436c656e 	.word	0x436c656e
    71e8:	3a6c6c61 	.word	0x3a6c6c61
    71ec:	6a626f20 	.word	0x6a626f20
    71f0:	43746365 	.word	0x43746365
    71f4:	7373616c 	.word	0x7373616c
    71f8:	203d3e20 	.word	0x203d3e20
    71fc:	43415254 	.word	0x43415254
    7200:	434e5f45 	.word	0x434e5f45
    7204:	5353414c 	.word	0x5353414c
    7208:	00005345 	.word	0x00005345
    720c:	43415254 	.word	0x43415254
    7210:	53415f45 	.word	0x53415f45
    7214:	54524553 	.word	0x54524553
    7218:	5476203a 	.word	0x5476203a
    721c:	65636172 	.word	0x65636172
    7220:	726f7453 	.word	0x726f7453
    7224:	72654b65 	.word	0x72654b65
    7228:	436c656e 	.word	0x436c656e
    722c:	3a6c6c61 	.word	0x3a6c6c61
    7230:	766e4920 	.word	0x766e4920
    7234:	64696c61 	.word	0x64696c61
    7238:	6c617620 	.word	0x6c617620
    723c:	66206575 	.word	0x66206575
    7240:	6f20726f 	.word	0x6f20726f
    7244:	63656a62 	.word	0x63656a62
    7248:	6d754e74 	.word	0x6d754e74
    724c:	00726562 	.word	0x00726562
    7250:	6f636552 	.word	0x6f636552
    7254:	72656472 	.word	0x72656472
    7258:	73756220 	.word	0x73756220
    725c:	202d2079 	.word	0x202d2079
    7260:	68676968 	.word	0x68676968
    7264:	69727020 	.word	0x69727020
    7268:	7469726f 	.word	0x7469726f
    726c:	53492079 	.word	0x53492079
    7270:	73752052 	.word	0x73752052
    7274:	20676e69 	.word	0x20676e69
    7278:	63737973 	.word	0x63737973
    727c:	3f6c6c61 	.word	0x3f6c6c61
    7280:	29322820 	.word	0x29322820
    7284:	00000000 	.word	0x00000000
    7288:	43415254 	.word	0x43415254
    728c:	53415f45 	.word	0x53415f45
    7290:	54524553 	.word	0x54524553
    7294:	5476203a 	.word	0x5476203a
    7298:	65636172 	.word	0x65636172
    729c:	726f7453 	.word	0x726f7453
    72a0:	72654b65 	.word	0x72654b65
    72a4:	436c656e 	.word	0x436c656e
    72a8:	3a6c6c61 	.word	0x3a6c6c61
    72ac:	74766520 	.word	0x74766520
    72b0:	65646f63 	.word	0x65646f63
    72b4:	203d3e20 	.word	0x203d3e20
    72b8:	46467830 	.word	0x46467830
    72bc:	00000000 	.word	0x00000000
    72c0:	43415254 	.word	0x43415254
    72c4:	53415f45 	.word	0x53415f45
    72c8:	54524553 	.word	0x54524553
    72cc:	5476203a 	.word	0x5476203a
    72d0:	65636172 	.word	0x65636172
    72d4:	726f7453 	.word	0x726f7453
    72d8:	72654b65 	.word	0x72654b65
    72dc:	436c656e 	.word	0x436c656e
    72e0:	576c6c61 	.word	0x576c6c61
    72e4:	50687469 	.word	0x50687469
    72e8:	6d617261 	.word	0x6d617261
    72ec:	626f203a 	.word	0x626f203a
    72f0:	7463656a 	.word	0x7463656a
    72f4:	73616c43 	.word	0x73616c43
    72f8:	3d3e2073 	.word	0x3d3e2073
    72fc:	41525420 	.word	0x41525420
    7300:	4e5f4543 	.word	0x4e5f4543
    7304:	53414c43 	.word	0x53414c43
    7308:	00534553 	.word	0x00534553
    730c:	43415254 	.word	0x43415254
    7310:	53415f45 	.word	0x53415f45
    7314:	54524553 	.word	0x54524553
    7318:	5476203a 	.word	0x5476203a
    731c:	65636172 	.word	0x65636172
    7320:	726f7453 	.word	0x726f7453
    7324:	72654b65 	.word	0x72654b65
    7328:	436c656e 	.word	0x436c656e
    732c:	576c6c61 	.word	0x576c6c61
    7330:	50687469 	.word	0x50687469
    7334:	6d617261 	.word	0x6d617261
    7338:	6e49203a 	.word	0x6e49203a
    733c:	696c6176 	.word	0x696c6176
    7340:	61762064 	.word	0x61762064
    7344:	2065756c 	.word	0x2065756c
    7348:	20726f66 	.word	0x20726f66
    734c:	656a626f 	.word	0x656a626f
    7350:	754e7463 	.word	0x754e7463
    7354:	7265626d 	.word	0x7265626d
    7358:	00000000 	.word	0x00000000
    735c:	6f636552 	.word	0x6f636552
    7360:	72656472 	.word	0x72656472
    7364:	73756220 	.word	0x73756220
    7368:	202d2079 	.word	0x202d2079
    736c:	68676968 	.word	0x68676968
    7370:	69727020 	.word	0x69727020
    7374:	7469726f 	.word	0x7469726f
    7378:	53492079 	.word	0x53492079
    737c:	73752052 	.word	0x73752052
    7380:	20676e69 	.word	0x20676e69
    7384:	63737973 	.word	0x63737973
    7388:	3f6c6c61 	.word	0x3f6c6c61
    738c:	29332820 	.word	0x29332820
    7390:	00000000 	.word	0x00000000
    7394:	43415254 	.word	0x43415254
    7398:	53415f45 	.word	0x53415f45
    739c:	54524553 	.word	0x54524553
    73a0:	5476203a 	.word	0x5476203a
    73a4:	65636172 	.word	0x65636172
    73a8:	726f7453 	.word	0x726f7453
    73ac:	72654b65 	.word	0x72654b65
    73b0:	436c656e 	.word	0x436c656e
    73b4:	576c6c61 	.word	0x576c6c61
    73b8:	4e687469 	.word	0x4e687469
    73bc:	72656d75 	.word	0x72656d75
    73c0:	61506369 	.word	0x61506369
    73c4:	4f6d6172 	.word	0x4f6d6172
    73c8:	3a796c6e 	.word	0x3a796c6e
    73cc:	766e4920 	.word	0x766e4920
    73d0:	64696c61 	.word	0x64696c61
    73d4:	6c617620 	.word	0x6c617620
    73d8:	66206575 	.word	0x66206575
    73dc:	6520726f 	.word	0x6520726f
    73e0:	6f637476 	.word	0x6f637476
    73e4:	00006564 	.word	0x00006564
    73e8:	6f636552 	.word	0x6f636552
    73ec:	72656472 	.word	0x72656472
    73f0:	73756220 	.word	0x73756220
    73f4:	202d2079 	.word	0x202d2079
    73f8:	68676968 	.word	0x68676968
    73fc:	69727020 	.word	0x69727020
    7400:	7469726f 	.word	0x7469726f
    7404:	53492079 	.word	0x53492079
    7408:	73752052 	.word	0x73752052
    740c:	20676e69 	.word	0x20676e69
    7410:	63737973 	.word	0x63737973
    7414:	3f6c6c61 	.word	0x3f6c6c61
    7418:	29342820 	.word	0x29342820
    741c:	00000000 	.word	0x00000000
    7420:	43415254 	.word	0x43415254
    7424:	53415f45 	.word	0x53415f45
    7428:	54524553 	.word	0x54524553
    742c:	5476203a 	.word	0x5476203a
    7430:	65636172 	.word	0x65636172
    7434:	726f7453 	.word	0x726f7453
    7438:	6a624f65 	.word	0x6a624f65
    743c:	4e746365 	.word	0x4e746365
    7440:	4f656d61 	.word	0x4f656d61
    7444:	6f6c436e 	.word	0x6f6c436e
    7448:	76456573 	.word	0x76456573
    744c:	3a746e65 	.word	0x3a746e65
    7450:	6a626f20 	.word	0x6a626f20
    7454:	63746365 	.word	0x63746365
    7458:	7373616c 	.word	0x7373616c
    745c:	203d3e20 	.word	0x203d3e20
    7460:	43415254 	.word	0x43415254
    7464:	434e5f45 	.word	0x434e5f45
    7468:	5353414c 	.word	0x5353414c
    746c:	00005345 	.word	0x00005345
    7470:	43415254 	.word	0x43415254
    7474:	53415f45 	.word	0x53415f45
    7478:	54524553 	.word	0x54524553
    747c:	5476203a 	.word	0x5476203a
    7480:	65636172 	.word	0x65636172
    7484:	726f7453 	.word	0x726f7453
    7488:	6a624f65 	.word	0x6a624f65
    748c:	4e746365 	.word	0x4e746365
    7490:	4f656d61 	.word	0x4f656d61
    7494:	6f6c436e 	.word	0x6f6c436e
    7498:	76456573 	.word	0x76456573
    749c:	3a746e65 	.word	0x3a746e65
    74a0:	766e4920 	.word	0x766e4920
    74a4:	64696c61 	.word	0x64696c61
    74a8:	6c617620 	.word	0x6c617620
    74ac:	66206575 	.word	0x66206575
    74b0:	6820726f 	.word	0x6820726f
    74b4:	6c646e61 	.word	0x6c646e61
    74b8:	00000065 	.word	0x00000065
    74bc:	43415254 	.word	0x43415254
    74c0:	53415f45 	.word	0x53415f45
    74c4:	54524553 	.word	0x54524553
    74c8:	5476203a 	.word	0x5476203a
    74cc:	65636172 	.word	0x65636172
    74d0:	726f7453 	.word	0x726f7453
    74d4:	6a624f65 	.word	0x6a624f65
    74d8:	50746365 	.word	0x50746365
    74dc:	65706f72 	.word	0x65706f72
    74e0:	65697472 	.word	0x65697472
    74e4:	436e4f73 	.word	0x436e4f73
    74e8:	65736f6c 	.word	0x65736f6c
    74ec:	6e657645 	.word	0x6e657645
    74f0:	6f203a74 	.word	0x6f203a74
    74f4:	63656a62 	.word	0x63656a62
    74f8:	616c6374 	.word	0x616c6374
    74fc:	3e207373 	.word	0x3e207373
    7500:	5254203d 	.word	0x5254203d
    7504:	5f454341 	.word	0x5f454341
    7508:	414c434e 	.word	0x414c434e
    750c:	53455353 	.word	0x53455353
    7510:	00000000 	.word	0x00000000
    7514:	43415254 	.word	0x43415254
    7518:	53415f45 	.word	0x53415f45
    751c:	54524553 	.word	0x54524553
    7520:	5476203a 	.word	0x5476203a
    7524:	65636172 	.word	0x65636172
    7528:	726f7453 	.word	0x726f7453
    752c:	6a624f65 	.word	0x6a624f65
    7530:	50746365 	.word	0x50746365
    7534:	65706f72 	.word	0x65706f72
    7538:	65697472 	.word	0x65697472
    753c:	436e4f73 	.word	0x436e4f73
    7540:	65736f6c 	.word	0x65736f6c
    7544:	6e657645 	.word	0x6e657645
    7548:	49203a74 	.word	0x49203a74
    754c:	6c61766e 	.word	0x6c61766e
    7550:	76206469 	.word	0x76206469
    7554:	65756c61 	.word	0x65756c61
    7558:	726f6620 	.word	0x726f6620
    755c:	6e616820 	.word	0x6e616820
    7560:	00656c64 	.word	0x00656c64
    7564:	43415254 	.word	0x43415254
    7568:	53415f45 	.word	0x53415f45
    756c:	54524553 	.word	0x54524553
    7570:	5476203a 	.word	0x5476203a
    7574:	65636172 	.word	0x65636172
    7578:	50746553 	.word	0x50746553
    757c:	726f6972 	.word	0x726f6972
    7580:	50797469 	.word	0x50797469
    7584:	65706f72 	.word	0x65706f72
    7588:	3a797472 	.word	0x3a797472
    758c:	6a626f20 	.word	0x6a626f20
    7590:	63746365 	.word	0x63746365
    7594:	7373616c 	.word	0x7373616c
    7598:	203d3e20 	.word	0x203d3e20
    759c:	43415254 	.word	0x43415254
    75a0:	434e5f45 	.word	0x434e5f45
    75a4:	5353414c 	.word	0x5353414c
    75a8:	00005345 	.word	0x00005345
    75ac:	43415254 	.word	0x43415254
    75b0:	53415f45 	.word	0x53415f45
    75b4:	54524553 	.word	0x54524553
    75b8:	5476203a 	.word	0x5476203a
    75bc:	65636172 	.word	0x65636172
    75c0:	50746553 	.word	0x50746553
    75c4:	726f6972 	.word	0x726f6972
    75c8:	50797469 	.word	0x50797469
    75cc:	65706f72 	.word	0x65706f72
    75d0:	3a797472 	.word	0x3a797472
    75d4:	766e4920 	.word	0x766e4920
    75d8:	64696c61 	.word	0x64696c61
    75dc:	6c617620 	.word	0x6c617620
    75e0:	66206575 	.word	0x66206575
    75e4:	6920726f 	.word	0x6920726f
    75e8:	00000064 	.word	0x00000064
    75ec:	43415254 	.word	0x43415254
    75f0:	53415f45 	.word	0x53415f45
    75f4:	54524553 	.word	0x54524553
    75f8:	6975203a 	.word	0x6975203a
    75fc:	63617254 	.word	0x63617254
    7600:	74654765 	.word	0x74654765
    7604:	6f697250 	.word	0x6f697250
    7608:	79746972 	.word	0x79746972
    760c:	706f7250 	.word	0x706f7250
    7610:	79747265 	.word	0x79747265
    7614:	626f203a 	.word	0x626f203a
    7618:	7463656a 	.word	0x7463656a
    761c:	73616c63 	.word	0x73616c63
    7620:	3d3e2073 	.word	0x3d3e2073
    7624:	41525420 	.word	0x41525420
    7628:	4e5f4543 	.word	0x4e5f4543
    762c:	53414c43 	.word	0x53414c43
    7630:	00534553 	.word	0x00534553
    7634:	43415254 	.word	0x43415254
    7638:	53415f45 	.word	0x53415f45
    763c:	54524553 	.word	0x54524553
    7640:	6975203a 	.word	0x6975203a
    7644:	63617254 	.word	0x63617254
    7648:	74654765 	.word	0x74654765
    764c:	6f697250 	.word	0x6f697250
    7650:	79746972 	.word	0x79746972
    7654:	706f7250 	.word	0x706f7250
    7658:	79747265 	.word	0x79747265
    765c:	6e49203a 	.word	0x6e49203a
    7660:	696c6176 	.word	0x696c6176
    7664:	61762064 	.word	0x61762064
    7668:	2065756c 	.word	0x2065756c
    766c:	20726f66 	.word	0x20726f66
    7670:	00006469 	.word	0x00006469
    7674:	43415254 	.word	0x43415254
    7678:	53415f45 	.word	0x53415f45
    767c:	54524553 	.word	0x54524553
    7680:	5476203a 	.word	0x5476203a
    7684:	65636172 	.word	0x65636172
    7688:	4f746553 	.word	0x4f746553
    768c:	63656a62 	.word	0x63656a62
    7690:	61745374 	.word	0x61745374
    7694:	203a6574 	.word	0x203a6574
    7698:	656a626f 	.word	0x656a626f
    769c:	6c637463 	.word	0x6c637463
    76a0:	20737361 	.word	0x20737361
    76a4:	54203d3e 	.word	0x54203d3e
    76a8:	45434152 	.word	0x45434152
    76ac:	4c434e5f 	.word	0x4c434e5f
    76b0:	45535341 	.word	0x45535341
    76b4:	00000053 	.word	0x00000053
    76b8:	43415254 	.word	0x43415254
    76bc:	53415f45 	.word	0x53415f45
    76c0:	54524553 	.word	0x54524553
    76c4:	5476203a 	.word	0x5476203a
    76c8:	65636172 	.word	0x65636172
    76cc:	4f746553 	.word	0x4f746553
    76d0:	63656a62 	.word	0x63656a62
    76d4:	61745374 	.word	0x61745374
    76d8:	203a6574 	.word	0x203a6574
    76dc:	61766e49 	.word	0x61766e49
    76e0:	2064696c 	.word	0x2064696c
    76e4:	756c6176 	.word	0x756c6176
    76e8:	6f662065 	.word	0x6f662065
    76ec:	64692072 	.word	0x64692072
    76f0:	00000000 	.word	0x00000000
    76f4:	43415254 	.word	0x43415254
    76f8:	53415f45 	.word	0x53415f45
    76fc:	54524553 	.word	0x54524553
    7700:	6975203a 	.word	0x6975203a
    7704:	63617254 	.word	0x63617254
    7708:	74654765 	.word	0x74654765
    770c:	656a624f 	.word	0x656a624f
    7710:	74537463 	.word	0x74537463
    7714:	3a657461 	.word	0x3a657461
    7718:	6a626f20 	.word	0x6a626f20
    771c:	63746365 	.word	0x63746365
    7720:	7373616c 	.word	0x7373616c
    7724:	203d3e20 	.word	0x203d3e20
    7728:	43415254 	.word	0x43415254
    772c:	434e5f45 	.word	0x434e5f45
    7730:	5353414c 	.word	0x5353414c
    7734:	00005345 	.word	0x00005345
    7738:	43415254 	.word	0x43415254
    773c:	53415f45 	.word	0x53415f45
    7740:	54524553 	.word	0x54524553
    7744:	6975203a 	.word	0x6975203a
    7748:	63617254 	.word	0x63617254
    774c:	74654765 	.word	0x74654765
    7750:	656a624f 	.word	0x656a624f
    7754:	74537463 	.word	0x74537463
    7758:	3a657461 	.word	0x3a657461
    775c:	766e4920 	.word	0x766e4920
    7760:	64696c61 	.word	0x64696c61
    7764:	6c617620 	.word	0x6c617620
    7768:	66206575 	.word	0x66206575
    776c:	6920726f 	.word	0x6920726f
    7770:	00000064 	.word	0x00000064
    7774:	43415254 	.word	0x43415254
    7778:	53415f45 	.word	0x53415f45
    777c:	54524553 	.word	0x54524553
    7780:	5476203a 	.word	0x5476203a
    7784:	65636172 	.word	0x65636172
    7788:	726f7453 	.word	0x726f7453
    778c:	73615465 	.word	0x73615465
    7790:	6977736b 	.word	0x6977736b
    7794:	3a686374 	.word	0x3a686374
    7798:	766e4920 	.word	0x766e4920
    779c:	64696c61 	.word	0x64696c61
    77a0:	6c617620 	.word	0x6c617620
    77a4:	66206575 	.word	0x66206575
    77a8:	7420726f 	.word	0x7420726f
    77ac:	5f6b7361 	.word	0x5f6b7361
    77b0:	646e6168 	.word	0x646e6168
    77b4:	0000656c 	.word	0x0000656c
    77b8:	43415254 	.word	0x43415254
    77bc:	53415f45 	.word	0x53415f45
    77c0:	54524553 	.word	0x54524553
    77c4:	5476203a 	.word	0x5476203a
    77c8:	65636172 	.word	0x65636172
    77cc:	54746553 	.word	0x54746553
    77d0:	496b7361 	.word	0x496b7361
    77d4:	6174736e 	.word	0x6174736e
    77d8:	4665636e 	.word	0x4665636e
    77dc:	73696e69 	.word	0x73696e69
    77e0:	3a646568 	.word	0x3a646568
    77e4:	766e4920 	.word	0x766e4920
    77e8:	64696c61 	.word	0x64696c61
    77ec:	6c617620 	.word	0x6c617620
    77f0:	66206575 	.word	0x66206575
    77f4:	6820726f 	.word	0x6820726f
    77f8:	6c646e61 	.word	0x6c646e61
    77fc:	00000065 	.word	0x00000065
    7800:	20746f4e 	.word	0x20746f4e
    7804:	756f6e65 	.word	0x756f6e65
    7808:	54206867 	.word	0x54206867
    780c:	204b5341 	.word	0x204b5341
    7810:	646e6168 	.word	0x646e6168
    7814:	2073656c 	.word	0x2073656c
    7818:	6e69202d 	.word	0x6e69202d
    781c:	61657263 	.word	0x61657263
    7820:	4e206573 	.word	0x4e206573
    7824:	6b736154 	.word	0x6b736154
    7828:	206e6920 	.word	0x206e6920
    782c:	43637274 	.word	0x43637274
    7830:	69666e6f 	.word	0x69666e6f
    7834:	00682e67 	.word	0x00682e67
    7838:	20746f4e 	.word	0x20746f4e
    783c:	756f6e65 	.word	0x756f6e65
    7840:	49206867 	.word	0x49206867
    7844:	68205253 	.word	0x68205253
    7848:	6c646e61 	.word	0x6c646e61
    784c:	2d207365 	.word	0x2d207365
    7850:	636e6920 	.word	0x636e6920
    7854:	73616572 	.word	0x73616572
    7858:	494e2065 	.word	0x494e2065
    785c:	69205253 	.word	0x69205253
    7860:	7274206e 	.word	0x7274206e
    7864:	6e6f4363 	.word	0x6e6f4363
    7868:	2e676966 	.word	0x2e676966
    786c:	00000068 	.word	0x00000068
    7870:	20746f4e 	.word	0x20746f4e
    7874:	756f6e65 	.word	0x756f6e65
    7878:	53206867 	.word	0x53206867
    787c:	50414d45 	.word	0x50414d45
    7880:	45524f48 	.word	0x45524f48
    7884:	6e616820 	.word	0x6e616820
    7888:	73656c64 	.word	0x73656c64
    788c:	69202d20 	.word	0x69202d20
    7890:	6572636e 	.word	0x6572636e
    7894:	20657361 	.word	0x20657361
    7898:	6d65534e 	.word	0x6d65534e
    789c:	6f687061 	.word	0x6f687061
    78a0:	69206572 	.word	0x69206572
    78a4:	7274206e 	.word	0x7274206e
    78a8:	6e6f4363 	.word	0x6e6f4363
    78ac:	2e676966 	.word	0x2e676966
    78b0:	00000068 	.word	0x00000068
    78b4:	20746f4e 	.word	0x20746f4e
    78b8:	756f6e65 	.word	0x756f6e65
    78bc:	4d206867 	.word	0x4d206867
    78c0:	58455455 	.word	0x58455455
    78c4:	6e616820 	.word	0x6e616820
    78c8:	73656c64 	.word	0x73656c64
    78cc:	69202d20 	.word	0x69202d20
    78d0:	6572636e 	.word	0x6572636e
    78d4:	20657361 	.word	0x20657361
    78d8:	74754d4e 	.word	0x74754d4e
    78dc:	69207865 	.word	0x69207865
    78e0:	7274206e 	.word	0x7274206e
    78e4:	6e6f4363 	.word	0x6e6f4363
    78e8:	2e676966 	.word	0x2e676966
    78ec:	00000068 	.word	0x00000068
    78f0:	20746f4e 	.word	0x20746f4e
    78f4:	756f6e65 	.word	0x756f6e65
    78f8:	51206867 	.word	0x51206867
    78fc:	45554555 	.word	0x45554555
    7900:	6e616820 	.word	0x6e616820
    7904:	73656c64 	.word	0x73656c64
    7908:	69202d20 	.word	0x69202d20
    790c:	6572636e 	.word	0x6572636e
    7910:	20657361 	.word	0x20657361
    7914:	6575514e 	.word	0x6575514e
    7918:	69206575 	.word	0x69206575
    791c:	7274206e 	.word	0x7274206e
    7920:	6e6f4363 	.word	0x6e6f4363
    7924:	2e676966 	.word	0x2e676966
    7928:	00000068 	.word	0x00000068
    792c:	20746f4e 	.word	0x20746f4e
    7930:	756f6e65 	.word	0x756f6e65
    7934:	54206867 	.word	0x54206867
    7938:	52454d49 	.word	0x52454d49
    793c:	6e616820 	.word	0x6e616820
    7940:	73656c64 	.word	0x73656c64
    7944:	69202d20 	.word	0x69202d20
    7948:	6572636e 	.word	0x6572636e
    794c:	20657361 	.word	0x20657361
    7950:	6d69544e 	.word	0x6d69544e
    7954:	69207265 	.word	0x69207265
    7958:	7274206e 	.word	0x7274206e
    795c:	6e6f4363 	.word	0x6e6f4363
    7960:	2e676966 	.word	0x2e676966
    7964:	00000068 	.word	0x00000068
    7968:	20746f4e 	.word	0x20746f4e
    796c:	756f6e65 	.word	0x756f6e65
    7970:	45206867 	.word	0x45206867
    7974:	544e4556 	.word	0x544e4556
    7978:	554f5247 	.word	0x554f5247
    797c:	61682050 	.word	0x61682050
    7980:	656c646e 	.word	0x656c646e
    7984:	202d2073 	.word	0x202d2073
    7988:	72636e69 	.word	0x72636e69
    798c:	65736165 	.word	0x65736165
    7990:	76454e20 	.word	0x76454e20
    7994:	47746e65 	.word	0x47746e65
    7998:	70756f72 	.word	0x70756f72
    799c:	206e6920 	.word	0x206e6920
    79a0:	43637274 	.word	0x43637274
    79a4:	69666e6f 	.word	0x69666e6f
    79a8:	00682e67 	.word	0x00682e67
    79ac:	547a7370 	.word	0x547a7370
    79b0:	65636172 	.word	0x65636172
    79b4:	45746547 	.word	0x45746547
    79b8:	726f7272 	.word	0x726f7272
    79bc:	646e6148 	.word	0x646e6148
    79c0:	3a73656c 	.word	0x3a73656c
    79c4:	766e4920 	.word	0x766e4920
    79c8:	64696c61 	.word	0x64696c61
    79cc:	6a626f20 	.word	0x6a626f20
    79d0:	63746365 	.word	0x63746365
    79d4:	7373616c 	.word	0x7373616c
    79d8:	00000021 	.word	0x00000021
    79dc:	43415254 	.word	0x43415254
    79e0:	53415f45 	.word	0x53415f45
    79e4:	54524553 	.word	0x54524553
    79e8:	7270203a 	.word	0x7270203a
    79ec:	61725476 	.word	0x61725476
    79f0:	73496563 	.word	0x73496563
    79f4:	656a624f 	.word	0x656a624f
    79f8:	78457463 	.word	0x78457463
    79fc:	64756c63 	.word	0x64756c63
    7a00:	203a6465 	.word	0x203a6465
    7a04:	656a626f 	.word	0x656a626f
    7a08:	6c637463 	.word	0x6c637463
    7a0c:	20737361 	.word	0x20737361
    7a10:	54203d3e 	.word	0x54203d3e
    7a14:	45434152 	.word	0x45434152
    7a18:	4c434e5f 	.word	0x4c434e5f
    7a1c:	45535341 	.word	0x45535341
    7a20:	00000053 	.word	0x00000053
    7a24:	43415254 	.word	0x43415254
    7a28:	53415f45 	.word	0x53415f45
    7a2c:	54524553 	.word	0x54524553
    7a30:	6975203a 	.word	0x6975203a
    7a34:	63617254 	.word	0x63617254
    7a38:	4f734965 	.word	0x4f734965
    7a3c:	63656a62 	.word	0x63656a62
    7a40:	63784574 	.word	0x63784574
    7a44:	6564756c 	.word	0x6564756c
    7a48:	49203a64 	.word	0x49203a64
    7a4c:	6c61766e 	.word	0x6c61766e
    7a50:	76206469 	.word	0x76206469
    7a54:	65756c61 	.word	0x65756c61
    7a58:	726f6620 	.word	0x726f6620
    7a5c:	6e616820 	.word	0x6e616820
    7a60:	00656c64 	.word	0x00656c64
    7a64:	61766e49 	.word	0x61766e49
    7a68:	2064696c 	.word	0x2064696c
    7a6c:	656a626f 	.word	0x656a626f
    7a70:	63207463 	.word	0x63207463
    7a74:	7373616c 	.word	0x7373616c
    7a78:	20444920 	.word	0x20444920
    7a7c:	75206e69 	.word	0x75206e69
    7a80:	61725469 	.word	0x61725469
    7a84:	73496563 	.word	0x73496563
    7a88:	656a624f 	.word	0x656a624f
    7a8c:	78457463 	.word	0x78457463
    7a90:	64756c63 	.word	0x64756c63
    7a94:	00216465 	.word	0x00216465
    7a98:	43415254 	.word	0x43415254
    7a9c:	53415f45 	.word	0x53415f45
    7aa0:	54524553 	.word	0x54524553
    7aa4:	7277203a 	.word	0x7277203a
    7aa8:	49657469 	.word	0x49657469
    7aac:	3233746e 	.word	0x3233746e
    7ab0:	7562203a 	.word	0x7562203a
    7ab4:	72656666 	.word	0x72656666
    7ab8:	203d3d20 	.word	0x203d3d20
    7abc:	4c4c554e 	.word	0x4c4c554e
    7ac0:	00000000 	.word	0x00000000
    7ac4:	43415254 	.word	0x43415254
    7ac8:	53415f45 	.word	0x53415f45
    7acc:	54524553 	.word	0x54524553
    7ad0:	7277203a 	.word	0x7277203a
    7ad4:	49657469 	.word	0x49657469
    7ad8:	3631746e 	.word	0x3631746e
    7adc:	7562203a 	.word	0x7562203a
    7ae0:	72656666 	.word	0x72656666
    7ae4:	203d3d20 	.word	0x203d3d20
    7ae8:	4c4c554e 	.word	0x4c4c554e
    7aec:	00000000 	.word	0x00000000
    7af0:	6f636552 	.word	0x6f636552
    7af4:	72656472 	.word	0x72656472
    7af8:	61746144 	.word	0x61746144
    7afc:	20727450 	.word	0x20727450
    7b00:	4e207369 	.word	0x4e207369
    7b04:	2e4c4c55 	.word	0x2e4c4c55
    7b08:	6c614320 	.word	0x6c614320
    7b0c:	5476206c 	.word	0x5476206c
    7b10:	65636172 	.word	0x65636172
    7b14:	74696e49 	.word	0x74696e49
    7b18:	63617254 	.word	0x63617254
    7b1c:	74614465 	.word	0x74614465
    7b20:	20292861 	.word	0x20292861
    7b24:	6f666562 	.word	0x6f666562
    7b28:	73206572 	.word	0x73206572
    7b2c:	74726174 	.word	0x74726174
    7b30:	20676e69 	.word	0x20676e69
    7b34:	63617274 	.word	0x63617274
    7b38:	00002e65 	.word	0x00002e65
    7b3c:	61747328 	.word	0x61747328
    7b40:	70757472 	.word	0x70757472
    7b44:	00000029 	.word	0x00000029
    7b48:	43415254 	.word	0x43415254
    7b4c:	53415f45 	.word	0x53415f45
    7b50:	54524553 	.word	0x54524553
    7b54:	5476203a 	.word	0x5476203a
    7b58:	65636172 	.word	0x65636172
    7b5c:	49746553 	.word	0x49746553
    7b60:	72505253 	.word	0x72505253
    7b64:	7265706f 	.word	0x7265706f
    7b68:	73656974 	.word	0x73656974
    7b6c:	6e49203a 	.word	0x6e49203a
    7b70:	696c6176 	.word	0x696c6176
    7b74:	61762064 	.word	0x61762064
    7b78:	2065756c 	.word	0x2065756c
    7b7c:	20726f66 	.word	0x20726f66
    7b80:	646e6168 	.word	0x646e6168
    7b84:	0000656c 	.word	0x0000656c
    7b88:	43415254 	.word	0x43415254
    7b8c:	53415f45 	.word	0x53415f45
    7b90:	54524553 	.word	0x54524553
    7b94:	5476203a 	.word	0x5476203a
    7b98:	65636172 	.word	0x65636172
    7b9c:	49746553 	.word	0x49746553
    7ba0:	72505253 	.word	0x72505253
    7ba4:	7265706f 	.word	0x7265706f
    7ba8:	73656974 	.word	0x73656974
    7bac:	616e203a 	.word	0x616e203a
    7bb0:	3d20656d 	.word	0x3d20656d
    7bb4:	554e203d 	.word	0x554e203d
    7bb8:	00004c4c 	.word	0x00004c4c
    7bbc:	656c6c49 	.word	0x656c6c49
    7bc0:	206c6167 	.word	0x206c6167
    7bc4:	6c6c6163 	.word	0x6c6c6163
    7bc8:	206f7420 	.word	0x206f7420
    7bcc:	61725476 	.word	0x61725476
    7bd0:	74536563 	.word	0x74536563
    7bd4:	4965726f 	.word	0x4965726f
    7bd8:	65425253 	.word	0x65425253
    7bdc:	2c6e6967 	.word	0x2c6e6967
    7be0:	63657220 	.word	0x63657220
    7be4:	6564726f 	.word	0x6564726f
    7be8:	75622072 	.word	0x75622072
    7bec:	00217973 	.word	0x00217973
    7bf0:	43415254 	.word	0x43415254
    7bf4:	53415f45 	.word	0x53415f45
    7bf8:	54524553 	.word	0x54524553
    7bfc:	5476203a 	.word	0x5476203a
    7c00:	65636172 	.word	0x65636172
    7c04:	726f7453 	.word	0x726f7453
    7c08:	52534965 	.word	0x52534965
    7c0c:	69676542 	.word	0x69676542
    7c10:	49203a6e 	.word	0x49203a6e
    7c14:	6c61766e 	.word	0x6c61766e
    7c18:	76206469 	.word	0x76206469
    7c1c:	65756c61 	.word	0x65756c61
    7c20:	726f6620 	.word	0x726f6620
    7c24:	6e616820 	.word	0x6e616820
    7c28:	00656c64 	.word	0x00656c64
    7c2c:	206f6f54 	.word	0x206f6f54
    7c30:	796e616d 	.word	0x796e616d
    7c34:	73656e20 	.word	0x73656e20
    7c38:	20646574 	.word	0x20646574
    7c3c:	65746e69 	.word	0x65746e69
    7c40:	70757272 	.word	0x70757272
    7c44:	00217374 	.word	0x00217374
    7c48:	656c6c49 	.word	0x656c6c49
    7c4c:	206c6167 	.word	0x206c6167
    7c50:	6c6c6163 	.word	0x6c6c6163
    7c54:	206f7420 	.word	0x206f7420
    7c58:	61725476 	.word	0x61725476
    7c5c:	74536563 	.word	0x74536563
    7c60:	4965726f 	.word	0x4965726f
    7c64:	6e455253 	.word	0x6e455253
    7c68:	72202c64 	.word	0x72202c64
    7c6c:	726f6365 	.word	0x726f6365
    7c70:	20726564 	.word	0x20726564
    7c74:	79737562 	.word	0x79737562
    7c78:	00000021 	.word	0x00000021
    7c7c:	616d6e55 	.word	0x616d6e55
    7c80:	65686374 	.word	0x65686374
    7c84:	61632064 	.word	0x61632064
    7c88:	74206c6c 	.word	0x74206c6c
    7c8c:	5476206f 	.word	0x5476206f
    7c90:	65636172 	.word	0x65636172
    7c94:	726f7453 	.word	0x726f7453
    7c98:	52534965 	.word	0x52534965
    7c9c:	20646e45 	.word	0x20646e45
    7ca0:	53496e28 	.word	0x53496e28
    7ca4:	74636152 	.word	0x74636152
    7ca8:	20657669 	.word	0x20657669
    7cac:	30203d3d 	.word	0x30203d3d
    7cb0:	7865202c 	.word	0x7865202c
    7cb4:	74636570 	.word	0x74636570
    7cb8:	3e206465 	.word	0x3e206465
    7cbc:	00293020 	.word	0x00293020
    7cc0:	43415254 	.word	0x43415254
    7cc4:	53415f45 	.word	0x53415f45
    7cc8:	54524553 	.word	0x54524553
    7ccc:	5476203a 	.word	0x5476203a
    7cd0:	65636172 	.word	0x65636172
    7cd4:	72657355 	.word	0x72657355
    7cd8:	6e657645 	.word	0x6e657645
    7cdc:	49203a74 	.word	0x49203a74
    7ce0:	6c61766e 	.word	0x6c61766e
    7ce4:	76206469 	.word	0x76206469
    7ce8:	65756c61 	.word	0x65756c61
    7cec:	726f6620 	.word	0x726f6620
    7cf0:	65766520 	.word	0x65766520
    7cf4:	614c746e 	.word	0x614c746e
    7cf8:	006c6562 	.word	0x006c6562
    7cfc:	43415254 	.word	0x43415254
    7d00:	53415f45 	.word	0x53415f45
    7d04:	54524553 	.word	0x54524553
    7d08:	5478203a 	.word	0x5478203a
    7d0c:	65636172 	.word	0x65636172
    7d10:	6e65704f 	.word	0x6e65704f
    7d14:	6562614c 	.word	0x6562614c
    7d18:	6c203a6c 	.word	0x6c203a6c
    7d1c:	6c656261 	.word	0x6c656261
    7d20:	203d3d20 	.word	0x203d3d20
    7d24:	4c4c554e 	.word	0x4c4c554e
    7d28:	00000000 	.word	0x00000000
    7d2c:	43415254 	.word	0x43415254
    7d30:	53415f45 	.word	0x53415f45
    7d34:	54524553 	.word	0x54524553
    7d38:	5476203a 	.word	0x5476203a
    7d3c:	65636172 	.word	0x65636172
    7d40:	6e697250 	.word	0x6e697250
    7d44:	203a4674 	.word	0x203a4674
    7d48:	6d726f66 	.word	0x6d726f66
    7d4c:	74537461 	.word	0x74537461
    7d50:	3d3d2072 	.word	0x3d3d2072
    7d54:	4c554e20 	.word	0x4c554e20
    7d58:	0000004c 	.word	0x0000004c
    7d5c:	61725476 	.word	0x61725476
    7d60:	72506563 	.word	0x72506563
    7d64:	46746e69 	.word	0x46746e69
    7d68:	54202d20 	.word	0x54202d20
    7d6c:	6d206f6f 	.word	0x6d206f6f
    7d70:	20796e61 	.word	0x20796e61
    7d74:	75677261 	.word	0x75677261
    7d78:	746e656d 	.word	0x746e656d
    7d7c:	6d202c73 	.word	0x6d202c73
    7d80:	31207861 	.word	0x31207861
    7d84:	6c612035 	.word	0x6c612035
    7d88:	65776f6c 	.word	0x65776f6c
    7d8c:	00002164 	.word	0x00002164
    7d90:	61725476 	.word	0x61725476
    7d94:	72506563 	.word	0x72506563
    7d98:	46746e69 	.word	0x46746e69
    7d9c:	54202d20 	.word	0x54202d20
    7da0:	6c206f6f 	.word	0x6c206f6f
    7da4:	65677261 	.word	0x65677261
    7da8:	67726120 	.word	0x67726120
    7dac:	6e656d75 	.word	0x6e656d75
    7db0:	202c7374 	.word	0x202c7374
    7db4:	2078616d 	.word	0x2078616d
    7db8:	62203233 	.word	0x62203233
    7dbc:	20657479 	.word	0x20657479
    7dc0:	6f6c6c61 	.word	0x6f6c6c61
    7dc4:	21646577 	.word	0x21646577
    7dc8:	00000000 	.word	0x00000000
    7dcc:	454c4449 	.word	0x454c4449
    7dd0:	00000000 	.word	0x00000000
    7dd4:	20726d54 	.word	0x20726d54
    7dd8:	00637653 	.word	0x00637653
    7ddc:	00000043 	.word	0x00000043

00007de0 <_global_impure_ptr>:
    7de0:	20000020                                 .. 

00007de4 <_init>:
    7de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7de6:	46c0      	nop			; (mov r8, r8)
    7de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7dea:	bc08      	pop	{r3}
    7dec:	469e      	mov	lr, r3
    7dee:	4770      	bx	lr

00007df0 <__init_array_start>:
    7df0:	000069f1 	.word	0x000069f1

00007df4 <__frame_dummy_init_array_entry>:
    7df4:	000000d9                                ....

00007df8 <_fini>:
    7df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7dfa:	46c0      	nop			; (mov r8, r8)
    7dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7dfe:	bc08      	pop	{r3}
    7e00:	469e      	mov	lr, r3
    7e02:	4770      	bx	lr

00007e04 <__fini_array_start>:
    7e04:	000000b1 	.word	0x000000b1
